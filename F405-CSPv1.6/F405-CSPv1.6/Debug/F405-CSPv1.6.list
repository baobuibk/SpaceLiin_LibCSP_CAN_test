
F405-CSPv1.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012fc  0800da78  0800da78  0001da78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed74  0800ed74  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed74  0800ed74  0001ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed7c  0800ed7c  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed7c  0800ed7c  0001ed7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed80  0800ed80  0001ed80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800ed84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020220  2**0
                  CONTENTS
 10 .bss          00004ce8  20000220  20000220  00020220  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f08  20004f08  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e658  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005d01  00000000  00000000  0003e8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a80  00000000  00000000  000445f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000013f8  00000000  00000000  00046070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000892b  00000000  00000000  00047468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022f12  00000000  00000000  0004fd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0ba6  00000000  00000000  00072ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007fc8  00000000  00000000  0014384c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0014b814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da5c 	.word	0x0800da5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800da5c 	.word	0x0800da5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <csp_conf_get_defaults+0x60>)
 8001002:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a13      	ldr	r2, [pc, #76]	; (8001054 <csp_conf_get_defaults+0x64>)
 8001008:	609a      	str	r2, [r3, #8]
	conf->revision = "resvision";
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <csp_conf_get_defaults+0x68>)
 800100e:	60da      	str	r2, [r3, #12]
	conf->conn_max = 10;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	220a      	movs	r2, #10
 8001014:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 10;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	220a      	movs	r2, #10
 800101a:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2219      	movs	r2, #25
 8001020:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2218      	movs	r2, #24
 8001026:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2214      	movs	r2, #20
 800102c:	751a      	strb	r2, [r3, #20]
	conf->buffers = 10;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	220a      	movs	r2, #10
 8001032:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f44f 7280 	mov.w	r2, #256	; 0x100
 800103a:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	0800da78 	.word	0x0800da78
 8001054:	0800da84 	.word	0x0800da84
 8001058:	0800da8c 	.word	0x0800da8c

0800105c <csp_can_tx_frame>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*TX FUNCTION*/
static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc){
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	; 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
 8001068:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800106a:	2120      	movs	r1, #32
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <csp_can_tx_frame+0x54>)
 800106e:	f003 ff6c 	bl	8004f4a <HAL_GPIO_TogglePin>

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dlc;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.IDE = CAN_ID_EXT;
 8001076:	2304      	movs	r3, #4
 8001078:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.ExtId = id;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	61fb      	str	r3, [r7, #28]
	txHeader.TransmitGlobalTime = DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint32_t canMailBox;
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, (uint8_t *)data, &canMailBox) != HAL_OK) {
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	f107 0118 	add.w	r1, r7, #24
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4808      	ldr	r0, [pc, #32]	; (80010b4 <csp_can_tx_frame+0x58>)
 8001094:	f003 f880 	bl	8004198 <HAL_CAN_AddTxMessage>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <csp_can_tx_frame+0x48>
	        return CSP_ERR_DRIVER;
 800109e:	f06f 030a 	mvn.w	r3, #10
 80010a2:	e000      	b.n	80010a6 <csp_can_tx_frame+0x4a>
	    }
	return CSP_ERR_NONE;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3730      	adds	r7, #48	; 0x30
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40020800 	.word	0x40020800
 80010b4:	20000284 	.word	0x20000284

080010b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
//static int csp_i2c_tx_frame(){
//	return CSP_ERR_NONE;
//}

/*CALLBACK*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	CSP_BASE_TYPE xCspTaskWoken = pdFALSE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
	 if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	f107 0214 	add.w	r2, r7, #20
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f003 f93d 	bl	800434e <HAL_CAN_GetRxMessage>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11d      	bne.n	8001116 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		 csp_can_rx(&can_iface, rxHeader.ExtId, rxData, rxHeader.DLC, &xCspTaskWoken);
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	b2d8      	uxtb	r0, r3
 80010e0:	f107 020c 	add.w	r2, r7, #12
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	4603      	mov	r3, r0
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80010ee:	f002 f95b 	bl	80033a8 <csp_can_rx>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80010f2:	2120      	movs	r1, #32
 80010f4:	480b      	ldr	r0, [pc, #44]	; (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80010f6:	f003 ff28 	bl	8004f4a <HAL_GPIO_TogglePin>

	    	if(xCspTaskWoken) {
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00a      	beq.n	8001116 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	    		portYIELD_FROM_ISR(xCspTaskWoken);
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	f3bf 8f6f 	isb	sy
	    	}
	 }
}
 8001116:	bf00      	nop
 8001118:	3730      	adds	r7, #48	; 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000244 	.word	0x20000244
 8001124:	40020800 	.word	0x40020800
 8001128:	e000ed04 	.word	0xe000ed04

0800112c <can_csp_init>:
//        portYIELD_FROM_ISR(xHigher);
//    }
//}

/*INTERFACE INIT*/
static void can_csp_init(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

	can_ifdata.tx_func        = csp_can_tx_frame;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <can_csp_init+0x28>)
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <can_csp_init+0x2c>)
 8001134:	605a      	str	r2, [r3, #4]
	can_iface.name            = "can";
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <can_csp_init+0x30>)
 8001138:	4a09      	ldr	r2, [pc, #36]	; (8001160 <can_csp_init+0x34>)
 800113a:	601a      	str	r2, [r3, #0]
	can_iface.driver_data     = &hcan1;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <can_csp_init+0x30>)
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <can_csp_init+0x38>)
 8001140:	609a      	str	r2, [r3, #8]
	can_iface.interface_data  = &can_ifdata;
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <can_csp_init+0x30>)
 8001144:	4a03      	ldr	r2, [pc, #12]	; (8001154 <can_csp_init+0x28>)
 8001146:	605a      	str	r2, [r3, #4]

	csp_can_add_interface(&can_iface);
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <can_csp_init+0x30>)
 800114a:	f002 fb29 	bl	80037a0 <csp_can_add_interface>
 }
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	2000023c 	.word	0x2000023c
 8001158:	0800105d 	.word	0x0800105d
 800115c:	20000244 	.word	0x20000244
 8001160:	0800dab8 	.word	0x0800dab8
 8001164:	20000284 	.word	0x20000284

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f002 fdb2 	bl	8003cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f848 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f000 f906 	bl	8001384 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001178:	f000 f8ac 	bl	80012d4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  /*CAN INIT*/
  HAL_CAN_Start(&hcan1);
 800117c:	4818      	ldr	r0, [pc, #96]	; (80011e0 <main+0x78>)
 800117e:	f002 ffc7 	bl	8004110 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001182:	2102      	movs	r1, #2
 8001184:	4816      	ldr	r0, [pc, #88]	; (80011e0 <main+0x78>)
 8001186:	f003 f9f4 	bl	8004572 <HAL_CAN_ActivateNotification>
  /*UART INIT*/
//  xUartRxStream = xStreamBufferCreate(UART_RX_STREAM_SIZE, 1);
//  HAL_UART_Receive_IT(&huart6, &rx_byte, 1);

  /*CSP INIT*/
  csp_conf_get_defaults(&csp_conf);
 800118a:	4816      	ldr	r0, [pc, #88]	; (80011e4 <main+0x7c>)
 800118c:	f7ff ff30 	bl	8000ff0 <csp_conf_get_defaults>
  csp_conf.address = 2;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <main+0x7c>)
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
  csp_init(&csp_conf);
 8001196:	4813      	ldr	r0, [pc, #76]	; (80011e4 <main+0x7c>)
 8001198:	f001 fb18 	bl	80027cc <csp_init>

  /*CSP INTERFACE INIT*/
  can_csp_init();
 800119c:	f7ff ffc6 	bl	800112c <can_csp_init>
//  i2c_csp_init();

  /*CSP ROUTER INIT*/
  csp_route_start_task(500, 6);
 80011a0:	2106      	movs	r1, #6
 80011a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a6:	f002 f8d3 	bl	8003350 <csp_route_start_task>
  csp_rtable_set(1, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
 80011aa:	23ff      	movs	r3, #255	; 0xff
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <main+0x80>)
 80011ae:	2105      	movs	r1, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	f002 fc4b 	bl	8003a4c <csp_rtable_set>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011b6:	f004 fe4b 	bl	8005e50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <main+0x84>)
 80011bc:	2100      	movs	r1, #0
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <main+0x88>)
 80011c0:	f004 fe90 	bl	8005ee4 <osThreadNew>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <main+0x8c>)
 80011c8:	6013      	str	r3, [r2, #0]

  /* creation of canReceive */
  canReceiveHandle = osThreadNew(CANReceive, NULL, &canReceive_attributes);
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <main+0x90>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	480b      	ldr	r0, [pc, #44]	; (80011fc <main+0x94>)
 80011d0:	f004 fe88 	bl	8005ee4 <osThreadNew>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <main+0x98>)
 80011d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011da:	f004 fe5d 	bl	8005e98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011de:	e7fe      	b.n	80011de <main+0x76>
 80011e0:	20000284 	.word	0x20000284
 80011e4:	2000032c 	.word	0x2000032c
 80011e8:	20000244 	.word	0x20000244
 80011ec:	0800e884 	.word	0x0800e884
 80011f0:	08001465 	.word	0x08001465
 80011f4:	200002ac 	.word	0x200002ac
 80011f8:	0800e8a8 	.word	0x0800e8a8
 80011fc:	08001475 	.word	0x08001475
 8001200:	200002b0 	.word	0x200002b0

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b094      	sub	sp, #80	; 0x50
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2230      	movs	r2, #48	; 0x30
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f009 f808 	bl	800a228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	4b27      	ldr	r3, [pc, #156]	; (80012cc <SystemClock_Config+0xc8>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	4a26      	ldr	r2, [pc, #152]	; (80012cc <SystemClock_Config+0xc8>)
 8001232:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001236:	6413      	str	r3, [r2, #64]	; 0x40
 8001238:	4b24      	ldr	r3, [pc, #144]	; (80012cc <SystemClock_Config+0xc8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	60bb      	str	r3, [r7, #8]
 8001242:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001244:	2300      	movs	r3, #0
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <SystemClock_Config+0xcc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <SystemClock_Config+0xcc>)
 800124e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001260:	2302      	movs	r3, #2
 8001262:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001264:	2301      	movs	r3, #1
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001268:	2310      	movs	r3, #16
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126c:	2302      	movs	r3, #2
 800126e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001270:	2300      	movs	r3, #0
 8001272:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001274:	2308      	movs	r3, #8
 8001276:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001278:	2348      	movs	r3, #72	; 0x48
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001280:	2304      	movs	r3, #4
 8001282:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001284:	f107 0320 	add.w	r3, r7, #32
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fe79 	bl	8004f80 <HAL_RCC_OscConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001294:	f000 f95c 	bl	8001550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001298:	230f      	movs	r3, #15
 800129a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800129c:	2302      	movs	r3, #2
 800129e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	2102      	movs	r1, #2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 f8db 	bl	8005470 <HAL_RCC_ClockConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012c0:	f000 f946 	bl	8001550 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	; 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <MX_CAN1_Init+0xa8>)
 80012dc:	4a28      	ldr	r2, [pc, #160]	; (8001380 <MX_CAN1_Init+0xac>)
 80012de:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80012e0:	4b26      	ldr	r3, [pc, #152]	; (800137c <MX_CAN1_Init+0xa8>)
 80012e2:	2212      	movs	r2, #18
 80012e4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012e6:	4b25      	ldr	r3, [pc, #148]	; (800137c <MX_CAN1_Init+0xa8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <MX_CAN1_Init+0xa8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_CAN1_Init+0xa8>)
 80012f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012f8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <MX_CAN1_Init+0xa8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <MX_CAN1_Init+0xa8>)
 8001302:	2200      	movs	r2, #0
 8001304:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_CAN1_Init+0xa8>)
 8001308:	2200      	movs	r2, #0
 800130a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <MX_CAN1_Init+0xa8>)
 800130e:	2200      	movs	r2, #0
 8001310:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_CAN1_Init+0xa8>)
 8001314:	2200      	movs	r2, #0
 8001316:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <MX_CAN1_Init+0xa8>)
 800131a:	2200      	movs	r2, #0
 800131c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_CAN1_Init+0xa8>)
 8001320:	2200      	movs	r2, #0
 8001322:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001324:	4815      	ldr	r0, [pc, #84]	; (800137c <MX_CAN1_Init+0xa8>)
 8001326:	f002 fd17 	bl	8003d58 <HAL_CAN_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 f90e 	bl	8001550 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filterconf = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2228      	movs	r2, #40	; 0x28
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f008 ff74 	bl	800a228 <memset>
  filterconf.FilterBank = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  filterconf.FilterMode = CAN_FILTERMODE_IDMASK;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]
  filterconf.FilterScale = CAN_FILTERSCALE_32BIT;
 8001348:	2301      	movs	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
  filterconf.FilterIdHigh = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	603b      	str	r3, [r7, #0]
  filterconf.FilterIdLow = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  filterconf.FilterMaskIdHigh = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
  filterconf.FilterMaskIdLow = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  filterconf.FilterFIFOAssignment = CAN_RX_FIFO0;
 800135c:	2300      	movs	r3, #0
 800135e:	613b      	str	r3, [r7, #16]
  filterconf.FilterActivation = ENABLE;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  filterconf.SlaveStartFilterBank = 14;
 8001364:	230e      	movs	r3, #14
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &filterconf);
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <MX_CAN1_Init+0xa8>)
 800136e:	f002 fdef 	bl	8003f50 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000284 	.word	0x20000284
 8001380:	40006400 	.word	0x40006400

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a2d      	ldr	r2, [pc, #180]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b27      	ldr	r3, [pc, #156]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a1f      	ldr	r2, [pc, #124]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b19      	ldr	r3, [pc, #100]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <MX_GPIO_Init+0xd4>)
 80013f8:	f043 0302 	orr.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_GPIO_Init+0xd4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2120      	movs	r1, #32
 800140e:	4813      	ldr	r0, [pc, #76]	; (800145c <MX_GPIO_Init+0xd8>)
 8001410:	f003 fd82 	bl	8004f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001414:	2320      	movs	r3, #32
 8001416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	2301      	movs	r3, #1
 800141a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4619      	mov	r1, r3
 800142a:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_GPIO_Init+0xd8>)
 800142c:	f003 fbd8 	bl	8004be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001430:	23c0      	movs	r3, #192	; 0xc0
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001434:	2312      	movs	r3, #18
 8001436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001440:	2304      	movs	r3, #4
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_GPIO_Init+0xdc>)
 800144c:	f003 fbc8 	bl	8004be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	; 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40020800 	.word	0x40020800
 8001460:	40020400 	.word	0x40020400

08001464 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 800146c:	2064      	movs	r0, #100	; 0x64
 800146e:	f004 fdcb 	bl	8006008 <osDelay>
 8001472:	e7fb      	b.n	800146c <StartDefaultTask+0x8>

08001474 <CANReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANReceive */
void CANReceive(void *argument)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANReceive */
	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, XTEA, etc. if enabled during compilation */
	csp_socket_t *sock = csp_socket(CSP_SO_NONE);
 800147c:	2000      	movs	r0, #0
 800147e:	f001 f9e9 	bl	8002854 <csp_socket>
 8001482:	6178      	str	r0, [r7, #20]

	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(sock, CSP_ANY);
 8001484:	21ff      	movs	r1, #255	; 0xff
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f001 fc14 	bl	8002cb4 <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(sock, 10);
 800148c:	210a      	movs	r1, #10
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f001 fbea 	bl	8002c68 <csp_listen>
  /* Infinite loop */
  for(;;)
  {
	  /* Wait for a new connection, 10000 mS timeout */
	  	csp_conn_t *conn;
	  	if ((conn = csp_accept(sock, 10000)) == NULL) {
 8001494:	f242 7110 	movw	r1, #10000	; 0x2710
 8001498:	6978      	ldr	r0, [r7, #20]
 800149a:	f001 fa65 	bl	8002968 <csp_accept>
 800149e:	6138      	str	r0, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03a      	beq.n	800151c <CANReceive+0xa8>
	  		continue;
	  	}

	  	/* Read packets on connection, timout is 100 mS */
	  	csp_packet_t *packet;
	  	while ((packet = csp_read(conn, 100)) != NULL) {
 80014a6:	e030      	b.n	800150a <CANReceive+0x96>
	  		switch (csp_conn_dport(conn)) {
 80014a8:	6938      	ldr	r0, [r7, #16]
 80014aa:	f001 f87f 	bl	80025ac <csp_conn_dport>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b30      	cmp	r3, #48	; 0x30
 80014b2:	d015      	beq.n	80014e0 <CANReceive+0x6c>
 80014b4:	2b30      	cmp	r3, #48	; 0x30
 80014b6:	dc27      	bgt.n	8001508 <CANReceive+0x94>
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	dc0f      	bgt.n	80014dc <CANReceive+0x68>
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db23      	blt.n	8001508 <CANReceive+0x94>
 80014c0:	461a      	mov	r2, r3
 80014c2:	f240 530b 	movw	r3, #1291	; 0x50b
 80014c6:	40d3      	lsrs	r3, r2
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf14      	ite	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2300      	moveq	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <CANReceive+0x6c>
 80014da:	e015      	b.n	8001508 <CANReceive+0x94>
 80014dc:	2b1a      	cmp	r3, #26
 80014de:	d113      	bne.n	8001508 <CANReceive+0x94>
	  		case 3:
	  		case 48:
	  		case 8:
	  		case 10:
	  			/* Process packet here */
	  			csp_log_info("Packet received on MY_SERVER_PORT: %s", (char *) packet->data);
 80014e0:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <CANReceive+0xac>)
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <CANReceive+0x82>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3310      	adds	r3, #16
 80014ec:	461a      	mov	r2, r3
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <CANReceive+0xb0>)
 80014f0:	2002      	movs	r0, #2
 80014f2:	f001 f86b 	bl	80025cc <do_csp_debug>
	  			csp_buffer_free(packet);
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f000 fd50 	bl	8001f9c <csp_buffer_free>
	  			++server_received;
 80014fc:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <CANReceive+0xb4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <CANReceive+0xb4>)
 8001504:	6013      	str	r3, [r2, #0]
	  			break;
 8001506:	e000      	b.n	800150a <CANReceive+0x96>

	  		default:
	  			/* Call the default CSP service handler, handle pings, buffer use, etc. */
	  	//				csp_service_handler(conn, packet);
	  			break;
 8001508:	bf00      	nop
	  	while ((packet = csp_read(conn, 100)) != NULL) {
 800150a:	2164      	movs	r1, #100	; 0x64
 800150c:	6938      	ldr	r0, [r7, #16]
 800150e:	f001 fa4d 	bl	80029ac <csp_read>
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1c6      	bne.n	80014a8 <CANReceive+0x34>
 800151a:	e7bb      	b.n	8001494 <CANReceive+0x20>
	  		continue;
 800151c:	bf00      	nop
  {
 800151e:	e7b9      	b.n	8001494 <CANReceive+0x20>
 8001520:	20000004 	.word	0x20000004
 8001524:	0800dabc 	.word	0x0800dabc
 8001528:	200002b4 	.word	0x200002b4

0800152c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800153e:	f002 fbeb 	bl	8003d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40010000 	.word	0x40010000

08001550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001554:	b672      	cpsid	i
}
 8001556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001558:	e7fe      	b.n	8001558 <Error_Handler+0x8>
	...

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_MspInit+0x54>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_MspInit+0x54>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x54>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_MspInit+0x54>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_MspInit+0x54>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_MspInit+0x54>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	210f      	movs	r1, #15
 800159e:	f06f 0001 	mvn.w	r0, #1
 80015a2:	f003 faf3 	bl	8004b8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_CAN_MspInit+0x94>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d134      	bne.n	8001640 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_CAN_MspInit+0x98>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_CAN_MspInit+0x98>)
 80015e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_CAN_MspInit+0x98>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_CAN_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_CAN_MspInit+0x98>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_CAN_MspInit+0x98>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001620:	2309      	movs	r3, #9
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <HAL_CAN_MspInit+0x9c>)
 800162c:	f003 fad8 	bl	8004be0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2105      	movs	r1, #5
 8001634:	2014      	movs	r0, #20
 8001636:	f003 faa9 	bl	8004b8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800163a:	2014      	movs	r0, #20
 800163c:	f003 fac2 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40006400 	.word	0x40006400
 800164c:	40023800 	.word	0x40023800
 8001650:	40020400 	.word	0x40020400

08001654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08c      	sub	sp, #48	; 0x30
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <HAL_InitTick+0xd0>)
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <HAL_InitTick+0xd0>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6453      	str	r3, [r2, #68]	; 0x44
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <HAL_InitTick+0xd0>)
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001680:	f107 020c 	add.w	r2, r7, #12
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f004 f8bc 	bl	8005808 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001690:	f004 f8a6 	bl	80057e0 <HAL_RCC_GetPCLK2Freq>
 8001694:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	4a23      	ldr	r2, [pc, #140]	; (8001728 <HAL_InitTick+0xd4>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0c9b      	lsrs	r3, r3, #18
 80016a0:	3b01      	subs	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_InitTick+0xd8>)
 80016a6:	4a22      	ldr	r2, [pc, #136]	; (8001730 <HAL_InitTick+0xdc>)
 80016a8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016aa:	4b20      	ldr	r3, [pc, #128]	; (800172c <HAL_InitTick+0xd8>)
 80016ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016b0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_InitTick+0xd8>)
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016b8:	4b1c      	ldr	r3, [pc, #112]	; (800172c <HAL_InitTick+0xd8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b1b      	ldr	r3, [pc, #108]	; (800172c <HAL_InitTick+0xd8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_InitTick+0xd8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <HAL_InitTick+0xd8>)
 80016cc:	f004 f8ce 	bl	800586c <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d11b      	bne.n	8001716 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016de:	4813      	ldr	r0, [pc, #76]	; (800172c <HAL_InitTick+0xd8>)
 80016e0:	f004 f91e 	bl	8005920 <HAL_TIM_Base_Start_IT>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d111      	bne.n	8001716 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016f2:	2019      	movs	r0, #25
 80016f4:	f003 fa66 	bl	8004bc4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b0f      	cmp	r3, #15
 80016fc:	d808      	bhi.n	8001710 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016fe:	2200      	movs	r2, #0
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	2019      	movs	r0, #25
 8001704:	f003 fa42 	bl	8004b8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001708:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_InitTick+0xe0>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e002      	b.n	8001716 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800171a:	4618      	mov	r0, r3
 800171c:	3730      	adds	r7, #48	; 0x30
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	431bde83 	.word	0x431bde83
 800172c:	200002b8 	.word	0x200002b8
 8001730:	40010000 	.word	0x40010000
 8001734:	2000004c 	.word	0x2000004c

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <CAN1_RX0_IRQHandler+0x10>)
 800176a:	f002 ff28 	bl	80045be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000284 	.word	0x20000284

08001778 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800177e:	f004 f93f 	bl	8005a00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200002b8 	.word	0x200002b8

0800178c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_kill>:

int _kill(int pid, int sig)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a6:	f008 fe07 	bl	800a3b8 <__errno>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2216      	movs	r2, #22
 80017ae:	601a      	str	r2, [r3, #0]
  return -1;
 80017b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <_exit>:

void _exit (int status)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe7 	bl	800179c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ce:	e7fe      	b.n	80017ce <_exit+0x12>

080017d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e009      	b.n	8001830 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	1c5a      	adds	r2, r3, #1
 8001820:	60ba      	str	r2, [r7, #8]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3301      	adds	r3, #1
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbf1      	blt.n	800181c <_write+0x12>
  }
  return len;
 8001838:	687b      	ldr	r3, [r7, #4]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_close>:

int _close(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800186a:	605a      	str	r2, [r3, #4]
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_isatty>:

int _isatty(int file)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001882:	2301      	movs	r3, #1
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018b4:	4a14      	ldr	r2, [pc, #80]	; (8001908 <_sbrk+0x5c>)
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <_sbrk+0x60>)
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <_sbrk+0x64>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <_sbrk+0x68>)
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d207      	bcs.n	80018ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018dc:	f008 fd6c 	bl	800a3b8 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e009      	b.n	8001900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <_sbrk+0x64>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <_sbrk+0x64>)
 80018fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20020000 	.word	0x20020000
 800190c:	00000400 	.word	0x00000400
 8001910:	20000300 	.word	0x20000300
 8001914:	20004f08 	.word	0x20004f08

08001918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <SystemInit+0x20>)
 800191e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <SystemInit+0x20>)
 8001924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001942:	490e      	ldr	r1, [pc, #56]	; (800197c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001944:	4a0e      	ldr	r2, [pc, #56]	; (8001980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001958:	4c0b      	ldr	r4, [pc, #44]	; (8001988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001966:	f7ff ffd7 	bl	8001918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196a:	f008 fd2b 	bl	800a3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fbfb 	bl	8001168 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001980:	0800ed84 	.word	0x0800ed84
  ldr r2, =_sbss
 8001984:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001988:	20004f08 	.word	0x20004f08

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 8001996:	f000 f9b1 	bl	8001cfc <csp_get_s>
 800199a:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 800199c:	4b07      	ldr	r3, [pc, #28]	; (80019bc <csp_get_uptime_s+0x2c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 80019a4:	4a05      	ldr	r2, [pc, #20]	; (80019bc <csp_get_uptime_s+0x2c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <csp_get_uptime_s+0x2c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	1ad3      	subs	r3, r2, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000304 	.word	0x20000304

080019c0 <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f007 f92d 	bl	8008c28 <pvPortMalloc>
 80019ce:	4603      	mov	r3, r0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	fb02 f303 	mul.w	r3, r2, r3
 80019ea:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 80019ec:	6838      	ldr	r0, [r7, #0]
 80019ee:	f7ff ffe7 	bl	80019c0 <csp_malloc>
 80019f2:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d004      	beq.n	8001a04 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	2100      	movs	r1, #0
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f008 fc12 	bl	800a228 <memset>
	}
	return ptr;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <csp_free>:

void csp_free(void *ptr) {
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f007 f9d2 	bl	8008dc0 <vPortFree>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	6839      	ldr	r1, [r7, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f004 fccb 	bl	80063d0 <xQueueGenericCreate>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f005 f941 	bl	8006cd4 <vQueueDelete>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f004 fd0a 	bl	800648c <xQueueGenericSend>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f004 fdf7 	bl	8006688 <xQueueGenericSendFromISR>
 8001a9a:	4603      	mov	r3, r0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f004 fe80 	bl	80067c0 <xQueueReceive>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b084      	sub	sp, #16
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f005 f85c 	bl	8006b98 <xQueueReceiveFromISR>
 8001ae0:	4603      	mov	r3, r0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f005 f8d0 	bl	8006c98 <uxQueueMessagesWaiting>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f004 fc5e 	bl	80063d0 <xQueueGenericCreate>
 8001b14:	4602      	mov	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <csp_bin_sem_create+0x2e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f004 fcae 	bl	800648c <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <csp_bin_sem_wait>:
		vSemaphoreDelete(*sem);
	}
	return CSP_SEMAPHORE_OK;
}

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <csp_bin_sem_wait+0x44>)
 8001b48:	799b      	ldrb	r3, [r3, #6]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <csp_bin_sem_wait+0x1c>
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <csp_bin_sem_wait+0x48>)
 8001b52:	2006      	movs	r0, #6
 8001b54:	f000 fd3a 	bl	80025cc <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f004 ff0b 	bl	8006980 <xQueueSemaphoreTake>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d101      	bne.n	8001b74 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000004 	.word	0x20000004
 8001b84:	0800daf4 	.word	0x0800daf4

08001b88 <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 8001b90:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <csp_bin_sem_post+0x3c>)
 8001b92:	799b      	ldrb	r3, [r3, #6]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <csp_bin_sem_post+0x1a>
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	490b      	ldr	r1, [pc, #44]	; (8001bc8 <csp_bin_sem_post+0x40>)
 8001b9c:	2006      	movs	r0, #6
 8001b9e:	f000 fd15 	bl	80025cc <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2100      	movs	r1, #0
 8001bac:	f004 fc6e 	bl	800648c <xQueueGenericSend>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	0800db00 	.word	0x0800db00

08001bcc <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f003 030f 	and.w	r3, r3, #15
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	d82a      	bhi.n	8001c38 <csp_sys_set_color+0x6c>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <csp_sys_set_color+0x1c>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c09 	.word	0x08001c09
 8001bec:	08001c0f 	.word	0x08001c0f
 8001bf0:	08001c15 	.word	0x08001c15
 8001bf4:	08001c1b 	.word	0x08001c1b
 8001bf8:	08001c21 	.word	0x08001c21
 8001bfc:	08001c27 	.word	0x08001c27
 8001c00:	08001c2d 	.word	0x08001c2d
 8001c04:	08001c33 	.word	0x08001c33
		case COLOR_BLACK:
			color_code = 30; break;
 8001c08:	231e      	movs	r3, #30
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	e017      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 8001c0e:	231f      	movs	r3, #31
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	e014      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 8001c14:	2320      	movs	r3, #32
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	e011      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 8001c1a:	2321      	movs	r3, #33	; 0x21
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	e00e      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 8001c20:	2322      	movs	r3, #34	; 0x22
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	e00b      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 8001c26:	2323      	movs	r3, #35	; 0x23
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e008      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 8001c2c:	2324      	movs	r3, #36	; 0x24
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e005      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 8001c32:	2325      	movs	r3, #37	; 0x25
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	e002      	b.n	8001c3e <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d013      	beq.n	8001c70 <csp_sys_set_color+0xa4>
 8001c48:	2b40      	cmp	r3, #64	; 0x40
 8001c4a:	dc14      	bgt.n	8001c76 <csp_sys_set_color+0xaa>
 8001c4c:	2b30      	cmp	r3, #48	; 0x30
 8001c4e:	d00c      	beq.n	8001c6a <csp_sys_set_color+0x9e>
 8001c50:	2b30      	cmp	r3, #48	; 0x30
 8001c52:	dc10      	bgt.n	8001c76 <csp_sys_set_color+0xaa>
 8001c54:	2b10      	cmp	r3, #16
 8001c56:	d002      	beq.n	8001c5e <csp_sys_set_color+0x92>
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d003      	beq.n	8001c64 <csp_sys_set_color+0x98>
 8001c5c:	e00b      	b.n	8001c76 <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	e00b      	b.n	8001c7c <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 8001c64:	2302      	movs	r3, #2
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	e008      	b.n	8001c7c <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	e005      	b.n	8001c7c <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 8001c70:	2304      	movs	r3, #4
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	e002      	b.n	8001c7c <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <csp_sys_set_color+0xc4>)
 8001c82:	f008 f95f 	bl	8009f44 <iprintf>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	0800db0c 	.word	0x0800db0c

08001c94 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
 8001ca0:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f005 fa3e 	bl	8007136 <xTaskCreate>
 8001cba:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d002      	beq.n	8001cc8 <csp_thread_create+0x34>
		return CSP_ERR_NOMEM;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc6:	e006      	b.n	8001cd6 <csp_thread_create+0x42>
	}
	if (return_handle) {
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <csp_thread_create+0x40>
		*return_handle = handle;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8001ce2:	f005 fcd3 	bl	800768c <xTaskGetTickCount>
 8001ce6:	4603      	mov	r3, r0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}

08001cec <csp_get_ms_isr>:

uint32_t csp_get_ms_isr(void) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
 8001cf0:	f005 fcdc 	bl	80076ac <xTaskGetTickCountFromISR>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <csp_get_s>:

uint32_t csp_get_s(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 8001d00:	f005 fcc4 	bl	800768c <xTaskGetTickCount>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a03      	ldr	r2, [pc, #12]	; (8001d14 <csp_get_s+0x18>)
 8001d08:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0c:	099b      	lsrs	r3, r3, #6
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	10624dd3 	.word	0x10624dd3

08001d18 <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 8001d1e:	f000 f9b5 	bl	800208c <csp_buffer_size>
 8001d22:	4603      	mov	r3, r0
 8001d24:	330b      	adds	r3, #11
 8001d26:	f023 0303 	bic.w	r3, r3, #3
 8001d2a:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <csp_buffer_init+0xa4>)
 8001d2e:	8adb      	ldrh	r3, [r3, #22]
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fe41 	bl	80019c0 <csp_malloc>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <csp_buffer_init+0xa8>)
 8001d42:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <csp_buffer_init+0xa8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d030      	beq.n	8001dae <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <csp_buffer_init+0xa4>)
 8001d4e:	8adb      	ldrh	r3, [r3, #22]
 8001d50:	2104      	movs	r1, #4
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fe66 	bl	8001a24 <csp_queue_create>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <csp_buffer_init+0xac>)
 8001d5c:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <csp_buffer_init+0xac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d01f      	beq.n	8001da6 <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e014      	b.n	8001d96 <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 8001d6c:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <csp_buffer_init+0xa8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68b9      	ldr	r1, [r7, #8]
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <csp_buffer_init+0xac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1d39      	adds	r1, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe65 	bl	8001a5a <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <csp_buffer_init+0xa4>)
 8001d98:	8adb      	ldrh	r3, [r3, #22]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d3e4      	bcc.n	8001d6c <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e006      	b.n	8001db4 <csp_buffer_init+0x9c>
		goto fail_queue;
 8001da6:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 8001da8:	f000 f80e 	bl	8001dc8 <csp_buffer_free_resources>
 8001dac:	e000      	b.n	8001db0 <csp_buffer_init+0x98>
		goto fail_malloc;
 8001dae:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000032c 	.word	0x2000032c
 8001dc0:	2000030c 	.word	0x2000030c
 8001dc4:	20000308 	.word	0x20000308

08001dc8 <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <csp_buffer_free_resources+0x30>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <csp_buffer_free_resources+0x30>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fe33 	bl	8001a44 <csp_queue_remove>
		csp_buffers = NULL;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <csp_buffer_free_resources+0x30>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <csp_buffer_free_resources+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff fe10 	bl	8001a0e <csp_free>
	csp_buffer_pool = NULL;
 8001dee:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <csp_buffer_free_resources+0x34>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000308 	.word	0x20000308
 8001dfc:	2000030c 	.word	0x2000030c

08001e00 <csp_buffer_get_isr>:

void *csp_buffer_get_isr(size_t _data_size) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size)
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <csp_buffer_get_isr+0x5c>)
 8001e0a:	8b1b      	ldrh	r3, [r3, #24]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <csp_buffer_get_isr+0x18>
		return NULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	e01d      	b.n	8001e54 <csp_buffer_get_isr+0x54>

	csp_skbf_t * buffer = NULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
	CSP_BASE_TYPE task_woken = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
	csp_queue_dequeue_isr(csp_buffers, &buffer, &task_woken);
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <csp_buffer_get_isr+0x60>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f107 0208 	add.w	r2, r7, #8
 8001e28:	f107 010c 	add.w	r1, r7, #12
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe4c 	bl	8001aca <csp_queue_dequeue_isr>
	if (buffer == NULL)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <csp_buffer_get_isr+0x3c>
		return NULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e00b      	b.n	8001e54 <csp_buffer_get_isr+0x54>

	if (buffer != buffer->skbf_addr)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <csp_buffer_get_isr+0x4a>
		return NULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	e004      	b.n	8001e54 <csp_buffer_get_isr+0x54>

	buffer->refcount = 1;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3308      	adds	r3, #8

}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2000032c 	.word	0x2000032c
 8001e60:	20000308 	.word	0x20000308

08001e64 <csp_buffer_get>:

void *csp_buffer_get(size_t _data_size) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 8001e6c:	4b27      	ldr	r3, [pc, #156]	; (8001f0c <csp_buffer_get+0xa8>)
 8001e6e:	8b1b      	ldrh	r3, [r3, #24]
 8001e70:	461a      	mov	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d90c      	bls.n	8001e92 <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <csp_buffer_get+0xac>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d006      	beq.n	8001e8e <csp_buffer_get+0x2a>
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <csp_buffer_get+0xa8>)
 8001e82:	8b1b      	ldrh	r3, [r3, #24]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4923      	ldr	r1, [pc, #140]	; (8001f14 <csp_buffer_get+0xb0>)
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 fb9f 	bl	80025cc <do_csp_debug>
		return NULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e037      	b.n	8001f02 <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <csp_buffer_get+0xb4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f107 010c 	add.w	r1, r7, #12
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fdff 	bl	8001aa4 <csp_queue_dequeue>
	if (buffer == NULL) {
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <csp_buffer_get+0xac>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <csp_buffer_get+0x58>
 8001eb4:	4919      	ldr	r1, [pc, #100]	; (8001f1c <csp_buffer_get+0xb8>)
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f000 fb88 	bl	80025cc <do_csp_debug>
		return NULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e020      	b.n	8001f02 <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d00c      	beq.n	8001ee4 <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <csp_buffer_get+0xac>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d006      	beq.n	8001ee0 <csp_buffer_get+0x7c>
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4911      	ldr	r1, [pc, #68]	; (8001f20 <csp_buffer_get+0xbc>)
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 fb76 	bl	80025cc <do_csp_debug>
		return NULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e00e      	b.n	8001f02 <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <csp_buffer_get+0xac>)
 8001ee6:	78db      	ldrb	r3, [r3, #3]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <csp_buffer_get+0x94>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <csp_buffer_get+0xc0>)
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f000 fb6a 	bl	80025cc <do_csp_debug>

	buffer->refcount = 1;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	3308      	adds	r3, #8
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	2000032c 	.word	0x2000032c
 8001f10:	20000004 	.word	0x20000004
 8001f14:	0800db18 	.word	0x0800db18
 8001f18:	20000308 	.word	0x20000308
 8001f1c:	0800db54 	.word	0x0800db54
 8001f20:	0800db68 	.word	0x0800db68
 8001f24:	0800db8c 	.word	0x0800db8c

08001f28 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d023      	beq.n	8001f7e <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3b08      	subs	r3, #8
 8001f3a:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11d      	bne.n	8001f82 <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d11a      	bne.n	8001f86 <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d018      	beq.n	8001f8a <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	3a01      	subs	r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d113      	bne.n	8001f8e <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <csp_buffer_free_isr+0x70>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f107 0208 	add.w	r2, r7, #8
 8001f72:	f107 010c 	add.w	r1, r7, #12
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fd83 	bl	8001a82 <csp_queue_enqueue_isr>
 8001f7c:	e008      	b.n	8001f90 <csp_buffer_free_isr+0x68>
		return;
 8001f7e:	bf00      	nop
 8001f80:	e006      	b.n	8001f90 <csp_buffer_free_isr+0x68>
		return;
 8001f82:	bf00      	nop
 8001f84:	e004      	b.n	8001f90 <csp_buffer_free_isr+0x68>
		return;
 8001f86:	bf00      	nop
 8001f88:	e002      	b.n	8001f90 <csp_buffer_free_isr+0x68>
		return;
 8001f8a:	bf00      	nop
 8001f8c:	e000      	b.n	8001f90 <csp_buffer_free_isr+0x68>
		return;
 8001f8e:	bf00      	nop

}
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000308 	.word	0x20000308

08001f9c <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d055      	beq.n	8002056 <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3b08      	subs	r3, #8
 8001fae:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 8001fba:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <csp_buffer_free+0xd4>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d04b      	beq.n	800205a <csp_buffer_free+0xbe>
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	492b      	ldr	r1, [pc, #172]	; (8002074 <csp_buffer_free+0xd8>)
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f000 fb00 	bl	80025cc <do_csp_debug>
		return;
 8001fcc:	e045      	b.n	800205a <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d009      	beq.n	8001fec <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <csp_buffer_free+0xd4>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d03e      	beq.n	800205e <csp_buffer_free+0xc2>
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	4925      	ldr	r1, [pc, #148]	; (8002078 <csp_buffer_free+0xdc>)
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 faf1 	bl	80025cc <do_csp_debug>
		return;
 8001fea:	e038      	b.n	800205e <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <csp_buffer_free+0xd4>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d032      	beq.n	8002062 <csp_buffer_free+0xc6>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	461a      	mov	r2, r3
 8002000:	491e      	ldr	r1, [pc, #120]	; (800207c <csp_buffer_free+0xe0>)
 8002002:	2000      	movs	r0, #0
 8002004:	f000 fae2 	bl	80025cc <do_csp_debug>
		return;
 8002008:	e02b      	b.n	8002062 <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	3a01      	subs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <csp_buffer_free+0xd4>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d022      	beq.n	8002066 <csp_buffer_free+0xca>
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4916      	ldr	r1, [pc, #88]	; (8002080 <csp_buffer_free+0xe4>)
 8002028:	2000      	movs	r0, #0
 800202a:	f000 facf 	bl	80025cc <do_csp_debug>
		return;
 800202e:	e01a      	b.n	8002066 <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <csp_buffer_free+0xd4>)
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <csp_buffer_free+0xa8>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	461a      	mov	r2, r3
 800203c:	4911      	ldr	r1, [pc, #68]	; (8002084 <csp_buffer_free+0xe8>)
 800203e:	2003      	movs	r0, #3
 8002040:	f000 fac4 	bl	80025cc <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <csp_buffer_free+0xec>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f107 010c 	add.w	r1, r7, #12
 800204c:	2200      	movs	r2, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fd03 	bl	8001a5a <csp_queue_enqueue>
 8002054:	e008      	b.n	8002068 <csp_buffer_free+0xcc>
		return;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <csp_buffer_free+0xcc>
		return;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <csp_buffer_free+0xcc>
		return;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <csp_buffer_free+0xcc>
		return;
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <csp_buffer_free+0xcc>
		return;
 8002066:	bf00      	nop

}
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000004 	.word	0x20000004
 8002074:	0800db94 	.word	0x0800db94
 8002078:	0800dbbc 	.word	0x0800dbbc
 800207c:	0800dbe0 	.word	0x0800dbe0
 8002080:	0800dc00 	.word	0x0800dc00
 8002084:	0800dc24 	.word	0x0800dc24
 8002088:	20000308 	.word	0x20000308

0800208c <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <csp_buffer_size+0x14>)
 8002092:	8b1b      	ldrh	r3, [r3, #24]
 8002094:	3310      	adds	r3, #16
}
 8002096:	4618      	mov	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	2000032c 	.word	0x2000032c

080020a4 <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <csp_buffer_data_size+0x14>)
 80020aa:	8b1b      	ldrh	r3, [r3, #24]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	2000032c 	.word	0x2000032c

080020bc <csp_conn_get_rxq>:
		}
	}
#endif
}

int csp_conn_get_rxq(int prio) {
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 80020c4:	2300      	movs	r3, #0
#endif

}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]

	if (!conn)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d102      	bne.n	80020ea <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 80020e4:	f06f 0301 	mvn.w	r3, #1
 80020e8:	e039      	b.n	800215e <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	7bdb      	ldrb	r3, [r3, #15]
 80020f4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffde 	bl	80020bc <csp_conn_get_rxq>
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	e001      	b.n	8002108 <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3302      	adds	r3, #2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4639      	mov	r1, r7
 8002116:	2200      	movs	r2, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fc9e 	bl	8001a5a <csp_queue_enqueue>
 800211e:	4603      	mov	r3, r0
 8002120:	2b01      	cmp	r3, #1
 8002122:	d01b      	beq.n	800215c <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <csp_conn_enqueue_packet+0x94>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d014      	beq.n	8002156 <csp_conn_enqueue_packet+0x82>
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3302      	adds	r3, #2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	685c      	ldr	r4, [r3, #4]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3302      	adds	r3, #2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fcd0 	bl	8001aea <csp_queue_size>
 800214a:	4603      	mov	r3, r0
 800214c:	4622      	mov	r2, r4
 800214e:	4907      	ldr	r1, [pc, #28]	; (800216c <csp_conn_enqueue_packet+0x98>)
 8002150:	2000      	movs	r0, #0
 8002152:	f000 fa3b 	bl	80025cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e000      	b.n	800215e <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	20000004 	.word	0x20000004
 800216c:	0800dc30 	.word	0x0800dc30

08002170 <csp_conn_init>:

int csp_conn_init(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 8002176:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <csp_conn_init+0x13c>)
 8002178:	7c1b      	ldrb	r3, [r3, #16]
 800217a:	211c      	movs	r1, #28
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fc2b 	bl	80019d8 <csp_calloc>
 8002182:	4603      	mov	r3, r0
 8002184:	4a4a      	ldr	r2, [pc, #296]	; (80022b0 <csp_conn_init+0x140>)
 8002186:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 8002188:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <csp_conn_init+0x140>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10d      	bne.n	80021ac <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 8002190:	4b48      	ldr	r3, [pc, #288]	; (80022b4 <csp_conn_init+0x144>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <csp_conn_init+0x36>
 8002198:	4b44      	ldr	r3, [pc, #272]	; (80022ac <csp_conn_init+0x13c>)
 800219a:	7c1b      	ldrb	r3, [r3, #16]
 800219c:	461a      	mov	r2, r3
 800219e:	4946      	ldr	r1, [pc, #280]	; (80022b8 <csp_conn_init+0x148>)
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 fa13 	bl	80025cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e07b      	b.n	80022a4 <csp_conn_init+0x134>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 80021ac:	4843      	ldr	r0, [pc, #268]	; (80022bc <csp_conn_init+0x14c>)
 80021ae:	f7ff fca8 	bl	8001b02 <csp_bin_sem_create>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d00a      	beq.n	80021ce <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 80021b8:	4b3e      	ldr	r3, [pc, #248]	; (80022b4 <csp_conn_init+0x144>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <csp_conn_init+0x58>
 80021c0:	493f      	ldr	r1, [pc, #252]	; (80022c0 <csp_conn_init+0x150>)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f000 fa02 	bl	80025cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	e06a      	b.n	80022a4 <csp_conn_init+0x134>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 80021ce:	f7ff fd86 	bl	8001cde <csp_get_ms>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f006 ff11 	bl	8008ffc <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 80021da:	f006 ff3d 	bl	8009058 <rand>
 80021de:	4602      	mov	r2, r0
 80021e0:	4b32      	ldr	r3, [pc, #200]	; (80022ac <csp_conn_init+0x13c>)
 80021e2:	7cdb      	ldrb	r3, [r3, #19]
 80021e4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80021e8:	fb92 f1f3 	sdiv	r1, r2, r3
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <csp_conn_init+0x13c>)
 80021f6:	7cdb      	ldrb	r3, [r3, #19]
 80021f8:	4413      	add	r3, r2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b30      	ldr	r3, [pc, #192]	; (80022c4 <csp_conn_init+0x154>)
 8002202:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 8002204:	4830      	ldr	r0, [pc, #192]	; (80022c8 <csp_conn_init+0x158>)
 8002206:	f7ff fc7c 	bl	8001b02 <csp_bin_sem_create>
 800220a:	4603      	mov	r3, r0
 800220c:	2b01      	cmp	r3, #1
 800220e:	d00a      	beq.n	8002226 <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 8002210:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <csp_conn_init+0x144>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <csp_conn_init+0xb0>
 8002218:	492c      	ldr	r1, [pc, #176]	; (80022cc <csp_conn_init+0x15c>)
 800221a:	2000      	movs	r0, #0
 800221c:	f000 f9d6 	bl	80025cc <do_csp_debug>
		return CSP_ERR_NOMEM;
 8002220:	f04f 33ff 	mov.w	r3, #4294967295
 8002224:	e03e      	b.n	80022a4 <csp_conn_init+0x134>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	e034      	b.n	8002296 <csp_conn_init+0x126>
		csp_conn_t * conn = &arr_conn[i];
 800222c:	4b20      	ldr	r3, [pc, #128]	; (80022b0 <csp_conn_init+0x140>)
 800222e:	6819      	ldr	r1, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	e022      	b.n	800228a <csp_conn_init+0x11a>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <csp_conn_init+0x13c>)
 8002246:	7c5b      	ldrb	r3, [r3, #17]
 8002248:	2104      	movs	r1, #4
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fbea 	bl	8001a24 <csp_queue_create>
 8002250:	4601      	mov	r1, r0
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3302      	adds	r3, #2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	3302      	adds	r3, #2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10a      	bne.n	8002284 <csp_conn_init+0x114>
				csp_log_error("rx_queue = csp_queue_create() failed");
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <csp_conn_init+0x144>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <csp_conn_init+0x10e>
 8002276:	4916      	ldr	r1, [pc, #88]	; (80022d0 <csp_conn_init+0x160>)
 8002278:	2000      	movs	r0, #0
 800227a:	f000 f9a7 	bl	80025cc <do_csp_debug>
				return CSP_ERR_NOMEM;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e00f      	b.n	80022a4 <csp_conn_init+0x134>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3301      	adds	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	ddd9      	ble.n	8002244 <csp_conn_init+0xd4>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	3301      	adds	r3, #1
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <csp_conn_init+0x13c>)
 8002298:	7c1b      	ldrb	r3, [r3, #16]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4293      	cmp	r3, r2
 80022a0:	dbc4      	blt.n	800222c <csp_conn_init+0xbc>
			return CSP_ERR_NOMEM;
		}
#endif
	}

	return CSP_ERR_NONE;
 80022a2:	2300      	movs	r3, #0

}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	2000032c 	.word	0x2000032c
 80022b0:	20000310 	.word	0x20000310
 80022b4:	20000004 	.word	0x20000004
 80022b8:	0800dc50 	.word	0x0800dc50
 80022bc:	20000314 	.word	0x20000314
 80022c0:	0800dc78 	.word	0x0800dc78
 80022c4:	20000318 	.word	0x20000318
 80022c8:	2000031c 	.word	0x2000031c
 80022cc:	0800dca0 	.word	0x0800dca0
 80022d0:	0800dcc8 	.word	0x0800dcc8

080022d4 <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4013      	ands	r3, r2
 80022e4:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	e01c      	b.n	8002326 <csp_conn_find+0x52>
		csp_conn_t * conn = &arr_conn[i];
 80022ec:	4b14      	ldr	r3, [pc, #80]	; (8002340 <csp_conn_find+0x6c>)
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	785b      	ldrb	r3, [r3, #1]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d10c      	bne.n	8002320 <csp_conn_find+0x4c>
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <csp_conn_find+0x4c>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d101      	bne.n	8002320 <csp_conn_find+0x4c>
			return conn;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	e009      	b.n	8002334 <csp_conn_find+0x60>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3301      	adds	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <csp_conn_find+0x70>)
 8002328:	7c1b      	ldrb	r3, [r3, #16]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4293      	cmp	r3, r2
 8002330:	dbdc      	blt.n	80022ec <csp_conn_find+0x18>
		}
	}
	
	return NULL;
 8002332:	2300      	movs	r3, #0

}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20000310 	.word	0x20000310
 8002344:	2000032c 	.word	0x2000032c

08002348 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e018      	b.n	8002388 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fe1c 	bl	8001f9c <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3302      	adds	r3, #2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f107 0108 	add.w	r1, r7, #8
 8002374:	2200      	movs	r2, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fb94 	bl	8001aa4 <csp_queue_dequeue>
 800237c:	4603      	mov	r3, r0
 800237e:	2b01      	cmp	r3, #1
 8002380:	d0e9      	beq.n	8002356 <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	ddea      	ble.n	8002364 <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 800238e:	2300      	movs	r3, #0

}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 80023a2:	f04f 31ff 	mov.w	r1, #4294967295
 80023a6:	4838      	ldr	r0, [pc, #224]	; (8002488 <csp_conn_allocate+0xf0>)
 80023a8:	f7ff fbc8 	bl	8001b3c <csp_bin_sem_wait>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d009      	beq.n	80023c6 <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <csp_conn_allocate+0xf4>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <csp_conn_allocate+0x2a>
 80023ba:	4935      	ldr	r1, [pc, #212]	; (8002490 <csp_conn_allocate+0xf8>)
 80023bc:	2000      	movs	r0, #0
 80023be:	f000 f905 	bl	80025cc <do_csp_debug>
		return NULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e05b      	b.n	800247e <csp_conn_allocate+0xe6>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 80023ca:	4b32      	ldr	r3, [pc, #200]	; (8002494 <csp_conn_allocate+0xfc>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e019      	b.n	800240a <csp_conn_allocate+0x72>
		i = (i + 1) % csp_conf.conn_max;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3301      	adds	r3, #1
 80023da:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <csp_conn_allocate+0x100>)
 80023dc:	7c12      	ldrb	r2, [r2, #16]
 80023de:	fb93 f1f2 	sdiv	r1, r3, r2
 80023e2:	fb01 f202 	mul.w	r2, r1, r2
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 80023ea:	4b2c      	ldr	r3, [pc, #176]	; (800249c <csp_conn_allocate+0x104>)
 80023ec:	6819      	ldr	r1, [r3, #0]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <csp_conn_allocate+0x80>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3301      	adds	r3, #1
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b23      	ldr	r3, [pc, #140]	; (8002498 <csp_conn_allocate+0x100>)
 800240c:	7c1b      	ldrb	r3, [r3, #16]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4293      	cmp	r3, r2
 8002414:	dbdf      	blt.n	80023d6 <csp_conn_allocate+0x3e>
 8002416:	e000      	b.n	800241a <csp_conn_allocate+0x82>
			break;
 8002418:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01a      	beq.n	8002456 <csp_conn_allocate+0xbe>
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <csp_conn_allocate+0xbe>
		conn->idin.ext = 0;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2200      	movs	r2, #0
 800242c:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2200      	movs	r2, #0
 800243e:	615a      	str	r2, [r3, #20]
		conn->type = type;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	79fa      	ldrb	r2, [r7, #7]
 8002444:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2201      	movs	r2, #1
 800244a:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	4b10      	ldr	r3, [pc, #64]	; (8002494 <csp_conn_allocate+0xfc>)
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	e001      	b.n	800245a <csp_conn_allocate+0xc2>
	} else {
		// no free connections
		conn = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 800245a:	480b      	ldr	r0, [pc, #44]	; (8002488 <csp_conn_allocate+0xf0>)
 800245c:	f7ff fb94 	bl	8001b88 <csp_bin_sem_post>

	if (conn == NULL) {
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <csp_conn_allocate+0xe4>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <csp_conn_allocate+0xf4>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d006      	beq.n	800247c <csp_conn_allocate+0xe4>
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <csp_conn_allocate+0x100>)
 8002470:	7c1b      	ldrb	r3, [r3, #16]
 8002472:	461a      	mov	r2, r3
 8002474:	490a      	ldr	r1, [pc, #40]	; (80024a0 <csp_conn_allocate+0x108>)
 8002476:	2000      	movs	r0, #0
 8002478:	f000 f8a8 	bl	80025cc <do_csp_debug>
	}

	return conn;
 800247c:	697b      	ldr	r3, [r7, #20]

}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000314 	.word	0x20000314
 800248c:	20000004 	.word	0x20000004
 8002490:	0800dcf0 	.word	0x0800dcf0
 8002494:	20000320 	.word	0x20000320
 8002498:	2000032c 	.word	0x2000032c
 800249c:	20000310 	.word	0x20000310
 80024a0:	0800dd0c 	.word	0x0800dd0c

080024a4 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f7ff ff72 	bl	8002398 <csp_conn_allocate>
 80024b4:	60f8      	str	r0, [r7, #12]

	if (conn) {
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 80024c8:	f7ff fc09 	bl	8001cde <csp_get_ms>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff ff38 	bl	8002348 <csp_conn_flush_rx_queue>
	}

	return conn;
 80024d8:	68fb      	ldr	r3, [r7, #12]

}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <csp_close>:

int csp_close(csp_conn_t * conn) {
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 80024ea:	2101      	movs	r1, #1
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f805 	bl	80024fc <csp_conn_close>
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 800250e:	2300      	movs	r3, #0
 8002510:	e040      	b.n	8002594 <csp_conn_close+0x98>
	}

	if (conn->state == CONN_CLOSED) {
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 800251a:	4b20      	ldr	r3, [pc, #128]	; (800259c <csp_conn_close+0xa0>)
 800251c:	795b      	ldrb	r3, [r3, #5]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <csp_conn_close+0x2e>
 8002522:	491f      	ldr	r1, [pc, #124]	; (80025a0 <csp_conn_close+0xa4>)
 8002524:	2005      	movs	r0, #5
 8002526:	f000 f851 	bl	80025cc <do_csp_debug>
		return CSP_ERR_NONE;
 800252a:	2300      	movs	r3, #0
 800252c:	e032      	b.n	8002594 <csp_conn_close+0x98>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 800252e:	f04f 31ff 	mov.w	r1, #4294967295
 8002532:	481c      	ldr	r0, [pc, #112]	; (80025a4 <csp_conn_close+0xa8>)
 8002534:	f7ff fb02 	bl	8001b3c <csp_bin_sem_wait>
 8002538:	4603      	mov	r3, r0
 800253a:	2b01      	cmp	r3, #1
 800253c:	d00a      	beq.n	8002554 <csp_conn_close+0x58>
		csp_log_error("Failed to lock conn array");
 800253e:	4b17      	ldr	r3, [pc, #92]	; (800259c <csp_conn_close+0xa0>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <csp_conn_close+0x52>
 8002546:	4918      	ldr	r1, [pc, #96]	; (80025a8 <csp_conn_close+0xac>)
 8002548:	2000      	movs	r0, #0
 800254a:	f000 f83f 	bl	80025cc <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 800254e:	f06f 0302 	mvn.w	r3, #2
 8002552:	e01f      	b.n	8002594 <csp_conn_close+0x98>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff fef4 	bl	8002348 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d011      	beq.n	800258c <csp_conn_close+0x90>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10d      	bne.n	800258c <csp_conn_close+0x90>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f403 5388 	and.w	r3, r3, #4352	; 0x1100
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <csp_conn_close+0x90>
		csp_queue_remove(conn->socket);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fa5f 	bl	8001a44 <csp_queue_remove>
		conn->socket = NULL;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
		csp_rdp_flush_all(conn);
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 800258c:	4805      	ldr	r0, [pc, #20]	; (80025a4 <csp_conn_close+0xa8>)
 800258e:	f7ff fafb 	bl	8001b88 <csp_bin_sem_post>

	return CSP_ERR_NONE;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000004 	.word	0x20000004
 80025a0:	0800dd28 	.word	0x0800dd28
 80025a4:	20000314 	.word	0x20000314
 80025a8:	0800dcf0 	.word	0x0800dcf0

080025ac <csp_conn_dport>:
	/* We have a successful connection */
	return conn;

}

int csp_conn_dport(csp_conn_t * conn) {
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f3c3 3385 	ubfx	r3, r3, #14, #6
 80025bc:	b2db      	uxtb	r3, r3

}
 80025be:	4618      	mov	r0, r3
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 80025cc:	b40e      	push	{r1, r2, r3}
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b085      	sub	sp, #20
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 80025d8:	23f0      	movs	r3, #240	; 0xf0
 80025da:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d84f      	bhi.n	8002682 <do_csp_debug+0xb6>
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	; (8002694 <do_csp_debug+0xc8>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	f083 0301 	eor.w	r3, r3, #1
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d147      	bne.n	8002682 <do_csp_debug+0xb6>
		return;

	switch(level) {
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d846      	bhi.n	8002686 <do_csp_debug+0xba>
 80025f8:	a201      	add	r2, pc, #4	; (adr r2, 8002600 <do_csp_debug+0x34>)
 80025fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fe:	bf00      	nop
 8002600:	08002623 	.word	0x08002623
 8002604:	08002629 	.word	0x08002629
 8002608:	0800261d 	.word	0x0800261d
 800260c:	0800262f 	.word	0x0800262f
 8002610:	08002635 	.word	0x08002635
 8002614:	0800263b 	.word	0x0800263b
 8002618:	08002641 	.word	0x08002641
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 800261c:	2313      	movs	r3, #19
 800261e:	60fb      	str	r3, [r7, #12]
		break;
 8002620:	e011      	b.n	8002646 <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 8002622:	2312      	movs	r3, #18
 8002624:	60fb      	str	r3, [r7, #12]
		break;
 8002626:	e00e      	b.n	8002646 <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 8002628:	2314      	movs	r3, #20
 800262a:	60fb      	str	r3, [r7, #12]
		break;
 800262c:	e00b      	b.n	8002646 <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 800262e:	2306      	movs	r3, #6
 8002630:	60fb      	str	r3, [r7, #12]
		break;
 8002632:	e008      	b.n	8002646 <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 8002634:	2303      	movs	r3, #3
 8002636:	60fb      	str	r3, [r7, #12]
		break;
 8002638:	e005      	b.n	8002646 <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 800263a:	2305      	movs	r3, #5
 800263c:	60fb      	str	r3, [r7, #12]
		break;
 800263e:	e002      	b.n	8002646 <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 8002640:	2307      	movs	r3, #7
 8002642:	60fb      	str	r3, [r7, #12]
		break;
 8002644:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 8002646:	f107 0320 	add.w	r3, r7, #32
 800264a:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 800264c:	4b12      	ldr	r3, [pc, #72]	; (8002698 <do_csp_debug+0xcc>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <do_csp_debug+0xcc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	79f8      	ldrb	r0, [r7, #7]
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	69f9      	ldr	r1, [r7, #28]
 800265e:	4798      	blx	r3
 8002660:	e012      	b.n	8002688 <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fab0 	bl	8001bcc <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	69f8      	ldr	r0, [r7, #28]
 8002670:	f007 fd3a 	bl	800a0e8 <viprintf>
#endif
		printf("\r\n");
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <do_csp_debug+0xd0>)
 8002676:	f007 fccb 	bl	800a010 <puts>
		csp_sys_set_color(COLOR_RESET);
 800267a:	20f0      	movs	r0, #240	; 0xf0
 800267c:	f7ff faa6 	bl	8001bcc <csp_sys_set_color>
 8002680:	e002      	b.n	8002688 <do_csp_debug+0xbc>
		return;
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <do_csp_debug+0xbc>
		return;
 8002686:	bf00      	nop
	}

	va_end(args);
}
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002690:	b003      	add	sp, #12
 8002692:	4770      	bx	lr
 8002694:	20000004 	.word	0x20000004
 8002698:	20000324 	.word	0x20000324
 800269c:	0800def8 	.word	0x0800def8

080026a0 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	b21a      	sxth	r2, r3
			((h16 & 0x00ff) << 8));
 80026b2:	88fb      	ldrh	r3, [r7, #6]
 80026b4:	021b      	lsls	r3, r3, #8
	return (((h16 & 0xff00) >> 8) |
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	b29b      	uxth	r3, r3
#endif
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	4603      	mov	r3, r0
 80026d2:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffe2 	bl	80026a0 <csp_hton16>
 80026dc:	4603      	mov	r3, r0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 80026f6:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			((h32 & 0x000000ff) << 24) |
 8002700:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
			((h32 & 0x0000ff00) <<  8) |
 800270a:	4313      	orrs	r3, r2
#endif
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ffe0 	bl	80026e6 <csp_hton32>
 8002726:	4603      	mov	r3, r0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 800273e:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <csp_iflist_add+0x70>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <csp_iflist_add+0x70>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6013      	str	r3, [r2, #0]
 800274c:	e022      	b.n	8002794 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8002752:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <csp_iflist_add+0x70>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	e016      	b.n	8002788 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	429a      	cmp	r2, r3
 8002760:	d00a      	beq.n	8002778 <csp_iflist_add+0x48>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	220a      	movs	r2, #10
 800276c:	4619      	mov	r1, r3
 800276e:	f007 fd63 	bl	800a238 <strncasecmp>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d102      	bne.n	800277e <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 8002778:	f06f 0306 	mvn.w	r3, #6
 800277c:	e00b      	b.n	8002796 <csp_iflist_add+0x66>
			}
			last = i;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e5      	bne.n	800275a <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	63da      	str	r2, [r3, #60]	; 0x3c
	}

	return CSP_ERR_NONE;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000328 	.word	0x20000328

080027a4 <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	4613      	mov	r3, r2
 80027b2:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 80027b4:	79bb      	ldrb	r3, [r7, #6]
 80027b6:	79f8      	ldrb	r0, [r7, #7]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	2105      	movs	r1, #5
 80027bc:	f001 f946 	bl	8003a4c <csp_rtable_set>
 80027c0:	4603      	mov	r3, r0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 80027d4:	f7ff f8dc 	bl	8001990 <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 80027d8:	2220      	movs	r2, #32
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	481b      	ldr	r0, [pc, #108]	; (800284c <csp_init+0x80>)
 80027de:	f007 fe18 	bl	800a412 <memcpy>

	int ret = csp_buffer_init();
 80027e2:	f7ff fa99 	bl	8001d18 <csp_buffer_init>
 80027e6:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <csp_init+0x26>
		return ret;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	e027      	b.n	8002842 <csp_init+0x76>
	}

	ret = csp_conn_init();
 80027f2:	f7ff fcbd 	bl	8002170 <csp_conn_init>
 80027f6:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <csp_init+0x36>
		return ret;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	e01f      	b.n	8002842 <csp_init+0x76>
	}

	ret = csp_port_init();
 8002802:	f000 fa17 	bl	8002c34 <csp_port_init>
 8002806:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <csp_init+0x46>
		return ret;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	e017      	b.n	8002842 <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 8002812:	f000 fab5 	bl	8002d80 <csp_qfifo_init>
 8002816:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <csp_init+0x56>
		return ret;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	e00f      	b.n	8002842 <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 8002822:	480b      	ldr	r0, [pc, #44]	; (8002850 <csp_init+0x84>)
 8002824:	f7ff ff84 	bl	8002730 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <csp_init+0x80>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	22ff      	movs	r2, #255	; 0xff
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <csp_init+0x84>)
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ffb7 	bl	80027a4 <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8002836:	22ff      	movs	r2, #255	; 0xff
 8002838:	4905      	ldr	r1, [pc, #20]	; (8002850 <csp_init+0x84>)
 800283a:	2020      	movs	r0, #32
 800283c:	f7ff ffb2 	bl	80027a4 <csp_route_set>

	return CSP_ERR_NONE;
 8002840:	2300      	movs	r3, #0

}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000032c 	.word	0x2000032c
 8002850:	2000000c 	.word	0x2000000c

08002854 <csp_socket>:

#if (CSP_USE_PROMISC)
extern csp_queue_handle_t csp_promisc_queue;
#endif

csp_socket_t * csp_socket(uint32_t opts) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	
	/* Validate socket options */
#if (CSP_USE_RDP == 0)
	if (opts & CSP_SO_RDPREQ) {
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <csp_socket+0x26>
		csp_log_error("Attempt to create socket that requires RDP, but CSP was compiled without RDP support");
 8002866:	4b39      	ldr	r3, [pc, #228]	; (800294c <csp_socket+0xf8>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <csp_socket+0x22>
 800286e:	4938      	ldr	r1, [pc, #224]	; (8002950 <csp_socket+0xfc>)
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff feab 	bl	80025cc <do_csp_debug>
		return NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	e064      	b.n	8002944 <csp_socket+0xf0>
	}
#endif

#if (CSP_USE_XTEA == 0)
	if (opts & CSP_SO_XTEAREQ) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <csp_socket+0x44>
		csp_log_error("Attempt to create socket that requires XTEA, but CSP was compiled without XTEA support");
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <csp_socket+0xf8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <csp_socket+0x40>
 800288c:	4931      	ldr	r1, [pc, #196]	; (8002954 <csp_socket+0x100>)
 800288e:	2000      	movs	r0, #0
 8002890:	f7ff fe9c 	bl	80025cc <do_csp_debug>
		return NULL;
 8002894:	2300      	movs	r3, #0
 8002896:	e055      	b.n	8002944 <csp_socket+0xf0>
	}
#endif

#if (CSP_USE_HMAC == 0)
	if (opts & CSP_SO_HMACREQ) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <csp_socket+0x62>
		csp_log_error("Attempt to create socket that requires HMAC, but CSP was compiled without HMAC support");
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <csp_socket+0xf8>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <csp_socket+0x5e>
 80028aa:	492b      	ldr	r1, [pc, #172]	; (8002958 <csp_socket+0x104>)
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7ff fe8d 	bl	80025cc <do_csp_debug>
		return NULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	e046      	b.n	8002944 <csp_socket+0xf0>
	} 
#endif

#if (CSP_USE_CRC32 == 0)
	if (opts & CSP_SO_CRC32REQ) {
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <csp_socket+0x80>
		csp_log_error("Attempt to create socket that requires CRC32, but CSP was compiled without CRC32 support");
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <csp_socket+0xf8>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <csp_socket+0x7c>
 80028c8:	4924      	ldr	r1, [pc, #144]	; (800295c <csp_socket+0x108>)
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7ff fe7e 	bl	80025cc <do_csp_debug>
		return NULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e037      	b.n	8002944 <csp_socket+0xf0>
	} 
#endif
	
	/* Drop packet if reserved flags are set */
	if (opts & ~(CSP_SO_RDPREQ | CSP_SO_XTEAREQ | CSP_SO_HMACREQ | CSP_SO_CRC32REQ | CSP_SO_CONN_LESS)) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f423 73aa 	bic.w	r3, r3, #340	; 0x154
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <csp_socket+0xa2>
		csp_log_error("Invalid socket option");
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <csp_socket+0xf8>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <csp_socket+0x9e>
 80028ea:	491d      	ldr	r1, [pc, #116]	; (8002960 <csp_socket+0x10c>)
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7ff fe6d 	bl	80025cc <do_csp_debug>
		return NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e026      	b.n	8002944 <csp_socket+0xf0>
	}

	/* Use CSP buffers instead? */
	csp_socket_t * sock = csp_conn_allocate(CONN_SERVER);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7ff fd4e 	bl	8002398 <csp_conn_allocate>
 80028fc:	60f8      	str	r0, [r7, #12]
	if (sock == NULL)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <csp_socket+0xb4>
		return NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	e01d      	b.n	8002944 <csp_socket+0xf0>

	/* If connectionless, init the queue to a pre-defined size
	 * if not, the user must init the queue using csp_listen */
	if (opts & CSP_SO_CONN_LESS) {
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d011      	beq.n	8002936 <csp_socket+0xe2>
		sock->socket = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <csp_socket+0x110>)
 8002914:	7c5b      	ldrb	r3, [r3, #17]
 8002916:	2104      	movs	r1, #4
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff f883 	bl	8001a24 <csp_queue_create>
 800291e:	4602      	mov	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	611a      	str	r2, [r3, #16]
		if (sock->socket == NULL) {
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d107      	bne.n	800293c <csp_socket+0xe8>
			csp_close(sock);
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff fdd8 	bl	80024e2 <csp_close>
			return NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	e006      	b.n	8002944 <csp_socket+0xf0>
                }
	} else {
		sock->socket = NULL;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
	}
	sock->opts = opts;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	619a      	str	r2, [r3, #24]

	return sock;
 8002942:	68fb      	ldr	r3, [r7, #12]

}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000004 	.word	0x20000004
 8002950:	0800defc 	.word	0x0800defc
 8002954:	0800df54 	.word	0x0800df54
 8002958:	0800dfac 	.word	0x0800dfac
 800295c:	0800e004 	.word	0x0800e004
 8002960:	0800e060 	.word	0x0800e060
 8002964:	2000032c 	.word	0x2000032c

08002968 <csp_accept>:

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]

	if (sock == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <csp_accept+0x14>
		return NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	e013      	b.n	80029a4 <csp_accept+0x3c>

	if (sock->socket == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <csp_accept+0x20>
		return NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	e00d      	b.n	80029a4 <csp_accept+0x3c>

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->socket, &conn, timeout) == CSP_QUEUE_OK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	f107 010c 	add.w	r1, r7, #12
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f886 	bl	8001aa4 <csp_queue_dequeue>
 8002998:	4603      	mov	r3, r0
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <csp_accept+0x3a>
		return conn;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	e000      	b.n	80029a4 <csp_accept+0x3c>

	return NULL;
 80029a2:	2300      	movs	r3, #0

}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <csp_read+0x1c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	785b      	ldrb	r3, [r3, #1]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d001      	beq.n	80029cc <csp_read+0x20>
		return NULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e00d      	b.n	80029e8 <csp_read+0x3c>
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f107 010c 	add.w	r1, r7, #12
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f864 	bl	8001aa4 <csp_queue_dequeue>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <csp_read+0x3a>
		return NULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e000      	b.n	80029e8 <csp_read+0x3c>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 80029e6:	68fb      	ldr	r3, [r7, #12]

}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 80029f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029f2:	b08f      	sub	sp, #60	; 0x3c
 80029f4:	af08      	add	r7, sp, #32
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 8002a04:	4b66      	ldr	r3, [pc, #408]	; (8002ba0 <csp_send_direct+0x1b0>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80c0 	beq.w	8002b8e <csp_send_direct+0x19e>
 8002a0e:	4965      	ldr	r1, [pc, #404]	; (8002ba4 <csp_send_direct+0x1b4>)
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff fddb 	bl	80025cc <do_csp_debug>
		goto err;
 8002a16:	e0ba      	b.n	8002b8e <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 8002a1e:	4b60      	ldr	r3, [pc, #384]	; (8002ba0 <csp_send_direct+0x1b0>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80b5 	beq.w	8002b92 <csp_send_direct+0x1a2>
 8002a28:	89fb      	ldrh	r3, [r7, #14]
 8002a2a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	495c      	ldr	r1, [pc, #368]	; (8002ba8 <csp_send_direct+0x1b8>)
 8002a36:	2000      	movs	r0, #0
 8002a38:	f7ff fdc8 	bl	80025cc <do_csp_debug>
		goto err;
 8002a3c:	e0a9      	b.n	8002b92 <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <csp_send_direct+0x1b0>)
 8002a46:	791b      	ldrb	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d037      	beq.n	8002abc <csp_send_direct+0xcc>
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	469c      	mov	ip, r3
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	469e      	mov	lr, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4619      	mov	r1, r3
 8002a6a:	7b7b      	ldrb	r3, [r7, #13]
 8002a6c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461c      	mov	r4, r3
 8002a7e:	7b3b      	ldrb	r3, [r7, #12]
 8002a80:	461d      	mov	r5, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	895b      	ldrh	r3, [r3, #10]
 8002a86:	461e      	mov	r6, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	7912      	ldrb	r2, [r2, #4]
 8002a90:	2aff      	cmp	r2, #255	; 0xff
 8002a92:	d002      	beq.n	8002a9a <csp_send_direct+0xaa>
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	7912      	ldrb	r2, [r2, #4]
 8002a98:	e003      	b.n	8002aa2 <csp_send_direct+0xb2>
 8002a9a:	89fa      	ldrh	r2, [r7, #14]
 8002a9c:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	9206      	str	r2, [sp, #24]
 8002aa4:	9305      	str	r3, [sp, #20]
 8002aa6:	9604      	str	r6, [sp, #16]
 8002aa8:	9503      	str	r5, [sp, #12]
 8002aaa:	9402      	str	r4, [sp, #8]
 8002aac:	9001      	str	r0, [sp, #4]
 8002aae:	9100      	str	r1, [sp, #0]
 8002ab0:	4673      	mov	r3, lr
 8002ab2:	4662      	mov	r2, ip
 8002ab4:	493d      	ldr	r1, [pc, #244]	; (8002bac <csp_send_direct+0x1bc>)
 8002ab6:	2004      	movs	r0, #4
 8002ab8:	f7ff fd88 	bl	80025cc <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <csp_send_direct+0x1c0>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d12d      	bne.n	8002b30 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 8002ad4:	7b3b      	ldrb	r3, [r7, #12]
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d008      	beq.n	8002af0 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8002ade:	4b30      	ldr	r3, [pc, #192]	; (8002ba0 <csp_send_direct+0x1b0>)
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d046      	beq.n	8002b74 <csp_send_direct+0x184>
 8002ae6:	4933      	ldr	r1, [pc, #204]	; (8002bb4 <csp_send_direct+0x1c4>)
 8002ae8:	2001      	movs	r0, #1
 8002aea:	f7ff fd6f 	bl	80025cc <do_csp_debug>
			goto tx_err;
 8002aee:	e041      	b.n	8002b74 <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 8002af0:	7b3b      	ldrb	r3, [r7, #12]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 8002afa:	4b29      	ldr	r3, [pc, #164]	; (8002ba0 <csp_send_direct+0x1b0>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <csp_send_direct+0x11a>
 8002b02:	492d      	ldr	r1, [pc, #180]	; (8002bb8 <csp_send_direct+0x1c8>)
 8002b04:	2001      	movs	r0, #1
 8002b06:	f7ff fd61 	bl	80025cc <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 8002b0a:	7b3b      	ldrb	r3, [r7, #12]
 8002b0c:	f023 0301 	bic.w	r3, r3, #1
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8002b1e:	4b20      	ldr	r3, [pc, #128]	; (8002ba0 <csp_send_direct+0x1b0>)
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d028      	beq.n	8002b78 <csp_send_direct+0x188>
 8002b26:	4925      	ldr	r1, [pc, #148]	; (8002bbc <csp_send_direct+0x1cc>)
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f7ff fd4f 	bl	80025cc <do_csp_debug>
			goto tx_err;
 8002b2e:	e023      	b.n	8002b78 <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	895b      	ldrh	r3, [r3, #10]
 8002b34:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	8a1b      	ldrh	r3, [r3, #16]
 8002b3a:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 8002b3c:	8a3b      	ldrh	r3, [r7, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <csp_send_direct+0x15a>
 8002b42:	8a7a      	ldrh	r2, [r7, #18]
 8002b44:	8a3b      	ldrh	r3, [r7, #16]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d818      	bhi.n	8002b7c <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d112      	bne.n	8002b80 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b68:	8a7b      	ldrh	r3, [r7, #18]
 8002b6a:	441a      	add	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
	return CSP_ERR_NONE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e011      	b.n	8002b98 <csp_send_direct+0x1a8>
			goto tx_err;
 8002b74:	bf00      	nop
 8002b76:	e004      	b.n	8002b82 <csp_send_direct+0x192>
			goto tx_err;
 8002b78:	bf00      	nop
 8002b7a:	e002      	b.n	8002b82 <csp_send_direct+0x192>
		goto tx_err;
 8002b7c:	bf00      	nop
 8002b7e:	e000      	b.n	8002b82 <csp_send_direct+0x192>
		goto tx_err;
 8002b80:	bf00      	nop

tx_err:
	ifout->tx_error++;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	61da      	str	r2, [r3, #28]
 8002b8c:	e002      	b.n	8002b94 <csp_send_direct+0x1a4>
		goto err;
 8002b8e:	bf00      	nop
 8002b90:	e000      	b.n	8002b94 <csp_send_direct+0x1a4>
		goto err;
 8002b92:	bf00      	nop
err:
	return CSP_ERR_TX;
 8002b94:	f06f 0309 	mvn.w	r3, #9

}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba0:	20000004 	.word	0x20000004
 8002ba4:	0800e078 	.word	0x0800e078
 8002ba8:	0800e0a0 	.word	0x0800e0a0
 8002bac:	0800e0c0 	.word	0x0800e0c0
 8002bb0:	2000032c 	.word	0x2000032c
 8002bb4:	0800e104 	.word	0x0800e104
 8002bb8:	0800e164 	.word	0x0800e164
 8002bbc:	0800e1cc 	.word	0x0800e1cc

08002bc0 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 8002bc8:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <csp_port_get_socket+0x6c>)
 8002bca:	7cdb      	ldrb	r3, [r3, #19]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d901      	bls.n	8002bd8 <csp_port_get_socket+0x18>
		return NULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e022      	b.n	8002c1e <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <csp_port_get_socket+0x70>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	4413      	add	r3, r2
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d106      	bne.n	8002bf6 <csp_port_get_socket+0x36>
		return ports[port].socket;
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <csp_port_get_socket+0x70>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	e013      	b.n	8002c1e <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <csp_port_get_socket+0x70>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	; (8002c2c <csp_port_get_socket+0x6c>)
 8002bfc:	7cdb      	ldrb	r3, [r3, #19]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 8002c0a:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <csp_port_get_socket+0x70>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <csp_port_get_socket+0x6c>)
 8002c10:	7cdb      	ldrb	r3, [r3, #19]
 8002c12:	3301      	adds	r3, #1
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	e000      	b.n	8002c1e <csp_port_get_socket+0x5e>
	}

	return NULL;
 8002c1c:	2300      	movs	r3, #0

}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	2000032c 	.word	0x2000032c
 8002c30:	2000034c 	.word	0x2000034c

08002c34 <csp_port_init>:

int csp_port_init(void) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <csp_port_init+0x2c>)
 8002c3a:	7cdb      	ldrb	r3, [r3, #19]
 8002c3c:	3302      	adds	r3, #2
 8002c3e:	2108      	movs	r1, #8
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fec9 	bl	80019d8 <csp_calloc>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <csp_port_init+0x30>)
 8002c4a:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <csp_port_init+0x30>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 8002c54:	f04f 33ff 	mov.w	r3, #4294967295
 8002c58:	e000      	b.n	8002c5c <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 8002c5a:	2300      	movs	r3, #0

}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	2000032c 	.word	0x2000032c
 8002c64:	2000034c 	.word	0x2000034c

08002c68 <csp_listen>:

	csp_free(ports);
	ports = NULL;
}

int csp_listen(csp_socket_t * socket, size_t backlog) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
	
	if (socket == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d102      	bne.n	8002c7e <csp_listen+0x16>
		return CSP_ERR_INVAL;
 8002c78:	f06f 0301 	mvn.w	r3, #1
 8002c7c:	e015      	b.n	8002caa <csp_listen+0x42>

	socket->socket = csp_queue_create(backlog, sizeof(csp_conn_t *));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2104      	movs	r1, #4
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fece 	bl	8001a24 <csp_queue_create>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	611a      	str	r2, [r3, #16]
	if (socket->socket == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <csp_listen+0x34>
		return CSP_ERR_NOMEM;
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9a:	e006      	b.n	8002caa <csp_listen+0x42>

        socket->opts |= CSP_SO_INTERNAL_LISTEN;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	619a      	str	r2, [r3, #24]

	return CSP_ERR_NONE;
 8002ca8:	2300      	movs	r3, #0

}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
	
	if (socket == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <csp_bind+0x18>
		return CSP_ERR_INVAL;
 8002cc6:	f06f 0301 	mvn.w	r3, #1
 8002cca:	e048      	b.n	8002d5e <csp_bind+0xaa>

	if (port == CSP_ANY) {
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d104      	bne.n	8002cdc <csp_bind+0x28>
		port = csp_conf.port_max_bind + 1;
 8002cd2:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <csp_bind+0xb4>)
 8002cd4:	7cdb      	ldrb	r3, [r3, #19]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	70fb      	strb	r3, [r7, #3]
 8002cda:	e012      	b.n	8002d02 <csp_bind+0x4e>
	} else if (port > csp_conf.port_max_bind) {
 8002cdc:	4b22      	ldr	r3, [pc, #136]	; (8002d68 <csp_bind+0xb4>)
 8002cde:	7cdb      	ldrb	r3, [r3, #19]
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d90d      	bls.n	8002d02 <csp_bind+0x4e>
		csp_log_error("csp_bind: invalid port %u, only ports from 0-%u (+ CSP_ANY for default) are available for incoming ports", port, csp_conf.port_max_bind);
 8002ce6:	4b21      	ldr	r3, [pc, #132]	; (8002d6c <csp_bind+0xb8>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <csp_bind+0x48>
 8002cee:	78fa      	ldrb	r2, [r7, #3]
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <csp_bind+0xb4>)
 8002cf2:	7cdb      	ldrb	r3, [r3, #19]
 8002cf4:	491e      	ldr	r1, [pc, #120]	; (8002d70 <csp_bind+0xbc>)
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7ff fc68 	bl	80025cc <do_csp_debug>
		return CSP_ERR_INVAL;
 8002cfc:	f06f 0301 	mvn.w	r3, #1
 8002d00:	e02d      	b.n	8002d5e <csp_bind+0xaa>
	}

	if (ports[port].state != PORT_CLOSED) {
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <csp_bind+0xc0>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <csp_bind+0x78>
		csp_log_error("Port %d is already in use", port);
 8002d12:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <csp_bind+0xb8>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <csp_bind+0x72>
 8002d1a:	78fb      	ldrb	r3, [r7, #3]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4916      	ldr	r1, [pc, #88]	; (8002d78 <csp_bind+0xc4>)
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7ff fc53 	bl	80025cc <do_csp_debug>
		return CSP_ERR_USED;
 8002d26:	f06f 0303 	mvn.w	r3, #3
 8002d2a:	e018      	b.n	8002d5e <csp_bind+0xaa>
	}

	csp_log_info("Binding socket %p to port %u", socket, port);
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <csp_bind+0xb8>)
 8002d2e:	789b      	ldrb	r3, [r3, #2]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <csp_bind+0x8c>
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4910      	ldr	r1, [pc, #64]	; (8002d7c <csp_bind+0xc8>)
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	f7ff fc46 	bl	80025cc <do_csp_debug>

	/* Save listener */
	ports[port].socket = socket;
 8002d40:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <csp_bind+0xc0>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <csp_bind+0xc0>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4413      	add	r3, r2
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]

	return CSP_ERR_NONE;
 8002d5c:	2300      	movs	r3, #0

}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000032c 	.word	0x2000032c
 8002d6c:	20000004 	.word	0x20000004
 8002d70:	0800e3a4 	.word	0x0800e3a4
 8002d74:	2000034c 	.word	0x2000034c
 8002d78:	0800e410 	.word	0x0800e410
 8002d7c:	0800e42c 	.word	0x0800e42c

08002d80 <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	e01c      	b.n	8002dc6 <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <csp_qfifo_init+0x58>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d113      	bne.n	8002dc0 <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 8002d98:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <csp_qfifo_init+0x5c>)
 8002d9a:	7c9b      	ldrb	r3, [r3, #18]
 8002d9c:	2108      	movs	r1, #8
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fe40 	bl	8001a24 <csp_queue_create>
 8002da4:	4602      	mov	r2, r0
 8002da6:	490c      	ldr	r1, [pc, #48]	; (8002dd8 <csp_qfifo_init+0x58>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <csp_qfifo_init+0x58>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 8002dba:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbe:	e006      	b.n	8002dce <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	dddf      	ble.n	8002d8c <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8002dcc:	2300      	movs	r3, #0

}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000350 	.word	0x20000350
 8002ddc:	2000032c 	.word	0x2000032c

08002de0 <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 8002de8:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <csp_qfifo_read+0x30>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fe fe56 	bl	8001aa4 <csp_queue_dequeue>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d002      	beq.n	8002e04 <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 8002dfe:	f06f 0302 	mvn.w	r3, #2
 8002e02:	e000      	b.n	8002e06 <csp_qfifo_read+0x26>
#endif

	return CSP_ERR_NONE;
 8002e04:	2300      	movs	r3, #0

}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000350 	.word	0x20000350

08002e14 <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10b      	bne.n	8002e3e <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d15f      	bne.n	8002eec <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 8002e2c:	4b31      	ldr	r3, [pc, #196]	; (8002ef4 <csp_qfifo_write+0xe0>)
 8002e2e:	785b      	ldrb	r3, [r3, #1]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d05b      	beq.n	8002eec <csp_qfifo_write+0xd8>
 8002e34:	4930      	ldr	r1, [pc, #192]	; (8002ef8 <csp_qfifo_write+0xe4>)
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7ff fbc8 	bl	80025cc <do_csp_debug>
		}
		return;
 8002e3c:	e056      	b.n	8002eec <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d115      	bne.n	8002e70 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 8002e4a:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <csp_qfifo_write+0xe0>)
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <csp_qfifo_write+0x46>
 8002e52:	492a      	ldr	r1, [pc, #168]	; (8002efc <csp_qfifo_write+0xe8>)
 8002e54:	2001      	movs	r0, #1
 8002e56:	f7ff fbb9 	bl	80025cc <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f7ff f89b 	bl	8001f9c <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 8002e66:	e042      	b.n	8002eee <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f7ff f85d 	bl	8001f28 <csp_buffer_free_isr>
		return;
 8002e6e:	e03e      	b.n	8002eee <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 8002e82:	4a1f      	ldr	r2, [pc, #124]	; (8002f00 <csp_qfifo_write+0xec>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8a:	f107 0110 	add.w	r1, r7, #16
 8002e8e:	2200      	movs	r2, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe fde2 	bl	8001a5a <csp_queue_enqueue>
 8002e96:	61f8      	str	r0, [r7, #28]
 8002e98:	e00a      	b.n	8002eb0 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 8002e9a:	4a19      	ldr	r2, [pc, #100]	; (8002f00 <csp_qfifo_write+0xec>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	f107 0110 	add.w	r1, r7, #16
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fdea 	bl	8001a82 <csp_queue_enqueue_isr>
 8002eae:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d01b      	beq.n	8002eee <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <csp_qfifo_write+0xe0>)
 8002ebe:	785b      	ldrb	r3, [r3, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <csp_qfifo_write+0xb8>
 8002ec4:	490f      	ldr	r1, [pc, #60]	; (8002f04 <csp_qfifo_write+0xf0>)
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f7ff fb80 	bl	80025cc <do_csp_debug>
		}
		iface->drop++;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
		if (pxTaskWoken == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f7ff f85d 	bl	8001f9c <csp_buffer_free>
 8002ee2:	e004      	b.n	8002eee <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff f81f 	bl	8001f28 <csp_buffer_free_isr>
 8002eea:	e000      	b.n	8002eee <csp_qfifo_write+0xda>
		return;
 8002eec:	bf00      	nop
	}

}
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000004 	.word	0x20000004
 8002ef8:	0800e44c 	.word	0x0800e44c
 8002efc:	0800e474 	.word	0x0800e474
 8002f00:	20000350 	.word	0x20000350
 8002f04:	0800e4a0 	.word	0x0800e4a0

08002f08 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	7b1b      	ldrb	r3, [r3, #12]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00f      	beq.n	8002f3e <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <csp_route_check_options+0x98>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <csp_route_check_options+0x26>
 8002f26:	491f      	ldr	r1, [pc, #124]	; (8002fa4 <csp_route_check_options+0x9c>)
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7ff fb4f 	bl	80025cc <do_csp_debug>
		iface->autherr++;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	1c5a      	adds	r2, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 8002f38:	f06f 0304 	mvn.w	r3, #4
 8002f3c:	e02c      	b.n	8002f98 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	7b1b      	ldrb	r3, [r3, #12]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00f      	beq.n	8002f6a <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <csp_route_check_options+0x98>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <csp_route_check_options+0x52>
 8002f52:	4915      	ldr	r1, [pc, #84]	; (8002fa8 <csp_route_check_options+0xa0>)
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff fb39 	bl	80025cc <do_csp_debug>
		iface->autherr++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
		return CSP_ERR_NOTSUP;
 8002f64:	f06f 0304 	mvn.w	r3, #4
 8002f68:	e016      	b.n	8002f98 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	7b1b      	ldrb	r3, [r3, #12]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00f      	beq.n	8002f96 <csp_route_check_options+0x8e>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <csp_route_check_options+0x98>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <csp_route_check_options+0x7e>
 8002f7e:	490b      	ldr	r1, [pc, #44]	; (8002fac <csp_route_check_options+0xa4>)
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff fb23 	bl	80025cc <do_csp_debug>
		iface->rx_error++;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]
		return CSP_ERR_NOTSUP;
 8002f90:	f06f 0304 	mvn.w	r3, #4
 8002f94:	e000      	b.n	8002f98 <csp_route_check_options+0x90>
	}
#endif
	return CSP_ERR_NONE;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000004 	.word	0x20000004
 8002fa4:	0800e4d4 	.word	0x0800e4d4
 8002fa8:	0800e534 	.word	0x0800e534
 8002fac:	0800e58c 	.word	0x0800e58c

08002fb0 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7b1b      	ldrb	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01a      	beq.n	8002ffe <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	895b      	ldrh	r3, [r3, #10]
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d80f      	bhi.n	8002ff0 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <csp_route_security_check+0x74>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <csp_route_security_check+0x30>
 8002fd8:	4913      	ldr	r1, [pc, #76]	; (8003028 <csp_route_security_check+0x78>)
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7ff faf6 	bl	80025cc <do_csp_debug>
			iface->rx_error++;
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 8002fea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002fee:	e014      	b.n	800301a <csp_route_security_check+0x6a>
		}
		packet->length -= sizeof(uint32_t);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	895b      	ldrh	r3, [r3, #10]
 8002ff4:	3b04      	subs	r3, #4
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	815a      	strh	r2, [r3, #10]
 8002ffc:	e00c      	b.n	8003018 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <csp_route_security_check+0x74>)
 800300a:	785b      	ldrb	r3, [r3, #1]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <csp_route_security_check+0x68>
 8003010:	4906      	ldr	r1, [pc, #24]	; (800302c <csp_route_security_check+0x7c>)
 8003012:	2001      	movs	r0, #1
 8003014:	f7ff fada 	bl	80025cc <do_csp_debug>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 8003018:	2300      	movs	r3, #0

}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000004 	.word	0x20000004
 8003028:	0800e5e0 	.word	0x0800e5e0
 800302c:	0800e60c 	.word	0x0800e60c

08003030 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 8003030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003032:	b091      	sub	sp, #68	; 0x44
 8003034:	af06      	add	r7, sp, #24
 8003036:	6078      	str	r0, [r7, #4]
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fecf 	bl	8002de0 <csp_qfifo_read>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <csp_route_work+0x1e>
		return CSP_ERR_TIMEDOUT;
 8003048:	f06f 0302 	mvn.w	r3, #2
 800304c:	e172      	b.n	8003334 <csp_route_work+0x304>
	}

	packet = input.packet;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	613b      	str	r3, [r7, #16]
	if (packet == NULL) {
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <csp_route_work+0x2e>
		return CSP_ERR_TIMEDOUT;
 8003058:	f06f 0302 	mvn.w	r3, #2
 800305c:	e16a      	b.n	8003334 <csp_route_work+0x304>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 800305e:	4ba3      	ldr	r3, [pc, #652]	; (80032ec <csp_route_work+0x2bc>)
 8003060:	791b      	ldrb	r3, [r3, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d031      	beq.n	80030ca <csp_route_work+0x9a>
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	7bdb      	ldrb	r3, [r3, #15]
 800306a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461e      	mov	r6, r3
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	89db      	ldrh	r3, [r3, #14]
 8003076:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800307a:	b2db      	uxtb	r3, r3
 800307c:	469c      	mov	ip, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	7b5b      	ldrb	r3, [r3, #13]
 800308e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003092:	b2db      	uxtb	r3, r3
 8003094:	4619      	mov	r1, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	7bdb      	ldrb	r3, [r3, #15]
 800309a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4618      	mov	r0, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	7b1b      	ldrb	r3, [r3, #12]
 80030a6:	461c      	mov	r4, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	895b      	ldrh	r3, [r3, #10]
 80030ac:	461d      	mov	r5, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	9504      	str	r5, [sp, #16]
 80030b6:	9403      	str	r4, [sp, #12]
 80030b8:	9002      	str	r0, [sp, #8]
 80030ba:	9101      	str	r1, [sp, #4]
 80030bc:	9200      	str	r2, [sp, #0]
 80030be:	4663      	mov	r3, ip
 80030c0:	4632      	mov	r2, r6
 80030c2:	498b      	ldr	r1, [pc, #556]	; (80032f0 <csp_route_work+0x2c0>)
 80030c4:	2004      	movs	r0, #4
 80030c6:	f7ff fa81 	bl	80025cc <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	3201      	adds	r2, #1
 80030d0:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	895b      	ldrh	r3, [r3, #10]
 80030da:	4619      	mov	r1, r3
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	440a      	add	r2, r1
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	89db      	ldrh	r3, [r3, #14]
 80030e6:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <csp_route_work+0x2c4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d03a      	beq.n	800316c <csp_route_work+0x13c>
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	89db      	ldrh	r3, [r3, #14]
 80030fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f5b3 7ff8 	cmp.w	r3, #496	; 0x1f0
 8003104:	d032      	beq.n	800316c <csp_route_work+0x13c>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	89db      	ldrh	r3, [r3, #14]
 800310a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800310e:	b2db      	uxtb	r3, r3
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd3d 	bl	8003b90 <csp_rtable_find_route>
 8003116:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <csp_route_work+0x100>
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	d109      	bne.n	800313c <csp_route_work+0x10c>
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	7c9b      	ldrb	r3, [r3, #18]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <csp_route_work+0x10c>
			csp_buffer_free(packet);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe ff32 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 8003138:	2300      	movs	r3, #0
 800313a:	e0fb      	b.n	8003334 <csp_route_work+0x304>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 800313c:	6938      	ldr	r0, [r7, #16]
 800313e:	6939      	ldr	r1, [r7, #16]
 8003140:	2300      	movs	r3, #0
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	68c0      	ldr	r0, [r0, #12]
 8003146:	f7ff fc53 	bl	80029f0 <csp_send_direct>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <csp_route_work+0x138>
			csp_log_warn("Router failed to send");
 8003150:	4b66      	ldr	r3, [pc, #408]	; (80032ec <csp_route_work+0x2bc>)
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <csp_route_work+0x130>
 8003158:	4967      	ldr	r1, [pc, #412]	; (80032f8 <csp_route_work+0x2c8>)
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff fa36 	bl	80025cc <do_csp_debug>
			csp_buffer_free(packet);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fe ff1a 	bl	8001f9c <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 8003168:	2300      	movs	r3, #0
 800316a:	e0e3      	b.n	8003334 <csp_route_work+0x304>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fec8 	bl	8002f08 <csp_route_check_options>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <csp_route_work+0x15a>
		csp_buffer_free(packet);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fe ff0b 	bl	8001f9c <csp_buffer_free>
		return CSP_ERR_NONE;
 8003186:	2300      	movs	r3, #0
 8003188:	e0d4      	b.n	8003334 <csp_route_work+0x304>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8003192:	b2db      	uxtb	r3, r3
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fd13 	bl	8002bc0 <csp_port_get_socket>
 800319a:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d030      	beq.n	8003204 <csp_route_work+0x1d4>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d02a      	beq.n	8003204 <csp_route_work+0x1d4>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fefa 	bl	8002fb0 <csp_route_security_check>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	da05      	bge.n	80031ce <csp_route_work+0x19e>
			csp_buffer_free(packet);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fee9 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e0b2      	b.n	8003334 <csp_route_work+0x304>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	f107 0110 	add.w	r1, r7, #16
 80031d6:	2200      	movs	r2, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe fc3e 	bl	8001a5a <csp_queue_enqueue>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d00d      	beq.n	8003200 <csp_route_work+0x1d0>
			csp_log_error("Conn-less socket queue full");
 80031e4:	4b41      	ldr	r3, [pc, #260]	; (80032ec <csp_route_work+0x2bc>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <csp_route_work+0x1c4>
 80031ec:	4943      	ldr	r1, [pc, #268]	; (80032fc <csp_route_work+0x2cc>)
 80031ee:	2000      	movs	r0, #0
 80031f0:	f7ff f9ec 	bl	80025cc <do_csp_debug>
			csp_buffer_free(packet);
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fed0 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e099      	b.n	8003334 <csp_route_work+0x304>
		}
		return CSP_ERR_NONE;
 8003200:	2300      	movs	r3, #0
 8003202:	e097      	b.n	8003334 <csp_route_work+0x304>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	493d      	ldr	r1, [pc, #244]	; (8003300 <csp_route_work+0x2d0>)
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f862 	bl	80022d4 <csp_conn_find>
 8003210:	6278      	str	r0, [r7, #36]	; 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	2b00      	cmp	r3, #0
 8003216:	d177      	bne.n	8003308 <csp_route_work+0x2d8>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <csp_route_work+0x1fa>
			csp_buffer_free(packet);
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe febb 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 8003226:	2300      	movs	r3, #0
 8003228:	e084      	b.n	8003334 <csp_route_work+0x304>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4618      	mov	r0, r3
 8003234:	f7ff febc 	bl	8002fb0 <csp_route_security_check>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	da05      	bge.n	800324a <csp_route_work+0x21a>
			csp_buffer_free(packet);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4618      	mov	r0, r3
 8003242:	f7fe feab 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 8003246:	2300      	movs	r3, #0
 8003248:	e074      	b.n	8003334 <csp_route_work+0x304>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	7bdb      	ldrb	r3, [r3, #15]
 800324e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003252:	b2da      	uxtb	r2, r3
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	f362 1387 	bfi	r3, r2, #6, #2
 800325a:	73fb      	strb	r3, [r7, #15]
		idout.src   = csp_conf.address;
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <csp_route_work+0x2c4>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	b2da      	uxtb	r2, r3
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	f362 0345 	bfi	r3, r2, #1, #5
 800326c:	73fb      	strb	r3, [r7, #15]

		idout.dst   = packet->id.src;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	7bdb      	ldrb	r3, [r3, #15]
 8003272:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003276:	b2da      	uxtb	r2, r3
 8003278:	89fb      	ldrh	r3, [r7, #14]
 800327a:	f362 1308 	bfi	r3, r2, #4, #5
 800327e:	81fb      	strh	r3, [r7, #14]
		idout.dport = packet->id.sport;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	7b5b      	ldrb	r3, [r3, #13]
 8003284:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f362 3393 	bfi	r3, r2, #14, #6
 8003290:	60fb      	str	r3, [r7, #12]
		idout.sport = packet->id.dport;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800329a:	b2da      	uxtb	r2, r3
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	f362 0305 	bfi	r3, r2, #0, #6
 80032a2:	737b      	strb	r3, [r7, #13]
		idout.flags = packet->id.flags;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	7b1b      	ldrb	r3, [r3, #12]
 80032a8:	733b      	strb	r3, [r7, #12]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	68f9      	ldr	r1, [r7, #12]
 80032ae:	68d8      	ldr	r0, [r3, #12]
 80032b0:	f7ff f8f8 	bl	80024a4 <csp_conn_new>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24

		if (!conn) {
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <csp_route_work+0x2a8>
			csp_log_error("No more connections available");
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <csp_route_work+0x2bc>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <csp_route_work+0x29c>
 80032c4:	490f      	ldr	r1, [pc, #60]	; (8003304 <csp_route_work+0x2d4>)
 80032c6:	2000      	movs	r0, #0
 80032c8:	f7ff f980 	bl	80025cc <do_csp_debug>
			csp_buffer_free(packet);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fe64 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e02d      	b.n	8003334 <csp_route_work+0x304>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	619a      	str	r2, [r3, #24]
 80032e8:	e01e      	b.n	8003328 <csp_route_work+0x2f8>
 80032ea:	bf00      	nop
 80032ec:	20000004 	.word	0x20000004
 80032f0:	0800e668 	.word	0x0800e668
 80032f4:	2000032c 	.word	0x2000032c
 80032f8:	0800e6a8 	.word	0x0800e6a8
 80032fc:	0800e6c0 	.word	0x0800e6c0
 8003300:	3fffff00 	.word	0x3fffff00
 8003304:	0800e6dc 	.word	0x0800e6dc

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fe4d 	bl	8002fb0 <csp_route_security_check>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	da05      	bge.n	8003328 <csp_route_work+0x2f8>
			csp_buffer_free(packet);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fe3c 	bl	8001f9c <csp_buffer_free>
			return CSP_ERR_NONE;
 8003324:	2300      	movs	r3, #0
 8003326:	e005      	b.n	8003334 <csp_route_work+0x304>
		return CSP_ERR_NONE;
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4619      	mov	r1, r3
 800332c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800332e:	f000 fc91 	bl	8003c54 <csp_udp_new_packet>
	return CSP_ERR_NONE;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	372c      	adds	r7, #44	; 0x2c
 8003338:	46bd      	mov	sp, r7
 800333a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800333c <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	f7ff fe72 	bl	8003030 <csp_route_work>
 800334c:	e7fa      	b.n	8003344 <csp_task_router+0x8>
	...

08003350 <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af02      	add	r7, sp, #8
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 800335a:	2300      	movs	r3, #0
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	490c      	ldr	r1, [pc, #48]	; (8003398 <csp_route_start_task+0x48>)
 8003368:	480c      	ldr	r0, [pc, #48]	; (800339c <csp_route_start_task+0x4c>)
 800336a:	f7fe fc93 	bl	8001c94 <csp_thread_create>
 800336e:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <csp_route_start_task+0x50>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <csp_route_start_task+0x38>
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4908      	ldr	r1, [pc, #32]	; (80033a4 <csp_route_start_task+0x54>)
 8003382:	2000      	movs	r0, #0
 8003384:	f7ff f922 	bl	80025cc <do_csp_debug>
		return ret;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	e000      	b.n	800338e <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 800338c:	2300      	movs	r3, #0

}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	0800e6fc 	.word	0x0800e6fc
 800339c:	0800333d 	.word	0x0800333d
 80033a0:	20000004 	.word	0x20000004
 80033a4:	0800e700 	.word	0x0800e700

080033a8 <csp_can_rx>:
	/* Remaining CFP fragment(s) of a CSP packet */
	CFP_MORE = 1
};

int csp_can_rx(csp_iface_t *iface, uint32_t id, const uint8_t *data, uint8_t dlc, CSP_BASE_TYPE *task_woken)
{
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	70fb      	strb	r3, [r7, #3]
			return CSP_ERR_DRIVER;
		}
	}

	/* Bind incoming frame to a packet buffer */
	csp_can_pbuf_element_t * buf = csp_can_pbuf_find(id, CFP_ID_CONN_MASK, task_woken);
 80033b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033b8:	4989      	ldr	r1, [pc, #548]	; (80035e0 <csp_can_rx+0x238>)
 80033ba:	68b8      	ldr	r0, [r7, #8]
 80033bc:	f000 fad8 	bl	8003970 <csp_can_pbuf_find>
 80033c0:	6178      	str	r0, [r7, #20]
	if (buf == NULL) {
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11c      	bne.n	8003402 <csp_can_rx+0x5a>
		if (CFP_TYPE(id) == CFP_BEGIN) {
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10f      	bne.n	80033f2 <csp_can_rx+0x4a>
			buf = csp_can_pbuf_new(id, task_woken);
 80033d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	f000 fa4b 	bl	8003870 <csp_can_pbuf_new>
 80033da:	6178      	str	r0, [r7, #20]
			if (buf == NULL) {
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <csp_can_rx+0x5a>
				//csp_log_warn("No available packet buffer for CAN");
				iface->rx_error++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]
				return CSP_ERR_NOMEM;
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
 80033f0:	e0f1      	b.n	80035d6 <csp_can_rx+0x22e>
			}
		} else {
			//csp_log_warn("Out of order id 0x%X remain %u", CFP_ID(id), CFP_REMAIN(id));
			iface->frame++;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
			return CSP_ERR_INVAL;
 80033fc:	f06f 0301 	mvn.w	r3, #1
 8003400:	e0e9      	b.n	80035d6 <csp_can_rx+0x22e>
		}
	}

	/* Reset frame data offset */
	uint8_t offset = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	74fb      	strb	r3, [r7, #19]

	switch (CFP_TYPE(id)) {
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	0c9b      	lsrs	r3, r3, #18
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <csp_can_rx+0x70>
 8003412:	2b01      	cmp	r3, #1
 8003414:	d07a      	beq.n	800350c <csp_can_rx+0x164>
 8003416:	e0d7      	b.n	80035c8 <csp_can_rx+0x220>

	case CFP_BEGIN:

		/* Discard packet if DLC is less than CSP id + CSP length fields */
		if (dlc < (sizeof(csp_id_t) + sizeof(uint16_t))) {
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d809      	bhi.n	8003432 <csp_can_rx+0x8a>
			//csp_log_warn("Short BEGIN frame received");
			iface->frame++;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8003428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f000 f9f2 	bl	8003814 <csp_can_pbuf_free>
			break;
 8003430:	e0d0      	b.n	80035d4 <csp_can_rx+0x22c>
		}

		/* Check for incomplete frame */
		if (buf->packet != NULL) {
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <csp_can_rx+0x9e>
			/* Reuse the buffer */
			//csp_log_warn("Incomplete frame");
			iface->frame++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	62da      	str	r2, [r3, #44]	; 0x2c
 8003444:	e01b      	b.n	800347e <csp_can_rx+0xd6>
		} else {
			/* Get free buffer for frame */
			buf->packet = task_woken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8003446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <csp_can_rx+0xae>
 800344c:	2000      	movs	r0, #0
 800344e:	f7fe fcd7 	bl	8001e00 <csp_buffer_get_isr>
 8003452:	4603      	mov	r3, r0
 8003454:	e003      	b.n	800345e <csp_can_rx+0xb6>
 8003456:	2000      	movs	r0, #0
 8003458:	f7fe fd04 	bl	8001e64 <csp_buffer_get>
 800345c:	4603      	mov	r3, r0
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	60d3      	str	r3, [r2, #12]
			if (buf->packet == NULL) {
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <csp_can_rx+0xd6>
				//csp_log_error("Failed to get buffer for CSP_BEGIN packet");
				iface->frame++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
				csp_can_pbuf_free(buf, task_woken);
 8003474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f000 f9cc 	bl	8003814 <csp_can_pbuf_free>
				break;
 800347c:	e0aa      	b.n	80035d4 <csp_can_rx+0x22c>
			}
		}

		/* Copy CSP identifier (header) */
		memcpy(&(buf->packet->id), data, sizeof(buf->packet->id));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	330c      	adds	r3, #12
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6812      	ldr	r2, [r2, #0]
 8003488:	601a      	str	r2, [r3, #0]
		buf->packet->id.ext = csp_ntoh32(buf->packet->id.ext);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	68dc      	ldr	r4, [r3, #12]
 8003494:	4610      	mov	r0, r2
 8003496:	f7ff f93f 	bl	8002718 <csp_ntoh32>
 800349a:	4603      	mov	r3, r0
 800349c:	60e3      	str	r3, [r4, #12]

		/* Copy CSP length (of data) */
		memcpy(&(buf->packet->length), data + sizeof(csp_id_t), sizeof(buf->packet->length));
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	330a      	adds	r3, #10
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	3204      	adds	r2, #4
 80034a8:	8812      	ldrh	r2, [r2, #0]
 80034aa:	b292      	uxth	r2, r2
 80034ac:	801a      	strh	r2, [r3, #0]
		buf->packet->length = csp_ntoh16(buf->packet->length);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	895a      	ldrh	r2, [r3, #10]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	68dc      	ldr	r4, [r3, #12]
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7ff f906 	bl	80026ca <csp_ntoh16>
 80034be:	4603      	mov	r3, r0
 80034c0:	8163      	strh	r3, [r4, #10]

		/* Check length against max */
		if ((buf->packet->length > MAX_CAN_DATA_SIZE) || (buf->packet->length > csp_buffer_data_size())) {
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	895b      	ldrh	r3, [r3, #10]
 80034c8:	f240 72fa 	movw	r2, #2042	; 0x7fa
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d808      	bhi.n	80034e2 <csp_can_rx+0x13a>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	895b      	ldrh	r3, [r3, #10]
 80034d6:	461c      	mov	r4, r3
 80034d8:	f7fe fde4 	bl	80020a4 <csp_buffer_data_size>
 80034dc:	4603      	mov	r3, r0
 80034de:	429c      	cmp	r4, r3
 80034e0:	d909      	bls.n	80034f6 <csp_can_rx+0x14e>
			iface->rx_error++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	621a      	str	r2, [r3, #32]
			csp_can_pbuf_free(buf, task_woken);
 80034ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f000 f990 	bl	8003814 <csp_can_pbuf_free>
			break;
 80034f4:	e06e      	b.n	80035d4 <csp_can_rx+0x22c>
		}

		/* Reset RX count */
		buf->rx_count = 0;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	801a      	strh	r2, [r3, #0]

		/* Set offset to prevent CSP header from being copied to CSP data */
		offset = sizeof(csp_id_t) + sizeof(uint16_t);
 80034fc:	2306      	movs	r3, #6
 80034fe:	74fb      	strb	r3, [r7, #19]

		/* Set remain field - increment to include begin packet */
		buf->remain = CFP_REMAIN(id) + 1;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	b2db      	uxtb	r3, r3
 8003506:	1c5a      	adds	r2, r3, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	605a      	str	r2, [r3, #4]
		/* FALLTHROUGH */

	case CFP_MORE:

		/* Check 'remain' field match */
		if (CFP_REMAIN(id) != buf->remain - 1) {
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0a9b      	lsrs	r3, r3, #10
 8003510:	b2da      	uxtb	r2, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	429a      	cmp	r2, r3
 800351a:	d009      	beq.n	8003530 <csp_can_rx+0x188>
			//csp_log_error("CAN frame lost in CSP packet");
			csp_can_pbuf_free(buf, task_woken);
 800351c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800351e:	6978      	ldr	r0, [r7, #20]
 8003520:	f000 f978 	bl	8003814 <csp_can_pbuf_free>
			iface->frame++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 800352e:	e051      	b.n	80035d4 <csp_can_rx+0x22c>
		}

		/* Decrement remaining frames */
		buf->remain--;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	1e5a      	subs	r2, r3, #1
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

		/* Check for overflow */
		if ((buf->rx_count + dlc - offset) > buf->packet->length) {
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	461a      	mov	r2, r3
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	441a      	add	r2, r3
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	68d2      	ldr	r2, [r2, #12]
 800354c:	8952      	ldrh	r2, [r2, #10]
 800354e:	4293      	cmp	r3, r2
 8003550:	dd09      	ble.n	8003566 <csp_can_rx+0x1be>
			//csp_log_error("RX buffer overflow");
			iface->frame++;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
			csp_can_pbuf_free(buf, task_woken);
 800355c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800355e:	6978      	ldr	r0, [r7, #20]
 8003560:	f000 f958 	bl	8003814 <csp_can_pbuf_free>
			break;
 8003564:	e036      	b.n	80035d4 <csp_can_rx+0x22c>
		}

		/* Copy dlc bytes into buffer */
		memcpy(&buf->packet->data[buf->rx_count], data + offset, dlc - offset);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	3310      	adds	r3, #16
 8003570:	18d0      	adds	r0, r2, r3
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	18d1      	adds	r1, r2, r3
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	7cfb      	ldrb	r3, [r7, #19]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	461a      	mov	r2, r3
 8003580:	f006 ff47 	bl	800a412 <memcpy>
		buf->rx_count += dlc - offset;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	b299      	uxth	r1, r3
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	b29b      	uxth	r3, r3
 8003590:	1acb      	subs	r3, r1, r3
 8003592:	b29b      	uxth	r3, r3
 8003594:	4413      	add	r3, r2
 8003596:	b29a      	uxth	r2, r3
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	801a      	strh	r2, [r3, #0]

		/* Check if more data is expected */
		if (buf->rx_count != buf->packet->length)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	881a      	ldrh	r2, [r3, #0]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	895b      	ldrh	r3, [r3, #10]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d113      	bne.n	80035d2 <csp_can_rx+0x22a>
			break;

		/* Data is available */
		csp_qfifo_write(buf->packet, iface, task_woken);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fc2e 	bl	8002e14 <csp_qfifo_write>

		/* Drop packet buffer reference */
		buf->packet = NULL;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]

		/* Free packet buffer */
		csp_can_pbuf_free(buf, task_woken);
 80035be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035c0:	6978      	ldr	r0, [r7, #20]
 80035c2:	f000 f927 	bl	8003814 <csp_can_pbuf_free>

		break;
 80035c6:	e005      	b.n	80035d4 <csp_can_rx+0x22c>

	default:
		//csp_log_warn("Received unknown CFP message type");
		csp_can_pbuf_free(buf, task_woken);
 80035c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f000 f922 	bl	8003814 <csp_can_pbuf_free>
		break;
 80035d0:	e000      	b.n	80035d4 <csp_can_rx+0x22c>
			break;
 80035d2:	bf00      	nop
	}

	return CSP_ERR_NONE;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}
 80035de:	bf00      	nop
 80035e0:	1ff803ff 	.word	0x1ff803ff

080035e4 <csp_can_tx>:

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet)
{
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b08f      	sub	sp, #60	; 0x3c
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
        csp_iface_t * iface = ifroute->iface;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
        csp_can_interface_data_t * ifdata = iface->interface_data;
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003602:	6011      	str	r1, [r2, #0]
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
        if (packet->length > MAX_CAN_DATA_SIZE) {
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	895b      	ldrh	r3, [r3, #10]
 800360a:	f240 72fa 	movw	r2, #2042	; 0x7fa
 800360e:	4293      	cmp	r3, r2
 8003610:	d902      	bls.n	8003618 <csp_can_tx+0x34>
		return CSP_ERR_TX;
 8003612:	f06f 0309 	mvn.w	r3, #9
 8003616:	e0bf      	b.n	8003798 <csp_can_tx+0x1b4>
        }

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	791b      	ldrb	r3, [r3, #4]
 800361c:	2bff      	cmp	r3, #255	; 0xff
 800361e:	d002      	beq.n	8003626 <csp_can_tx+0x42>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	791b      	ldrb	r3, [r3, #4]
 8003624:	e004      	b.n	8003630 <csp_can_tx+0x4c>
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	89db      	ldrh	r3, [r3, #14]
 800362a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	7bdb      	ldrb	r3, [r3, #15]
 8003638:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	061a      	lsls	r2, r3, #24
                       CFP_MAKE_DST(dest) |
 8003640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003644:	04db      	lsls	r3, r3, #19
 8003646:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800364a:	431a      	orrs	r2, r3
                       CFP_MAKE_ID(ident) |
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003652:	431a      	orrs	r2, r3
                       CFP_MAKE_TYPE(CFP_BEGIN) |
                       CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	895b      	ldrh	r3, [r3, #10]
 8003658:	3305      	adds	r3, #5
 800365a:	08db      	lsrs	r3, r3, #3
 800365c:	029b      	lsls	r3, r3, #10
 800365e:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8003662:	4313      	orrs	r3, r2
 8003664:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 8003666:	2302      	movs	r3, #2
 8003668:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	895a      	ldrh	r2, [r3, #10]
 800366e:	7ffb      	ldrb	r3, [r7, #31]
 8003670:	b29b      	uxth	r3, r3
 8003672:	429a      	cmp	r2, r3
 8003674:	d803      	bhi.n	800367e <csp_can_tx+0x9a>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	895b      	ldrh	r3, [r3, #10]
 800367a:	b2db      	uxtb	r3, r3
 800367c:	e000      	b.n	8003680 <csp_can_tx+0x9c>
 800367e:	7ffb      	ldrb	r3, [r7, #31]
 8003680:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f82d 	bl	80026e6 <csp_hton32>
 800368c:	4603      	mov	r3, r0
 800368e:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	895b      	ldrh	r3, [r3, #10]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f803 	bl	80026a0 <csp_hton16>
 800369a:	4603      	mov	r3, r0
 800369c:	827b      	strh	r3, [r7, #18]
 800369e:	697b      	ldr	r3, [r7, #20]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 80036a0:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 80036a2:	f107 0308 	add.w	r3, r7, #8
 80036a6:	3304      	adds	r3, #4
 80036a8:	8a7a      	ldrh	r2, [r7, #18]
 80036aa:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 80036ac:	f107 0308 	add.w	r3, r7, #8
 80036b0:	3306      	adds	r3, #6
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	f102 0110 	add.w	r1, r2, #16
 80036b8:	7fba      	ldrb	r2, [r7, #30]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f006 fea9 	bl	800a412 <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 80036c0:	7fbb      	ldrb	r3, [r7, #30]
 80036c2:	86fb      	strh	r3, [r7, #54]	; 0x36

        const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	6898      	ldr	r0, [r3, #8]
 80036ce:	7fbb      	ldrb	r3, [r7, #30]
 80036d0:	3306      	adds	r3, #6
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f107 0208 	add.w	r2, r7, #8
 80036d8:	69bc      	ldr	r4, [r7, #24]
 80036da:	6a39      	ldr	r1, [r7, #32]
 80036dc:	47a0      	blx	r4
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d050      	beq.n	8003786 <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 80036ee:	f06f 030a 	mvn.w	r3, #10
 80036f2:	e051      	b.n	8003798 <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	895b      	ldrh	r3, [r3, #10]
 80036f8:	461a      	mov	r2, r3
 80036fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b08      	cmp	r3, #8
 8003700:	bfa8      	it	ge
 8003702:	2308      	movge	r3, #8
 8003704:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	7bdb      	ldrb	r3, [r3, #15]
 800370a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	061a      	lsls	r2, r3, #24
                      CFP_MAKE_DST(dest) |
 8003712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003716:	04db      	lsls	r3, r3, #19
 8003718:	f403 0378 	and.w	r3, r3, #16252928	; 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 800371c:	431a      	orrs	r2, r3
                      CFP_MAKE_ID(ident) |
 800371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003720:	f3c3 0309 	ubfx	r3, r3, #0, #10
                      CFP_MAKE_DST(dest) |
 8003724:	431a      	orrs	r2, r3
                      CFP_MAKE_TYPE(CFP_MORE) |
                      CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	895b      	ldrh	r3, [r3, #10]
 800372a:	4619      	mov	r1, r3
 800372c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800372e:	1ac9      	subs	r1, r1, r3
 8003730:	7fbb      	ldrb	r3, [r7, #30]
 8003732:	1acb      	subs	r3, r1, r3
 8003734:	3307      	adds	r3, #7
 8003736:	2b00      	cmp	r3, #0
 8003738:	da00      	bge.n	800373c <csp_can_tx+0x158>
 800373a:	3307      	adds	r3, #7
 800373c:	10db      	asrs	r3, r3, #3
 800373e:	029b      	lsls	r3, r3, #10
 8003740:	f403 337f 	and.w	r3, r3, #261120	; 0x3fc00
                      CFP_MAKE_TYPE(CFP_MORE) |
 8003744:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 8003746:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374a:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 800374c:	7fbb      	ldrb	r3, [r7, #30]
 800374e:	b29a      	uxth	r2, r3
 8003750:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003752:	4413      	add	r3, r2
 8003754:	86fb      	strh	r3, [r7, #54]	; 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 8003756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003758:	6898      	ldr	r0, [r3, #8]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	f103 0210 	add.w	r2, r3, #16
 8003760:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003762:	7fbb      	ldrb	r3, [r7, #30]
 8003764:	1acb      	subs	r3, r1, r3
 8003766:	441a      	add	r2, r3
 8003768:	7fbb      	ldrb	r3, [r7, #30]
 800376a:	69bc      	ldr	r4, [r7, #24]
 800376c:	6a39      	ldr	r1, [r7, #32]
 800376e:	47a0      	blx	r4
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d007      	beq.n	8003786 <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 8003780:	f06f 030a 	mvn.w	r3, #10
 8003784:	e008      	b.n	8003798 <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	895b      	ldrh	r3, [r3, #10]
 800378a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800378c:	429a      	cmp	r2, r3
 800378e:	d3b1      	bcc.n	80036f4 <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 8003790:	6838      	ldr	r0, [r7, #0]
 8003792:	f7fe fc03 	bl	8001f9c <csp_buffer_free>

	return CSP_ERR_NONE;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	373c      	adds	r7, #60	; 0x3c
 800379c:	46bd      	mov	sp, r7
 800379e:	bd90      	pop	{r4, r7, pc}

080037a0 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <csp_can_add_interface+0x1e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <csp_can_add_interface+0x1e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d102      	bne.n	80037c4 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 80037be:	f06f 0301 	mvn.w	r3, #1
 80037c2:	e021      	b.n	8003808 <csp_can_add_interface+0x68>
	}

        csp_can_interface_data_t * ifdata = iface->interface_data;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d102      	bne.n	80037d8 <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 80037d2:	f06f 0301 	mvn.w	r3, #1
 80037d6:	e017      	b.n	8003808 <csp_can_add_interface+0x68>
	}

        if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	8a1b      	ldrh	r3, [r3, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <csp_can_add_interface+0x4c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8a1b      	ldrh	r3, [r3, #16]
 80037e4:	f240 72fa 	movw	r2, #2042	; 0x7fa
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d903      	bls.n	80037f4 <csp_can_add_interface+0x54>
            iface->mtu = MAX_CAN_DATA_SIZE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f240 72fa 	movw	r2, #2042	; 0x7fa
 80037f2:	821a      	strh	r2, [r3, #16]
        }

        ifdata->cfp_frame_id = 0;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a04      	ldr	r2, [pc, #16]	; (8003810 <csp_can_add_interface+0x70>)
 80037fe:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fe ff95 	bl	8002730 <csp_iflist_add>
 8003806:	4603      	mov	r3, r0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	080035e5 	.word	0x080035e5

08003814 <csp_can_pbuf_free>:
#define PBUF_TIMEOUT_MS		1000

static csp_can_pbuf_element_t csp_can_pbuf[PBUF_ELEMENTS] = {};

int csp_can_pbuf_free(csp_can_pbuf_element_t *buf, CSP_BASE_TYPE *task_woken)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
	/* Free CSP packet */
	if (buf->packet != NULL) {
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <csp_can_pbuf_free+0x2e>
		if (task_woken == NULL) {
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d105      	bne.n	8003838 <csp_can_pbuf_free+0x24>
			csp_buffer_free(buf->packet);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fbb3 	bl	8001f9c <csp_buffer_free>
 8003836:	e004      	b.n	8003842 <csp_can_pbuf_free+0x2e>
		} else {
			csp_buffer_free_isr(buf->packet);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fb73 	bl	8001f28 <csp_buffer_free_isr>
		}
	}

	/* Mark buffer element free */
	buf->packet = NULL;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	60da      	str	r2, [r3, #12]
	buf->rx_count = 0;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	801a      	strh	r2, [r3, #0]
	buf->cfpid = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
	buf->last_used = 0;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	615a      	str	r2, [r3, #20]
	buf->remain = 0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	605a      	str	r2, [r3, #4]
	buf->state = BUF_FREE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	741a      	strb	r2, [r3, #16]

	return CSP_ERR_NONE;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <csp_can_pbuf_new>:

csp_can_pbuf_element_t *csp_can_pbuf_new(uint32_t id, CSP_BASE_TYPE *task_woken)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
	uint32_t now = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <csp_can_pbuf_new+0x18>
 8003880:	f7fe fa34 	bl	8001cec <csp_get_ms_isr>
 8003884:	4603      	mov	r3, r0
 8003886:	e002      	b.n	800388e <csp_can_pbuf_new+0x1e>
 8003888:	f7fe fa29 	bl	8001cde <csp_get_ms>
 800388c:	4603      	mov	r3, r0
 800388e:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8003890:	2300      	movs	r3, #0
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e061      	b.n	800395a <csp_can_pbuf_new+0xea>

		/* Perform cleanup in used pbufs */
		if (csp_can_pbuf[i].state == BUF_USED) {
 8003896:	4935      	ldr	r1, [pc, #212]	; (800396c <csp_can_pbuf_new+0xfc>)
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	440b      	add	r3, r1
 80038a4:	3310      	adds	r3, #16
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d118      	bne.n	80038de <csp_can_pbuf_new+0x6e>
			if (now - csp_can_pbuf[i].last_used > PBUF_TIMEOUT_MS)
 80038ac:	492f      	ldr	r1, [pc, #188]	; (800396c <csp_can_pbuf_new+0xfc>)
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	4613      	mov	r3, r2
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	440b      	add	r3, r1
 80038ba:	3314      	adds	r3, #20
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038c6:	d90a      	bls.n	80038de <csp_can_pbuf_new+0x6e>
				csp_can_pbuf_free(&csp_can_pbuf[i], task_woken);
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4a26      	ldr	r2, [pc, #152]	; (800396c <csp_can_pbuf_new+0xfc>)
 80038d4:	4413      	add	r3, r2
 80038d6:	6839      	ldr	r1, [r7, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff9b 	bl	8003814 <csp_can_pbuf_free>
		}

		if (csp_can_pbuf[i].state == BUF_FREE) {
 80038de:	4923      	ldr	r1, [pc, #140]	; (800396c <csp_can_pbuf_new+0xfc>)
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3310      	adds	r3, #16
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d12f      	bne.n	8003954 <csp_can_pbuf_new+0xe4>
			csp_can_pbuf[i].state = BUF_USED;
 80038f4:	491d      	ldr	r1, [pc, #116]	; (800396c <csp_can_pbuf_new+0xfc>)
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3310      	adds	r3, #16
 8003904:	2201      	movs	r2, #1
 8003906:	701a      	strb	r2, [r3, #0]
			csp_can_pbuf[i].cfpid = id;
 8003908:	4918      	ldr	r1, [pc, #96]	; (800396c <csp_can_pbuf_new+0xfc>)
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4613      	mov	r3, r2
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	440b      	add	r3, r1
 8003916:	3308      	adds	r3, #8
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].remain = 0;
 800391c:	4913      	ldr	r1, [pc, #76]	; (800396c <csp_can_pbuf_new+0xfc>)
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	3304      	adds	r3, #4
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].last_used = now;
 8003930:	490e      	ldr	r1, [pc, #56]	; (800396c <csp_can_pbuf_new+0xfc>)
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	3314      	adds	r3, #20
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4a07      	ldr	r2, [pc, #28]	; (800396c <csp_can_pbuf_new+0xfc>)
 8003950:	4413      	add	r3, r2
 8003952:	e006      	b.n	8003962 <csp_can_pbuf_new+0xf2>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	3301      	adds	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b04      	cmp	r3, #4
 800395e:	dd9a      	ble.n	8003896 <csp_can_pbuf_new+0x26>
		}

	}

	return NULL;
 8003960:	2300      	movs	r3, #0

}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000354 	.word	0x20000354

08003970 <csp_can_pbuf_find>:

csp_can_pbuf_element_t *csp_can_pbuf_find(uint32_t id, uint32_t mask, CSP_BASE_TYPE *task_woken)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	e037      	b.n	80039f2 <csp_can_pbuf_find+0x82>
		if ((csp_can_pbuf[i].state == BUF_USED) && ((csp_can_pbuf[i].cfpid & mask) == (id & mask))) {
 8003982:	4920      	ldr	r1, [pc, #128]	; (8003a04 <csp_can_pbuf_find+0x94>)
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4613      	mov	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	3310      	adds	r3, #16
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d129      	bne.n	80039ec <csp_can_pbuf_find+0x7c>
 8003998:	491a      	ldr	r1, [pc, #104]	; (8003a04 <csp_can_pbuf_find+0x94>)
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	3308      	adds	r3, #8
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	405a      	eors	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d11a      	bne.n	80039ec <csp_can_pbuf_find+0x7c>
			csp_can_pbuf[i].last_used = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <csp_can_pbuf_find+0x54>
 80039bc:	f7fe f996 	bl	8001cec <csp_get_ms_isr>
 80039c0:	4602      	mov	r2, r0
 80039c2:	e002      	b.n	80039ca <csp_can_pbuf_find+0x5a>
 80039c4:	f7fe f98b 	bl	8001cde <csp_get_ms>
 80039c8:	4602      	mov	r2, r0
 80039ca:	480e      	ldr	r0, [pc, #56]	; (8003a04 <csp_can_pbuf_find+0x94>)
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	460b      	mov	r3, r1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	440b      	add	r3, r1
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	4403      	add	r3, r0
 80039d8:	3314      	adds	r3, #20
 80039da:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <csp_can_pbuf_find+0x94>)
 80039e8:	4413      	add	r3, r2
 80039ea:	e006      	b.n	80039fa <csp_can_pbuf_find+0x8a>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	3301      	adds	r3, #1
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	ddc4      	ble.n	8003982 <csp_can_pbuf_find+0x12>
		}
	}
	return NULL;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000354 	.word	0x20000354

08003a08 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	89db      	ldrh	r3, [r3, #14]
 8003a16:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <csp_lo_tx+0x3c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d004      	beq.n	8003a30 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 8003a26:	6838      	ldr	r0, [r7, #0]
 8003a28:	f7fe fab8 	bl	8001f9c <csp_buffer_free>
		return CSP_ERR_NONE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e005      	b.n	8003a3c <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8003a30:	2200      	movs	r2, #0
 8003a32:	4905      	ldr	r1, [pc, #20]	; (8003a48 <csp_lo_tx+0x40>)
 8003a34:	6838      	ldr	r0, [r7, #0]
 8003a36:	f7ff f9ed 	bl	8002e14 <csp_qfifo_write>

	return CSP_ERR_NONE;
 8003a3a:	2300      	movs	r3, #0

}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2000032c 	.word	0x2000032c
 8003a48:	2000000c 	.word	0x2000000c

08003a4c <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af04      	add	r7, sp, #16
 8003a52:	603a      	str	r2, [r7, #0]
 8003a54:	461a      	mov	r2, r3
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	71bb      	strb	r3, [r7, #6]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 8003a62:	79fb      	ldrb	r3, [r7, #7]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d103      	bne.n	8003a70 <csp_rtable_set+0x24>
		netmask = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	71bb      	strb	r3, [r7, #6]
		address = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2b1f      	cmp	r3, #31
 8003a74:	d902      	bls.n	8003a7c <csp_rtable_set+0x30>
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2bff      	cmp	r3, #255	; 0xff
 8003a7a:	d105      	bne.n	8003a88 <csp_rtable_set+0x3c>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <csp_rtable_set+0x3c>
 8003a82:	79bb      	ldrb	r3, [r7, #6]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d91b      	bls.n	8003ac0 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 8003a88:	4b13      	ldr	r3, [pc, #76]	; (8003ad8 <csp_rtable_set+0x8c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d014      	beq.n	8003aba <csp_rtable_set+0x6e>
 8003a90:	79f8      	ldrb	r0, [r7, #7]
 8003a92:	79ba      	ldrb	r2, [r7, #6]
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <csp_rtable_set+0x54>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	e000      	b.n	8003aa2 <csp_rtable_set+0x56>
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <csp_rtable_set+0x90>)
 8003aa2:	7979      	ldrb	r1, [r7, #5]
 8003aa4:	9103      	str	r1, [sp, #12]
 8003aa6:	9302      	str	r3, [sp, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	9200      	str	r2, [sp, #0]
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <csp_rtable_set+0x94>)
 8003ab2:	490c      	ldr	r1, [pc, #48]	; (8003ae4 <csp_rtable_set+0x98>)
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	f7fe fd89 	bl	80025cc <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 8003aba:	f06f 0301 	mvn.w	r3, #1
 8003abe:	e006      	b.n	8003ace <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 8003ac0:	797b      	ldrb	r3, [r7, #5]
 8003ac2:	79b9      	ldrb	r1, [r7, #6]
 8003ac4:	79f8      	ldrb	r0, [r7, #7]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	f000 f878 	bl	8003bbc <csp_rtable_set_internal>
 8003acc:	4603      	mov	r3, r0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000004 	.word	0x20000004
 8003adc:	0800e7a0 	.word	0x0800e7a0
 8003ae0:	0800e8e4 	.word	0x0800e8e4
 8003ae4:	0800e7a4 	.word	0x0800e7a4

08003ae8 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	460b      	mov	r3, r1
 8003af4:	71bb      	strb	r3, [r7, #6]
 8003af6:	4613      	mov	r3, r2
 8003af8:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 8003b02:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <csp_rtable_find+0xa4>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]
	while(i) {
 8003b08:	e036      	b.n	8003b78 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	7a1b      	ldrb	r3, [r3, #8]
 8003b0e:	79fa      	ldrb	r2, [r7, #7]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d107      	bne.n	8003b24 <csp_rtable_find+0x3c>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	7a5b      	ldrb	r3, [r3, #9]
 8003b18:	79ba      	ldrb	r2, [r7, #6]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d102      	bne.n	8003b24 <csp_rtable_find+0x3c>
			best_result = i;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	617b      	str	r3, [r7, #20]
			break;
 8003b22:	e02c      	b.n	8003b7e <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 8003b24:	797b      	ldrb	r3, [r7, #5]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d123      	bne.n	8003b72 <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	7a5b      	ldrb	r3, [r3, #9]
 8003b2e:	f1c3 0305 	rsb	r3, r3, #5
 8003b32:	2201      	movs	r2, #1
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	43db      	mvns	r3, r3
 8003b42:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	7a1a      	ldrb	r2, [r3, #8]
 8003b48:	7abb      	ldrb	r3, [r7, #10]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 8003b4e:	79fa      	ldrb	r2, [r7, #7]
 8003b50:	7abb      	ldrb	r3, [r7, #10]
 8003b52:	4013      	ands	r3, r2
 8003b54:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 8003b56:	7a7a      	ldrb	r2, [r7, #9]
 8003b58:	7a3b      	ldrb	r3, [r7, #8]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d109      	bne.n	8003b72 <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	7a5b      	ldrb	r3, [r3, #9]
 8003b62:	7cfa      	ldrb	r2, [r7, #19]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d804      	bhi.n	8003b72 <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	7a5b      	ldrb	r3, [r3, #9]
 8003b70:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	60fb      	str	r3, [r7, #12]
	while(i) {
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1c5      	bne.n	8003b0a <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 8003b7e:	697b      	ldr	r3, [r7, #20]

}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	200003cc 	.word	0x200003cc

08003b90 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2105      	movs	r1, #5
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff ffa1 	bl	8003ae8 <csp_rtable_find>
 8003ba6:	60f8      	str	r0, [r7, #12]
    if (entry) {
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <csp_rtable_find_route+0x22>
	return &entry->route;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	e000      	b.n	8003bb4 <csp_rtable_find_route+0x24>
    }
    return NULL;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	603a      	str	r2, [r7, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	71bb      	strb	r3, [r7, #6]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 8003bd2:	79b9      	ldrb	r1, [r7, #6]
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff85 	bl	8003ae8 <csp_rtable_find>
 8003bde:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d122      	bne.n	8003c2c <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 8003be6:	2010      	movs	r0, #16
 8003be8:	f7fd feea 	bl	80019c0 <csp_malloc>
 8003bec:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 8003bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf8:	e025      	b.n	8003c46 <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <csp_rtable_set_internal+0x94>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 8003c08:	4a11      	ldr	r2, [pc, #68]	; (8003c50 <csp_rtable_set_internal+0x94>)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e00d      	b.n	8003c2c <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 8003c10:	4b0f      	ldr	r3, [pc, #60]	; (8003c50 <csp_rtable_set_internal+0x94>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8003c16:	e002      	b.n	8003c1e <csp_rtable_set_internal+0x62>
				i = i->next;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f8      	bne.n	8003c18 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	79fa      	ldrb	r2, [r7, #7]
 8003c30:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	79ba      	ldrb	r2, [r7, #6]
 8003c36:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	797a      	ldrb	r2, [r7, #5]
 8003c42:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200003cc 	.word	0x200003cc

08003c54 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6839      	ldr	r1, [r7, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fa36 	bl	80020d4 <csp_conn_enqueue_packet>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	da0b      	bge.n	8003c86 <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <csp_udp_new_packet+0x74>)
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <csp_udp_new_packet+0x2a>
 8003c76:	4915      	ldr	r1, [pc, #84]	; (8003ccc <csp_udp_new_packet+0x78>)
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f7fe fca7 	bl	80025cc <do_csp_debug>
		csp_buffer_free(packet);
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f7fe f98c 	bl	8001f9c <csp_buffer_free>
		return;
 8003c84:	e01d      	b.n	8003cc2 <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d019      	beq.n	8003cc2 <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	1d39      	adds	r1, r7, #4
 8003c94:	2200      	movs	r2, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fd fedf 	bl	8001a5a <csp_queue_enqueue>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d00c      	beq.n	8003cbc <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <csp_udp_new_packet+0x74>)
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <csp_udp_new_packet+0x5e>
 8003caa:	4909      	ldr	r1, [pc, #36]	; (8003cd0 <csp_udp_new_packet+0x7c>)
 8003cac:	2001      	movs	r0, #1
 8003cae:	f7fe fc8d 	bl	80025cc <do_csp_debug>
			csp_close(conn);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fc14 	bl	80024e2 <csp_close>
			return;
 8003cba:	e002      	b.n	8003cc2 <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	611a      	str	r2, [r3, #16]
	}

}
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20000004 	.word	0x20000004
 8003ccc:	0800e824 	.word	0x0800e824
 8003cd0:	0800e844 	.word	0x0800e844

08003cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_Init+0x40>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <HAL_Init+0x40>)
 8003cde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <HAL_Init+0x40>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_Init+0x40>)
 8003cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <HAL_Init+0x40>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <HAL_Init+0x40>)
 8003cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cfc:	2003      	movs	r0, #3
 8003cfe:	f000 ff3a 	bl	8004b76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d02:	200f      	movs	r0, #15
 8003d04:	f7fd fca6 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d08:	f7fd fc28 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40023c00 	.word	0x40023c00

08003d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_IncTick+0x20>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_IncTick+0x24>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4413      	add	r3, r2
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_IncTick+0x24>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	20000050 	.word	0x20000050
 8003d3c:	200003d0 	.word	0x200003d0

08003d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  return uwTick;
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_GetTick+0x14>)
 8003d46:	681b      	ldr	r3, [r3, #0]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	200003d0 	.word	0x200003d0

08003d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0ed      	b.n	8003f46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fc1c 	bl	80015b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d8c:	f7ff ffd8 	bl	8003d40 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d92:	e012      	b.n	8003dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d94:	f7ff ffd4 	bl	8003d40 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b0a      	cmp	r3, #10
 8003da0:	d90b      	bls.n	8003dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2205      	movs	r2, #5
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0c5      	b.n	8003f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0e5      	beq.n	8003d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0202 	bic.w	r2, r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd8:	f7ff ffb2 	bl	8003d40 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dde:	e012      	b.n	8003e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003de0:	f7ff ffae 	bl	8003d40 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b0a      	cmp	r3, #10
 8003dec:	d90b      	bls.n	8003e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e09f      	b.n	8003f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e1b      	ldrb	r3, [r3, #24]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d108      	bne.n	8003e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e007      	b.n	8003e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7e5b      	ldrb	r3, [r3, #25]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e007      	b.n	8003e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7e9b      	ldrb	r3, [r3, #26]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d108      	bne.n	8003e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e007      	b.n	8003e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0220 	bic.w	r2, r2, #32
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7edb      	ldrb	r3, [r3, #27]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0210 	bic.w	r2, r2, #16
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0210 	orr.w	r2, r2, #16
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7f1b      	ldrb	r3, [r3, #28]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0208 	orr.w	r2, r2, #8
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e007      	b.n	8003ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7f5b      	ldrb	r3, [r3, #29]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d108      	bne.n	8003f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0204 	orr.w	r2, r2, #4
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e007      	b.n	8003f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f66:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d003      	beq.n	8003f76 <HAL_CAN_ConfigFilter+0x26>
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 80be 	bne.w	80040f2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_CAN_ConfigFilter+0x1bc>)
 8003f78:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f80:	f043 0201 	orr.w	r2, r3, #1
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003f90:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	401a      	ands	r2, r3
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d123      	bne.n	8004020 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	401a      	ands	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ffa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3248      	adds	r2, #72	; 0x48
 8004000:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004014:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004016:	6979      	ldr	r1, [r7, #20]
 8004018:	3348      	adds	r3, #72	; 0x48
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d122      	bne.n	800406e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	431a      	orrs	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004048:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3248      	adds	r2, #72	; 0x48
 800404e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004062:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004064:	6979      	ldr	r1, [r7, #20]
 8004066:	3348      	adds	r3, #72	; 0x48
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d109      	bne.n	800408a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	401a      	ands	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004088:	e007      	b.n	800409a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	431a      	orrs	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80040b4:	e007      	b.n	80040c6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	431a      	orrs	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d107      	bne.n	80040de <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	431a      	orrs	r2, r3
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040e4:	f023 0201 	bic.w	r2, r3, #1
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e006      	b.n	8004100 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
  }
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40006400 	.word	0x40006400

08004110 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	d12e      	bne.n	8004182 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800413c:	f7ff fe00 	bl	8003d40 <HAL_GetTick>
 8004140:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004142:	e012      	b.n	800416a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004144:	f7ff fdfc 	bl	8003d40 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b0a      	cmp	r3, #10
 8004150:	d90b      	bls.n	800416a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2205      	movs	r2, #5
 8004162:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e012      	b.n	8004190 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e5      	bne.n	8004144 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	e006      	b.n	8004190 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
  }
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d003      	beq.n	80041c4 <HAL_CAN_AddTxMessage+0x2c>
 80041bc:	7ffb      	ldrb	r3, [r7, #31]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	f040 80b8 	bne.w	8004334 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 80a0 	beq.w	8004324 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	0e1b      	lsrs	r3, r3, #24
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d907      	bls.n	8004204 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e09e      	b.n	8004342 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004204:	2201      	movs	r2, #1
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	409a      	lsls	r2, r3
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10d      	bne.n	8004232 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004220:	68f9      	ldr	r1, [r7, #12]
 8004222:	6809      	ldr	r1, [r1, #0]
 8004224:	431a      	orrs	r2, r3
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	3318      	adds	r3, #24
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	440b      	add	r3, r1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e00f      	b.n	8004252 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800423c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004242:	68f9      	ldr	r1, [r7, #12]
 8004244:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004246:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	3318      	adds	r3, #24
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	440b      	add	r3, r1
 8004250:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3318      	adds	r3, #24
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	440b      	add	r3, r1
 8004262:	3304      	adds	r3, #4
 8004264:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	7d1b      	ldrb	r3, [r3, #20]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d111      	bne.n	8004292 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	3318      	adds	r3, #24
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6811      	ldr	r1, [r2, #0]
 8004282:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	3318      	adds	r3, #24
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	440b      	add	r3, r1
 800428e:	3304      	adds	r3, #4
 8004290:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3307      	adds	r3, #7
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	061a      	lsls	r2, r3, #24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3306      	adds	r3, #6
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3305      	adds	r3, #5
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	4313      	orrs	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	3204      	adds	r2, #4
 80042b2:	7812      	ldrb	r2, [r2, #0]
 80042b4:	4610      	mov	r0, r2
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	6811      	ldr	r1, [r2, #0]
 80042ba:	ea43 0200 	orr.w	r2, r3, r0
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	440b      	add	r3, r1
 80042c4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80042c8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3303      	adds	r3, #3
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	061a      	lsls	r2, r3, #24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3302      	adds	r3, #2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3301      	adds	r3, #1
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4313      	orrs	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	4610      	mov	r0, r2
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	6811      	ldr	r1, [r2, #0]
 80042f0:	ea43 0200 	orr.w	r2, r3, r0
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	011b      	lsls	r3, r3, #4
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80042fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	3318      	adds	r3, #24
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	4413      	add	r3, r2
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	6811      	ldr	r1, [r2, #0]
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	3318      	adds	r3, #24
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	440b      	add	r3, r1
 800431e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	e00e      	b.n	8004342 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e006      	b.n	8004342 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
  }
}
 8004342:	4618      	mov	r0, r3
 8004344:	3724      	adds	r7, #36	; 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800434e:	b480      	push	{r7}
 8004350:	b087      	sub	sp, #28
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004362:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d003      	beq.n	8004372 <HAL_CAN_GetRxMessage+0x24>
 800436a:	7dfb      	ldrb	r3, [r7, #23]
 800436c:	2b02      	cmp	r3, #2
 800436e:	f040 80f3 	bne.w	8004558 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10e      	bne.n	8004396 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d116      	bne.n	80043b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0e7      	b.n	8004566 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0d8      	b.n	8004566 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	331b      	adds	r3, #27
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	4413      	add	r3, r2
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0204 	and.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	331b      	adds	r3, #27
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4413      	add	r3, r2
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0d5b      	lsrs	r3, r3, #21
 80043e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	e00b      	b.n	8004404 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	331b      	adds	r3, #27
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	4413      	add	r3, r2
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	08db      	lsrs	r3, r3, #3
 80043fc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	331b      	adds	r3, #27
 800440c:	011b      	lsls	r3, r3, #4
 800440e:	4413      	add	r3, r2
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0202 	and.w	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	331b      	adds	r3, #27
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	3304      	adds	r3, #4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 020f 	and.w	r2, r3, #15
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	331b      	adds	r3, #27
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	4413      	add	r3, r2
 800443e:	3304      	adds	r3, #4
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	0a1b      	lsrs	r3, r3, #8
 8004444:	b2da      	uxtb	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	331b      	adds	r3, #27
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	3304      	adds	r3, #4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	b29a      	uxth	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4413      	add	r3, r2
 800446c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	4413      	add	r3, r2
 8004482:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	0a1a      	lsrs	r2, r3, #8
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	4413      	add	r3, r2
 800449c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	0c1a      	lsrs	r2, r3, #16
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	3302      	adds	r3, #2
 80044a8:	b2d2      	uxtb	r2, r2
 80044aa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	011b      	lsls	r3, r3, #4
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0e1a      	lsrs	r2, r3, #24
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	3303      	adds	r3, #3
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3304      	adds	r3, #4
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	011b      	lsls	r3, r3, #4
 80044e6:	4413      	add	r3, r2
 80044e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	0a1a      	lsrs	r2, r3, #8
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	3305      	adds	r3, #5
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	4413      	add	r3, r2
 8004502:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0c1a      	lsrs	r2, r3, #16
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	3306      	adds	r3, #6
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4413      	add	r3, r2
 800451c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0e1a      	lsrs	r2, r3, #24
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	3307      	adds	r3, #7
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0220 	orr.w	r2, r2, #32
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	e007      	b.n	8004554 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0220 	orr.w	r2, r2, #32
 8004552:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e006      	b.n	8004566 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004572:	b480      	push	{r7}
 8004574:	b085      	sub	sp, #20
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
 800457a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004582:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d002      	beq.n	8004590 <HAL_CAN_ActivateNotification+0x1e>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d109      	bne.n	80045a4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6959      	ldr	r1, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	430a      	orrs	r2, r1
 800459e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e006      	b.n	80045b2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b08a      	sub	sp, #40	; 0x28
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80045c6:	2300      	movs	r3, #0
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d07c      	beq.n	80046fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d023      	beq.n	8004656 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2201      	movs	r2, #1
 8004614:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d003      	beq.n	8004628 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f983 	bl	800492c <HAL_CAN_TxMailbox0CompleteCallback>
 8004626:	e016      	b.n	8004656 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
 800463a:	e00c      	b.n	8004656 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e002      	b.n	8004656 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f989 	bl	8004968 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d024      	beq.n	80046aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004668:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f963 	bl	8004940 <HAL_CAN_TxMailbox1CompleteCallback>
 800467a:	e016      	b.n	80046aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
 800468e:	e00c      	b.n	80046aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046a0:	627b      	str	r3, [r7, #36]	; 0x24
 80046a2:	e002      	b.n	80046aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f969 	bl	800497c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d024      	beq.n	80046fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80046bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f943 	bl	8004954 <HAL_CAN_TxMailbox2CompleteCallback>
 80046ce:	e016      	b.n	80046fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e0:	627b      	str	r3, [r7, #36]	; 0x24
 80046e2:	e00c      	b.n	80046fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d004      	beq.n	80046f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
 80046f6:	e002      	b.n	80046fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f949 	bl	8004990 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00c      	beq.n	8004722 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b00      	cmp	r3, #0
 8004710:	d007      	beq.n	8004722 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004718:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2210      	movs	r2, #16
 8004720:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00b      	beq.n	8004744 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f930 	bl	80049a4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7fc fcab 	bl	80010b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f003 0310 	and.w	r3, r3, #16
 8004772:	2b00      	cmp	r3, #0
 8004774:	d007      	beq.n	8004786 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800477c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00b      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d006      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2208      	movs	r2, #8
 80047a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f912 	bl	80049cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f8f9 	bl	80049b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d006      	beq.n	80047e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2210      	movs	r2, #16
 80047e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8fc 	bl	80049e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d006      	beq.n	800480a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2208      	movs	r2, #8
 8004802:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8f5 	bl	80049f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d07b      	beq.n	800490c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d072      	beq.n	8004904 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004840:	2b00      	cmp	r3, #0
 8004842:	d008      	beq.n	8004856 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800484e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004850:	f043 0302 	orr.w	r3, r3, #2
 8004854:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	f043 0304 	orr.w	r3, r3, #4
 8004870:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004872:	6a3b      	ldr	r3, [r7, #32]
 8004874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004878:	2b00      	cmp	r3, #0
 800487a:	d043      	beq.n	8004904 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03e      	beq.n	8004904 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800488c:	2b60      	cmp	r3, #96	; 0x60
 800488e:	d02b      	beq.n	80048e8 <HAL_CAN_IRQHandler+0x32a>
 8004890:	2b60      	cmp	r3, #96	; 0x60
 8004892:	d82e      	bhi.n	80048f2 <HAL_CAN_IRQHandler+0x334>
 8004894:	2b50      	cmp	r3, #80	; 0x50
 8004896:	d022      	beq.n	80048de <HAL_CAN_IRQHandler+0x320>
 8004898:	2b50      	cmp	r3, #80	; 0x50
 800489a:	d82a      	bhi.n	80048f2 <HAL_CAN_IRQHandler+0x334>
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	d019      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x316>
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	d826      	bhi.n	80048f2 <HAL_CAN_IRQHandler+0x334>
 80048a4:	2b30      	cmp	r3, #48	; 0x30
 80048a6:	d010      	beq.n	80048ca <HAL_CAN_IRQHandler+0x30c>
 80048a8:	2b30      	cmp	r3, #48	; 0x30
 80048aa:	d822      	bhi.n	80048f2 <HAL_CAN_IRQHandler+0x334>
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d002      	beq.n	80048b6 <HAL_CAN_IRQHandler+0x2f8>
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d005      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80048b4:	e01d      	b.n	80048f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80048b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b8:	f043 0308 	orr.w	r3, r3, #8
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048be:	e019      	b.n	80048f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f043 0310 	orr.w	r3, r3, #16
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048c8:	e014      	b.n	80048f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048d2:	e00f      	b.n	80048f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048dc:	e00a      	b.n	80048f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048e6:	e005      	b.n	80048f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80048f0:	e000      	b.n	80048f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80048f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004902:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2204      	movs	r2, #4
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f872 	bl	8004a08 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004924:	bf00      	nop
 8004926:	3728      	adds	r7, #40	; 0x28
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a38:	4013      	ands	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <__NVIC_SetPriorityGrouping+0x44>)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	60d3      	str	r3, [r2, #12]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	e000ed00 	.word	0xe000ed00

08004a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <__NVIC_GetPriorityGrouping+0x18>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 0307 	and.w	r3, r3, #7
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	e000ed00 	.word	0xe000ed00

08004a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db0b      	blt.n	8004aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a92:	79fb      	ldrb	r3, [r7, #7]
 8004a94:	f003 021f 	and.w	r2, r3, #31
 8004a98:	4907      	ldr	r1, [pc, #28]	; (8004ab8 <__NVIC_EnableIRQ+0x38>)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8004aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e100 	.word	0xe000e100

08004abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db0a      	blt.n	8004ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	490c      	ldr	r1, [pc, #48]	; (8004b08 <__NVIC_SetPriority+0x4c>)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	0112      	lsls	r2, r2, #4
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ae4:	e00a      	b.n	8004afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4908      	ldr	r1, [pc, #32]	; (8004b0c <__NVIC_SetPriority+0x50>)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3b04      	subs	r3, #4
 8004af4:	0112      	lsls	r2, r2, #4
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	440b      	add	r3, r1
 8004afa:	761a      	strb	r2, [r3, #24]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000e100 	.word	0xe000e100
 8004b0c:	e000ed00 	.word	0xe000ed00

08004b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	; 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 0307 	and.w	r3, r3, #7
 8004b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f1c3 0307 	rsb	r3, r3, #7
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	bf28      	it	cs
 8004b2e:	2304      	movcs	r3, #4
 8004b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3304      	adds	r3, #4
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d902      	bls.n	8004b40 <NVIC_EncodePriority+0x30>
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3b03      	subs	r3, #3
 8004b3e:	e000      	b.n	8004b42 <NVIC_EncodePriority+0x32>
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b44:	f04f 32ff 	mov.w	r2, #4294967295
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	401a      	ands	r2, r3
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b58:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	43d9      	mvns	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b68:	4313      	orrs	r3, r2
         );
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	; 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff ff4c 	bl	8004a1c <__NVIC_SetPriorityGrouping>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
 8004b98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b9e:	f7ff ff61 	bl	8004a64 <__NVIC_GetPriorityGrouping>
 8004ba2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f7ff ffb1 	bl	8004b10 <NVIC_EncodePriority>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb4:	4611      	mov	r1, r2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff ff80 	bl	8004abc <__NVIC_SetPriority>
}
 8004bbc:	bf00      	nop
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff54 	bl	8004a80 <__NVIC_EnableIRQ>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	; 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	61fb      	str	r3, [r7, #28]
 8004bfa:	e16b      	b.n	8004ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	f040 815a 	bne.w	8004ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d005      	beq.n	8004c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d130      	bne.n	8004c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	43db      	mvns	r3, r3
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	4013      	ands	r3, r2
 8004c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 0201 	and.w	r2, r3, #1
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d017      	beq.n	8004cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	2203      	movs	r2, #3
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689a      	ldr	r2, [r3, #8]
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69ba      	ldr	r2, [r7, #24]
 8004cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d123      	bne.n	8004d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	08da      	lsrs	r2, r3, #3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3208      	adds	r2, #8
 8004ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	08da      	lsrs	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3208      	adds	r2, #8
 8004d1e:	69b9      	ldr	r1, [r7, #24]
 8004d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	2203      	movs	r2, #3
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	43db      	mvns	r3, r3
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0203 	and.w	r2, r3, #3
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 80b4 	beq.w	8004ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	4b60      	ldr	r3, [pc, #384]	; (8004eec <HAL_GPIO_Init+0x30c>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	4a5f      	ldr	r2, [pc, #380]	; (8004eec <HAL_GPIO_Init+0x30c>)
 8004d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d74:	6453      	str	r3, [r2, #68]	; 0x44
 8004d76:	4b5d      	ldr	r3, [pc, #372]	; (8004eec <HAL_GPIO_Init+0x30c>)
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d82:	4a5b      	ldr	r2, [pc, #364]	; (8004ef0 <HAL_GPIO_Init+0x310>)
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	089b      	lsrs	r3, r3, #2
 8004d88:	3302      	adds	r3, #2
 8004d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	220f      	movs	r2, #15
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a52      	ldr	r2, [pc, #328]	; (8004ef4 <HAL_GPIO_Init+0x314>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02b      	beq.n	8004e06 <HAL_GPIO_Init+0x226>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a51      	ldr	r2, [pc, #324]	; (8004ef8 <HAL_GPIO_Init+0x318>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d025      	beq.n	8004e02 <HAL_GPIO_Init+0x222>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a50      	ldr	r2, [pc, #320]	; (8004efc <HAL_GPIO_Init+0x31c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01f      	beq.n	8004dfe <HAL_GPIO_Init+0x21e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a4f      	ldr	r2, [pc, #316]	; (8004f00 <HAL_GPIO_Init+0x320>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d019      	beq.n	8004dfa <HAL_GPIO_Init+0x21a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a4e      	ldr	r2, [pc, #312]	; (8004f04 <HAL_GPIO_Init+0x324>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <HAL_GPIO_Init+0x216>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a4d      	ldr	r2, [pc, #308]	; (8004f08 <HAL_GPIO_Init+0x328>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00d      	beq.n	8004df2 <HAL_GPIO_Init+0x212>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a4c      	ldr	r2, [pc, #304]	; (8004f0c <HAL_GPIO_Init+0x32c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d007      	beq.n	8004dee <HAL_GPIO_Init+0x20e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a4b      	ldr	r2, [pc, #300]	; (8004f10 <HAL_GPIO_Init+0x330>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d101      	bne.n	8004dea <HAL_GPIO_Init+0x20a>
 8004de6:	2307      	movs	r3, #7
 8004de8:	e00e      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dea:	2308      	movs	r3, #8
 8004dec:	e00c      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dee:	2306      	movs	r3, #6
 8004df0:	e00a      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004df2:	2305      	movs	r3, #5
 8004df4:	e008      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004df6:	2304      	movs	r3, #4
 8004df8:	e006      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e004      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e002      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <HAL_GPIO_Init+0x228>
 8004e06:	2300      	movs	r3, #0
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	f002 0203 	and.w	r2, r2, #3
 8004e0e:	0092      	lsls	r2, r2, #2
 8004e10:	4093      	lsls	r3, r2
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e18:	4935      	ldr	r1, [pc, #212]	; (8004ef0 <HAL_GPIO_Init+0x310>)
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e26:	4b3b      	ldr	r3, [pc, #236]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4013      	ands	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e42:	69ba      	ldr	r2, [r7, #24]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e4a:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e50:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e7a:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ec8:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <HAL_GPIO_Init+0x334>)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	f67f ae90 	bls.w	8004bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40013800 	.word	0x40013800
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	40020400 	.word	0x40020400
 8004efc:	40020800 	.word	0x40020800
 8004f00:	40020c00 	.word	0x40020c00
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40021400 	.word	0x40021400
 8004f0c:	40021800 	.word	0x40021800
 8004f10:	40021c00 	.word	0x40021c00
 8004f14:	40013c00 	.word	0x40013c00

08004f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	807b      	strh	r3, [r7, #2]
 8004f24:	4613      	mov	r3, r2
 8004f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f28:	787b      	ldrb	r3, [r7, #1]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f2e:	887a      	ldrh	r2, [r7, #2]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f34:	e003      	b.n	8004f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f36:	887b      	ldrh	r3, [r7, #2]
 8004f38:	041a      	lsls	r2, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	619a      	str	r2, [r3, #24]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f5c:	887a      	ldrh	r2, [r7, #2]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4013      	ands	r3, r2
 8004f62:	041a      	lsls	r2, r3, #16
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	43d9      	mvns	r1, r3
 8004f68:	887b      	ldrh	r3, [r7, #2]
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	619a      	str	r2, [r3, #24]
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e267      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d075      	beq.n	800508a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9e:	4b88      	ldr	r3, [pc, #544]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d00c      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004faa:	4b85      	ldr	r3, [pc, #532]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d112      	bne.n	8004fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb6:	4b82      	ldr	r3, [pc, #520]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc2:	d10b      	bne.n	8004fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	4b7e      	ldr	r3, [pc, #504]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d05b      	beq.n	8005088 <HAL_RCC_OscConfig+0x108>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d157      	bne.n	8005088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e242      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d106      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x74>
 8004fe6:	4b76      	ldr	r3, [pc, #472]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a75      	ldr	r2, [pc, #468]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	e01d      	b.n	8005030 <HAL_RCC_OscConfig+0xb0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCC_OscConfig+0x98>
 8004ffe:	4b70      	ldr	r3, [pc, #448]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a6f      	ldr	r2, [pc, #444]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	4b6d      	ldr	r3, [pc, #436]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6c      	ldr	r2, [pc, #432]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e00b      	b.n	8005030 <HAL_RCC_OscConfig+0xb0>
 8005018:	4b69      	ldr	r3, [pc, #420]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a68      	ldr	r2, [pc, #416]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800501e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	4b66      	ldr	r3, [pc, #408]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a65      	ldr	r2, [pc, #404]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800502a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d013      	beq.n	8005060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005038:	f7fe fe82 	bl	8003d40 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005040:	f7fe fe7e 	bl	8003d40 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b64      	cmp	r3, #100	; 0x64
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e207      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b5b      	ldr	r3, [pc, #364]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d0f0      	beq.n	8005040 <HAL_RCC_OscConfig+0xc0>
 800505e:	e014      	b.n	800508a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe fe6e 	bl	8003d40 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005068:	f7fe fe6a 	bl	8003d40 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b64      	cmp	r3, #100	; 0x64
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e1f3      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800507a:	4b51      	ldr	r3, [pc, #324]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0xe8>
 8005086:	e000      	b.n	800508a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d063      	beq.n	800515e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005096:	4b4a      	ldr	r3, [pc, #296]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050a2:	4b47      	ldr	r3, [pc, #284]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d11c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b44      	ldr	r3, [pc, #272]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d116      	bne.n	80050e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ba:	4b41      	ldr	r3, [pc, #260]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_RCC_OscConfig+0x152>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d001      	beq.n	80050d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e1c7      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d2:	4b3b      	ldr	r3, [pc, #236]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4937      	ldr	r1, [pc, #220]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	e03a      	b.n	800515e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d020      	beq.n	8005132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <HAL_RCC_OscConfig+0x244>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f6:	f7fe fe23 	bl	8003d40 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050fe:	f7fe fe1f 	bl	8003d40 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e1a8      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	4b2b      	ldr	r3, [pc, #172]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b28      	ldr	r3, [pc, #160]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	00db      	lsls	r3, r3, #3
 800512a:	4925      	ldr	r1, [pc, #148]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 800512c:	4313      	orrs	r3, r2
 800512e:	600b      	str	r3, [r1, #0]
 8005130:	e015      	b.n	800515e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005132:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <HAL_RCC_OscConfig+0x244>)
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005138:	f7fe fe02 	bl	8003d40 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005140:	f7fe fdfe 	bl	8003d40 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e187      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d036      	beq.n	80051d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d016      	beq.n	80051a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <HAL_RCC_OscConfig+0x248>)
 8005174:	2201      	movs	r2, #1
 8005176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005178:	f7fe fde2 	bl	8003d40 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005180:	f7fe fdde 	bl	8003d40 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e167      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <HAL_RCC_OscConfig+0x240>)
 8005194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0x200>
 800519e:	e01b      	b.n	80051d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <HAL_RCC_OscConfig+0x248>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a6:	f7fe fdcb 	bl	8003d40 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ac:	e00e      	b.n	80051cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ae:	f7fe fdc7 	bl	8003d40 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d907      	bls.n	80051cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e150      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
 80051c0:	40023800 	.word	0x40023800
 80051c4:	42470000 	.word	0x42470000
 80051c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051cc:	4b88      	ldr	r3, [pc, #544]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1ea      	bne.n	80051ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 8097 	beq.w	8005314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ea:	4b81      	ldr	r3, [pc, #516]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80051ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10f      	bne.n	8005216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	4b7d      	ldr	r3, [pc, #500]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	4a7c      	ldr	r2, [pc, #496]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005204:	6413      	str	r3, [r2, #64]	; 0x40
 8005206:	4b7a      	ldr	r3, [pc, #488]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	60bb      	str	r3, [r7, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005212:	2301      	movs	r3, #1
 8005214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005216:	4b77      	ldr	r3, [pc, #476]	; (80053f4 <HAL_RCC_OscConfig+0x474>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d118      	bne.n	8005254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005222:	4b74      	ldr	r3, [pc, #464]	; (80053f4 <HAL_RCC_OscConfig+0x474>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a73      	ldr	r2, [pc, #460]	; (80053f4 <HAL_RCC_OscConfig+0x474>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800522c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522e:	f7fe fd87 	bl	8003d40 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005236:	f7fe fd83 	bl	8003d40 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e10c      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	4b6a      	ldr	r3, [pc, #424]	; (80053f4 <HAL_RCC_OscConfig+0x474>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <HAL_RCC_OscConfig+0x2ea>
 800525c:	4b64      	ldr	r3, [pc, #400]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	4a63      	ldr	r2, [pc, #396]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6713      	str	r3, [r2, #112]	; 0x70
 8005268:	e01c      	b.n	80052a4 <HAL_RCC_OscConfig+0x324>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	2b05      	cmp	r3, #5
 8005270:	d10c      	bne.n	800528c <HAL_RCC_OscConfig+0x30c>
 8005272:	4b5f      	ldr	r3, [pc, #380]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005276:	4a5e      	ldr	r2, [pc, #376]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005278:	f043 0304 	orr.w	r3, r3, #4
 800527c:	6713      	str	r3, [r2, #112]	; 0x70
 800527e:	4b5c      	ldr	r3, [pc, #368]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	4a5b      	ldr	r2, [pc, #364]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	6713      	str	r3, [r2, #112]	; 0x70
 800528a:	e00b      	b.n	80052a4 <HAL_RCC_OscConfig+0x324>
 800528c:	4b58      	ldr	r3, [pc, #352]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	4a57      	ldr	r2, [pc, #348]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	6713      	str	r3, [r2, #112]	; 0x70
 8005298:	4b55      	ldr	r3, [pc, #340]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529c:	4a54      	ldr	r2, [pc, #336]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 800529e:	f023 0304 	bic.w	r3, r3, #4
 80052a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe fd48 	bl	8003d40 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b2:	e00a      	b.n	80052ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b4:	f7fe fd44 	bl	8003d40 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e0cb      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ca:	4b49      	ldr	r3, [pc, #292]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ee      	beq.n	80052b4 <HAL_RCC_OscConfig+0x334>
 80052d6:	e014      	b.n	8005302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d8:	f7fe fd32 	bl	8003d40 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e0:	f7fe fd2e 	bl	8003d40 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e0b5      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f6:	4b3e      	ldr	r3, [pc, #248]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d1ee      	bne.n	80052e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005302:	7dfb      	ldrb	r3, [r7, #23]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d105      	bne.n	8005314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005308:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	4a38      	ldr	r2, [pc, #224]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 800530e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80a1 	beq.w	8005460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800531e:	4b34      	ldr	r3, [pc, #208]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 030c 	and.w	r3, r3, #12
 8005326:	2b08      	cmp	r3, #8
 8005328:	d05c      	beq.n	80053e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b02      	cmp	r3, #2
 8005330:	d141      	bne.n	80053b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005332:	4b31      	ldr	r3, [pc, #196]	; (80053f8 <HAL_RCC_OscConfig+0x478>)
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005338:	f7fe fd02 	bl	8003d40 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533e:	e008      	b.n	8005352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005340:	f7fe fcfe 	bl	8003d40 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	2b02      	cmp	r3, #2
 800534c:	d901      	bls.n	8005352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e087      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	4b27      	ldr	r3, [pc, #156]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f0      	bne.n	8005340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	019b      	lsls	r3, r3, #6
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	085b      	lsrs	r3, r3, #1
 8005376:	3b01      	subs	r3, #1
 8005378:	041b      	lsls	r3, r3, #16
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	061b      	lsls	r3, r3, #24
 8005382:	491b      	ldr	r1, [pc, #108]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_RCC_OscConfig+0x478>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538e:	f7fe fcd7 	bl	8003d40 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005396:	f7fe fcd3 	bl	8003d40 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e05c      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x416>
 80053b4:	e054      	b.n	8005460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <HAL_RCC_OscConfig+0x478>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053bc:	f7fe fcc0 	bl	8003d40 <HAL_GetTick>
 80053c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c4:	f7fe fcbc 	bl	8003d40 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e045      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCC_OscConfig+0x470>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f0      	bne.n	80053c4 <HAL_RCC_OscConfig+0x444>
 80053e2:	e03d      	b.n	8005460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e038      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40007000 	.word	0x40007000
 80053f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_RCC_OscConfig+0x4ec>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d028      	beq.n	800545c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005414:	429a      	cmp	r2, r3
 8005416:	d121      	bne.n	800545c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005422:	429a      	cmp	r2, r3
 8005424:	d11a      	bne.n	800545c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800542c:	4013      	ands	r3, r2
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005434:	4293      	cmp	r3, r2
 8005436:	d111      	bne.n	800545c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	085b      	lsrs	r3, r3, #1
 8005444:	3b01      	subs	r3, #1
 8005446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d107      	bne.n	800545c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	40023800 	.word	0x40023800

08005470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e0cc      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005484:	4b68      	ldr	r3, [pc, #416]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0307 	and.w	r3, r3, #7
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d90c      	bls.n	80054ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005492:	4b65      	ldr	r3, [pc, #404]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800549a:	4b63      	ldr	r3, [pc, #396]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d001      	beq.n	80054ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e0b8      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d020      	beq.n	80054fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c4:	4b59      	ldr	r3, [pc, #356]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4a58      	ldr	r2, [pc, #352]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d005      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054dc:	4b53      	ldr	r3, [pc, #332]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a52      	ldr	r2, [pc, #328]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e8:	4b50      	ldr	r3, [pc, #320]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	494d      	ldr	r1, [pc, #308]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d044      	beq.n	8005590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d107      	bne.n	800551e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550e:	4b47      	ldr	r3, [pc, #284]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d119      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e07f      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d003      	beq.n	800552e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552a:	2b03      	cmp	r3, #3
 800552c:	d107      	bne.n	800553e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552e:	4b3f      	ldr	r3, [pc, #252]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e06f      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553e:	4b3b      	ldr	r3, [pc, #236]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e067      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554e:	4b37      	ldr	r3, [pc, #220]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f023 0203 	bic.w	r2, r3, #3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	4934      	ldr	r1, [pc, #208]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	4313      	orrs	r3, r2
 800555e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005560:	f7fe fbee 	bl	8003d40 <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005566:	e00a      	b.n	800557e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005568:	f7fe fbea 	bl	8003d40 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f241 3288 	movw	r2, #5000	; 0x1388
 8005576:	4293      	cmp	r3, r2
 8005578:	d901      	bls.n	800557e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e04f      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557e:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 020c 	and.w	r2, r3, #12
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	429a      	cmp	r2, r3
 800558e:	d1eb      	bne.n	8005568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d20c      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b22      	ldr	r3, [pc, #136]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_RCC_ClockConfig+0x1b8>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d001      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e032      	b.n	800561e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4916      	ldr	r1, [pc, #88]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e2:	4b12      	ldr	r3, [pc, #72]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	490e      	ldr	r1, [pc, #56]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055f6:	f000 f821 	bl	800563c <HAL_RCC_GetSysClockFreq>
 80055fa:	4602      	mov	r2, r0
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	490a      	ldr	r1, [pc, #40]	; (8005630 <HAL_RCC_ClockConfig+0x1c0>)
 8005608:	5ccb      	ldrb	r3, [r1, r3]
 800560a:	fa22 f303 	lsr.w	r3, r2, r3
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <HAL_RCC_ClockConfig+0x1c4>)
 8005610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005612:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_ClockConfig+0x1c8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f7fc f81c 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40023c00 	.word	0x40023c00
 800562c:	40023800 	.word	0x40023800
 8005630:	0800e8cc 	.word	0x0800e8cc
 8005634:	20000000 	.word	0x20000000
 8005638:	2000004c 	.word	0x2000004c

0800563c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800563c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005640:	b090      	sub	sp, #64	; 0x40
 8005642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	2300      	movs	r3, #0
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800564c:	2300      	movs	r3, #0
 800564e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005654:	4b59      	ldr	r3, [pc, #356]	; (80057bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 030c 	and.w	r3, r3, #12
 800565c:	2b08      	cmp	r3, #8
 800565e:	d00d      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x40>
 8005660:	2b08      	cmp	r3, #8
 8005662:	f200 80a1 	bhi.w	80057a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_RCC_GetSysClockFreq+0x34>
 800566a:	2b04      	cmp	r3, #4
 800566c:	d003      	beq.n	8005676 <HAL_RCC_GetSysClockFreq+0x3a>
 800566e:	e09b      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005670:	4b53      	ldr	r3, [pc, #332]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005674:	e09b      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005676:	4b53      	ldr	r3, [pc, #332]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800567a:	e098      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800567c:	4b4f      	ldr	r3, [pc, #316]	; (80057bc <HAL_RCC_GetSysClockFreq+0x180>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005686:	4b4d      	ldr	r3, [pc, #308]	; (80057bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d028      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005692:	4b4a      	ldr	r3, [pc, #296]	; (80057bc <HAL_RCC_GetSysClockFreq+0x180>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	099b      	lsrs	r3, r3, #6
 8005698:	2200      	movs	r2, #0
 800569a:	623b      	str	r3, [r7, #32]
 800569c:	627a      	str	r2, [r7, #36]	; 0x24
 800569e:	6a3b      	ldr	r3, [r7, #32]
 80056a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056a4:	2100      	movs	r1, #0
 80056a6:	4b47      	ldr	r3, [pc, #284]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80056a8:	fb03 f201 	mul.w	r2, r3, r1
 80056ac:	2300      	movs	r3, #0
 80056ae:	fb00 f303 	mul.w	r3, r0, r3
 80056b2:	4413      	add	r3, r2
 80056b4:	4a43      	ldr	r2, [pc, #268]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80056b6:	fba0 1202 	umull	r1, r2, r0, r2
 80056ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056bc:	460a      	mov	r2, r1
 80056be:	62ba      	str	r2, [r7, #40]	; 0x28
 80056c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c2:	4413      	add	r3, r2
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	2200      	movs	r2, #0
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	61fa      	str	r2, [r7, #28]
 80056ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056d6:	f7fb fad7 	bl	8000c88 <__aeabi_uldivmod>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	4613      	mov	r3, r2
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e2:	e053      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056e4:	4b35      	ldr	r3, [pc, #212]	; (80057bc <HAL_RCC_GetSysClockFreq+0x180>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	099b      	lsrs	r3, r3, #6
 80056ea:	2200      	movs	r2, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	617a      	str	r2, [r7, #20]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056f6:	f04f 0b00 	mov.w	fp, #0
 80056fa:	4652      	mov	r2, sl
 80056fc:	465b      	mov	r3, fp
 80056fe:	f04f 0000 	mov.w	r0, #0
 8005702:	f04f 0100 	mov.w	r1, #0
 8005706:	0159      	lsls	r1, r3, #5
 8005708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800570c:	0150      	lsls	r0, r2, #5
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	ebb2 080a 	subs.w	r8, r2, sl
 8005716:	eb63 090b 	sbc.w	r9, r3, fp
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005726:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800572a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800572e:	ebb2 0408 	subs.w	r4, r2, r8
 8005732:	eb63 0509 	sbc.w	r5, r3, r9
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	00eb      	lsls	r3, r5, #3
 8005740:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005744:	00e2      	lsls	r2, r4, #3
 8005746:	4614      	mov	r4, r2
 8005748:	461d      	mov	r5, r3
 800574a:	eb14 030a 	adds.w	r3, r4, sl
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	eb45 030b 	adc.w	r3, r5, fp
 8005754:	607b      	str	r3, [r7, #4]
 8005756:	f04f 0200 	mov.w	r2, #0
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005762:	4629      	mov	r1, r5
 8005764:	028b      	lsls	r3, r1, #10
 8005766:	4621      	mov	r1, r4
 8005768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800576c:	4621      	mov	r1, r4
 800576e:	028a      	lsls	r2, r1, #10
 8005770:	4610      	mov	r0, r2
 8005772:	4619      	mov	r1, r3
 8005774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005776:	2200      	movs	r2, #0
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005780:	f7fb fa82 	bl	8000c88 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4613      	mov	r3, r2
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <HAL_RCC_GetSysClockFreq+0x180>)
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	3301      	adds	r3, #1
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800579c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057a6:	e002      	b.n	80057ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80057aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3740      	adds	r7, #64	; 0x40
 80057b4:	46bd      	mov	sp, r7
 80057b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057ba:	bf00      	nop
 80057bc:	40023800 	.word	0x40023800
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	017d7840 	.word	0x017d7840

080057c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000000 	.word	0x20000000

080057e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057e4:	f7ff fff0 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0b5b      	lsrs	r3, r3, #13
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4903      	ldr	r1, [pc, #12]	; (8005804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40023800 	.word	0x40023800
 8005804:	0800e8dc 	.word	0x0800e8dc

08005808 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	220f      	movs	r2, #15
 8005816:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005818:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0203 	and.w	r2, r3, #3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005824:	4b0f      	ldr	r3, [pc, #60]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800583c:	4b09      	ldr	r3, [pc, #36]	; (8005864 <HAL_RCC_GetClockConfig+0x5c>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	08db      	lsrs	r3, r3, #3
 8005842:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <HAL_RCC_GetClockConfig+0x60>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0207 	and.w	r2, r3, #7
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	601a      	str	r2, [r3, #0]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40023800 	.word	0x40023800
 8005868:	40023c00 	.word	0x40023c00

0800586c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e041      	b.n	8005902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f839 	bl	800590a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4619      	mov	r1, r3
 80058aa:	4610      	mov	r0, r2
 80058ac:	f000 f9d8 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
	...

08005920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b01      	cmp	r3, #1
 8005932:	d001      	beq.n	8005938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e04e      	b.n	80059d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a23      	ldr	r2, [pc, #140]	; (80059e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d022      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d01d      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d018      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a1e      	ldr	r2, [pc, #120]	; (80059ec <HAL_TIM_Base_Start_IT+0xcc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d013      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00e      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1b      	ldr	r2, [pc, #108]	; (80059f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d009      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <HAL_TIM_Base_Start_IT+0x80>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <HAL_TIM_Base_Start_IT+0xdc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d111      	bne.n	80059c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b06      	cmp	r3, #6
 80059b0:	d010      	beq.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f042 0201 	orr.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	e007      	b.n	80059d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0201 	orr.w	r2, r2, #1
 80059d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40000400 	.word	0x40000400
 80059ec:	40000800 	.word	0x40000800
 80059f0:	40000c00 	.word	0x40000c00
 80059f4:	40010400 	.word	0x40010400
 80059f8:	40014000 	.word	0x40014000
 80059fc:	40001800 	.word	0x40001800

08005a00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d122      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d11b      	bne.n	8005a5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f06f 0202 	mvn.w	r2, #2
 8005a2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8ee 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005a48:	e005      	b.n	8005a56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8e0 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8f1 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d122      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d11b      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f06f 0204 	mvn.w	r2, #4
 8005a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f8c4 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005a9c:	e005      	b.n	8005aaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8b6 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f8c7 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0308 	and.w	r3, r3, #8
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0208 	mvn.w	r2, #8
 8005ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f89a 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f88c 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f89d 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0310 	and.w	r3, r3, #16
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0210 	mvn.w	r2, #16
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69db      	ldr	r3, [r3, #28]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f870 	bl	8005c24 <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f862 	bl	8005c10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f873 	bl	8005c38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d10e      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0201 	mvn.w	r2, #1
 8005b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7fb fcd4 	bl	800152c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d10e      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9c:	2b80      	cmp	r3, #128	; 0x80
 8005b9e:	d107      	bne.n	8005bb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f902 	bl	8005db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b40      	cmp	r3, #64	; 0x40
 8005bbc:	d10e      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d107      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f838 	bl	8005c4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b20      	cmp	r3, #32
 8005be8:	d10e      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d107      	bne.n	8005c08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0220 	mvn.w	r2, #32
 8005c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 f8cc 	bl	8005da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3d      	ldr	r2, [pc, #244]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3c      	ldr	r2, [pc, #240]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3b      	ldr	r2, [pc, #236]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3a      	ldr	r2, [pc, #232]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2f      	ldr	r2, [pc, #188]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d02b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d027      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d023      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d01f      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a29      	ldr	r2, [pc, #164]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d017      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <TIM_Base_SetConfig+0x128>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d00f      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <TIM_Base_SetConfig+0x130>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00b      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a25      	ldr	r2, [pc, #148]	; (8005d94 <TIM_Base_SetConfig+0x134>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d007      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4a24      	ldr	r2, [pc, #144]	; (8005d98 <TIM_Base_SetConfig+0x138>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d003      	beq.n	8005d12 <TIM_Base_SetConfig+0xb2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a23      	ldr	r2, [pc, #140]	; (8005d9c <TIM_Base_SetConfig+0x13c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d108      	bne.n	8005d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68fa      	ldr	r2, [r7, #12]
 8005d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40010400 	.word	0x40010400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800
 8005d94:	40001800 	.word	0x40001800
 8005d98:	40001c00 	.word	0x40001c00
 8005d9c:	40002000 	.word	0x40002000

08005da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <__NVIC_SetPriority>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	6039      	str	r1, [r7, #0]
 8005dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	db0a      	blt.n	8005df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	490c      	ldr	r1, [pc, #48]	; (8005e14 <__NVIC_SetPriority+0x4c>)
 8005de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005de6:	0112      	lsls	r2, r2, #4
 8005de8:	b2d2      	uxtb	r2, r2
 8005dea:	440b      	add	r3, r1
 8005dec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005df0:	e00a      	b.n	8005e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	4908      	ldr	r1, [pc, #32]	; (8005e18 <__NVIC_SetPriority+0x50>)
 8005df8:	79fb      	ldrb	r3, [r7, #7]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	3b04      	subs	r3, #4
 8005e00:	0112      	lsls	r2, r2, #4
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	440b      	add	r3, r1
 8005e06:	761a      	strb	r2, [r3, #24]
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	e000e100 	.word	0xe000e100
 8005e18:	e000ed00 	.word	0xe000ed00

08005e1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005e20:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <SysTick_Handler+0x1c>)
 8005e22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005e24:	f001 ff84 	bl	8007d30 <xTaskGetSchedulerState>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d001      	beq.n	8005e32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005e2e:	f002 fe6b 	bl	8008b08 <xPortSysTickHandler>
  }
}
 8005e32:	bf00      	nop
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	e000e010 	.word	0xe000e010

08005e3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005e40:	2100      	movs	r1, #0
 8005e42:	f06f 0004 	mvn.w	r0, #4
 8005e46:	f7ff ffbf 	bl	8005dc8 <__NVIC_SetPriority>
#endif
}
 8005e4a:	bf00      	nop
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e56:	f3ef 8305 	mrs	r3, IPSR
 8005e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e62:	f06f 0305 	mvn.w	r3, #5
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	e00c      	b.n	8005e84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e6a:	4b0a      	ldr	r3, [pc, #40]	; (8005e94 <osKernelInitialize+0x44>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d105      	bne.n	8005e7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e72:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <osKernelInitialize+0x44>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	e002      	b.n	8005e84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e84:	687b      	ldr	r3, [r7, #4]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	200003d4 	.word	0x200003d4

08005e98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e9e:	f3ef 8305 	mrs	r3, IPSR
 8005ea2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ea4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005eaa:	f06f 0305 	mvn.w	r3, #5
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	e010      	b.n	8005ed4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	; (8005ee0 <osKernelStart+0x48>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d109      	bne.n	8005ece <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005eba:	f7ff ffbf 	bl	8005e3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <osKernelStart+0x48>)
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ec4:	f001 fac6 	bl	8007454 <vTaskStartScheduler>
      stat = osOK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	607b      	str	r3, [r7, #4]
 8005ecc:	e002      	b.n	8005ed4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005ed4:	687b      	ldr	r3, [r7, #4]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200003d4 	.word	0x200003d4

08005ee4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08e      	sub	sp, #56	; 0x38
 8005ee8:	af04      	add	r7, sp, #16
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ef4:	f3ef 8305 	mrs	r3, IPSR
 8005ef8:	617b      	str	r3, [r7, #20]
  return(result);
 8005efa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d17e      	bne.n	8005ffe <osThreadNew+0x11a>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d07b      	beq.n	8005ffe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f06:	2380      	movs	r3, #128	; 0x80
 8005f08:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f0a:	2318      	movs	r3, #24
 8005f0c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d045      	beq.n	8005faa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <osThreadNew+0x48>
        name = attr->name;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <osThreadNew+0x6e>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b38      	cmp	r3, #56	; 0x38
 8005f44:	d805      	bhi.n	8005f52 <osThreadNew+0x6e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <osThreadNew+0x72>
        return (NULL);
 8005f52:	2300      	movs	r3, #0
 8005f54:	e054      	b.n	8006000 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00e      	beq.n	8005f8c <osThreadNew+0xa8>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2ba7      	cmp	r3, #167	; 0xa7
 8005f74:	d90a      	bls.n	8005f8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d006      	beq.n	8005f8c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <osThreadNew+0xa8>
        mem = 1;
 8005f86:	2301      	movs	r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e010      	b.n	8005fae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10c      	bne.n	8005fae <osThreadNew+0xca>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d108      	bne.n	8005fae <osThreadNew+0xca>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <osThreadNew+0xca>
          mem = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e001      	b.n	8005fae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d110      	bne.n	8005fd6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fbc:	9202      	str	r2, [sp, #8]
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6a3a      	ldr	r2, [r7, #32]
 8005fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f001 f856 	bl	800707c <xTaskCreateStatic>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e013      	b.n	8005ffe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d110      	bne.n	8005ffe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	f107 0310 	add.w	r3, r7, #16
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f001 f8a1 	bl	8007136 <xTaskCreate>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d001      	beq.n	8005ffe <osThreadNew+0x11a>
            hTask = NULL;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ffe:	693b      	ldr	r3, [r7, #16]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3728      	adds	r7, #40	; 0x28
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006010:	f3ef 8305 	mrs	r3, IPSR
 8006014:	60bb      	str	r3, [r7, #8]
  return(result);
 8006016:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <osDelay+0x1c>
    stat = osErrorISR;
 800601c:	f06f 0305 	mvn.w	r3, #5
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e007      	b.n	8006034 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <osDelay+0x2c>
      vTaskDelay(ticks);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f9dc 	bl	80073ec <vTaskDelay>
    }
  }

  return (stat);
 8006034:	68fb      	ldr	r3, [r7, #12]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a07      	ldr	r2, [pc, #28]	; (800606c <vApplicationGetIdleTaskMemory+0x2c>)
 8006050:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <vApplicationGetIdleTaskMemory+0x30>)
 8006056:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2280      	movs	r2, #128	; 0x80
 800605c:	601a      	str	r2, [r3, #0]
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	200003d8 	.word	0x200003d8
 8006070:	20000480 	.word	0x20000480

08006074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4a06      	ldr	r2, [pc, #24]	; (80060a4 <vApplicationGetTimerTaskMemory+0x30>)
 800608a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006092:	601a      	str	r2, [r3, #0]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	20000680 	.word	0x20000680
 80060a4:	20000728 	.word	0x20000728

080060a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f103 0208 	add.w	r2, r3, #8
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f103 0208 	add.w	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f103 0208 	add.w	r2, r3, #8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689a      	ldr	r2, [r3, #8]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	601a      	str	r2, [r3, #0]
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800614a:	b480      	push	{r7}
 800614c:	b085      	sub	sp, #20
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d103      	bne.n	800616a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e00c      	b.n	8006184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3308      	adds	r3, #8
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e002      	b.n	8006178 <vListInsert+0x2e>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	d2f6      	bcs.n	8006172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	601a      	str	r2, [r3, #0]
}
 80061b0:	bf00      	nop
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6892      	ldr	r2, [r2, #8]
 80061d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	6852      	ldr	r2, [r2, #4]
 80061dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d103      	bne.n	80061f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	1e5a      	subs	r2, r3, #1
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d10a      	bne.n	800623a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006236:	bf00      	nop
 8006238:	e7fe      	b.n	8006238 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800623a:	f002 fbd3 	bl	80089e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	68f9      	ldr	r1, [r7, #12]
 8006248:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800624a:	fb01 f303 	mul.w	r3, r1, r3
 800624e:	441a      	add	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	3b01      	subs	r3, #1
 800626c:	68f9      	ldr	r1, [r7, #12]
 800626e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	441a      	add	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	22ff      	movs	r2, #255	; 0xff
 800627e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	22ff      	movs	r2, #255	; 0xff
 8006286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d114      	bne.n	80062ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01a      	beq.n	80062ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3310      	adds	r3, #16
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fb85 	bl	80079ac <xTaskRemoveFromEventList>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d012      	beq.n	80062ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80062a8:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <xQueueGenericReset+0xcc>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	e009      	b.n	80062ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3310      	adds	r3, #16
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fef2 	bl	80060a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3324      	adds	r3, #36	; 0x24
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7ff feed 	bl	80060a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80062ce:	f002 fbb9 	bl	8008a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80062d2:	2301      	movs	r3, #1
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08e      	sub	sp, #56	; 0x38
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <xQueueGenericCreateStatic+0x52>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <xQueueGenericCreateStatic+0x56>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <xQueueGenericCreateStatic+0x58>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	623b      	str	r3, [r7, #32]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d102      	bne.n	800635e <xQueueGenericCreateStatic+0x7e>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <xQueueGenericCreateStatic+0x82>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <xQueueGenericCreateStatic+0x84>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	61fb      	str	r3, [r7, #28]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800637e:	2350      	movs	r3, #80	; 0x50
 8006380:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2b50      	cmp	r3, #80	; 0x50
 8006386:	d00a      	beq.n	800639e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	61bb      	str	r3, [r7, #24]
}
 800639a:	bf00      	nop
 800639c:	e7fe      	b.n	800639c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800639e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00d      	beq.n	80063c6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063b2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4613      	mov	r3, r2
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f83f 	bl	8006444 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3730      	adds	r7, #48	; 0x30
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	4613      	mov	r3, r2
 80063dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xQueueGenericCreate+0x2a>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	3350      	adds	r3, #80	; 0x50
 8006408:	4618      	mov	r0, r3
 800640a:	f002 fc0d 	bl	8008c28 <pvPortMalloc>
 800640e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d011      	beq.n	800643a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	3350      	adds	r3, #80	; 0x50
 800641e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006428:	79fa      	ldrb	r2, [r7, #7]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 f805 	bl	8006444 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800643a:	69bb      	ldr	r3, [r7, #24]
	}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d103      	bne.n	8006460 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e002      	b.n	8006466 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006472:	2101      	movs	r1, #1
 8006474:	69b8      	ldr	r0, [r7, #24]
 8006476:	f7ff fecb 	bl	8006210 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	78fa      	ldrb	r2, [r7, #3]
 800647e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006482:	bf00      	nop
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08e      	sub	sp, #56	; 0x38
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <xQueueGenericSend+0x32>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064ba:	bf00      	nop
 80064bc:	e7fe      	b.n	80064bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d103      	bne.n	80064cc <xQueueGenericSend+0x40>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <xQueueGenericSend+0x44>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <xQueueGenericSend+0x46>
 80064d0:	2300      	movs	r3, #0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <xQueueGenericSend+0x60>
	__asm volatile
 80064d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064da:	f383 8811 	msr	BASEPRI, r3
 80064de:	f3bf 8f6f 	isb	sy
 80064e2:	f3bf 8f4f 	dsb	sy
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80064e8:	bf00      	nop
 80064ea:	e7fe      	b.n	80064ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d103      	bne.n	80064fa <xQueueGenericSend+0x6e>
 80064f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <xQueueGenericSend+0x72>
 80064fa:	2301      	movs	r3, #1
 80064fc:	e000      	b.n	8006500 <xQueueGenericSend+0x74>
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xQueueGenericSend+0x8e>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	623b      	str	r3, [r7, #32]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800651a:	f001 fc09 	bl	8007d30 <xTaskGetSchedulerState>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d102      	bne.n	800652a <xQueueGenericSend+0x9e>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <xQueueGenericSend+0xa2>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <xQueueGenericSend+0xa4>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10a      	bne.n	800654a <xQueueGenericSend+0xbe>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	61fb      	str	r3, [r7, #28]
}
 8006546:	bf00      	nop
 8006548:	e7fe      	b.n	8006548 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800654a:	f002 fa4b 	bl	80089e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	429a      	cmp	r2, r3
 8006558:	d302      	bcc.n	8006560 <xQueueGenericSend+0xd4>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b02      	cmp	r3, #2
 800655e:	d129      	bne.n	80065b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006566:	f000 fbf0 	bl	8006d4a <prvCopyDataToQueue>
 800656a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b00      	cmp	r3, #0
 8006572:	d010      	beq.n	8006596 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	3324      	adds	r3, #36	; 0x24
 8006578:	4618      	mov	r0, r3
 800657a:	f001 fa17 	bl	80079ac <xTaskRemoveFromEventList>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d013      	beq.n	80065ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006584:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <xQueueGenericSend+0x1f8>)
 8006586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	f3bf 8f6f 	isb	sy
 8006594:	e00a      	b.n	80065ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d007      	beq.n	80065ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800659c:	4b39      	ldr	r3, [pc, #228]	; (8006684 <xQueueGenericSend+0x1f8>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80065ac:	f002 fa4a 	bl	8008a44 <vPortExitCritical>
				return pdPASS;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e063      	b.n	800667c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ba:	f002 fa43 	bl	8008a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065be:	2300      	movs	r3, #0
 80065c0:	e05c      	b.n	800667c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d106      	bne.n	80065d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c8:	f107 0314 	add.w	r3, r7, #20
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 fa51 	bl	8007a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065d2:	2301      	movs	r3, #1
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065d6:	f002 fa35 	bl	8008a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065da:	f000 ffab 	bl	8007534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065de:	f002 fa01 	bl	80089e4 <vPortEnterCritical>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065e8:	b25b      	sxtb	r3, r3
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d103      	bne.n	80065f8 <xQueueGenericSend+0x16c>
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065fe:	b25b      	sxtb	r3, r3
 8006600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006604:	d103      	bne.n	800660e <xQueueGenericSend+0x182>
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800660e:	f002 fa19 	bl	8008a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006612:	1d3a      	adds	r2, r7, #4
 8006614:	f107 0314 	add.w	r3, r7, #20
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f001 fa40 	bl	8007aa0 <xTaskCheckForTimeOut>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d124      	bne.n	8006670 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006626:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006628:	f000 fc87 	bl	8006f3a <prvIsQueueFull>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d018      	beq.n	8006664 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	3310      	adds	r3, #16
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4611      	mov	r1, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f001 f966 	bl	800790c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006642:	f000 fc12 	bl	8006e6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006646:	f000 ff83 	bl	8007550 <xTaskResumeAll>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	f47f af7c 	bne.w	800654a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <xQueueGenericSend+0x1f8>)
 8006654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006658:	601a      	str	r2, [r3, #0]
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	e772      	b.n	800654a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006666:	f000 fc00 	bl	8006e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800666a:	f000 ff71 	bl	8007550 <xTaskResumeAll>
 800666e:	e76c      	b.n	800654a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006672:	f000 fbfa 	bl	8006e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006676:	f000 ff6b 	bl	8007550 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800667a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800667c:	4618      	mov	r0, r3
 800667e:	3738      	adds	r7, #56	; 0x38
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b090      	sub	sp, #64	; 0x40
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	2b00      	cmp	r3, #0
 800669e:	d10a      	bne.n	80066b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80066b2:	bf00      	nop
 80066b4:	e7fe      	b.n	80066b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d103      	bne.n	80066c4 <xQueueGenericSendFromISR+0x3c>
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <xQueueGenericSendFromISR+0x40>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <xQueueGenericSendFromISR+0x42>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d103      	bne.n	80066f2 <xQueueGenericSendFromISR+0x6a>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <xQueueGenericSendFromISR+0x6e>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueGenericSendFromISR+0x70>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	623b      	str	r3, [r7, #32]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006712:	f002 fa49 	bl	8008ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006716:	f3ef 8211 	mrs	r2, BASEPRI
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61fa      	str	r2, [r7, #28]
 800672c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800672e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006734:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673a:	429a      	cmp	r2, r3
 800673c:	d302      	bcc.n	8006744 <xQueueGenericSendFromISR+0xbc>
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b02      	cmp	r3, #2
 8006742:	d12f      	bne.n	80067a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800674e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006754:	683a      	ldr	r2, [r7, #0]
 8006756:	68b9      	ldr	r1, [r7, #8]
 8006758:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800675a:	f000 faf6 	bl	8006d4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800675e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d112      	bne.n	800678e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d016      	beq.n	800679e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f001 f919 	bl	80079ac <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00e      	beq.n	800679e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00b      	beq.n	800679e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e007      	b.n	800679e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800678e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006792:	3301      	adds	r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	b25a      	sxtb	r2, r3
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800679e:	2301      	movs	r3, #1
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80067a2:	e001      	b.n	80067a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80067a4:	2300      	movs	r3, #0
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3740      	adds	r7, #64	; 0x40
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
	...

080067c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	; 0x30
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10a      	bne.n	80067f0 <xQueueReceive+0x30>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	623b      	str	r3, [r7, #32]
}
 80067ec:	bf00      	nop
 80067ee:	e7fe      	b.n	80067ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <xQueueReceive+0x3e>
 80067f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <xQueueReceive+0x42>
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <xQueueReceive+0x44>
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10a      	bne.n	800681e <xQueueReceive+0x5e>
	__asm volatile
 8006808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680c:	f383 8811 	msr	BASEPRI, r3
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	f3bf 8f4f 	dsb	sy
 8006818:	61fb      	str	r3, [r7, #28]
}
 800681a:	bf00      	nop
 800681c:	e7fe      	b.n	800681c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800681e:	f001 fa87 	bl	8007d30 <xTaskGetSchedulerState>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <xQueueReceive+0x6e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <xQueueReceive+0x72>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <xQueueReceive+0x74>
 8006832:	2300      	movs	r3, #0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xQueueReceive+0x8e>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	61bb      	str	r3, [r7, #24]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800684e:	f002 f8c9 	bl	80089e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01f      	beq.n	800689e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006862:	f000 fadc 	bl	8006e1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	1e5a      	subs	r2, r3, #1
 800686a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	3310      	adds	r3, #16
 800687a:	4618      	mov	r0, r3
 800687c:	f001 f896 	bl	80079ac <xTaskRemoveFromEventList>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d007      	beq.n	8006896 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <xQueueReceive+0x1bc>)
 8006888:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006896:	f002 f8d5 	bl	8008a44 <vPortExitCritical>
				return pdPASS;
 800689a:	2301      	movs	r3, #1
 800689c:	e069      	b.n	8006972 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068a4:	f002 f8ce 	bl	8008a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e062      	b.n	8006972 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068b2:	f107 0310 	add.w	r3, r7, #16
 80068b6:	4618      	mov	r0, r3
 80068b8:	f001 f8dc 	bl	8007a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068c0:	f002 f8c0 	bl	8008a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068c4:	f000 fe36 	bl	8007534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068c8:	f002 f88c 	bl	80089e4 <vPortEnterCritical>
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d103      	bne.n	80068e2 <xQueueReceive+0x122>
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e8:	b25b      	sxtb	r3, r3
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ee:	d103      	bne.n	80068f8 <xQueueReceive+0x138>
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f8:	f002 f8a4 	bl	8008a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068fc:	1d3a      	adds	r2, r7, #4
 80068fe:	f107 0310 	add.w	r3, r7, #16
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f001 f8cb 	bl	8007aa0 <xTaskCheckForTimeOut>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d123      	bne.n	8006958 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006912:	f000 fafc 	bl	8006f0e <prvIsQueueEmpty>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d017      	beq.n	800694c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800691c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691e:	3324      	adds	r3, #36	; 0x24
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	4611      	mov	r1, r2
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fff1 	bl	800790c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800692a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692c:	f000 fa9d 	bl	8006e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006930:	f000 fe0e 	bl	8007550 <xTaskResumeAll>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d189      	bne.n	800684e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <xQueueReceive+0x1bc>)
 800693c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	e780      	b.n	800684e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800694c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800694e:	f000 fa8c 	bl	8006e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006952:	f000 fdfd 	bl	8007550 <xTaskResumeAll>
 8006956:	e77a      	b.n	800684e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800695a:	f000 fa86 	bl	8006e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800695e:	f000 fdf7 	bl	8007550 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006964:	f000 fad3 	bl	8006f0e <prvIsQueueEmpty>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	f43f af6f 	beq.w	800684e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006970:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006972:	4618      	mov	r0, r3
 8006974:	3730      	adds	r7, #48	; 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	e000ed04 	.word	0xe000ed04

08006980 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08e      	sub	sp, #56	; 0x38
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800698a:	2300      	movs	r3, #0
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006992:	2300      	movs	r3, #0
 8006994:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	623b      	str	r3, [r7, #32]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	61fb      	str	r3, [r7, #28]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069d0:	f001 f9ae 	bl	8007d30 <xTaskGetSchedulerState>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <xQueueSemaphoreTake+0x60>
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <xQueueSemaphoreTake+0x64>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <xQueueSemaphoreTake+0x66>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	61bb      	str	r3, [r7, #24]
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a00:	f001 fff0 	bl	80089e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d024      	beq.n	8006a5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	1e5a      	subs	r2, r3, #1
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a20:	f001 fafc 	bl	800801c <pvTaskIncrementMutexHeldCount>
 8006a24:	4602      	mov	r2, r0
 8006a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00f      	beq.n	8006a52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	3310      	adds	r3, #16
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 ffb8 	bl	80079ac <xTaskRemoveFromEventList>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a42:	4b54      	ldr	r3, [pc, #336]	; (8006b94 <xQueueSemaphoreTake+0x214>)
 8006a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a52:	f001 fff7 	bl	8008a44 <vPortExitCritical>
				return pdPASS;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e097      	b.n	8006b8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d111      	bne.n	8006a84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	617b      	str	r3, [r7, #20]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a7c:	f001 ffe2 	bl	8008a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e082      	b.n	8006b8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a8a:	f107 030c 	add.w	r3, r7, #12
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fff0 	bl	8007a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a94:	2301      	movs	r3, #1
 8006a96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a98:	f001 ffd4 	bl	8008a44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a9c:	f000 fd4a 	bl	8007534 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aa0:	f001 ffa0 	bl	80089e4 <vPortEnterCritical>
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006aaa:	b25b      	sxtb	r3, r3
 8006aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab0:	d103      	bne.n	8006aba <xQueueSemaphoreTake+0x13a>
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ac0:	b25b      	sxtb	r3, r3
 8006ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac6:	d103      	bne.n	8006ad0 <xQueueSemaphoreTake+0x150>
 8006ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ad0:	f001 ffb8 	bl	8008a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ad4:	463a      	mov	r2, r7
 8006ad6:	f107 030c 	add.w	r3, r7, #12
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 ffdf 	bl	8007aa0 <xTaskCheckForTimeOut>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d132      	bne.n	8006b4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006aea:	f000 fa10 	bl	8006f0e <prvIsQueueEmpty>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d026      	beq.n	8006b42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006afc:	f001 ff72 	bl	80089e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f931 	bl	8007d6c <xTaskPriorityInherit>
 8006b0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006b0c:	f001 ff9a 	bl	8008a44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b12:	3324      	adds	r3, #36	; 0x24
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fef7 	bl	800790c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b20:	f000 f9a3 	bl	8006e6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b24:	f000 fd14 	bl	8007550 <xTaskResumeAll>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f47f af68 	bne.w	8006a00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b30:	4b18      	ldr	r3, [pc, #96]	; (8006b94 <xQueueSemaphoreTake+0x214>)
 8006b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	e75e      	b.n	8006a00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b44:	f000 f991 	bl	8006e6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b48:	f000 fd02 	bl	8007550 <xTaskResumeAll>
 8006b4c:	e758      	b.n	8006a00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b50:	f000 f98b 	bl	8006e6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b54:	f000 fcfc 	bl	8007550 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b5a:	f000 f9d8 	bl	8006f0e <prvIsQueueEmpty>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f43f af4d 	beq.w	8006a00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00d      	beq.n	8006b88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b6c:	f001 ff3a 	bl	80089e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b72:	f000 f8d2 	bl	8006d1a <prvGetDisinheritPriorityAfterTimeout>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f9ca 	bl	8007f18 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b84:	f001 ff5e 	bl	8008a44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3738      	adds	r7, #56	; 0x38
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	e000ed04 	.word	0xe000ed04

08006b98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	; 0x38
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	623b      	str	r3, [r7, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <xQueueReceiveFromISR+0x3a>
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <xQueueReceiveFromISR+0x3e>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueReceiveFromISR+0x40>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61fb      	str	r3, [r7, #28]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bf2:	f001 ffd9 	bl	8008ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8006bf6:	f3ef 8211 	mrs	r2, BASEPRI
 8006bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfe:	f383 8811 	msr	BASEPRI, r3
 8006c02:	f3bf 8f6f 	isb	sy
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	61ba      	str	r2, [r7, #24]
 8006c0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d02f      	beq.n	8006c7e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c28:	68b9      	ldr	r1, [r7, #8]
 8006c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c2c:	f000 f8f7 	bl	8006e1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d112      	bne.n	8006c68 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d016      	beq.n	8006c78 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	3310      	adds	r3, #16
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 feac 	bl	80079ac <xTaskRemoveFromEventList>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00e      	beq.n	8006c78 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e007      	b.n	8006c78 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	b25a      	sxtb	r2, r3
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7c:	e001      	b.n	8006c82 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f383 8811 	msr	BASEPRI, r3
}
 8006c8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3738      	adds	r7, #56	; 0x38
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60bb      	str	r3, [r7, #8]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006cbc:	f001 fe92 	bl	80089e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006cc6:	f001 febd 	bl	8008a44 <vPortExitCritical>

	return uxReturn;
 8006cca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <vQueueDelete+0x28>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60bb      	str	r3, [r7, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f95f 	bl	8006fc0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f002 f857 	bl	8008dc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d006      	beq.n	8006d38 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006d34:	60fb      	str	r3, [r7, #12]
 8006d36:	e001      	b.n	8006d3c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	60b9      	str	r1, [r7, #8]
 8006d54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10d      	bne.n	8006d84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d14d      	bne.n	8006e0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f001 f861 	bl	8007e3c <xTaskPriorityDisinherit>
 8006d7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	609a      	str	r2, [r3, #8]
 8006d82:	e043      	b.n	8006e0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d119      	bne.n	8006dbe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6858      	ldr	r0, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	461a      	mov	r2, r3
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	f003 fb3c 	bl	800a412 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	441a      	add	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d32b      	bcc.n	8006e0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	605a      	str	r2, [r3, #4]
 8006dbc:	e026      	b.n	8006e0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	68d8      	ldr	r0, [r3, #12]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	f003 fb22 	bl	800a412 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	425b      	negs	r3, r3
 8006dd8:	441a      	add	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d207      	bcs.n	8006dfa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	425b      	negs	r3, r3
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d105      	bne.n	8006e0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e14:	697b      	ldr	r3, [r7, #20]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d018      	beq.n	8006e62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	441a      	add	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d303      	bcc.n	8006e52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	68d9      	ldr	r1, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6838      	ldr	r0, [r7, #0]
 8006e5e:	f003 fad8 	bl	800a412 <memcpy>
	}
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e72:	f001 fdb7 	bl	80089e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e7e:	e011      	b.n	8006ea4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3324      	adds	r3, #36	; 0x24
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fd8d 	bl	80079ac <xTaskRemoveFromEventList>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e98:	f000 fe64 	bl	8007b64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ea4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	dce9      	bgt.n	8006e80 <prvUnlockQueue+0x16>
 8006eac:	e000      	b.n	8006eb0 <prvUnlockQueue+0x46>
					break;
 8006eae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	22ff      	movs	r2, #255	; 0xff
 8006eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006eb8:	f001 fdc4 	bl	8008a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ebc:	f001 fd92 	bl	80089e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ec6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ec8:	e011      	b.n	8006eee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d012      	beq.n	8006ef8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3310      	adds	r3, #16
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fd68 	bl	80079ac <xTaskRemoveFromEventList>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ee2:	f000 fe3f 	bl	8007b64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dce9      	bgt.n	8006eca <prvUnlockQueue+0x60>
 8006ef6:	e000      	b.n	8006efa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ef8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	22ff      	movs	r2, #255	; 0xff
 8006efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f02:	f001 fd9f 	bl	8008a44 <vPortExitCritical>
}
 8006f06:	bf00      	nop
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f16:	f001 fd65 	bl	80089e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f22:	2301      	movs	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e001      	b.n	8006f2c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f2c:	f001 fd8a 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 8006f30:	68fb      	ldr	r3, [r7, #12]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f42:	f001 fd4f 	bl	80089e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d102      	bne.n	8006f58 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f52:	2301      	movs	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e001      	b.n	8006f5c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f5c:	f001 fd72 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 8006f60:	68fb      	ldr	r3, [r7, #12]
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f76:	2300      	movs	r3, #0
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e014      	b.n	8006fa6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f7c:	4a0f      	ldr	r2, [pc, #60]	; (8006fbc <vQueueAddToRegistry+0x50>)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10b      	bne.n	8006fa0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f88:	490c      	ldr	r1, [pc, #48]	; (8006fbc <vQueueAddToRegistry+0x50>)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f92:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <vQueueAddToRegistry+0x50>)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	4413      	add	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f9e:	e006      	b.n	8006fae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b07      	cmp	r3, #7
 8006faa:	d9e7      	bls.n	8006f7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	20000b28 	.word	0x20000b28

08006fc0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	e016      	b.n	8006ffc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006fce:	4a10      	ldr	r2, [pc, #64]	; (8007010 <vQueueUnregisterQueue+0x50>)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	4413      	add	r3, r2
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d10b      	bne.n	8006ff6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006fde:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <vQueueUnregisterQueue+0x50>)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <vQueueUnregisterQueue+0x50>)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]
				break;
 8006ff4:	e006      	b.n	8007004 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b07      	cmp	r3, #7
 8007000:	d9e5      	bls.n	8006fce <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	20000b28 	.word	0x20000b28

08007014 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007024:	f001 fcde 	bl	80089e4 <vPortEnterCritical>
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d103      	bne.n	800703e <vQueueWaitForMessageRestricted+0x2a>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007044:	b25b      	sxtb	r3, r3
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d103      	bne.n	8007054 <vQueueWaitForMessageRestricted+0x40>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007054:	f001 fcf6 	bl	8008a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705c:	2b00      	cmp	r3, #0
 800705e:	d106      	bne.n	800706e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	3324      	adds	r3, #36	; 0x24
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fc73 	bl	8007954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f7ff fefb 	bl	8006e6a <prvUnlockQueue>
	}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08e      	sub	sp, #56	; 0x38
 8007080:	af04      	add	r7, sp, #16
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10a      	bne.n	80070a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	623b      	str	r3, [r7, #32]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10a      	bne.n	80070c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80070ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	61fb      	str	r3, [r7, #28]
}
 80070be:	bf00      	nop
 80070c0:	e7fe      	b.n	80070c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070c2:	23a8      	movs	r3, #168	; 0xa8
 80070c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	2ba8      	cmp	r3, #168	; 0xa8
 80070ca:	d00a      	beq.n	80070e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	61bb      	str	r3, [r7, #24]
}
 80070de:	bf00      	nop
 80070e0:	e7fe      	b.n	80070e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80070e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d01e      	beq.n	8007128 <xTaskCreateStatic+0xac>
 80070ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01b      	beq.n	8007128 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	2202      	movs	r2, #2
 80070fe:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007102:	2300      	movs	r3, #0
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	f107 0314 	add.w	r3, r7, #20
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	68b9      	ldr	r1, [r7, #8]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f000 f850 	bl	80071c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007122:	f000 f8f3 	bl	800730c <prvAddNewTaskToReadyList>
 8007126:	e001      	b.n	800712c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800712c:	697b      	ldr	r3, [r7, #20]
	}
 800712e:	4618      	mov	r0, r3
 8007130:	3728      	adds	r7, #40	; 0x28
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007136:	b580      	push	{r7, lr}
 8007138:	b08c      	sub	sp, #48	; 0x30
 800713a:	af04      	add	r7, sp, #16
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4618      	mov	r0, r3
 800714c:	f001 fd6c 	bl	8008c28 <pvPortMalloc>
 8007150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00e      	beq.n	8007176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007158:	20a8      	movs	r0, #168	; 0xa8
 800715a:	f001 fd65 	bl	8008c28 <pvPortMalloc>
 800715e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
 800716c:	e005      	b.n	800717a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800716e:	6978      	ldr	r0, [r7, #20]
 8007170:	f001 fe26 	bl	8008dc0 <vPortFree>
 8007174:	e001      	b.n	800717a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007176:	2300      	movs	r3, #0
 8007178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d017      	beq.n	80071b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007188:	88fa      	ldrh	r2, [r7, #6]
 800718a:	2300      	movs	r3, #0
 800718c:	9303      	str	r3, [sp, #12]
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 f80e 	bl	80071c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071a4:	69f8      	ldr	r0, [r7, #28]
 80071a6:	f000 f8b1 	bl	800730c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071aa:	2301      	movs	r3, #1
 80071ac:	61bb      	str	r3, [r7, #24]
 80071ae:	e002      	b.n	80071b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071b0:	f04f 33ff 	mov.w	r3, #4294967295
 80071b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071b6:	69bb      	ldr	r3, [r7, #24]
	}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	461a      	mov	r2, r3
 80071d8:	21a5      	movs	r1, #165	; 0xa5
 80071da:	f003 f825 	bl	800a228 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80071e8:	3b01      	subs	r3, #1
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f023 0307 	bic.w	r3, r3, #7
 80071f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00a      	beq.n	8007218 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	617b      	str	r3, [r7, #20]
}
 8007214:	bf00      	nop
 8007216:	e7fe      	b.n	8007216 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d01f      	beq.n	800725e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	e012      	b.n	800724a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	4413      	add	r3, r2
 800722a:	7819      	ldrb	r1, [r3, #0]
 800722c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	3334      	adds	r3, #52	; 0x34
 8007234:	460a      	mov	r2, r1
 8007236:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	4413      	add	r3, r2
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	3301      	adds	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	2b0f      	cmp	r3, #15
 800724e:	d9e9      	bls.n	8007224 <prvInitialiseNewTask+0x64>
 8007250:	e000      	b.n	8007254 <prvInitialiseNewTask+0x94>
			{
				break;
 8007252:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800725c:	e003      	b.n	8007266 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	2b37      	cmp	r3, #55	; 0x37
 800726a:	d901      	bls.n	8007270 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800726c:	2337      	movs	r3, #55	; 0x37
 800726e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007274:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800727a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	2200      	movs	r2, #0
 8007280:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	3304      	adds	r3, #4
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe ff2e 	bl	80060e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	3318      	adds	r3, #24
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe ff29 	bl	80060e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800729a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072be:	3354      	adds	r3, #84	; 0x54
 80072c0:	224c      	movs	r2, #76	; 0x4c
 80072c2:	2100      	movs	r1, #0
 80072c4:	4618      	mov	r0, r3
 80072c6:	f002 ffaf 	bl	800a228 <memset>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	4a0c      	ldr	r2, [pc, #48]	; (8007300 <prvInitialiseNewTask+0x140>)
 80072ce:	659a      	str	r2, [r3, #88]	; 0x58
 80072d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d2:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <prvInitialiseNewTask+0x144>)
 80072d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	4a0b      	ldr	r2, [pc, #44]	; (8007308 <prvInitialiseNewTask+0x148>)
 80072da:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80072dc:	683a      	ldr	r2, [r7, #0]
 80072de:	68f9      	ldr	r1, [r7, #12]
 80072e0:	69b8      	ldr	r0, [r7, #24]
 80072e2:	f001 fa51 	bl	8008788 <pxPortInitialiseStack>
 80072e6:	4602      	mov	r2, r0
 80072e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072f8:	bf00      	nop
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	20004dbc 	.word	0x20004dbc
 8007304:	20004e24 	.word	0x20004e24
 8007308:	20004e8c 	.word	0x20004e8c

0800730c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007314:	f001 fb66 	bl	80089e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007318:	4b2d      	ldr	r3, [pc, #180]	; (80073d0 <prvAddNewTaskToReadyList+0xc4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3301      	adds	r3, #1
 800731e:	4a2c      	ldr	r2, [pc, #176]	; (80073d0 <prvAddNewTaskToReadyList+0xc4>)
 8007320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007322:	4b2c      	ldr	r3, [pc, #176]	; (80073d4 <prvAddNewTaskToReadyList+0xc8>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d109      	bne.n	800733e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800732a:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <prvAddNewTaskToReadyList+0xc8>)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007330:	4b27      	ldr	r3, [pc, #156]	; (80073d0 <prvAddNewTaskToReadyList+0xc4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d110      	bne.n	800735a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007338:	f000 fc38 	bl	8007bac <prvInitialiseTaskLists>
 800733c:	e00d      	b.n	800735a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800733e:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <prvAddNewTaskToReadyList+0xcc>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007346:	4b23      	ldr	r3, [pc, #140]	; (80073d4 <prvAddNewTaskToReadyList+0xc8>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	429a      	cmp	r2, r3
 8007352:	d802      	bhi.n	800735a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007354:	4a1f      	ldr	r2, [pc, #124]	; (80073d4 <prvAddNewTaskToReadyList+0xc8>)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800735a:	4b20      	ldr	r3, [pc, #128]	; (80073dc <prvAddNewTaskToReadyList+0xd0>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	4a1e      	ldr	r2, [pc, #120]	; (80073dc <prvAddNewTaskToReadyList+0xd0>)
 8007362:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007364:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <prvAddNewTaskToReadyList+0xd0>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	4b1b      	ldr	r3, [pc, #108]	; (80073e0 <prvAddNewTaskToReadyList+0xd4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d903      	bls.n	8007380 <prvAddNewTaskToReadyList+0x74>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <prvAddNewTaskToReadyList+0xd4>)
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4a15      	ldr	r2, [pc, #84]	; (80073e4 <prvAddNewTaskToReadyList+0xd8>)
 800738e:	441a      	add	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fe feb3 	bl	8006102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800739c:	f001 fb52 	bl	8008a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073a0:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <prvAddNewTaskToReadyList+0xcc>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00e      	beq.n	80073c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <prvAddNewTaskToReadyList+0xc8>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d207      	bcs.n	80073c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <prvAddNewTaskToReadyList+0xdc>)
 80073b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073c6:	bf00      	nop
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000103c 	.word	0x2000103c
 80073d4:	20000b68 	.word	0x20000b68
 80073d8:	20001048 	.word	0x20001048
 80073dc:	20001058 	.word	0x20001058
 80073e0:	20001044 	.word	0x20001044
 80073e4:	20000b6c 	.word	0x20000b6c
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d017      	beq.n	800742e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <vTaskDelay+0x60>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <vTaskDelay+0x30>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	60bb      	str	r3, [r7, #8]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800741c:	f000 f88a 	bl	8007534 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007420:	2100      	movs	r1, #0
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fe0e 	bl	8008044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007428:	f000 f892 	bl	8007550 <xTaskResumeAll>
 800742c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d107      	bne.n	8007444 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007434:	4b06      	ldr	r3, [pc, #24]	; (8007450 <vTaskDelay+0x64>)
 8007436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20001064 	.word	0x20001064
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007462:	463a      	mov	r2, r7
 8007464:	1d39      	adds	r1, r7, #4
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe fde8 	bl	8006040 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	9202      	str	r2, [sp, #8]
 8007478:	9301      	str	r3, [sp, #4]
 800747a:	2300      	movs	r3, #0
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	2300      	movs	r3, #0
 8007480:	460a      	mov	r2, r1
 8007482:	4924      	ldr	r1, [pc, #144]	; (8007514 <vTaskStartScheduler+0xc0>)
 8007484:	4824      	ldr	r0, [pc, #144]	; (8007518 <vTaskStartScheduler+0xc4>)
 8007486:	f7ff fdf9 	bl	800707c <xTaskCreateStatic>
 800748a:	4603      	mov	r3, r0
 800748c:	4a23      	ldr	r2, [pc, #140]	; (800751c <vTaskStartScheduler+0xc8>)
 800748e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007490:	4b22      	ldr	r3, [pc, #136]	; (800751c <vTaskStartScheduler+0xc8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007498:	2301      	movs	r3, #1
 800749a:	617b      	str	r3, [r7, #20]
 800749c:	e001      	b.n	80074a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d102      	bne.n	80074ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074a8:	f000 fe20 	bl	80080ec <xTimerCreateTimerTask>
 80074ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d11b      	bne.n	80074ec <vTaskStartScheduler+0x98>
	__asm volatile
 80074b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	613b      	str	r3, [r7, #16]
}
 80074c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074c8:	4b15      	ldr	r3, [pc, #84]	; (8007520 <vTaskStartScheduler+0xcc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3354      	adds	r3, #84	; 0x54
 80074ce:	4a15      	ldr	r2, [pc, #84]	; (8007524 <vTaskStartScheduler+0xd0>)
 80074d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80074d2:	4b15      	ldr	r3, [pc, #84]	; (8007528 <vTaskStartScheduler+0xd4>)
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <vTaskStartScheduler+0xd8>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80074e0:	4b13      	ldr	r3, [pc, #76]	; (8007530 <vTaskStartScheduler+0xdc>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80074e6:	f001 f9db 	bl	80088a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80074ea:	e00e      	b.n	800750a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d10a      	bne.n	800750a <vTaskStartScheduler+0xb6>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	60fb      	str	r3, [r7, #12]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <vTaskStartScheduler+0xb4>
}
 800750a:	bf00      	nop
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	0800e86c 	.word	0x0800e86c
 8007518:	08007b7d 	.word	0x08007b7d
 800751c:	20001060 	.word	0x20001060
 8007520:	20000b68 	.word	0x20000b68
 8007524:	200000b0 	.word	0x200000b0
 8007528:	2000105c 	.word	0x2000105c
 800752c:	20001048 	.word	0x20001048
 8007530:	20001040 	.word	0x20001040

08007534 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007534:	b480      	push	{r7}
 8007536:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007538:	4b04      	ldr	r3, [pc, #16]	; (800754c <vTaskSuspendAll+0x18>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	4a03      	ldr	r2, [pc, #12]	; (800754c <vTaskSuspendAll+0x18>)
 8007540:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007542:	bf00      	nop
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20001064 	.word	0x20001064

08007550 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800755a:	2300      	movs	r3, #0
 800755c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800755e:	4b42      	ldr	r3, [pc, #264]	; (8007668 <xTaskResumeAll+0x118>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <xTaskResumeAll+0x2c>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	603b      	str	r3, [r7, #0]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800757c:	f001 fa32 	bl	80089e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007580:	4b39      	ldr	r3, [pc, #228]	; (8007668 <xTaskResumeAll+0x118>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3b01      	subs	r3, #1
 8007586:	4a38      	ldr	r2, [pc, #224]	; (8007668 <xTaskResumeAll+0x118>)
 8007588:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800758a:	4b37      	ldr	r3, [pc, #220]	; (8007668 <xTaskResumeAll+0x118>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d162      	bne.n	8007658 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007592:	4b36      	ldr	r3, [pc, #216]	; (800766c <xTaskResumeAll+0x11c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d05e      	beq.n	8007658 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800759a:	e02f      	b.n	80075fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b34      	ldr	r3, [pc, #208]	; (8007670 <xTaskResumeAll+0x120>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3318      	adds	r3, #24
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fe07 	bl	80061bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fe02 	bl	80061bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <xTaskResumeAll+0x124>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d903      	bls.n	80075cc <xTaskResumeAll+0x7c>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	4a2a      	ldr	r2, [pc, #168]	; (8007674 <xTaskResumeAll+0x124>)
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4a27      	ldr	r2, [pc, #156]	; (8007678 <xTaskResumeAll+0x128>)
 80075da:	441a      	add	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3304      	adds	r3, #4
 80075e0:	4619      	mov	r1, r3
 80075e2:	4610      	mov	r0, r2
 80075e4:	f7fe fd8d 	bl	8006102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	4b23      	ldr	r3, [pc, #140]	; (800767c <xTaskResumeAll+0x12c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d302      	bcc.n	80075fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80075f6:	4b22      	ldr	r3, [pc, #136]	; (8007680 <xTaskResumeAll+0x130>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075fc:	4b1c      	ldr	r3, [pc, #112]	; (8007670 <xTaskResumeAll+0x120>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1cb      	bne.n	800759c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800760a:	f000 fb71 	bl	8007cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800760e:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <xTaskResumeAll+0x134>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d010      	beq.n	800763c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800761a:	f000 f859 	bl	80076d0 <xTaskIncrementTick>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007624:	4b16      	ldr	r3, [pc, #88]	; (8007680 <xTaskResumeAll+0x130>)
 8007626:	2201      	movs	r2, #1
 8007628:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	3b01      	subs	r3, #1
 800762e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f1      	bne.n	800761a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <xTaskResumeAll+0x134>)
 8007638:	2200      	movs	r2, #0
 800763a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800763c:	4b10      	ldr	r3, [pc, #64]	; (8007680 <xTaskResumeAll+0x130>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d009      	beq.n	8007658 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007648:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <xTaskResumeAll+0x138>)
 800764a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800764e:	601a      	str	r2, [r3, #0]
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007658:	f001 f9f4 	bl	8008a44 <vPortExitCritical>

	return xAlreadyYielded;
 800765c:	68bb      	ldr	r3, [r7, #8]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20001064 	.word	0x20001064
 800766c:	2000103c 	.word	0x2000103c
 8007670:	20000ffc 	.word	0x20000ffc
 8007674:	20001044 	.word	0x20001044
 8007678:	20000b6c 	.word	0x20000b6c
 800767c:	20000b68 	.word	0x20000b68
 8007680:	20001050 	.word	0x20001050
 8007684:	2000104c 	.word	0x2000104c
 8007688:	e000ed04 	.word	0xe000ed04

0800768c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007692:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <xTaskGetTickCount+0x1c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007698:	687b      	ldr	r3, [r7, #4]
}
 800769a:	4618      	mov	r0, r3
 800769c:	370c      	adds	r7, #12
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20001040 	.word	0x20001040

080076ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076b2:	f001 fa79 	bl	8008ba8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80076ba:	4b04      	ldr	r3, [pc, #16]	; (80076cc <xTaskGetTickCountFromISR+0x20>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076c0:	683b      	ldr	r3, [r7, #0]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20001040 	.word	0x20001040

080076d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076da:	4b4f      	ldr	r3, [pc, #316]	; (8007818 <xTaskIncrementTick+0x148>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 808f 	bne.w	8007802 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076e4:	4b4d      	ldr	r3, [pc, #308]	; (800781c <xTaskIncrementTick+0x14c>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076ec:	4a4b      	ldr	r2, [pc, #300]	; (800781c <xTaskIncrementTick+0x14c>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d120      	bne.n	800773a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076f8:	4b49      	ldr	r3, [pc, #292]	; (8007820 <xTaskIncrementTick+0x150>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <xTaskIncrementTick+0x48>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	603b      	str	r3, [r7, #0]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskIncrementTick+0x46>
 8007718:	4b41      	ldr	r3, [pc, #260]	; (8007820 <xTaskIncrementTick+0x150>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <xTaskIncrementTick+0x154>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a3f      	ldr	r2, [pc, #252]	; (8007820 <xTaskIncrementTick+0x150>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4a3f      	ldr	r2, [pc, #252]	; (8007824 <xTaskIncrementTick+0x154>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4b3e      	ldr	r3, [pc, #248]	; (8007828 <xTaskIncrementTick+0x158>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a3d      	ldr	r2, [pc, #244]	; (8007828 <xTaskIncrementTick+0x158>)
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	f000 fadb 	bl	8007cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800773a:	4b3c      	ldr	r3, [pc, #240]	; (800782c <xTaskIncrementTick+0x15c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d349      	bcc.n	80077d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007744:	4b36      	ldr	r3, [pc, #216]	; (8007820 <xTaskIncrementTick+0x150>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	4b37      	ldr	r3, [pc, #220]	; (800782c <xTaskIncrementTick+0x15c>)
 8007750:	f04f 32ff 	mov.w	r2, #4294967295
 8007754:	601a      	str	r2, [r3, #0]
					break;
 8007756:	e03f      	b.n	80077d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b31      	ldr	r3, [pc, #196]	; (8007820 <xTaskIncrementTick+0x150>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d203      	bcs.n	8007778 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007770:	4a2e      	ldr	r2, [pc, #184]	; (800782c <xTaskIncrementTick+0x15c>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007776:	e02f      	b.n	80077d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3304      	adds	r3, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fd1d 	bl	80061bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3318      	adds	r3, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fd14 	bl	80061bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007798:	4b25      	ldr	r3, [pc, #148]	; (8007830 <xTaskIncrementTick+0x160>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d903      	bls.n	80077a8 <xTaskIncrementTick+0xd8>
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a4:	4a22      	ldr	r2, [pc, #136]	; (8007830 <xTaskIncrementTick+0x160>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <xTaskIncrementTick+0x164>)
 80077b6:	441a      	add	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe fc9f 	bl	8006102 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c8:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <xTaskIncrementTick+0x168>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b8      	bcc.n	8007744 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d6:	e7b5      	b.n	8007744 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b17      	ldr	r3, [pc, #92]	; (8007838 <xTaskIncrementTick+0x168>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	4915      	ldr	r1, [pc, #84]	; (8007834 <xTaskIncrementTick+0x164>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d901      	bls.n	80077f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <xTaskIncrementTick+0x16c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e004      	b.n	800780c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007802:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <xTaskIncrementTick+0x170>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a0d      	ldr	r2, [pc, #52]	; (8007840 <xTaskIncrementTick+0x170>)
 800780a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20001064 	.word	0x20001064
 800781c:	20001040 	.word	0x20001040
 8007820:	20000ff4 	.word	0x20000ff4
 8007824:	20000ff8 	.word	0x20000ff8
 8007828:	20001054 	.word	0x20001054
 800782c:	2000105c 	.word	0x2000105c
 8007830:	20001044 	.word	0x20001044
 8007834:	20000b6c 	.word	0x20000b6c
 8007838:	20000b68 	.word	0x20000b68
 800783c:	20001050 	.word	0x20001050
 8007840:	2000104c 	.word	0x2000104c

08007844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007844:	b480      	push	{r7}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800784a:	4b2a      	ldr	r3, [pc, #168]	; (80078f4 <vTaskSwitchContext+0xb0>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007852:	4b29      	ldr	r3, [pc, #164]	; (80078f8 <vTaskSwitchContext+0xb4>)
 8007854:	2201      	movs	r2, #1
 8007856:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007858:	e046      	b.n	80078e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800785a:	4b27      	ldr	r3, [pc, #156]	; (80078f8 <vTaskSwitchContext+0xb4>)
 800785c:	2200      	movs	r2, #0
 800785e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007860:	4b26      	ldr	r3, [pc, #152]	; (80078fc <vTaskSwitchContext+0xb8>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e010      	b.n	800788a <vTaskSwitchContext+0x46>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <vTaskSwitchContext+0x40>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	607b      	str	r3, [r7, #4]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <vTaskSwitchContext+0x3e>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b01      	subs	r3, #1
 8007888:	60fb      	str	r3, [r7, #12]
 800788a:	491d      	ldr	r1, [pc, #116]	; (8007900 <vTaskSwitchContext+0xbc>)
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d0e4      	beq.n	8007868 <vTaskSwitchContext+0x24>
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <vTaskSwitchContext+0xbc>)
 80078aa:	4413      	add	r3, r2
 80078ac:	60bb      	str	r3, [r7, #8]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	605a      	str	r2, [r3, #4]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	3308      	adds	r3, #8
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d104      	bne.n	80078ce <vTaskSwitchContext+0x8a>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	605a      	str	r2, [r3, #4]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <vTaskSwitchContext+0xc0>)
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4a08      	ldr	r2, [pc, #32]	; (80078fc <vTaskSwitchContext+0xb8>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078de:	4b09      	ldr	r3, [pc, #36]	; (8007904 <vTaskSwitchContext+0xc0>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3354      	adds	r3, #84	; 0x54
 80078e4:	4a08      	ldr	r2, [pc, #32]	; (8007908 <vTaskSwitchContext+0xc4>)
 80078e6:	6013      	str	r3, [r2, #0]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr
 80078f4:	20001064 	.word	0x20001064
 80078f8:	20001050 	.word	0x20001050
 80078fc:	20001044 	.word	0x20001044
 8007900:	20000b6c 	.word	0x20000b6c
 8007904:	20000b68 	.word	0x20000b68
 8007908:	200000b0 	.word	0x200000b0

0800790c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d10a      	bne.n	8007932 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60fb      	str	r3, [r7, #12]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007932:	4b07      	ldr	r3, [pc, #28]	; (8007950 <vTaskPlaceOnEventList+0x44>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3318      	adds	r3, #24
 8007938:	4619      	mov	r1, r3
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fe fc05 	bl	800614a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007940:	2101      	movs	r1, #1
 8007942:	6838      	ldr	r0, [r7, #0]
 8007944:	f000 fb7e 	bl	8008044 <prvAddCurrentTaskToDelayedList>
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000b68 	.word	0x20000b68

08007954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10a      	bne.n	800797c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	617b      	str	r3, [r7, #20]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3318      	adds	r3, #24
 8007982:	4619      	mov	r1, r3
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f7fe fbbc 	bl	8006102 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007990:	f04f 33ff 	mov.w	r3, #4294967295
 8007994:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	68b8      	ldr	r0, [r7, #8]
 800799a:	f000 fb53 	bl	8008044 <prvAddCurrentTaskToDelayedList>
	}
 800799e:	bf00      	nop
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20000b68 	.word	0x20000b68

080079ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	60fb      	str	r3, [r7, #12]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	3318      	adds	r3, #24
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fbed 	bl	80061bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e2:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <xTaskRemoveFromEventList+0xb0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d11d      	bne.n	8007a26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe fbe4 	bl	80061bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f8:	4b19      	ldr	r3, [pc, #100]	; (8007a60 <xTaskRemoveFromEventList+0xb4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d903      	bls.n	8007a08 <xTaskRemoveFromEventList+0x5c>
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a16      	ldr	r2, [pc, #88]	; (8007a60 <xTaskRemoveFromEventList+0xb4>)
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4a13      	ldr	r2, [pc, #76]	; (8007a64 <xTaskRemoveFromEventList+0xb8>)
 8007a16:	441a      	add	r2, r3
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	f7fe fb6f 	bl	8006102 <vListInsertEnd>
 8007a24:	e005      	b.n	8007a32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	3318      	adds	r3, #24
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	480e      	ldr	r0, [pc, #56]	; (8007a68 <xTaskRemoveFromEventList+0xbc>)
 8007a2e:	f7fe fb68 	bl	8006102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a36:	4b0d      	ldr	r3, [pc, #52]	; (8007a6c <xTaskRemoveFromEventList+0xc0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d905      	bls.n	8007a4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a44:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <xTaskRemoveFromEventList+0xc4>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	e001      	b.n	8007a50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a50:	697b      	ldr	r3, [r7, #20]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	20001064 	.word	0x20001064
 8007a60:	20001044 	.word	0x20001044
 8007a64:	20000b6c 	.word	0x20000b6c
 8007a68:	20000ffc 	.word	0x20000ffc
 8007a6c:	20000b68 	.word	0x20000b68
 8007a70:	20001050 	.word	0x20001050

08007a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <vTaskInternalSetTimeOutState+0x24>)
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <vTaskInternalSetTimeOutState+0x28>)
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	605a      	str	r2, [r3, #4]
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	20001054 	.word	0x20001054
 8007a9c:	20001040 	.word	0x20001040

08007aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d10a      	bne.n	8007ac6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	613b      	str	r3, [r7, #16]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10a      	bne.n	8007ae2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60fb      	str	r3, [r7, #12]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ae2:	f000 ff7f 	bl	80089e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <xTaskCheckForTimeOut+0xbc>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d102      	bne.n	8007b06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	61fb      	str	r3, [r7, #28]
 8007b04:	e023      	b.n	8007b4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <xTaskCheckForTimeOut+0xc0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d007      	beq.n	8007b22 <xTaskCheckForTimeOut+0x82>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d302      	bcc.n	8007b22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	e015      	b.n	8007b4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d20b      	bcs.n	8007b44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff ff9b 	bl	8007a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61fb      	str	r3, [r7, #28]
 8007b42:	e004      	b.n	8007b4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b4e:	f000 ff79 	bl	8008a44 <vPortExitCritical>

	return xReturn;
 8007b52:	69fb      	ldr	r3, [r7, #28]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3720      	adds	r7, #32
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20001040 	.word	0x20001040
 8007b60:	20001054 	.word	0x20001054

08007b64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b68:	4b03      	ldr	r3, [pc, #12]	; (8007b78 <vTaskMissedYield+0x14>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
}
 8007b6e:	bf00      	nop
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	20001050 	.word	0x20001050

08007b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b84:	f000 f852 	bl	8007c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b88:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <prvIdleTask+0x28>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d9f9      	bls.n	8007b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <prvIdleTask+0x2c>)
 8007b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ba0:	e7f0      	b.n	8007b84 <prvIdleTask+0x8>
 8007ba2:	bf00      	nop
 8007ba4:	20000b6c 	.word	0x20000b6c
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	e00c      	b.n	8007bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4a12      	ldr	r2, [pc, #72]	; (8007c0c <prvInitialiseTaskLists+0x60>)
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fa6e 	bl	80060a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b37      	cmp	r3, #55	; 0x37
 8007bd6:	d9ef      	bls.n	8007bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bd8:	480d      	ldr	r0, [pc, #52]	; (8007c10 <prvInitialiseTaskLists+0x64>)
 8007bda:	f7fe fa65 	bl	80060a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bde:	480d      	ldr	r0, [pc, #52]	; (8007c14 <prvInitialiseTaskLists+0x68>)
 8007be0:	f7fe fa62 	bl	80060a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007be4:	480c      	ldr	r0, [pc, #48]	; (8007c18 <prvInitialiseTaskLists+0x6c>)
 8007be6:	f7fe fa5f 	bl	80060a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007bea:	480c      	ldr	r0, [pc, #48]	; (8007c1c <prvInitialiseTaskLists+0x70>)
 8007bec:	f7fe fa5c 	bl	80060a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007bf0:	480b      	ldr	r0, [pc, #44]	; (8007c20 <prvInitialiseTaskLists+0x74>)
 8007bf2:	f7fe fa59 	bl	80060a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <prvInitialiseTaskLists+0x78>)
 8007bf8:	4a05      	ldr	r2, [pc, #20]	; (8007c10 <prvInitialiseTaskLists+0x64>)
 8007bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007bfc:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <prvInitialiseTaskLists+0x7c>)
 8007bfe:	4a05      	ldr	r2, [pc, #20]	; (8007c14 <prvInitialiseTaskLists+0x68>)
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20000b6c 	.word	0x20000b6c
 8007c10:	20000fcc 	.word	0x20000fcc
 8007c14:	20000fe0 	.word	0x20000fe0
 8007c18:	20000ffc 	.word	0x20000ffc
 8007c1c:	20001010 	.word	0x20001010
 8007c20:	20001028 	.word	0x20001028
 8007c24:	20000ff4 	.word	0x20000ff4
 8007c28:	20000ff8 	.word	0x20000ff8

08007c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c32:	e019      	b.n	8007c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c34:	f000 fed6 	bl	80089e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c38:	4b10      	ldr	r3, [pc, #64]	; (8007c7c <prvCheckTasksWaitingTermination+0x50>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3304      	adds	r3, #4
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe fab9 	bl	80061bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <prvCheckTasksWaitingTermination+0x54>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <prvCheckTasksWaitingTermination+0x54>)
 8007c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c54:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <prvCheckTasksWaitingTermination+0x58>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	4a0a      	ldr	r2, [pc, #40]	; (8007c84 <prvCheckTasksWaitingTermination+0x58>)
 8007c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c5e:	f000 fef1 	bl	8008a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f810 	bl	8007c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c68:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <prvCheckTasksWaitingTermination+0x58>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e1      	bne.n	8007c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c70:	bf00      	nop
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20001010 	.word	0x20001010
 8007c80:	2000103c 	.word	0x2000103c
 8007c84:	20001024 	.word	0x20001024

08007c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3354      	adds	r3, #84	; 0x54
 8007c94:	4618      	mov	r0, r3
 8007c96:	f002 fb03 	bl	800a2a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d108      	bne.n	8007cb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f889 	bl	8008dc0 <vPortFree>
				vPortFree( pxTCB );
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 f886 	bl	8008dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cb4:	e018      	b.n	8007ce8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d103      	bne.n	8007cc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f87d 	bl	8008dc0 <vPortFree>
	}
 8007cc6:	e00f      	b.n	8007ce8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d00a      	beq.n	8007ce8 <prvDeleteTCB+0x60>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	60fb      	str	r3, [r7, #12]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <prvDeleteTCB+0x5e>
	}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <prvResetNextTaskUnblockTime+0x38>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d104      	bne.n	8007d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d00:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <prvResetNextTaskUnblockTime+0x3c>)
 8007d02:	f04f 32ff 	mov.w	r2, #4294967295
 8007d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d08:	e008      	b.n	8007d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <prvResetNextTaskUnblockTime+0x38>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a04      	ldr	r2, [pc, #16]	; (8007d2c <prvResetNextTaskUnblockTime+0x3c>)
 8007d1a:	6013      	str	r3, [r2, #0]
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	20000ff4 	.word	0x20000ff4
 8007d2c:	2000105c 	.word	0x2000105c

08007d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d36:	4b0b      	ldr	r3, [pc, #44]	; (8007d64 <xTaskGetSchedulerState+0x34>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	607b      	str	r3, [r7, #4]
 8007d42:	e008      	b.n	8007d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <xTaskGetSchedulerState+0x38>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	607b      	str	r3, [r7, #4]
 8007d50:	e001      	b.n	8007d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d52:	2300      	movs	r3, #0
 8007d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d56:	687b      	ldr	r3, [r7, #4]
	}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20001048 	.word	0x20001048
 8007d68:	20001064 	.word	0x20001064

08007d6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d051      	beq.n	8007e26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	4b2a      	ldr	r3, [pc, #168]	; (8007e30 <xTaskPriorityInherit+0xc4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d241      	bcs.n	8007e14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	db06      	blt.n	8007da6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d98:	4b25      	ldr	r3, [pc, #148]	; (8007e30 <xTaskPriorityInherit+0xc4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6959      	ldr	r1, [r3, #20]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dae:	4613      	mov	r3, r2
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <xTaskPriorityInherit+0xc8>)
 8007db8:	4413      	add	r3, r2
 8007dba:	4299      	cmp	r1, r3
 8007dbc:	d122      	bne.n	8007e04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe f9fa 	bl	80061bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007dc8:	4b19      	ldr	r3, [pc, #100]	; (8007e30 <xTaskPriorityInherit+0xc4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd6:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <xTaskPriorityInherit+0xcc>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d903      	bls.n	8007de6 <xTaskPriorityInherit+0x7a>
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de2:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <xTaskPriorityInherit+0xcc>)
 8007de4:	6013      	str	r3, [r2, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4a10      	ldr	r2, [pc, #64]	; (8007e34 <xTaskPriorityInherit+0xc8>)
 8007df4:	441a      	add	r2, r3
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f7fe f980 	bl	8006102 <vListInsertEnd>
 8007e02:	e004      	b.n	8007e0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e04:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <xTaskPriorityInherit+0xc4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e008      	b.n	8007e26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e18:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <xTaskPriorityInherit+0xc4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d201      	bcs.n	8007e26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e22:	2301      	movs	r3, #1
 8007e24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e26:	68fb      	ldr	r3, [r7, #12]
	}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000b68 	.word	0x20000b68
 8007e34:	20000b6c 	.word	0x20000b6c
 8007e38:	20001044 	.word	0x20001044

08007e3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d056      	beq.n	8007f00 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e52:	4b2e      	ldr	r3, [pc, #184]	; (8007f0c <xTaskPriorityDisinherit+0xd0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d00a      	beq.n	8007e72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	60fb      	str	r3, [r7, #12]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d10a      	bne.n	8007e90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7e:	f383 8811 	msr	BASEPRI, r3
 8007e82:	f3bf 8f6f 	isb	sy
 8007e86:	f3bf 8f4f 	dsb	sy
 8007e8a:	60bb      	str	r3, [r7, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	e7fe      	b.n	8007e8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e94:	1e5a      	subs	r2, r3, #1
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d02c      	beq.n	8007f00 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d128      	bne.n	8007f00 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe f982 	bl	80061bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <xTaskPriorityDisinherit+0xd4>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d903      	bls.n	8007ee0 <xTaskPriorityDisinherit+0xa4>
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4a0c      	ldr	r2, [pc, #48]	; (8007f10 <xTaskPriorityDisinherit+0xd4>)
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4a09      	ldr	r2, [pc, #36]	; (8007f14 <xTaskPriorityDisinherit+0xd8>)
 8007eee:	441a      	add	r2, r3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	f7fe f903 	bl	8006102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007efc:	2301      	movs	r3, #1
 8007efe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f00:	697b      	ldr	r3, [r7, #20]
	}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000b68 	.word	0x20000b68
 8007f10:	20001044 	.word	0x20001044
 8007f14:	20000b6c 	.word	0x20000b6c

08007f18 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b088      	sub	sp, #32
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f26:	2301      	movs	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06a      	beq.n	8008006 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	60fb      	str	r3, [r7, #12]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d902      	bls.n	8007f5e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e002      	b.n	8007f64 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d04b      	beq.n	8008006 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d146      	bne.n	8008006 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f78:	4b25      	ldr	r3, [pc, #148]	; (8008010 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d10a      	bne.n	8007f98 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60bb      	str	r3, [r7, #8]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	db04      	blt.n	8007fb6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	6959      	ldr	r1, [r3, #20]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	4413      	add	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4a13      	ldr	r2, [pc, #76]	; (8008014 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fc6:	4413      	add	r3, r2
 8007fc8:	4299      	cmp	r1, r3
 8007fca:	d11c      	bne.n	8008006 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fe f8f3 	bl	80061bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fda:	4b0f      	ldr	r3, [pc, #60]	; (8008018 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d903      	bls.n	8007fea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	4a0c      	ldr	r2, [pc, #48]	; (8008018 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fee:	4613      	mov	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4a07      	ldr	r2, [pc, #28]	; (8008014 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ff8:	441a      	add	r2, r3
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fe f87e 	bl	8006102 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008006:	bf00      	nop
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	20000b68 	.word	0x20000b68
 8008014:	20000b6c 	.word	0x20000b6c
 8008018:	20001044 	.word	0x20001044

0800801c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008020:	4b07      	ldr	r3, [pc, #28]	; (8008040 <pvTaskIncrementMutexHeldCount+0x24>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d004      	beq.n	8008032 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008028:	4b05      	ldr	r3, [pc, #20]	; (8008040 <pvTaskIncrementMutexHeldCount+0x24>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800802e:	3201      	adds	r2, #1
 8008030:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008032:	4b03      	ldr	r3, [pc, #12]	; (8008040 <pvTaskIncrementMutexHeldCount+0x24>)
 8008034:	681b      	ldr	r3, [r3, #0]
	}
 8008036:	4618      	mov	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	20000b68 	.word	0x20000b68

08008044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800804e:	4b21      	ldr	r3, [pc, #132]	; (80080d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008054:	4b20      	ldr	r3, [pc, #128]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3304      	adds	r3, #4
 800805a:	4618      	mov	r0, r3
 800805c:	f7fe f8ae 	bl	80061bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d10a      	bne.n	800807e <prvAddCurrentTaskToDelayedList+0x3a>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d007      	beq.n	800807e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800806e:	4b1a      	ldr	r3, [pc, #104]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3304      	adds	r3, #4
 8008074:	4619      	mov	r1, r3
 8008076:	4819      	ldr	r0, [pc, #100]	; (80080dc <prvAddCurrentTaskToDelayedList+0x98>)
 8008078:	f7fe f843 	bl	8006102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800807c:	e026      	b.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008086:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	429a      	cmp	r2, r3
 8008094:	d209      	bcs.n	80080aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008096:	4b12      	ldr	r3, [pc, #72]	; (80080e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe f851 	bl	800614a <vListInsert>
}
 80080a8:	e010      	b.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080aa:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3304      	adds	r3, #4
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f7fe f847 	bl	800614a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d202      	bcs.n	80080cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80080c6:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	6013      	str	r3, [r2, #0]
}
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20001040 	.word	0x20001040
 80080d8:	20000b68 	.word	0x20000b68
 80080dc:	20001028 	.word	0x20001028
 80080e0:	20000ff8 	.word	0x20000ff8
 80080e4:	20000ff4 	.word	0x20000ff4
 80080e8:	2000105c 	.word	0x2000105c

080080ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080f6:	f000 fb07 	bl	8008708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <xTimerCreateTimerTask+0x80>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d021      	beq.n	8008146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008106:	2300      	movs	r3, #0
 8008108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800810a:	1d3a      	adds	r2, r7, #4
 800810c:	f107 0108 	add.w	r1, r7, #8
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	4618      	mov	r0, r3
 8008116:	f7fd ffad 	bl	8006074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	9202      	str	r2, [sp, #8]
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	2302      	movs	r3, #2
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	2300      	movs	r3, #0
 800812a:	460a      	mov	r2, r1
 800812c:	4910      	ldr	r1, [pc, #64]	; (8008170 <xTimerCreateTimerTask+0x84>)
 800812e:	4811      	ldr	r0, [pc, #68]	; (8008174 <xTimerCreateTimerTask+0x88>)
 8008130:	f7fe ffa4 	bl	800707c <xTaskCreateStatic>
 8008134:	4603      	mov	r3, r0
 8008136:	4a10      	ldr	r2, [pc, #64]	; (8008178 <xTimerCreateTimerTask+0x8c>)
 8008138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800813a:	4b0f      	ldr	r3, [pc, #60]	; (8008178 <xTimerCreateTimerTask+0x8c>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008142:	2301      	movs	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	613b      	str	r3, [r7, #16]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008162:	697b      	ldr	r3, [r7, #20]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20001098 	.word	0x20001098
 8008170:	0800e874 	.word	0x0800e874
 8008174:	080082b1 	.word	0x080082b1
 8008178:	2000109c 	.word	0x2000109c

0800817c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08a      	sub	sp, #40	; 0x28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800818a:	2300      	movs	r3, #0
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081aa:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <xTimerGenericCommand+0x98>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d02a      	beq.n	8008208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b05      	cmp	r3, #5
 80081c2:	dc18      	bgt.n	80081f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80081c4:	f7ff fdb4 	bl	8007d30 <xTaskGetSchedulerState>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d109      	bne.n	80081e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80081ce:	4b11      	ldr	r3, [pc, #68]	; (8008214 <xTimerGenericCommand+0x98>)
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f107 0110 	add.w	r1, r7, #16
 80081d6:	2300      	movs	r3, #0
 80081d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081da:	f7fe f957 	bl	800648c <xQueueGenericSend>
 80081de:	6278      	str	r0, [r7, #36]	; 0x24
 80081e0:	e012      	b.n	8008208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081e2:	4b0c      	ldr	r3, [pc, #48]	; (8008214 <xTimerGenericCommand+0x98>)
 80081e4:	6818      	ldr	r0, [r3, #0]
 80081e6:	f107 0110 	add.w	r1, r7, #16
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	f7fe f94d 	bl	800648c <xQueueGenericSend>
 80081f2:	6278      	str	r0, [r7, #36]	; 0x24
 80081f4:	e008      	b.n	8008208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081f6:	4b07      	ldr	r3, [pc, #28]	; (8008214 <xTimerGenericCommand+0x98>)
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	f107 0110 	add.w	r1, r7, #16
 80081fe:	2300      	movs	r3, #0
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	f7fe fa41 	bl	8006688 <xQueueGenericSendFromISR>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800820a:	4618      	mov	r0, r3
 800820c:	3728      	adds	r7, #40	; 0x28
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20001098 	.word	0x20001098

08008218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af02      	add	r7, sp, #8
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008222:	4b22      	ldr	r3, [pc, #136]	; (80082ac <prvProcessExpiredTimer+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	3304      	adds	r3, #4
 8008230:	4618      	mov	r0, r3
 8008232:	f7fd ffc3 	bl	80061bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800823c:	f003 0304 	and.w	r3, r3, #4
 8008240:	2b00      	cmp	r3, #0
 8008242:	d022      	beq.n	800828a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	699a      	ldr	r2, [r3, #24]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	18d1      	adds	r1, r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	6978      	ldr	r0, [r7, #20]
 8008252:	f000 f8d1 	bl	80083f8 <prvInsertTimerInActiveList>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d01f      	beq.n	800829c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800825c:	2300      	movs	r3, #0
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2300      	movs	r3, #0
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	2100      	movs	r1, #0
 8008266:	6978      	ldr	r0, [r7, #20]
 8008268:	f7ff ff88 	bl	800817c <xTimerGenericCommand>
 800826c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d113      	bne.n	800829c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	60fb      	str	r3, [r7, #12]
}
 8008286:	bf00      	nop
 8008288:	e7fe      	b.n	8008288 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	b2da      	uxtb	r2, r3
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	6978      	ldr	r0, [r7, #20]
 80082a2:	4798      	blx	r3
}
 80082a4:	bf00      	nop
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20001090 	.word	0x20001090

080082b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082b8:	f107 0308 	add.w	r3, r7, #8
 80082bc:	4618      	mov	r0, r3
 80082be:	f000 f857 	bl	8008370 <prvGetNextExpireTime>
 80082c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	4619      	mov	r1, r3
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f803 	bl	80082d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80082ce:	f000 f8d5 	bl	800847c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80082d2:	e7f1      	b.n	80082b8 <prvTimerTask+0x8>

080082d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082de:	f7ff f929 	bl	8007534 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 f866 	bl	80083b8 <prvSampleTimeNow>
 80082ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d130      	bne.n	8008356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <prvProcessTimerOrBlockTask+0x3c>
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d806      	bhi.n	8008310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008302:	f7ff f925 	bl	8007550 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff ff85 	bl	8008218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800830e:	e024      	b.n	800835a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d008      	beq.n	8008328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008316:	4b13      	ldr	r3, [pc, #76]	; (8008364 <prvProcessTimerOrBlockTask+0x90>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d101      	bne.n	8008324 <prvProcessTimerOrBlockTask+0x50>
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <prvProcessTimerOrBlockTask+0x52>
 8008324:	2300      	movs	r3, #0
 8008326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008328:	4b0f      	ldr	r3, [pc, #60]	; (8008368 <prvProcessTimerOrBlockTask+0x94>)
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	4619      	mov	r1, r3
 8008336:	f7fe fe6d 	bl	8007014 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800833a:	f7ff f909 	bl	8007550 <xTaskResumeAll>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d10a      	bne.n	800835a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008344:	4b09      	ldr	r3, [pc, #36]	; (800836c <prvProcessTimerOrBlockTask+0x98>)
 8008346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	f3bf 8f6f 	isb	sy
}
 8008354:	e001      	b.n	800835a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008356:	f7ff f8fb 	bl	8007550 <xTaskResumeAll>
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20001094 	.word	0x20001094
 8008368:	20001098 	.word	0x20001098
 800836c:	e000ed04 	.word	0xe000ed04

08008370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008378:	4b0e      	ldr	r3, [pc, #56]	; (80083b4 <prvGetNextExpireTime+0x44>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <prvGetNextExpireTime+0x16>
 8008382:	2201      	movs	r2, #1
 8008384:	e000      	b.n	8008388 <prvGetNextExpireTime+0x18>
 8008386:	2200      	movs	r2, #0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d105      	bne.n	80083a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008394:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <prvGetNextExpireTime+0x44>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	e001      	b.n	80083a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083a0:	2300      	movs	r3, #0
 80083a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	20001090 	.word	0x20001090

080083b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80083c0:	f7ff f964 	bl	800768c <xTaskGetTickCount>
 80083c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <prvSampleTimeNow+0x3c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	68fa      	ldr	r2, [r7, #12]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d205      	bcs.n	80083dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80083d0:	f000 f936 	bl	8008640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	e002      	b.n	80083e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083e2:	4a04      	ldr	r2, [pc, #16]	; (80083f4 <prvSampleTimeNow+0x3c>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083e8:	68fb      	ldr	r3, [r7, #12]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	200010a0 	.word	0x200010a0

080083f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	429a      	cmp	r2, r3
 800841c:	d812      	bhi.n	8008444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	1ad2      	subs	r2, r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	429a      	cmp	r2, r3
 800842a:	d302      	bcc.n	8008432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800842c:	2301      	movs	r3, #1
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	e01b      	b.n	800846a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008432:	4b10      	ldr	r3, [pc, #64]	; (8008474 <prvInsertTimerInActiveList+0x7c>)
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3304      	adds	r3, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7fd fe84 	bl	800614a <vListInsert>
 8008442:	e012      	b.n	800846a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	429a      	cmp	r2, r3
 800844a:	d206      	bcs.n	800845a <prvInsertTimerInActiveList+0x62>
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	429a      	cmp	r2, r3
 8008452:	d302      	bcc.n	800845a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
 8008458:	e007      	b.n	800846a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800845a:	4b07      	ldr	r3, [pc, #28]	; (8008478 <prvInsertTimerInActiveList+0x80>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	3304      	adds	r3, #4
 8008462:	4619      	mov	r1, r3
 8008464:	4610      	mov	r0, r2
 8008466:	f7fd fe70 	bl	800614a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800846a:	697b      	ldr	r3, [r7, #20]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20001094 	.word	0x20001094
 8008478:	20001090 	.word	0x20001090

0800847c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b08e      	sub	sp, #56	; 0x38
 8008480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008482:	e0ca      	b.n	800861a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	da18      	bge.n	80084bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800848a:	1d3b      	adds	r3, r7, #4
 800848c:	3304      	adds	r3, #4
 800848e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10a      	bne.n	80084ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	61fb      	str	r3, [r7, #28]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b2:	6850      	ldr	r0, [r2, #4]
 80084b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084b6:	6892      	ldr	r2, [r2, #8]
 80084b8:	4611      	mov	r1, r2
 80084ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f2c0 80ab 	blt.w	800861a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d004      	beq.n	80084da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	3304      	adds	r3, #4
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd fe71 	bl	80061bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084da:	463b      	mov	r3, r7
 80084dc:	4618      	mov	r0, r3
 80084de:	f7ff ff6b 	bl	80083b8 <prvSampleTimeNow>
 80084e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b09      	cmp	r3, #9
 80084e8:	f200 8096 	bhi.w	8008618 <prvProcessReceivedCommands+0x19c>
 80084ec:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <prvProcessReceivedCommands+0x78>)
 80084ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f2:	bf00      	nop
 80084f4:	0800851d 	.word	0x0800851d
 80084f8:	0800851d 	.word	0x0800851d
 80084fc:	0800851d 	.word	0x0800851d
 8008500:	08008591 	.word	0x08008591
 8008504:	080085a5 	.word	0x080085a5
 8008508:	080085ef 	.word	0x080085ef
 800850c:	0800851d 	.word	0x0800851d
 8008510:	0800851d 	.word	0x0800851d
 8008514:	08008591 	.word	0x08008591
 8008518:	080085a5 	.word	0x080085a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008522:	f043 0301 	orr.w	r3, r3, #1
 8008526:	b2da      	uxtb	r2, r3
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	18d1      	adds	r1, r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800853a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800853c:	f7ff ff5c 	bl	80083f8 <prvInsertTimerInActiveList>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d069      	beq.n	800861a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800854c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d05e      	beq.n	800861a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	441a      	add	r2, r3
 8008564:	2300      	movs	r3, #0
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	2300      	movs	r3, #0
 800856a:	2100      	movs	r1, #0
 800856c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800856e:	f7ff fe05 	bl	800817c <xTimerGenericCommand>
 8008572:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d14f      	bne.n	800861a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	61bb      	str	r3, [r7, #24]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008596:	f023 0301 	bic.w	r3, r3, #1
 800859a:	b2da      	uxtb	r2, r3
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085a2:	e03a      	b.n	800861a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085aa:	f043 0301 	orr.w	r3, r3, #1
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10a      	bne.n	80085da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	617b      	str	r3, [r7, #20]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	18d1      	adds	r1, r2, r3
 80085e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e8:	f7ff ff06 	bl	80083f8 <prvInsertTimerInActiveList>
					break;
 80085ec:	e015      	b.n	800861a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80085fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085fe:	f000 fbdf 	bl	8008dc0 <vPortFree>
 8008602:	e00a      	b.n	800861a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860a:	f023 0301 	bic.w	r3, r3, #1
 800860e:	b2da      	uxtb	r2, r3
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008616:	e000      	b.n	800861a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800861a:	4b08      	ldr	r3, [pc, #32]	; (800863c <prvProcessReceivedCommands+0x1c0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	1d39      	adds	r1, r7, #4
 8008620:	2200      	movs	r2, #0
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe f8cc 	bl	80067c0 <xQueueReceive>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	f47f af2a 	bne.w	8008484 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	3730      	adds	r7, #48	; 0x30
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20001098 	.word	0x20001098

08008640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b088      	sub	sp, #32
 8008644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008646:	e048      	b.n	80086da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008648:	4b2d      	ldr	r3, [pc, #180]	; (8008700 <prvSwitchTimerLists+0xc0>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008652:	4b2b      	ldr	r3, [pc, #172]	; (8008700 <prvSwitchTimerLists+0xc0>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	3304      	adds	r3, #4
 8008660:	4618      	mov	r0, r3
 8008662:	f7fd fdab 	bl	80061bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d02e      	beq.n	80086da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4413      	add	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	429a      	cmp	r2, r3
 800868c:	d90e      	bls.n	80086ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800869a:	4b19      	ldr	r3, [pc, #100]	; (8008700 <prvSwitchTimerLists+0xc0>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4619      	mov	r1, r3
 80086a4:	4610      	mov	r0, r2
 80086a6:	f7fd fd50 	bl	800614a <vListInsert>
 80086aa:	e016      	b.n	80086da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086ac:	2300      	movs	r3, #0
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	2300      	movs	r3, #0
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	2100      	movs	r1, #0
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fd60 	bl	800817c <xTimerGenericCommand>
 80086bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	603b      	str	r3, [r7, #0]
}
 80086d6:	bf00      	nop
 80086d8:	e7fe      	b.n	80086d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <prvSwitchTimerLists+0xc0>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1b1      	bne.n	8008648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086e4:	4b06      	ldr	r3, [pc, #24]	; (8008700 <prvSwitchTimerLists+0xc0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086ea:	4b06      	ldr	r3, [pc, #24]	; (8008704 <prvSwitchTimerLists+0xc4>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a04      	ldr	r2, [pc, #16]	; (8008700 <prvSwitchTimerLists+0xc0>)
 80086f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086f2:	4a04      	ldr	r2, [pc, #16]	; (8008704 <prvSwitchTimerLists+0xc4>)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	6013      	str	r3, [r2, #0]
}
 80086f8:	bf00      	nop
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	20001090 	.word	0x20001090
 8008704:	20001094 	.word	0x20001094

08008708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800870e:	f000 f969 	bl	80089e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <prvCheckForValidListAndQueue+0x60>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d120      	bne.n	800875c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800871a:	4814      	ldr	r0, [pc, #80]	; (800876c <prvCheckForValidListAndQueue+0x64>)
 800871c:	f7fd fcc4 	bl	80060a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008720:	4813      	ldr	r0, [pc, #76]	; (8008770 <prvCheckForValidListAndQueue+0x68>)
 8008722:	f7fd fcc1 	bl	80060a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008726:	4b13      	ldr	r3, [pc, #76]	; (8008774 <prvCheckForValidListAndQueue+0x6c>)
 8008728:	4a10      	ldr	r2, [pc, #64]	; (800876c <prvCheckForValidListAndQueue+0x64>)
 800872a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800872c:	4b12      	ldr	r3, [pc, #72]	; (8008778 <prvCheckForValidListAndQueue+0x70>)
 800872e:	4a10      	ldr	r2, [pc, #64]	; (8008770 <prvCheckForValidListAndQueue+0x68>)
 8008730:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008732:	2300      	movs	r3, #0
 8008734:	9300      	str	r3, [sp, #0]
 8008736:	4b11      	ldr	r3, [pc, #68]	; (800877c <prvCheckForValidListAndQueue+0x74>)
 8008738:	4a11      	ldr	r2, [pc, #68]	; (8008780 <prvCheckForValidListAndQueue+0x78>)
 800873a:	2110      	movs	r1, #16
 800873c:	200a      	movs	r0, #10
 800873e:	f7fd fdcf 	bl	80062e0 <xQueueGenericCreateStatic>
 8008742:	4603      	mov	r3, r0
 8008744:	4a08      	ldr	r2, [pc, #32]	; (8008768 <prvCheckForValidListAndQueue+0x60>)
 8008746:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <prvCheckForValidListAndQueue+0x60>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <prvCheckForValidListAndQueue+0x60>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	490b      	ldr	r1, [pc, #44]	; (8008784 <prvCheckForValidListAndQueue+0x7c>)
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe fc08 	bl	8006f6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800875c:	f000 f972 	bl	8008a44 <vPortExitCritical>
}
 8008760:	bf00      	nop
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20001098 	.word	0x20001098
 800876c:	20001068 	.word	0x20001068
 8008770:	2000107c 	.word	0x2000107c
 8008774:	20001090 	.word	0x20001090
 8008778:	20001094 	.word	0x20001094
 800877c:	20001144 	.word	0x20001144
 8008780:	200010a4 	.word	0x200010a4
 8008784:	0800e87c 	.word	0x0800e87c

08008788 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	3b04      	subs	r3, #4
 8008798:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3b04      	subs	r3, #4
 80087a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f023 0201 	bic.w	r2, r3, #1
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3b04      	subs	r3, #4
 80087b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80087b8:	4a0c      	ldr	r2, [pc, #48]	; (80087ec <pxPortInitialiseStack+0x64>)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	3b14      	subs	r3, #20
 80087c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3b04      	subs	r3, #4
 80087ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f06f 0202 	mvn.w	r2, #2
 80087d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3b20      	subs	r3, #32
 80087dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087de:	68fb      	ldr	r3, [r7, #12]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3714      	adds	r7, #20
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	080087f1 	.word	0x080087f1

080087f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087f6:	2300      	movs	r3, #0
 80087f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087fa:	4b12      	ldr	r3, [pc, #72]	; (8008844 <prvTaskExitError+0x54>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008802:	d00a      	beq.n	800881a <prvTaskExitError+0x2a>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <prvTaskExitError+0x28>
	__asm volatile
 800881a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881e:	f383 8811 	msr	BASEPRI, r3
 8008822:	f3bf 8f6f 	isb	sy
 8008826:	f3bf 8f4f 	dsb	sy
 800882a:	60bb      	str	r3, [r7, #8]
}
 800882c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800882e:	bf00      	nop
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d0fc      	beq.n	8008830 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008836:	bf00      	nop
 8008838:	bf00      	nop
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	20000054 	.word	0x20000054
	...

08008850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008850:	4b07      	ldr	r3, [pc, #28]	; (8008870 <pxCurrentTCBConst2>)
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	6808      	ldr	r0, [r1, #0]
 8008856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800885a:	f380 8809 	msr	PSP, r0
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f04f 0000 	mov.w	r0, #0
 8008866:	f380 8811 	msr	BASEPRI, r0
 800886a:	4770      	bx	lr
 800886c:	f3af 8000 	nop.w

08008870 <pxCurrentTCBConst2>:
 8008870:	20000b68 	.word	0x20000b68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008874:	bf00      	nop
 8008876:	bf00      	nop

08008878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008878:	4808      	ldr	r0, [pc, #32]	; (800889c <prvPortStartFirstTask+0x24>)
 800887a:	6800      	ldr	r0, [r0, #0]
 800887c:	6800      	ldr	r0, [r0, #0]
 800887e:	f380 8808 	msr	MSP, r0
 8008882:	f04f 0000 	mov.w	r0, #0
 8008886:	f380 8814 	msr	CONTROL, r0
 800888a:	b662      	cpsie	i
 800888c:	b661      	cpsie	f
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	df00      	svc	0
 8008898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800889a:	bf00      	nop
 800889c:	e000ed08 	.word	0xe000ed08

080088a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088a6:	4b46      	ldr	r3, [pc, #280]	; (80089c0 <xPortStartScheduler+0x120>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a46      	ldr	r2, [pc, #280]	; (80089c4 <xPortStartScheduler+0x124>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10a      	bne.n	80088c6 <xPortStartScheduler+0x26>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	613b      	str	r3, [r7, #16]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80088c6:	4b3e      	ldr	r3, [pc, #248]	; (80089c0 <xPortStartScheduler+0x120>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a3f      	ldr	r2, [pc, #252]	; (80089c8 <xPortStartScheduler+0x128>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10a      	bne.n	80088e6 <xPortStartScheduler+0x46>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	60fb      	str	r3, [r7, #12]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088e6:	4b39      	ldr	r3, [pc, #228]	; (80089cc <xPortStartScheduler+0x12c>)
 80088e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	22ff      	movs	r2, #255	; 0xff
 80088f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	b2db      	uxtb	r3, r3
 8008904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008908:	b2da      	uxtb	r2, r3
 800890a:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <xPortStartScheduler+0x130>)
 800890c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800890e:	4b31      	ldr	r3, [pc, #196]	; (80089d4 <xPortStartScheduler+0x134>)
 8008910:	2207      	movs	r2, #7
 8008912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008914:	e009      	b.n	800892a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <xPortStartScheduler+0x134>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3b01      	subs	r3, #1
 800891c:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <xPortStartScheduler+0x134>)
 800891e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008920:	78fb      	ldrb	r3, [r7, #3]
 8008922:	b2db      	uxtb	r3, r3
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	b2db      	uxtb	r3, r3
 8008928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	b2db      	uxtb	r3, r3
 800892e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008932:	2b80      	cmp	r3, #128	; 0x80
 8008934:	d0ef      	beq.n	8008916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008936:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <xPortStartScheduler+0x134>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f1c3 0307 	rsb	r3, r3, #7
 800893e:	2b04      	cmp	r3, #4
 8008940:	d00a      	beq.n	8008958 <xPortStartScheduler+0xb8>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	60bb      	str	r3, [r7, #8]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008958:	4b1e      	ldr	r3, [pc, #120]	; (80089d4 <xPortStartScheduler+0x134>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	021b      	lsls	r3, r3, #8
 800895e:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <xPortStartScheduler+0x134>)
 8008960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008962:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <xPortStartScheduler+0x134>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <xPortStartScheduler+0x134>)
 800896c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008976:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <xPortStartScheduler+0x138>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a17      	ldr	r2, [pc, #92]	; (80089d8 <xPortStartScheduler+0x138>)
 800897c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008982:	4b15      	ldr	r3, [pc, #84]	; (80089d8 <xPortStartScheduler+0x138>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a14      	ldr	r2, [pc, #80]	; (80089d8 <xPortStartScheduler+0x138>)
 8008988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800898c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800898e:	f000 f8dd 	bl	8008b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008992:	4b12      	ldr	r3, [pc, #72]	; (80089dc <xPortStartScheduler+0x13c>)
 8008994:	2200      	movs	r2, #0
 8008996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008998:	f000 f8fc 	bl	8008b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800899c:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <xPortStartScheduler+0x140>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0f      	ldr	r2, [pc, #60]	; (80089e0 <xPortStartScheduler+0x140>)
 80089a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089a8:	f7ff ff66 	bl	8008878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089ac:	f7fe ff4a 	bl	8007844 <vTaskSwitchContext>
	prvTaskExitError();
 80089b0:	f7ff ff1e 	bl	80087f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	e000ed00 	.word	0xe000ed00
 80089c4:	410fc271 	.word	0x410fc271
 80089c8:	410fc270 	.word	0x410fc270
 80089cc:	e000e400 	.word	0xe000e400
 80089d0:	20001194 	.word	0x20001194
 80089d4:	20001198 	.word	0x20001198
 80089d8:	e000ed20 	.word	0xe000ed20
 80089dc:	20000054 	.word	0x20000054
 80089e0:	e000ef34 	.word	0xe000ef34

080089e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	607b      	str	r3, [r7, #4]
}
 80089fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089fe:	4b0f      	ldr	r3, [pc, #60]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3301      	adds	r3, #1
 8008a04:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a08:	4b0c      	ldr	r3, [pc, #48]	; (8008a3c <vPortEnterCritical+0x58>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d10f      	bne.n	8008a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a10:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <vPortEnterCritical+0x5c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	603b      	str	r3, [r7, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <vPortEnterCritical+0x4a>
	}
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20000054 	.word	0x20000054
 8008a40:	e000ed04 	.word	0xe000ed04

08008a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a4a:	4b12      	ldr	r3, [pc, #72]	; (8008a94 <vPortExitCritical+0x50>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10a      	bne.n	8008a68 <vPortExitCritical+0x24>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	607b      	str	r3, [r7, #4]
}
 8008a64:	bf00      	nop
 8008a66:	e7fe      	b.n	8008a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <vPortExitCritical+0x50>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <vPortExitCritical+0x50>)
 8008a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a72:	4b08      	ldr	r3, [pc, #32]	; (8008a94 <vPortExitCritical+0x50>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <vPortExitCritical+0x42>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	f383 8811 	msr	BASEPRI, r3
}
 8008a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000054 	.word	0x20000054
	...

08008aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008aa0:	f3ef 8009 	mrs	r0, PSP
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <pxCurrentTCBConst>)
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	f01e 0f10 	tst.w	lr, #16
 8008ab0:	bf08      	it	eq
 8008ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aba:	6010      	str	r0, [r2, #0]
 8008abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ac4:	f380 8811 	msr	BASEPRI, r0
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f7fe feb8 	bl	8007844 <vTaskSwitchContext>
 8008ad4:	f04f 0000 	mov.w	r0, #0
 8008ad8:	f380 8811 	msr	BASEPRI, r0
 8008adc:	bc09      	pop	{r0, r3}
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	6808      	ldr	r0, [r1, #0]
 8008ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae6:	f01e 0f10 	tst.w	lr, #16
 8008aea:	bf08      	it	eq
 8008aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008af0:	f380 8809 	msr	PSP, r0
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w

08008b00 <pxCurrentTCBConst>:
 8008b00:	20000b68 	.word	0x20000b68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b04:	bf00      	nop
 8008b06:	bf00      	nop

08008b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	607b      	str	r3, [r7, #4]
}
 8008b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b22:	f7fe fdd5 	bl	80076d0 <xTaskIncrementTick>
 8008b26:	4603      	mov	r3, r0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d003      	beq.n	8008b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <xPortSysTickHandler+0x40>)
 8008b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	f383 8811 	msr	BASEPRI, r3
}
 8008b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	e000ed04 	.word	0xe000ed04

08008b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b56:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <vPortSetupTimerInterrupt+0x38>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b5c:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <vPortSetupTimerInterrupt+0x3c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <vPortSetupTimerInterrupt+0x40>)
 8008b62:	fba2 2303 	umull	r2, r3, r2, r3
 8008b66:	099b      	lsrs	r3, r3, #6
 8008b68:	4a09      	ldr	r2, [pc, #36]	; (8008b90 <vPortSetupTimerInterrupt+0x44>)
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b6e:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <vPortSetupTimerInterrupt+0x34>)
 8008b70:	2207      	movs	r2, #7
 8008b72:	601a      	str	r2, [r3, #0]
}
 8008b74:	bf00      	nop
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
 8008b7e:	bf00      	nop
 8008b80:	e000e010 	.word	0xe000e010
 8008b84:	e000e018 	.word	0xe000e018
 8008b88:	20000000 	.word	0x20000000
 8008b8c:	10624dd3 	.word	0x10624dd3
 8008b90:	e000e014 	.word	0xe000e014

08008b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008ba4 <vPortEnableVFP+0x10>
 8008b98:	6801      	ldr	r1, [r0, #0]
 8008b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b9e:	6001      	str	r1, [r0, #0]
 8008ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ba2:	bf00      	nop
 8008ba4:	e000ed88 	.word	0xe000ed88

08008ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bae:	f3ef 8305 	mrs	r3, IPSR
 8008bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2b0f      	cmp	r3, #15
 8008bb8:	d914      	bls.n	8008be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bba:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <vPortValidateInterruptPriority+0x70>)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008bc4:	4b15      	ldr	r3, [pc, #84]	; (8008c1c <vPortValidateInterruptPriority+0x74>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	7afa      	ldrb	r2, [r7, #11]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d20a      	bcs.n	8008be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	607b      	str	r3, [r7, #4]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008be4:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <vPortValidateInterruptPriority+0x78>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bec:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <vPortValidateInterruptPriority+0x7c>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d90a      	bls.n	8008c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf8:	f383 8811 	msr	BASEPRI, r3
 8008bfc:	f3bf 8f6f 	isb	sy
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	603b      	str	r3, [r7, #0]
}
 8008c06:	bf00      	nop
 8008c08:	e7fe      	b.n	8008c08 <vPortValidateInterruptPriority+0x60>
	}
 8008c0a:	bf00      	nop
 8008c0c:	3714      	adds	r7, #20
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	e000e3f0 	.word	0xe000e3f0
 8008c1c:	20001194 	.word	0x20001194
 8008c20:	e000ed0c 	.word	0xe000ed0c
 8008c24:	20001198 	.word	0x20001198

08008c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08a      	sub	sp, #40	; 0x28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c34:	f7fe fc7e 	bl	8007534 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c38:	4b5b      	ldr	r3, [pc, #364]	; (8008da8 <pvPortMalloc+0x180>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d101      	bne.n	8008c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c40:	f000 f920 	bl	8008e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c44:	4b59      	ldr	r3, [pc, #356]	; (8008dac <pvPortMalloc+0x184>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f040 8093 	bne.w	8008d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01d      	beq.n	8008c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c58:	2208      	movs	r2, #8
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f003 0307 	and.w	r3, r3, #7
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d014      	beq.n	8008c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f023 0307 	bic.w	r3, r3, #7
 8008c70:	3308      	adds	r3, #8
 8008c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f003 0307 	and.w	r3, r3, #7
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <pvPortMalloc+0x6c>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	617b      	str	r3, [r7, #20]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d06e      	beq.n	8008d78 <pvPortMalloc+0x150>
 8008c9a:	4b45      	ldr	r3, [pc, #276]	; (8008db0 <pvPortMalloc+0x188>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d869      	bhi.n	8008d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ca4:	4b43      	ldr	r3, [pc, #268]	; (8008db4 <pvPortMalloc+0x18c>)
 8008ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ca8:	4b42      	ldr	r3, [pc, #264]	; (8008db4 <pvPortMalloc+0x18c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cae:	e004      	b.n	8008cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d903      	bls.n	8008ccc <pvPortMalloc+0xa4>
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1f1      	bne.n	8008cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ccc:	4b36      	ldr	r3, [pc, #216]	; (8008da8 <pvPortMalloc+0x180>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d050      	beq.n	8008d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008cd6:	6a3b      	ldr	r3, [r7, #32]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2208      	movs	r2, #8
 8008cdc:	4413      	add	r3, r2
 8008cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	1ad2      	subs	r2, r2, r3
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	005b      	lsls	r3, r3, #1
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d91f      	bls.n	8008d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	f003 0307 	and.w	r3, r3, #7
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <pvPortMalloc+0xf8>
	__asm volatile
 8008d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d0e:	f383 8811 	msr	BASEPRI, r3
 8008d12:	f3bf 8f6f 	isb	sy
 8008d16:	f3bf 8f4f 	dsb	sy
 8008d1a:	613b      	str	r3, [r7, #16]
}
 8008d1c:	bf00      	nop
 8008d1e:	e7fe      	b.n	8008d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	1ad2      	subs	r2, r2, r3
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d32:	69b8      	ldr	r0, [r7, #24]
 8008d34:	f000 f908 	bl	8008f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d38:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <pvPortMalloc+0x188>)
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	4a1b      	ldr	r2, [pc, #108]	; (8008db0 <pvPortMalloc+0x188>)
 8008d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d46:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <pvPortMalloc+0x188>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b1b      	ldr	r3, [pc, #108]	; (8008db8 <pvPortMalloc+0x190>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d203      	bcs.n	8008d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d52:	4b17      	ldr	r3, [pc, #92]	; (8008db0 <pvPortMalloc+0x188>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a18      	ldr	r2, [pc, #96]	; (8008db8 <pvPortMalloc+0x190>)
 8008d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	4b13      	ldr	r3, [pc, #76]	; (8008dac <pvPortMalloc+0x184>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	431a      	orrs	r2, r3
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d6e:	4b13      	ldr	r3, [pc, #76]	; (8008dbc <pvPortMalloc+0x194>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	4a11      	ldr	r2, [pc, #68]	; (8008dbc <pvPortMalloc+0x194>)
 8008d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d78:	f7fe fbea 	bl	8007550 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <pvPortMalloc+0x174>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60fb      	str	r3, [r7, #12]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <pvPortMalloc+0x172>
	return pvReturn;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3728      	adds	r7, #40	; 0x28
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	20004da4 	.word	0x20004da4
 8008dac:	20004db8 	.word	0x20004db8
 8008db0:	20004da8 	.word	0x20004da8
 8008db4:	20004d9c 	.word	0x20004d9c
 8008db8:	20004dac 	.word	0x20004dac
 8008dbc:	20004db0 	.word	0x20004db0

08008dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d04d      	beq.n	8008e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008dd2:	2308      	movs	r3, #8
 8008dd4:	425b      	negs	r3, r3
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4413      	add	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <vPortFree+0xb8>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4013      	ands	r3, r2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <vPortFree+0x44>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	60fb      	str	r3, [r7, #12]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00a      	beq.n	8008e22 <vPortFree+0x62>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	60bb      	str	r3, [r7, #8]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <vPortFree+0xb8>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d01e      	beq.n	8008e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11a      	bne.n	8008e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	4b0e      	ldr	r3, [pc, #56]	; (8008e78 <vPortFree+0xb8>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	43db      	mvns	r3, r3
 8008e42:	401a      	ands	r2, r3
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e48:	f7fe fb74 	bl	8007534 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <vPortFree+0xbc>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4413      	add	r3, r2
 8008e56:	4a09      	ldr	r2, [pc, #36]	; (8008e7c <vPortFree+0xbc>)
 8008e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e5a:	6938      	ldr	r0, [r7, #16]
 8008e5c:	f000 f874 	bl	8008f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <vPortFree+0xc0>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	3301      	adds	r3, #1
 8008e66:	4a06      	ldr	r2, [pc, #24]	; (8008e80 <vPortFree+0xc0>)
 8008e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e6a:	f7fe fb71 	bl	8007550 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e6e:	bf00      	nop
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20004db8 	.word	0x20004db8
 8008e7c:	20004da8 	.word	0x20004da8
 8008e80:	20004db4 	.word	0x20004db4

08008e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e90:	4b27      	ldr	r3, [pc, #156]	; (8008f30 <prvHeapInit+0xac>)
 8008e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f003 0307 	and.w	r3, r3, #7
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3307      	adds	r3, #7
 8008ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0307 	bic.w	r3, r3, #7
 8008eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eac:	68ba      	ldr	r2, [r7, #8]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <prvHeapInit+0xac>)
 8008eb4:	4413      	add	r3, r2
 8008eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ebc:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <prvHeapInit+0xb0>)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ec2:	4b1c      	ldr	r3, [pc, #112]	; (8008f34 <prvHeapInit+0xb0>)
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	4413      	add	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f023 0307 	bic.w	r3, r3, #7
 8008ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4a15      	ldr	r2, [pc, #84]	; (8008f38 <prvHeapInit+0xb4>)
 8008ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ee6:	4b14      	ldr	r3, [pc, #80]	; (8008f38 <prvHeapInit+0xb4>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2200      	movs	r2, #0
 8008eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eee:	4b12      	ldr	r3, [pc, #72]	; (8008f38 <prvHeapInit+0xb4>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f04:	4b0c      	ldr	r3, [pc, #48]	; (8008f38 <prvHeapInit+0xb4>)
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	4a0a      	ldr	r2, [pc, #40]	; (8008f3c <prvHeapInit+0xb8>)
 8008f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <prvHeapInit+0xbc>)
 8008f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f1c:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <prvHeapInit+0xc0>)
 8008f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f22:	601a      	str	r2, [r3, #0]
}
 8008f24:	bf00      	nop
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	2000119c 	.word	0x2000119c
 8008f34:	20004d9c 	.word	0x20004d9c
 8008f38:	20004da4 	.word	0x20004da4
 8008f3c:	20004dac 	.word	0x20004dac
 8008f40:	20004da8 	.word	0x20004da8
 8008f44:	20004db8 	.word	0x20004db8

08008f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f50:	4b28      	ldr	r3, [pc, #160]	; (8008ff4 <prvInsertBlockIntoFreeList+0xac>)
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e002      	b.n	8008f5c <prvInsertBlockIntoFreeList+0x14>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d8f7      	bhi.n	8008f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	4413      	add	r3, r2
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d108      	bne.n	8008f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	441a      	add	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	441a      	add	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d118      	bne.n	8008fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d00d      	beq.n	8008fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	441a      	add	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	e008      	b.n	8008fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008fc6:	4b0c      	ldr	r3, [pc, #48]	; (8008ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	e003      	b.n	8008fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681a      	ldr	r2, [r3, #0]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d002      	beq.n	8008fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	20004d9c 	.word	0x20004d9c
 8008ff8:	20004da4 	.word	0x20004da4

08008ffc <srand>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	4b10      	ldr	r3, [pc, #64]	; (8009040 <srand+0x44>)
 8009000:	681d      	ldr	r5, [r3, #0]
 8009002:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009004:	4604      	mov	r4, r0
 8009006:	b9b3      	cbnz	r3, 8009036 <srand+0x3a>
 8009008:	2018      	movs	r0, #24
 800900a:	f002 f8fb 	bl	800b204 <malloc>
 800900e:	4602      	mov	r2, r0
 8009010:	6328      	str	r0, [r5, #48]	; 0x30
 8009012:	b920      	cbnz	r0, 800901e <srand+0x22>
 8009014:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <srand+0x48>)
 8009016:	480c      	ldr	r0, [pc, #48]	; (8009048 <srand+0x4c>)
 8009018:	2146      	movs	r1, #70	; 0x46
 800901a:	f001 fa0f 	bl	800a43c <__assert_func>
 800901e:	490b      	ldr	r1, [pc, #44]	; (800904c <srand+0x50>)
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <srand+0x54>)
 8009022:	e9c0 1300 	strd	r1, r3, [r0]
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <srand+0x58>)
 8009028:	6083      	str	r3, [r0, #8]
 800902a:	230b      	movs	r3, #11
 800902c:	8183      	strh	r3, [r0, #12]
 800902e:	2100      	movs	r1, #0
 8009030:	2001      	movs	r0, #1
 8009032:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009038:	2200      	movs	r2, #0
 800903a:	611c      	str	r4, [r3, #16]
 800903c:	615a      	str	r2, [r3, #20]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	200000b0 	.word	0x200000b0
 8009044:	0800e8f3 	.word	0x0800e8f3
 8009048:	0800e90a 	.word	0x0800e90a
 800904c:	abcd330e 	.word	0xabcd330e
 8009050:	e66d1234 	.word	0xe66d1234
 8009054:	0005deec 	.word	0x0005deec

08009058 <rand>:
 8009058:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <rand+0x5c>)
 800905a:	b510      	push	{r4, lr}
 800905c:	681c      	ldr	r4, [r3, #0]
 800905e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009060:	b9b3      	cbnz	r3, 8009090 <rand+0x38>
 8009062:	2018      	movs	r0, #24
 8009064:	f002 f8ce 	bl	800b204 <malloc>
 8009068:	4602      	mov	r2, r0
 800906a:	6320      	str	r0, [r4, #48]	; 0x30
 800906c:	b920      	cbnz	r0, 8009078 <rand+0x20>
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <rand+0x60>)
 8009070:	4812      	ldr	r0, [pc, #72]	; (80090bc <rand+0x64>)
 8009072:	2152      	movs	r1, #82	; 0x52
 8009074:	f001 f9e2 	bl	800a43c <__assert_func>
 8009078:	4911      	ldr	r1, [pc, #68]	; (80090c0 <rand+0x68>)
 800907a:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <rand+0x6c>)
 800907c:	e9c0 1300 	strd	r1, r3, [r0]
 8009080:	4b11      	ldr	r3, [pc, #68]	; (80090c8 <rand+0x70>)
 8009082:	6083      	str	r3, [r0, #8]
 8009084:	230b      	movs	r3, #11
 8009086:	8183      	strh	r3, [r0, #12]
 8009088:	2100      	movs	r1, #0
 800908a:	2001      	movs	r0, #1
 800908c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8009090:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009092:	480e      	ldr	r0, [pc, #56]	; (80090cc <rand+0x74>)
 8009094:	690b      	ldr	r3, [r1, #16]
 8009096:	694c      	ldr	r4, [r1, #20]
 8009098:	4a0d      	ldr	r2, [pc, #52]	; (80090d0 <rand+0x78>)
 800909a:	4358      	muls	r0, r3
 800909c:	fb02 0004 	mla	r0, r2, r4, r0
 80090a0:	fba3 3202 	umull	r3, r2, r3, r2
 80090a4:	3301      	adds	r3, #1
 80090a6:	eb40 0002 	adc.w	r0, r0, r2
 80090aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80090ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80090b2:	bd10      	pop	{r4, pc}
 80090b4:	200000b0 	.word	0x200000b0
 80090b8:	0800e8f3 	.word	0x0800e8f3
 80090bc:	0800e90a 	.word	0x0800e90a
 80090c0:	abcd330e 	.word	0xabcd330e
 80090c4:	e66d1234 	.word	0xe66d1234
 80090c8:	0005deec 	.word	0x0005deec
 80090cc:	5851f42d 	.word	0x5851f42d
 80090d0:	4c957f2d 	.word	0x4c957f2d

080090d4 <__cvt>:
 80090d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090d8:	ec55 4b10 	vmov	r4, r5, d0
 80090dc:	2d00      	cmp	r5, #0
 80090de:	460e      	mov	r6, r1
 80090e0:	4619      	mov	r1, r3
 80090e2:	462b      	mov	r3, r5
 80090e4:	bfbb      	ittet	lt
 80090e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80090ea:	461d      	movlt	r5, r3
 80090ec:	2300      	movge	r3, #0
 80090ee:	232d      	movlt	r3, #45	; 0x2d
 80090f0:	700b      	strb	r3, [r1, #0]
 80090f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80090f8:	4691      	mov	r9, r2
 80090fa:	f023 0820 	bic.w	r8, r3, #32
 80090fe:	bfbc      	itt	lt
 8009100:	4622      	movlt	r2, r4
 8009102:	4614      	movlt	r4, r2
 8009104:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009108:	d005      	beq.n	8009116 <__cvt+0x42>
 800910a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800910e:	d100      	bne.n	8009112 <__cvt+0x3e>
 8009110:	3601      	adds	r6, #1
 8009112:	2102      	movs	r1, #2
 8009114:	e000      	b.n	8009118 <__cvt+0x44>
 8009116:	2103      	movs	r1, #3
 8009118:	ab03      	add	r3, sp, #12
 800911a:	9301      	str	r3, [sp, #4]
 800911c:	ab02      	add	r3, sp, #8
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	ec45 4b10 	vmov	d0, r4, r5
 8009124:	4653      	mov	r3, sl
 8009126:	4632      	mov	r2, r6
 8009128:	f001 fa2e 	bl	800a588 <_dtoa_r>
 800912c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009130:	4607      	mov	r7, r0
 8009132:	d102      	bne.n	800913a <__cvt+0x66>
 8009134:	f019 0f01 	tst.w	r9, #1
 8009138:	d022      	beq.n	8009180 <__cvt+0xac>
 800913a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800913e:	eb07 0906 	add.w	r9, r7, r6
 8009142:	d110      	bne.n	8009166 <__cvt+0x92>
 8009144:	783b      	ldrb	r3, [r7, #0]
 8009146:	2b30      	cmp	r3, #48	; 0x30
 8009148:	d10a      	bne.n	8009160 <__cvt+0x8c>
 800914a:	2200      	movs	r2, #0
 800914c:	2300      	movs	r3, #0
 800914e:	4620      	mov	r0, r4
 8009150:	4629      	mov	r1, r5
 8009152:	f7f7 fcb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009156:	b918      	cbnz	r0, 8009160 <__cvt+0x8c>
 8009158:	f1c6 0601 	rsb	r6, r6, #1
 800915c:	f8ca 6000 	str.w	r6, [sl]
 8009160:	f8da 3000 	ldr.w	r3, [sl]
 8009164:	4499      	add	r9, r3
 8009166:	2200      	movs	r2, #0
 8009168:	2300      	movs	r3, #0
 800916a:	4620      	mov	r0, r4
 800916c:	4629      	mov	r1, r5
 800916e:	f7f7 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8009172:	b108      	cbz	r0, 8009178 <__cvt+0xa4>
 8009174:	f8cd 900c 	str.w	r9, [sp, #12]
 8009178:	2230      	movs	r2, #48	; 0x30
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	454b      	cmp	r3, r9
 800917e:	d307      	bcc.n	8009190 <__cvt+0xbc>
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009184:	1bdb      	subs	r3, r3, r7
 8009186:	4638      	mov	r0, r7
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	b004      	add	sp, #16
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	1c59      	adds	r1, r3, #1
 8009192:	9103      	str	r1, [sp, #12]
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	e7f0      	b.n	800917a <__cvt+0xa6>

08009198 <__exponent>:
 8009198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800919a:	4603      	mov	r3, r0
 800919c:	2900      	cmp	r1, #0
 800919e:	bfb8      	it	lt
 80091a0:	4249      	neglt	r1, r1
 80091a2:	f803 2b02 	strb.w	r2, [r3], #2
 80091a6:	bfb4      	ite	lt
 80091a8:	222d      	movlt	r2, #45	; 0x2d
 80091aa:	222b      	movge	r2, #43	; 0x2b
 80091ac:	2909      	cmp	r1, #9
 80091ae:	7042      	strb	r2, [r0, #1]
 80091b0:	dd2a      	ble.n	8009208 <__exponent+0x70>
 80091b2:	f10d 0207 	add.w	r2, sp, #7
 80091b6:	4617      	mov	r7, r2
 80091b8:	260a      	movs	r6, #10
 80091ba:	4694      	mov	ip, r2
 80091bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80091c0:	fb06 1415 	mls	r4, r6, r5, r1
 80091c4:	3430      	adds	r4, #48	; 0x30
 80091c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80091ca:	460c      	mov	r4, r1
 80091cc:	2c63      	cmp	r4, #99	; 0x63
 80091ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80091d2:	4629      	mov	r1, r5
 80091d4:	dcf1      	bgt.n	80091ba <__exponent+0x22>
 80091d6:	3130      	adds	r1, #48	; 0x30
 80091d8:	f1ac 0402 	sub.w	r4, ip, #2
 80091dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80091e0:	1c41      	adds	r1, r0, #1
 80091e2:	4622      	mov	r2, r4
 80091e4:	42ba      	cmp	r2, r7
 80091e6:	d30a      	bcc.n	80091fe <__exponent+0x66>
 80091e8:	f10d 0209 	add.w	r2, sp, #9
 80091ec:	eba2 020c 	sub.w	r2, r2, ip
 80091f0:	42bc      	cmp	r4, r7
 80091f2:	bf88      	it	hi
 80091f4:	2200      	movhi	r2, #0
 80091f6:	4413      	add	r3, r2
 80091f8:	1a18      	subs	r0, r3, r0
 80091fa:	b003      	add	sp, #12
 80091fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009202:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009206:	e7ed      	b.n	80091e4 <__exponent+0x4c>
 8009208:	2330      	movs	r3, #48	; 0x30
 800920a:	3130      	adds	r1, #48	; 0x30
 800920c:	7083      	strb	r3, [r0, #2]
 800920e:	70c1      	strb	r1, [r0, #3]
 8009210:	1d03      	adds	r3, r0, #4
 8009212:	e7f1      	b.n	80091f8 <__exponent+0x60>

08009214 <_printf_float>:
 8009214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009218:	ed2d 8b02 	vpush	{d8}
 800921c:	b08d      	sub	sp, #52	; 0x34
 800921e:	460c      	mov	r4, r1
 8009220:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009224:	4616      	mov	r6, r2
 8009226:	461f      	mov	r7, r3
 8009228:	4605      	mov	r5, r0
 800922a:	f001 f825 	bl	800a278 <_localeconv_r>
 800922e:	f8d0 a000 	ldr.w	sl, [r0]
 8009232:	4650      	mov	r0, sl
 8009234:	f7f7 f81c 	bl	8000270 <strlen>
 8009238:	2300      	movs	r3, #0
 800923a:	930a      	str	r3, [sp, #40]	; 0x28
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	9305      	str	r3, [sp, #20]
 8009240:	f8d8 3000 	ldr.w	r3, [r8]
 8009244:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009248:	3307      	adds	r3, #7
 800924a:	f023 0307 	bic.w	r3, r3, #7
 800924e:	f103 0208 	add.w	r2, r3, #8
 8009252:	f8c8 2000 	str.w	r2, [r8]
 8009256:	e9d3 8900 	ldrd	r8, r9, [r3]
 800925a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	f8cd 8018 	str.w	r8, [sp, #24]
 8009264:	ee08 0a10 	vmov	s16, r0
 8009268:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800926c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009270:	4b9e      	ldr	r3, [pc, #632]	; (80094ec <_printf_float+0x2d8>)
 8009272:	f04f 32ff 	mov.w	r2, #4294967295
 8009276:	f7f7 fc59 	bl	8000b2c <__aeabi_dcmpun>
 800927a:	bb88      	cbnz	r0, 80092e0 <_printf_float+0xcc>
 800927c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009280:	4b9a      	ldr	r3, [pc, #616]	; (80094ec <_printf_float+0x2d8>)
 8009282:	f04f 32ff 	mov.w	r2, #4294967295
 8009286:	f7f7 fc33 	bl	8000af0 <__aeabi_dcmple>
 800928a:	bb48      	cbnz	r0, 80092e0 <_printf_float+0xcc>
 800928c:	2200      	movs	r2, #0
 800928e:	2300      	movs	r3, #0
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f7 fc22 	bl	8000adc <__aeabi_dcmplt>
 8009298:	b110      	cbz	r0, 80092a0 <_printf_float+0x8c>
 800929a:	232d      	movs	r3, #45	; 0x2d
 800929c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a0:	4a93      	ldr	r2, [pc, #588]	; (80094f0 <_printf_float+0x2dc>)
 80092a2:	4b94      	ldr	r3, [pc, #592]	; (80094f4 <_printf_float+0x2e0>)
 80092a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80092a8:	bf94      	ite	ls
 80092aa:	4690      	movls	r8, r2
 80092ac:	4698      	movhi	r8, r3
 80092ae:	2303      	movs	r3, #3
 80092b0:	6123      	str	r3, [r4, #16]
 80092b2:	9b05      	ldr	r3, [sp, #20]
 80092b4:	f023 0304 	bic.w	r3, r3, #4
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	f04f 0900 	mov.w	r9, #0
 80092be:	9700      	str	r7, [sp, #0]
 80092c0:	4633      	mov	r3, r6
 80092c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80092c4:	4621      	mov	r1, r4
 80092c6:	4628      	mov	r0, r5
 80092c8:	f000 f9da 	bl	8009680 <_printf_common>
 80092cc:	3001      	adds	r0, #1
 80092ce:	f040 8090 	bne.w	80093f2 <_printf_float+0x1de>
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	b00d      	add	sp, #52	; 0x34
 80092d8:	ecbd 8b02 	vpop	{d8}
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 fc20 	bl	8000b2c <__aeabi_dcmpun>
 80092ec:	b140      	cbz	r0, 8009300 <_printf_float+0xec>
 80092ee:	464b      	mov	r3, r9
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	bfbc      	itt	lt
 80092f4:	232d      	movlt	r3, #45	; 0x2d
 80092f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80092fa:	4a7f      	ldr	r2, [pc, #508]	; (80094f8 <_printf_float+0x2e4>)
 80092fc:	4b7f      	ldr	r3, [pc, #508]	; (80094fc <_printf_float+0x2e8>)
 80092fe:	e7d1      	b.n	80092a4 <_printf_float+0x90>
 8009300:	6863      	ldr	r3, [r4, #4]
 8009302:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009306:	9206      	str	r2, [sp, #24]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	d13f      	bne.n	800938c <_printf_float+0x178>
 800930c:	2306      	movs	r3, #6
 800930e:	6063      	str	r3, [r4, #4]
 8009310:	9b05      	ldr	r3, [sp, #20]
 8009312:	6861      	ldr	r1, [r4, #4]
 8009314:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009318:	2300      	movs	r3, #0
 800931a:	9303      	str	r3, [sp, #12]
 800931c:	ab0a      	add	r3, sp, #40	; 0x28
 800931e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009322:	ab09      	add	r3, sp, #36	; 0x24
 8009324:	ec49 8b10 	vmov	d0, r8, r9
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	6022      	str	r2, [r4, #0]
 800932c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009330:	4628      	mov	r0, r5
 8009332:	f7ff fecf 	bl	80090d4 <__cvt>
 8009336:	9b06      	ldr	r3, [sp, #24]
 8009338:	9909      	ldr	r1, [sp, #36]	; 0x24
 800933a:	2b47      	cmp	r3, #71	; 0x47
 800933c:	4680      	mov	r8, r0
 800933e:	d108      	bne.n	8009352 <_printf_float+0x13e>
 8009340:	1cc8      	adds	r0, r1, #3
 8009342:	db02      	blt.n	800934a <_printf_float+0x136>
 8009344:	6863      	ldr	r3, [r4, #4]
 8009346:	4299      	cmp	r1, r3
 8009348:	dd41      	ble.n	80093ce <_printf_float+0x1ba>
 800934a:	f1ab 0302 	sub.w	r3, fp, #2
 800934e:	fa5f fb83 	uxtb.w	fp, r3
 8009352:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009356:	d820      	bhi.n	800939a <_printf_float+0x186>
 8009358:	3901      	subs	r1, #1
 800935a:	465a      	mov	r2, fp
 800935c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009360:	9109      	str	r1, [sp, #36]	; 0x24
 8009362:	f7ff ff19 	bl	8009198 <__exponent>
 8009366:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009368:	1813      	adds	r3, r2, r0
 800936a:	2a01      	cmp	r2, #1
 800936c:	4681      	mov	r9, r0
 800936e:	6123      	str	r3, [r4, #16]
 8009370:	dc02      	bgt.n	8009378 <_printf_float+0x164>
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	07d2      	lsls	r2, r2, #31
 8009376:	d501      	bpl.n	800937c <_printf_float+0x168>
 8009378:	3301      	adds	r3, #1
 800937a:	6123      	str	r3, [r4, #16]
 800937c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009380:	2b00      	cmp	r3, #0
 8009382:	d09c      	beq.n	80092be <_printf_float+0xaa>
 8009384:	232d      	movs	r3, #45	; 0x2d
 8009386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800938a:	e798      	b.n	80092be <_printf_float+0xaa>
 800938c:	9a06      	ldr	r2, [sp, #24]
 800938e:	2a47      	cmp	r2, #71	; 0x47
 8009390:	d1be      	bne.n	8009310 <_printf_float+0xfc>
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1bc      	bne.n	8009310 <_printf_float+0xfc>
 8009396:	2301      	movs	r3, #1
 8009398:	e7b9      	b.n	800930e <_printf_float+0xfa>
 800939a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800939e:	d118      	bne.n	80093d2 <_printf_float+0x1be>
 80093a0:	2900      	cmp	r1, #0
 80093a2:	6863      	ldr	r3, [r4, #4]
 80093a4:	dd0b      	ble.n	80093be <_printf_float+0x1aa>
 80093a6:	6121      	str	r1, [r4, #16]
 80093a8:	b913      	cbnz	r3, 80093b0 <_printf_float+0x19c>
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	07d0      	lsls	r0, r2, #31
 80093ae:	d502      	bpl.n	80093b6 <_printf_float+0x1a2>
 80093b0:	3301      	adds	r3, #1
 80093b2:	440b      	add	r3, r1
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80093b8:	f04f 0900 	mov.w	r9, #0
 80093bc:	e7de      	b.n	800937c <_printf_float+0x168>
 80093be:	b913      	cbnz	r3, 80093c6 <_printf_float+0x1b2>
 80093c0:	6822      	ldr	r2, [r4, #0]
 80093c2:	07d2      	lsls	r2, r2, #31
 80093c4:	d501      	bpl.n	80093ca <_printf_float+0x1b6>
 80093c6:	3302      	adds	r3, #2
 80093c8:	e7f4      	b.n	80093b4 <_printf_float+0x1a0>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e7f2      	b.n	80093b4 <_printf_float+0x1a0>
 80093ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80093d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093d4:	4299      	cmp	r1, r3
 80093d6:	db05      	blt.n	80093e4 <_printf_float+0x1d0>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	6121      	str	r1, [r4, #16]
 80093dc:	07d8      	lsls	r0, r3, #31
 80093de:	d5ea      	bpl.n	80093b6 <_printf_float+0x1a2>
 80093e0:	1c4b      	adds	r3, r1, #1
 80093e2:	e7e7      	b.n	80093b4 <_printf_float+0x1a0>
 80093e4:	2900      	cmp	r1, #0
 80093e6:	bfd4      	ite	le
 80093e8:	f1c1 0202 	rsble	r2, r1, #2
 80093ec:	2201      	movgt	r2, #1
 80093ee:	4413      	add	r3, r2
 80093f0:	e7e0      	b.n	80093b4 <_printf_float+0x1a0>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	055a      	lsls	r2, r3, #21
 80093f6:	d407      	bmi.n	8009408 <_printf_float+0x1f4>
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	4642      	mov	r2, r8
 80093fc:	4631      	mov	r1, r6
 80093fe:	4628      	mov	r0, r5
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	d12c      	bne.n	8009460 <_printf_float+0x24c>
 8009406:	e764      	b.n	80092d2 <_printf_float+0xbe>
 8009408:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800940c:	f240 80e0 	bls.w	80095d0 <_printf_float+0x3bc>
 8009410:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009414:	2200      	movs	r2, #0
 8009416:	2300      	movs	r3, #0
 8009418:	f7f7 fb56 	bl	8000ac8 <__aeabi_dcmpeq>
 800941c:	2800      	cmp	r0, #0
 800941e:	d034      	beq.n	800948a <_printf_float+0x276>
 8009420:	4a37      	ldr	r2, [pc, #220]	; (8009500 <_printf_float+0x2ec>)
 8009422:	2301      	movs	r3, #1
 8009424:	4631      	mov	r1, r6
 8009426:	4628      	mov	r0, r5
 8009428:	47b8      	blx	r7
 800942a:	3001      	adds	r0, #1
 800942c:	f43f af51 	beq.w	80092d2 <_printf_float+0xbe>
 8009430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009434:	429a      	cmp	r2, r3
 8009436:	db02      	blt.n	800943e <_printf_float+0x22a>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	07d8      	lsls	r0, r3, #31
 800943c:	d510      	bpl.n	8009460 <_printf_float+0x24c>
 800943e:	ee18 3a10 	vmov	r3, s16
 8009442:	4652      	mov	r2, sl
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f af41 	beq.w	80092d2 <_printf_float+0xbe>
 8009450:	f04f 0800 	mov.w	r8, #0
 8009454:	f104 091a 	add.w	r9, r4, #26
 8009458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800945a:	3b01      	subs	r3, #1
 800945c:	4543      	cmp	r3, r8
 800945e:	dc09      	bgt.n	8009474 <_printf_float+0x260>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	079b      	lsls	r3, r3, #30
 8009464:	f100 8107 	bmi.w	8009676 <_printf_float+0x462>
 8009468:	68e0      	ldr	r0, [r4, #12]
 800946a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800946c:	4298      	cmp	r0, r3
 800946e:	bfb8      	it	lt
 8009470:	4618      	movlt	r0, r3
 8009472:	e730      	b.n	80092d6 <_printf_float+0xc2>
 8009474:	2301      	movs	r3, #1
 8009476:	464a      	mov	r2, r9
 8009478:	4631      	mov	r1, r6
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	f43f af27 	beq.w	80092d2 <_printf_float+0xbe>
 8009484:	f108 0801 	add.w	r8, r8, #1
 8009488:	e7e6      	b.n	8009458 <_printf_float+0x244>
 800948a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948c:	2b00      	cmp	r3, #0
 800948e:	dc39      	bgt.n	8009504 <_printf_float+0x2f0>
 8009490:	4a1b      	ldr	r2, [pc, #108]	; (8009500 <_printf_float+0x2ec>)
 8009492:	2301      	movs	r3, #1
 8009494:	4631      	mov	r1, r6
 8009496:	4628      	mov	r0, r5
 8009498:	47b8      	blx	r7
 800949a:	3001      	adds	r0, #1
 800949c:	f43f af19 	beq.w	80092d2 <_printf_float+0xbe>
 80094a0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094a4:	4313      	orrs	r3, r2
 80094a6:	d102      	bne.n	80094ae <_printf_float+0x29a>
 80094a8:	6823      	ldr	r3, [r4, #0]
 80094aa:	07d9      	lsls	r1, r3, #31
 80094ac:	d5d8      	bpl.n	8009460 <_printf_float+0x24c>
 80094ae:	ee18 3a10 	vmov	r3, s16
 80094b2:	4652      	mov	r2, sl
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	f43f af09 	beq.w	80092d2 <_printf_float+0xbe>
 80094c0:	f04f 0900 	mov.w	r9, #0
 80094c4:	f104 0a1a 	add.w	sl, r4, #26
 80094c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ca:	425b      	negs	r3, r3
 80094cc:	454b      	cmp	r3, r9
 80094ce:	dc01      	bgt.n	80094d4 <_printf_float+0x2c0>
 80094d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d2:	e792      	b.n	80093fa <_printf_float+0x1e6>
 80094d4:	2301      	movs	r3, #1
 80094d6:	4652      	mov	r2, sl
 80094d8:	4631      	mov	r1, r6
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	f43f aef7 	beq.w	80092d2 <_printf_float+0xbe>
 80094e4:	f109 0901 	add.w	r9, r9, #1
 80094e8:	e7ee      	b.n	80094c8 <_printf_float+0x2b4>
 80094ea:	bf00      	nop
 80094ec:	7fefffff 	.word	0x7fefffff
 80094f0:	0800e962 	.word	0x0800e962
 80094f4:	0800e966 	.word	0x0800e966
 80094f8:	0800e96a 	.word	0x0800e96a
 80094fc:	0800e96e 	.word	0x0800e96e
 8009500:	0800e972 	.word	0x0800e972
 8009504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009506:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009508:	429a      	cmp	r2, r3
 800950a:	bfa8      	it	ge
 800950c:	461a      	movge	r2, r3
 800950e:	2a00      	cmp	r2, #0
 8009510:	4691      	mov	r9, r2
 8009512:	dc37      	bgt.n	8009584 <_printf_float+0x370>
 8009514:	f04f 0b00 	mov.w	fp, #0
 8009518:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800951c:	f104 021a 	add.w	r2, r4, #26
 8009520:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	eba3 0309 	sub.w	r3, r3, r9
 8009528:	455b      	cmp	r3, fp
 800952a:	dc33      	bgt.n	8009594 <_printf_float+0x380>
 800952c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009530:	429a      	cmp	r2, r3
 8009532:	db3b      	blt.n	80095ac <_printf_float+0x398>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	07da      	lsls	r2, r3, #31
 8009538:	d438      	bmi.n	80095ac <_printf_float+0x398>
 800953a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800953e:	eba2 0903 	sub.w	r9, r2, r3
 8009542:	9b05      	ldr	r3, [sp, #20]
 8009544:	1ad2      	subs	r2, r2, r3
 8009546:	4591      	cmp	r9, r2
 8009548:	bfa8      	it	ge
 800954a:	4691      	movge	r9, r2
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	dc35      	bgt.n	80095be <_printf_float+0x3aa>
 8009552:	f04f 0800 	mov.w	r8, #0
 8009556:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800955a:	f104 0a1a 	add.w	sl, r4, #26
 800955e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009562:	1a9b      	subs	r3, r3, r2
 8009564:	eba3 0309 	sub.w	r3, r3, r9
 8009568:	4543      	cmp	r3, r8
 800956a:	f77f af79 	ble.w	8009460 <_printf_float+0x24c>
 800956e:	2301      	movs	r3, #1
 8009570:	4652      	mov	r2, sl
 8009572:	4631      	mov	r1, r6
 8009574:	4628      	mov	r0, r5
 8009576:	47b8      	blx	r7
 8009578:	3001      	adds	r0, #1
 800957a:	f43f aeaa 	beq.w	80092d2 <_printf_float+0xbe>
 800957e:	f108 0801 	add.w	r8, r8, #1
 8009582:	e7ec      	b.n	800955e <_printf_float+0x34a>
 8009584:	4613      	mov	r3, r2
 8009586:	4631      	mov	r1, r6
 8009588:	4642      	mov	r2, r8
 800958a:	4628      	mov	r0, r5
 800958c:	47b8      	blx	r7
 800958e:	3001      	adds	r0, #1
 8009590:	d1c0      	bne.n	8009514 <_printf_float+0x300>
 8009592:	e69e      	b.n	80092d2 <_printf_float+0xbe>
 8009594:	2301      	movs	r3, #1
 8009596:	4631      	mov	r1, r6
 8009598:	4628      	mov	r0, r5
 800959a:	9205      	str	r2, [sp, #20]
 800959c:	47b8      	blx	r7
 800959e:	3001      	adds	r0, #1
 80095a0:	f43f ae97 	beq.w	80092d2 <_printf_float+0xbe>
 80095a4:	9a05      	ldr	r2, [sp, #20]
 80095a6:	f10b 0b01 	add.w	fp, fp, #1
 80095aa:	e7b9      	b.n	8009520 <_printf_float+0x30c>
 80095ac:	ee18 3a10 	vmov	r3, s16
 80095b0:	4652      	mov	r2, sl
 80095b2:	4631      	mov	r1, r6
 80095b4:	4628      	mov	r0, r5
 80095b6:	47b8      	blx	r7
 80095b8:	3001      	adds	r0, #1
 80095ba:	d1be      	bne.n	800953a <_printf_float+0x326>
 80095bc:	e689      	b.n	80092d2 <_printf_float+0xbe>
 80095be:	9a05      	ldr	r2, [sp, #20]
 80095c0:	464b      	mov	r3, r9
 80095c2:	4442      	add	r2, r8
 80095c4:	4631      	mov	r1, r6
 80095c6:	4628      	mov	r0, r5
 80095c8:	47b8      	blx	r7
 80095ca:	3001      	adds	r0, #1
 80095cc:	d1c1      	bne.n	8009552 <_printf_float+0x33e>
 80095ce:	e680      	b.n	80092d2 <_printf_float+0xbe>
 80095d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095d2:	2a01      	cmp	r2, #1
 80095d4:	dc01      	bgt.n	80095da <_printf_float+0x3c6>
 80095d6:	07db      	lsls	r3, r3, #31
 80095d8:	d53a      	bpl.n	8009650 <_printf_float+0x43c>
 80095da:	2301      	movs	r3, #1
 80095dc:	4642      	mov	r2, r8
 80095de:	4631      	mov	r1, r6
 80095e0:	4628      	mov	r0, r5
 80095e2:	47b8      	blx	r7
 80095e4:	3001      	adds	r0, #1
 80095e6:	f43f ae74 	beq.w	80092d2 <_printf_float+0xbe>
 80095ea:	ee18 3a10 	vmov	r3, s16
 80095ee:	4652      	mov	r2, sl
 80095f0:	4631      	mov	r1, r6
 80095f2:	4628      	mov	r0, r5
 80095f4:	47b8      	blx	r7
 80095f6:	3001      	adds	r0, #1
 80095f8:	f43f ae6b 	beq.w	80092d2 <_printf_float+0xbe>
 80095fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009600:	2200      	movs	r2, #0
 8009602:	2300      	movs	r3, #0
 8009604:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009608:	f7f7 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800960c:	b9d8      	cbnz	r0, 8009646 <_printf_float+0x432>
 800960e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009612:	f108 0201 	add.w	r2, r8, #1
 8009616:	4631      	mov	r1, r6
 8009618:	4628      	mov	r0, r5
 800961a:	47b8      	blx	r7
 800961c:	3001      	adds	r0, #1
 800961e:	d10e      	bne.n	800963e <_printf_float+0x42a>
 8009620:	e657      	b.n	80092d2 <_printf_float+0xbe>
 8009622:	2301      	movs	r3, #1
 8009624:	4652      	mov	r2, sl
 8009626:	4631      	mov	r1, r6
 8009628:	4628      	mov	r0, r5
 800962a:	47b8      	blx	r7
 800962c:	3001      	adds	r0, #1
 800962e:	f43f ae50 	beq.w	80092d2 <_printf_float+0xbe>
 8009632:	f108 0801 	add.w	r8, r8, #1
 8009636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009638:	3b01      	subs	r3, #1
 800963a:	4543      	cmp	r3, r8
 800963c:	dcf1      	bgt.n	8009622 <_printf_float+0x40e>
 800963e:	464b      	mov	r3, r9
 8009640:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009644:	e6da      	b.n	80093fc <_printf_float+0x1e8>
 8009646:	f04f 0800 	mov.w	r8, #0
 800964a:	f104 0a1a 	add.w	sl, r4, #26
 800964e:	e7f2      	b.n	8009636 <_printf_float+0x422>
 8009650:	2301      	movs	r3, #1
 8009652:	4642      	mov	r2, r8
 8009654:	e7df      	b.n	8009616 <_printf_float+0x402>
 8009656:	2301      	movs	r3, #1
 8009658:	464a      	mov	r2, r9
 800965a:	4631      	mov	r1, r6
 800965c:	4628      	mov	r0, r5
 800965e:	47b8      	blx	r7
 8009660:	3001      	adds	r0, #1
 8009662:	f43f ae36 	beq.w	80092d2 <_printf_float+0xbe>
 8009666:	f108 0801 	add.w	r8, r8, #1
 800966a:	68e3      	ldr	r3, [r4, #12]
 800966c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800966e:	1a5b      	subs	r3, r3, r1
 8009670:	4543      	cmp	r3, r8
 8009672:	dcf0      	bgt.n	8009656 <_printf_float+0x442>
 8009674:	e6f8      	b.n	8009468 <_printf_float+0x254>
 8009676:	f04f 0800 	mov.w	r8, #0
 800967a:	f104 0919 	add.w	r9, r4, #25
 800967e:	e7f4      	b.n	800966a <_printf_float+0x456>

08009680 <_printf_common>:
 8009680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009684:	4616      	mov	r6, r2
 8009686:	4699      	mov	r9, r3
 8009688:	688a      	ldr	r2, [r1, #8]
 800968a:	690b      	ldr	r3, [r1, #16]
 800968c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009690:	4293      	cmp	r3, r2
 8009692:	bfb8      	it	lt
 8009694:	4613      	movlt	r3, r2
 8009696:	6033      	str	r3, [r6, #0]
 8009698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800969c:	4607      	mov	r7, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	b10a      	cbz	r2, 80096a6 <_printf_common+0x26>
 80096a2:	3301      	adds	r3, #1
 80096a4:	6033      	str	r3, [r6, #0]
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	0699      	lsls	r1, r3, #26
 80096aa:	bf42      	ittt	mi
 80096ac:	6833      	ldrmi	r3, [r6, #0]
 80096ae:	3302      	addmi	r3, #2
 80096b0:	6033      	strmi	r3, [r6, #0]
 80096b2:	6825      	ldr	r5, [r4, #0]
 80096b4:	f015 0506 	ands.w	r5, r5, #6
 80096b8:	d106      	bne.n	80096c8 <_printf_common+0x48>
 80096ba:	f104 0a19 	add.w	sl, r4, #25
 80096be:	68e3      	ldr	r3, [r4, #12]
 80096c0:	6832      	ldr	r2, [r6, #0]
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	dc26      	bgt.n	8009716 <_printf_common+0x96>
 80096c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80096cc:	1e13      	subs	r3, r2, #0
 80096ce:	6822      	ldr	r2, [r4, #0]
 80096d0:	bf18      	it	ne
 80096d2:	2301      	movne	r3, #1
 80096d4:	0692      	lsls	r2, r2, #26
 80096d6:	d42b      	bmi.n	8009730 <_printf_common+0xb0>
 80096d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80096dc:	4649      	mov	r1, r9
 80096de:	4638      	mov	r0, r7
 80096e0:	47c0      	blx	r8
 80096e2:	3001      	adds	r0, #1
 80096e4:	d01e      	beq.n	8009724 <_printf_common+0xa4>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	6922      	ldr	r2, [r4, #16]
 80096ea:	f003 0306 	and.w	r3, r3, #6
 80096ee:	2b04      	cmp	r3, #4
 80096f0:	bf02      	ittt	eq
 80096f2:	68e5      	ldreq	r5, [r4, #12]
 80096f4:	6833      	ldreq	r3, [r6, #0]
 80096f6:	1aed      	subeq	r5, r5, r3
 80096f8:	68a3      	ldr	r3, [r4, #8]
 80096fa:	bf0c      	ite	eq
 80096fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009700:	2500      	movne	r5, #0
 8009702:	4293      	cmp	r3, r2
 8009704:	bfc4      	itt	gt
 8009706:	1a9b      	subgt	r3, r3, r2
 8009708:	18ed      	addgt	r5, r5, r3
 800970a:	2600      	movs	r6, #0
 800970c:	341a      	adds	r4, #26
 800970e:	42b5      	cmp	r5, r6
 8009710:	d11a      	bne.n	8009748 <_printf_common+0xc8>
 8009712:	2000      	movs	r0, #0
 8009714:	e008      	b.n	8009728 <_printf_common+0xa8>
 8009716:	2301      	movs	r3, #1
 8009718:	4652      	mov	r2, sl
 800971a:	4649      	mov	r1, r9
 800971c:	4638      	mov	r0, r7
 800971e:	47c0      	blx	r8
 8009720:	3001      	adds	r0, #1
 8009722:	d103      	bne.n	800972c <_printf_common+0xac>
 8009724:	f04f 30ff 	mov.w	r0, #4294967295
 8009728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972c:	3501      	adds	r5, #1
 800972e:	e7c6      	b.n	80096be <_printf_common+0x3e>
 8009730:	18e1      	adds	r1, r4, r3
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	2030      	movs	r0, #48	; 0x30
 8009736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800973a:	4422      	add	r2, r4
 800973c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009744:	3302      	adds	r3, #2
 8009746:	e7c7      	b.n	80096d8 <_printf_common+0x58>
 8009748:	2301      	movs	r3, #1
 800974a:	4622      	mov	r2, r4
 800974c:	4649      	mov	r1, r9
 800974e:	4638      	mov	r0, r7
 8009750:	47c0      	blx	r8
 8009752:	3001      	adds	r0, #1
 8009754:	d0e6      	beq.n	8009724 <_printf_common+0xa4>
 8009756:	3601      	adds	r6, #1
 8009758:	e7d9      	b.n	800970e <_printf_common+0x8e>
	...

0800975c <_printf_i>:
 800975c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009760:	7e0f      	ldrb	r7, [r1, #24]
 8009762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009764:	2f78      	cmp	r7, #120	; 0x78
 8009766:	4691      	mov	r9, r2
 8009768:	4680      	mov	r8, r0
 800976a:	460c      	mov	r4, r1
 800976c:	469a      	mov	sl, r3
 800976e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009772:	d807      	bhi.n	8009784 <_printf_i+0x28>
 8009774:	2f62      	cmp	r7, #98	; 0x62
 8009776:	d80a      	bhi.n	800978e <_printf_i+0x32>
 8009778:	2f00      	cmp	r7, #0
 800977a:	f000 80d4 	beq.w	8009926 <_printf_i+0x1ca>
 800977e:	2f58      	cmp	r7, #88	; 0x58
 8009780:	f000 80c0 	beq.w	8009904 <_printf_i+0x1a8>
 8009784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800978c:	e03a      	b.n	8009804 <_printf_i+0xa8>
 800978e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009792:	2b15      	cmp	r3, #21
 8009794:	d8f6      	bhi.n	8009784 <_printf_i+0x28>
 8009796:	a101      	add	r1, pc, #4	; (adr r1, 800979c <_printf_i+0x40>)
 8009798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800979c:	080097f5 	.word	0x080097f5
 80097a0:	08009809 	.word	0x08009809
 80097a4:	08009785 	.word	0x08009785
 80097a8:	08009785 	.word	0x08009785
 80097ac:	08009785 	.word	0x08009785
 80097b0:	08009785 	.word	0x08009785
 80097b4:	08009809 	.word	0x08009809
 80097b8:	08009785 	.word	0x08009785
 80097bc:	08009785 	.word	0x08009785
 80097c0:	08009785 	.word	0x08009785
 80097c4:	08009785 	.word	0x08009785
 80097c8:	0800990d 	.word	0x0800990d
 80097cc:	08009835 	.word	0x08009835
 80097d0:	080098c7 	.word	0x080098c7
 80097d4:	08009785 	.word	0x08009785
 80097d8:	08009785 	.word	0x08009785
 80097dc:	0800992f 	.word	0x0800992f
 80097e0:	08009785 	.word	0x08009785
 80097e4:	08009835 	.word	0x08009835
 80097e8:	08009785 	.word	0x08009785
 80097ec:	08009785 	.word	0x08009785
 80097f0:	080098cf 	.word	0x080098cf
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	1d1a      	adds	r2, r3, #4
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	602a      	str	r2, [r5, #0]
 80097fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009804:	2301      	movs	r3, #1
 8009806:	e09f      	b.n	8009948 <_printf_i+0x1ec>
 8009808:	6820      	ldr	r0, [r4, #0]
 800980a:	682b      	ldr	r3, [r5, #0]
 800980c:	0607      	lsls	r7, r0, #24
 800980e:	f103 0104 	add.w	r1, r3, #4
 8009812:	6029      	str	r1, [r5, #0]
 8009814:	d501      	bpl.n	800981a <_printf_i+0xbe>
 8009816:	681e      	ldr	r6, [r3, #0]
 8009818:	e003      	b.n	8009822 <_printf_i+0xc6>
 800981a:	0646      	lsls	r6, r0, #25
 800981c:	d5fb      	bpl.n	8009816 <_printf_i+0xba>
 800981e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009822:	2e00      	cmp	r6, #0
 8009824:	da03      	bge.n	800982e <_printf_i+0xd2>
 8009826:	232d      	movs	r3, #45	; 0x2d
 8009828:	4276      	negs	r6, r6
 800982a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800982e:	485a      	ldr	r0, [pc, #360]	; (8009998 <_printf_i+0x23c>)
 8009830:	230a      	movs	r3, #10
 8009832:	e012      	b.n	800985a <_printf_i+0xfe>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	6820      	ldr	r0, [r4, #0]
 8009838:	1d19      	adds	r1, r3, #4
 800983a:	6029      	str	r1, [r5, #0]
 800983c:	0605      	lsls	r5, r0, #24
 800983e:	d501      	bpl.n	8009844 <_printf_i+0xe8>
 8009840:	681e      	ldr	r6, [r3, #0]
 8009842:	e002      	b.n	800984a <_printf_i+0xee>
 8009844:	0641      	lsls	r1, r0, #25
 8009846:	d5fb      	bpl.n	8009840 <_printf_i+0xe4>
 8009848:	881e      	ldrh	r6, [r3, #0]
 800984a:	4853      	ldr	r0, [pc, #332]	; (8009998 <_printf_i+0x23c>)
 800984c:	2f6f      	cmp	r7, #111	; 0x6f
 800984e:	bf0c      	ite	eq
 8009850:	2308      	moveq	r3, #8
 8009852:	230a      	movne	r3, #10
 8009854:	2100      	movs	r1, #0
 8009856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800985a:	6865      	ldr	r5, [r4, #4]
 800985c:	60a5      	str	r5, [r4, #8]
 800985e:	2d00      	cmp	r5, #0
 8009860:	bfa2      	ittt	ge
 8009862:	6821      	ldrge	r1, [r4, #0]
 8009864:	f021 0104 	bicge.w	r1, r1, #4
 8009868:	6021      	strge	r1, [r4, #0]
 800986a:	b90e      	cbnz	r6, 8009870 <_printf_i+0x114>
 800986c:	2d00      	cmp	r5, #0
 800986e:	d04b      	beq.n	8009908 <_printf_i+0x1ac>
 8009870:	4615      	mov	r5, r2
 8009872:	fbb6 f1f3 	udiv	r1, r6, r3
 8009876:	fb03 6711 	mls	r7, r3, r1, r6
 800987a:	5dc7      	ldrb	r7, [r0, r7]
 800987c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009880:	4637      	mov	r7, r6
 8009882:	42bb      	cmp	r3, r7
 8009884:	460e      	mov	r6, r1
 8009886:	d9f4      	bls.n	8009872 <_printf_i+0x116>
 8009888:	2b08      	cmp	r3, #8
 800988a:	d10b      	bne.n	80098a4 <_printf_i+0x148>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	07de      	lsls	r6, r3, #31
 8009890:	d508      	bpl.n	80098a4 <_printf_i+0x148>
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6861      	ldr	r1, [r4, #4]
 8009896:	4299      	cmp	r1, r3
 8009898:	bfde      	ittt	le
 800989a:	2330      	movle	r3, #48	; 0x30
 800989c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80098a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80098a4:	1b52      	subs	r2, r2, r5
 80098a6:	6122      	str	r2, [r4, #16]
 80098a8:	f8cd a000 	str.w	sl, [sp]
 80098ac:	464b      	mov	r3, r9
 80098ae:	aa03      	add	r2, sp, #12
 80098b0:	4621      	mov	r1, r4
 80098b2:	4640      	mov	r0, r8
 80098b4:	f7ff fee4 	bl	8009680 <_printf_common>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d14a      	bne.n	8009952 <_printf_i+0x1f6>
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	b004      	add	sp, #16
 80098c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	f043 0320 	orr.w	r3, r3, #32
 80098cc:	6023      	str	r3, [r4, #0]
 80098ce:	4833      	ldr	r0, [pc, #204]	; (800999c <_printf_i+0x240>)
 80098d0:	2778      	movs	r7, #120	; 0x78
 80098d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	6829      	ldr	r1, [r5, #0]
 80098da:	061f      	lsls	r7, r3, #24
 80098dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80098e0:	d402      	bmi.n	80098e8 <_printf_i+0x18c>
 80098e2:	065f      	lsls	r7, r3, #25
 80098e4:	bf48      	it	mi
 80098e6:	b2b6      	uxthmi	r6, r6
 80098e8:	07df      	lsls	r7, r3, #31
 80098ea:	bf48      	it	mi
 80098ec:	f043 0320 	orrmi.w	r3, r3, #32
 80098f0:	6029      	str	r1, [r5, #0]
 80098f2:	bf48      	it	mi
 80098f4:	6023      	strmi	r3, [r4, #0]
 80098f6:	b91e      	cbnz	r6, 8009900 <_printf_i+0x1a4>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	f023 0320 	bic.w	r3, r3, #32
 80098fe:	6023      	str	r3, [r4, #0]
 8009900:	2310      	movs	r3, #16
 8009902:	e7a7      	b.n	8009854 <_printf_i+0xf8>
 8009904:	4824      	ldr	r0, [pc, #144]	; (8009998 <_printf_i+0x23c>)
 8009906:	e7e4      	b.n	80098d2 <_printf_i+0x176>
 8009908:	4615      	mov	r5, r2
 800990a:	e7bd      	b.n	8009888 <_printf_i+0x12c>
 800990c:	682b      	ldr	r3, [r5, #0]
 800990e:	6826      	ldr	r6, [r4, #0]
 8009910:	6961      	ldr	r1, [r4, #20]
 8009912:	1d18      	adds	r0, r3, #4
 8009914:	6028      	str	r0, [r5, #0]
 8009916:	0635      	lsls	r5, r6, #24
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	d501      	bpl.n	8009920 <_printf_i+0x1c4>
 800991c:	6019      	str	r1, [r3, #0]
 800991e:	e002      	b.n	8009926 <_printf_i+0x1ca>
 8009920:	0670      	lsls	r0, r6, #25
 8009922:	d5fb      	bpl.n	800991c <_printf_i+0x1c0>
 8009924:	8019      	strh	r1, [r3, #0]
 8009926:	2300      	movs	r3, #0
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	4615      	mov	r5, r2
 800992c:	e7bc      	b.n	80098a8 <_printf_i+0x14c>
 800992e:	682b      	ldr	r3, [r5, #0]
 8009930:	1d1a      	adds	r2, r3, #4
 8009932:	602a      	str	r2, [r5, #0]
 8009934:	681d      	ldr	r5, [r3, #0]
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	2100      	movs	r1, #0
 800993a:	4628      	mov	r0, r5
 800993c:	f7f6 fc48 	bl	80001d0 <memchr>
 8009940:	b108      	cbz	r0, 8009946 <_printf_i+0x1ea>
 8009942:	1b40      	subs	r0, r0, r5
 8009944:	6060      	str	r0, [r4, #4]
 8009946:	6863      	ldr	r3, [r4, #4]
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	2300      	movs	r3, #0
 800994c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009950:	e7aa      	b.n	80098a8 <_printf_i+0x14c>
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	462a      	mov	r2, r5
 8009956:	4649      	mov	r1, r9
 8009958:	4640      	mov	r0, r8
 800995a:	47d0      	blx	sl
 800995c:	3001      	adds	r0, #1
 800995e:	d0ad      	beq.n	80098bc <_printf_i+0x160>
 8009960:	6823      	ldr	r3, [r4, #0]
 8009962:	079b      	lsls	r3, r3, #30
 8009964:	d413      	bmi.n	800998e <_printf_i+0x232>
 8009966:	68e0      	ldr	r0, [r4, #12]
 8009968:	9b03      	ldr	r3, [sp, #12]
 800996a:	4298      	cmp	r0, r3
 800996c:	bfb8      	it	lt
 800996e:	4618      	movlt	r0, r3
 8009970:	e7a6      	b.n	80098c0 <_printf_i+0x164>
 8009972:	2301      	movs	r3, #1
 8009974:	4632      	mov	r2, r6
 8009976:	4649      	mov	r1, r9
 8009978:	4640      	mov	r0, r8
 800997a:	47d0      	blx	sl
 800997c:	3001      	adds	r0, #1
 800997e:	d09d      	beq.n	80098bc <_printf_i+0x160>
 8009980:	3501      	adds	r5, #1
 8009982:	68e3      	ldr	r3, [r4, #12]
 8009984:	9903      	ldr	r1, [sp, #12]
 8009986:	1a5b      	subs	r3, r3, r1
 8009988:	42ab      	cmp	r3, r5
 800998a:	dcf2      	bgt.n	8009972 <_printf_i+0x216>
 800998c:	e7eb      	b.n	8009966 <_printf_i+0x20a>
 800998e:	2500      	movs	r5, #0
 8009990:	f104 0619 	add.w	r6, r4, #25
 8009994:	e7f5      	b.n	8009982 <_printf_i+0x226>
 8009996:	bf00      	nop
 8009998:	0800e974 	.word	0x0800e974
 800999c:	0800e985 	.word	0x0800e985

080099a0 <_scanf_float>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	b087      	sub	sp, #28
 80099a6:	4617      	mov	r7, r2
 80099a8:	9303      	str	r3, [sp, #12]
 80099aa:	688b      	ldr	r3, [r1, #8]
 80099ac:	1e5a      	subs	r2, r3, #1
 80099ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80099b2:	bf83      	ittte	hi
 80099b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80099b8:	195b      	addhi	r3, r3, r5
 80099ba:	9302      	strhi	r3, [sp, #8]
 80099bc:	2300      	movls	r3, #0
 80099be:	bf86      	itte	hi
 80099c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80099c4:	608b      	strhi	r3, [r1, #8]
 80099c6:	9302      	strls	r3, [sp, #8]
 80099c8:	680b      	ldr	r3, [r1, #0]
 80099ca:	468b      	mov	fp, r1
 80099cc:	2500      	movs	r5, #0
 80099ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80099d2:	f84b 3b1c 	str.w	r3, [fp], #28
 80099d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80099da:	4680      	mov	r8, r0
 80099dc:	460c      	mov	r4, r1
 80099de:	465e      	mov	r6, fp
 80099e0:	46aa      	mov	sl, r5
 80099e2:	46a9      	mov	r9, r5
 80099e4:	9501      	str	r5, [sp, #4]
 80099e6:	68a2      	ldr	r2, [r4, #8]
 80099e8:	b152      	cbz	r2, 8009a00 <_scanf_float+0x60>
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	2b4e      	cmp	r3, #78	; 0x4e
 80099f0:	d864      	bhi.n	8009abc <_scanf_float+0x11c>
 80099f2:	2b40      	cmp	r3, #64	; 0x40
 80099f4:	d83c      	bhi.n	8009a70 <_scanf_float+0xd0>
 80099f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80099fa:	b2c8      	uxtb	r0, r1
 80099fc:	280e      	cmp	r0, #14
 80099fe:	d93a      	bls.n	8009a76 <_scanf_float+0xd6>
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	d003      	beq.n	8009a0e <_scanf_float+0x6e>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a12:	f1ba 0f01 	cmp.w	sl, #1
 8009a16:	f200 8113 	bhi.w	8009c40 <_scanf_float+0x2a0>
 8009a1a:	455e      	cmp	r6, fp
 8009a1c:	f200 8105 	bhi.w	8009c2a <_scanf_float+0x28a>
 8009a20:	2501      	movs	r5, #1
 8009a22:	4628      	mov	r0, r5
 8009a24:	b007      	add	sp, #28
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009a2e:	2a0d      	cmp	r2, #13
 8009a30:	d8e6      	bhi.n	8009a00 <_scanf_float+0x60>
 8009a32:	a101      	add	r1, pc, #4	; (adr r1, 8009a38 <_scanf_float+0x98>)
 8009a34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009a38:	08009b77 	.word	0x08009b77
 8009a3c:	08009a01 	.word	0x08009a01
 8009a40:	08009a01 	.word	0x08009a01
 8009a44:	08009a01 	.word	0x08009a01
 8009a48:	08009bd7 	.word	0x08009bd7
 8009a4c:	08009baf 	.word	0x08009baf
 8009a50:	08009a01 	.word	0x08009a01
 8009a54:	08009a01 	.word	0x08009a01
 8009a58:	08009b85 	.word	0x08009b85
 8009a5c:	08009a01 	.word	0x08009a01
 8009a60:	08009a01 	.word	0x08009a01
 8009a64:	08009a01 	.word	0x08009a01
 8009a68:	08009a01 	.word	0x08009a01
 8009a6c:	08009b3d 	.word	0x08009b3d
 8009a70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009a74:	e7db      	b.n	8009a2e <_scanf_float+0x8e>
 8009a76:	290e      	cmp	r1, #14
 8009a78:	d8c2      	bhi.n	8009a00 <_scanf_float+0x60>
 8009a7a:	a001      	add	r0, pc, #4	; (adr r0, 8009a80 <_scanf_float+0xe0>)
 8009a7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009a80:	08009b2f 	.word	0x08009b2f
 8009a84:	08009a01 	.word	0x08009a01
 8009a88:	08009b2f 	.word	0x08009b2f
 8009a8c:	08009bc3 	.word	0x08009bc3
 8009a90:	08009a01 	.word	0x08009a01
 8009a94:	08009add 	.word	0x08009add
 8009a98:	08009b19 	.word	0x08009b19
 8009a9c:	08009b19 	.word	0x08009b19
 8009aa0:	08009b19 	.word	0x08009b19
 8009aa4:	08009b19 	.word	0x08009b19
 8009aa8:	08009b19 	.word	0x08009b19
 8009aac:	08009b19 	.word	0x08009b19
 8009ab0:	08009b19 	.word	0x08009b19
 8009ab4:	08009b19 	.word	0x08009b19
 8009ab8:	08009b19 	.word	0x08009b19
 8009abc:	2b6e      	cmp	r3, #110	; 0x6e
 8009abe:	d809      	bhi.n	8009ad4 <_scanf_float+0x134>
 8009ac0:	2b60      	cmp	r3, #96	; 0x60
 8009ac2:	d8b2      	bhi.n	8009a2a <_scanf_float+0x8a>
 8009ac4:	2b54      	cmp	r3, #84	; 0x54
 8009ac6:	d077      	beq.n	8009bb8 <_scanf_float+0x218>
 8009ac8:	2b59      	cmp	r3, #89	; 0x59
 8009aca:	d199      	bne.n	8009a00 <_scanf_float+0x60>
 8009acc:	2d07      	cmp	r5, #7
 8009ace:	d197      	bne.n	8009a00 <_scanf_float+0x60>
 8009ad0:	2508      	movs	r5, #8
 8009ad2:	e029      	b.n	8009b28 <_scanf_float+0x188>
 8009ad4:	2b74      	cmp	r3, #116	; 0x74
 8009ad6:	d06f      	beq.n	8009bb8 <_scanf_float+0x218>
 8009ad8:	2b79      	cmp	r3, #121	; 0x79
 8009ada:	e7f6      	b.n	8009aca <_scanf_float+0x12a>
 8009adc:	6821      	ldr	r1, [r4, #0]
 8009ade:	05c8      	lsls	r0, r1, #23
 8009ae0:	d51a      	bpl.n	8009b18 <_scanf_float+0x178>
 8009ae2:	9b02      	ldr	r3, [sp, #8]
 8009ae4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ae8:	6021      	str	r1, [r4, #0]
 8009aea:	f109 0901 	add.w	r9, r9, #1
 8009aee:	b11b      	cbz	r3, 8009af8 <_scanf_float+0x158>
 8009af0:	3b01      	subs	r3, #1
 8009af2:	3201      	adds	r2, #1
 8009af4:	9302      	str	r3, [sp, #8]
 8009af6:	60a2      	str	r2, [r4, #8]
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	60a3      	str	r3, [r4, #8]
 8009afe:	6923      	ldr	r3, [r4, #16]
 8009b00:	3301      	adds	r3, #1
 8009b02:	6123      	str	r3, [r4, #16]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	607b      	str	r3, [r7, #4]
 8009b0c:	f340 8084 	ble.w	8009c18 <_scanf_float+0x278>
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	603b      	str	r3, [r7, #0]
 8009b16:	e766      	b.n	80099e6 <_scanf_float+0x46>
 8009b18:	eb1a 0f05 	cmn.w	sl, r5
 8009b1c:	f47f af70 	bne.w	8009a00 <_scanf_float+0x60>
 8009b20:	6822      	ldr	r2, [r4, #0]
 8009b22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009b26:	6022      	str	r2, [r4, #0]
 8009b28:	f806 3b01 	strb.w	r3, [r6], #1
 8009b2c:	e7e4      	b.n	8009af8 <_scanf_float+0x158>
 8009b2e:	6822      	ldr	r2, [r4, #0]
 8009b30:	0610      	lsls	r0, r2, #24
 8009b32:	f57f af65 	bpl.w	8009a00 <_scanf_float+0x60>
 8009b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b3a:	e7f4      	b.n	8009b26 <_scanf_float+0x186>
 8009b3c:	f1ba 0f00 	cmp.w	sl, #0
 8009b40:	d10e      	bne.n	8009b60 <_scanf_float+0x1c0>
 8009b42:	f1b9 0f00 	cmp.w	r9, #0
 8009b46:	d10e      	bne.n	8009b66 <_scanf_float+0x1c6>
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b52:	d108      	bne.n	8009b66 <_scanf_float+0x1c6>
 8009b54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009b58:	6022      	str	r2, [r4, #0]
 8009b5a:	f04f 0a01 	mov.w	sl, #1
 8009b5e:	e7e3      	b.n	8009b28 <_scanf_float+0x188>
 8009b60:	f1ba 0f02 	cmp.w	sl, #2
 8009b64:	d055      	beq.n	8009c12 <_scanf_float+0x272>
 8009b66:	2d01      	cmp	r5, #1
 8009b68:	d002      	beq.n	8009b70 <_scanf_float+0x1d0>
 8009b6a:	2d04      	cmp	r5, #4
 8009b6c:	f47f af48 	bne.w	8009a00 <_scanf_float+0x60>
 8009b70:	3501      	adds	r5, #1
 8009b72:	b2ed      	uxtb	r5, r5
 8009b74:	e7d8      	b.n	8009b28 <_scanf_float+0x188>
 8009b76:	f1ba 0f01 	cmp.w	sl, #1
 8009b7a:	f47f af41 	bne.w	8009a00 <_scanf_float+0x60>
 8009b7e:	f04f 0a02 	mov.w	sl, #2
 8009b82:	e7d1      	b.n	8009b28 <_scanf_float+0x188>
 8009b84:	b97d      	cbnz	r5, 8009ba6 <_scanf_float+0x206>
 8009b86:	f1b9 0f00 	cmp.w	r9, #0
 8009b8a:	f47f af3c 	bne.w	8009a06 <_scanf_float+0x66>
 8009b8e:	6822      	ldr	r2, [r4, #0]
 8009b90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009b94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009b98:	f47f af39 	bne.w	8009a0e <_scanf_float+0x6e>
 8009b9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	2501      	movs	r5, #1
 8009ba4:	e7c0      	b.n	8009b28 <_scanf_float+0x188>
 8009ba6:	2d03      	cmp	r5, #3
 8009ba8:	d0e2      	beq.n	8009b70 <_scanf_float+0x1d0>
 8009baa:	2d05      	cmp	r5, #5
 8009bac:	e7de      	b.n	8009b6c <_scanf_float+0x1cc>
 8009bae:	2d02      	cmp	r5, #2
 8009bb0:	f47f af26 	bne.w	8009a00 <_scanf_float+0x60>
 8009bb4:	2503      	movs	r5, #3
 8009bb6:	e7b7      	b.n	8009b28 <_scanf_float+0x188>
 8009bb8:	2d06      	cmp	r5, #6
 8009bba:	f47f af21 	bne.w	8009a00 <_scanf_float+0x60>
 8009bbe:	2507      	movs	r5, #7
 8009bc0:	e7b2      	b.n	8009b28 <_scanf_float+0x188>
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	0591      	lsls	r1, r2, #22
 8009bc6:	f57f af1b 	bpl.w	8009a00 <_scanf_float+0x60>
 8009bca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009bce:	6022      	str	r2, [r4, #0]
 8009bd0:	f8cd 9004 	str.w	r9, [sp, #4]
 8009bd4:	e7a8      	b.n	8009b28 <_scanf_float+0x188>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009bdc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009be0:	d006      	beq.n	8009bf0 <_scanf_float+0x250>
 8009be2:	0550      	lsls	r0, r2, #21
 8009be4:	f57f af0c 	bpl.w	8009a00 <_scanf_float+0x60>
 8009be8:	f1b9 0f00 	cmp.w	r9, #0
 8009bec:	f43f af0f 	beq.w	8009a0e <_scanf_float+0x6e>
 8009bf0:	0591      	lsls	r1, r2, #22
 8009bf2:	bf58      	it	pl
 8009bf4:	9901      	ldrpl	r1, [sp, #4]
 8009bf6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009bfa:	bf58      	it	pl
 8009bfc:	eba9 0101 	subpl.w	r1, r9, r1
 8009c00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009c04:	bf58      	it	pl
 8009c06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	f04f 0900 	mov.w	r9, #0
 8009c10:	e78a      	b.n	8009b28 <_scanf_float+0x188>
 8009c12:	f04f 0a03 	mov.w	sl, #3
 8009c16:	e787      	b.n	8009b28 <_scanf_float+0x188>
 8009c18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4798      	blx	r3
 8009c22:	2800      	cmp	r0, #0
 8009c24:	f43f aedf 	beq.w	80099e6 <_scanf_float+0x46>
 8009c28:	e6ea      	b.n	8009a00 <_scanf_float+0x60>
 8009c2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c32:	463a      	mov	r2, r7
 8009c34:	4640      	mov	r0, r8
 8009c36:	4798      	blx	r3
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	6123      	str	r3, [r4, #16]
 8009c3e:	e6ec      	b.n	8009a1a <_scanf_float+0x7a>
 8009c40:	1e6b      	subs	r3, r5, #1
 8009c42:	2b06      	cmp	r3, #6
 8009c44:	d825      	bhi.n	8009c92 <_scanf_float+0x2f2>
 8009c46:	2d02      	cmp	r5, #2
 8009c48:	d836      	bhi.n	8009cb8 <_scanf_float+0x318>
 8009c4a:	455e      	cmp	r6, fp
 8009c4c:	f67f aee8 	bls.w	8009a20 <_scanf_float+0x80>
 8009c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009c58:	463a      	mov	r2, r7
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	4798      	blx	r3
 8009c5e:	6923      	ldr	r3, [r4, #16]
 8009c60:	3b01      	subs	r3, #1
 8009c62:	6123      	str	r3, [r4, #16]
 8009c64:	e7f1      	b.n	8009c4a <_scanf_float+0x2aa>
 8009c66:	9802      	ldr	r0, [sp, #8]
 8009c68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009c6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009c70:	9002      	str	r0, [sp, #8]
 8009c72:	463a      	mov	r2, r7
 8009c74:	4640      	mov	r0, r8
 8009c76:	4798      	blx	r3
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	6123      	str	r3, [r4, #16]
 8009c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c82:	fa5f fa8a 	uxtb.w	sl, sl
 8009c86:	f1ba 0f02 	cmp.w	sl, #2
 8009c8a:	d1ec      	bne.n	8009c66 <_scanf_float+0x2c6>
 8009c8c:	3d03      	subs	r5, #3
 8009c8e:	b2ed      	uxtb	r5, r5
 8009c90:	1b76      	subs	r6, r6, r5
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	05da      	lsls	r2, r3, #23
 8009c96:	d52f      	bpl.n	8009cf8 <_scanf_float+0x358>
 8009c98:	055b      	lsls	r3, r3, #21
 8009c9a:	d510      	bpl.n	8009cbe <_scanf_float+0x31e>
 8009c9c:	455e      	cmp	r6, fp
 8009c9e:	f67f aebf 	bls.w	8009a20 <_scanf_float+0x80>
 8009ca2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ca6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009caa:	463a      	mov	r2, r7
 8009cac:	4640      	mov	r0, r8
 8009cae:	4798      	blx	r3
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	e7f1      	b.n	8009c9c <_scanf_float+0x2fc>
 8009cb8:	46aa      	mov	sl, r5
 8009cba:	9602      	str	r6, [sp, #8]
 8009cbc:	e7df      	b.n	8009c7e <_scanf_float+0x2de>
 8009cbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009cc2:	6923      	ldr	r3, [r4, #16]
 8009cc4:	2965      	cmp	r1, #101	; 0x65
 8009cc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8009cca:	f106 35ff 	add.w	r5, r6, #4294967295
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	d00c      	beq.n	8009cec <_scanf_float+0x34c>
 8009cd2:	2945      	cmp	r1, #69	; 0x45
 8009cd4:	d00a      	beq.n	8009cec <_scanf_float+0x34c>
 8009cd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cda:	463a      	mov	r2, r7
 8009cdc:	4640      	mov	r0, r8
 8009cde:	4798      	blx	r3
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	1eb5      	subs	r5, r6, #2
 8009cea:	6123      	str	r3, [r4, #16]
 8009cec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009cf0:	463a      	mov	r2, r7
 8009cf2:	4640      	mov	r0, r8
 8009cf4:	4798      	blx	r3
 8009cf6:	462e      	mov	r6, r5
 8009cf8:	6825      	ldr	r5, [r4, #0]
 8009cfa:	f015 0510 	ands.w	r5, r5, #16
 8009cfe:	d158      	bne.n	8009db2 <_scanf_float+0x412>
 8009d00:	7035      	strb	r5, [r6, #0]
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d0c:	d11c      	bne.n	8009d48 <_scanf_float+0x3a8>
 8009d0e:	9b01      	ldr	r3, [sp, #4]
 8009d10:	454b      	cmp	r3, r9
 8009d12:	eba3 0209 	sub.w	r2, r3, r9
 8009d16:	d124      	bne.n	8009d62 <_scanf_float+0x3c2>
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	f002 fddf 	bl	800c8e0 <_strtod_r>
 8009d22:	9b03      	ldr	r3, [sp, #12]
 8009d24:	6821      	ldr	r1, [r4, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f011 0f02 	tst.w	r1, #2
 8009d2c:	ec57 6b10 	vmov	r6, r7, d0
 8009d30:	f103 0204 	add.w	r2, r3, #4
 8009d34:	d020      	beq.n	8009d78 <_scanf_float+0x3d8>
 8009d36:	9903      	ldr	r1, [sp, #12]
 8009d38:	600a      	str	r2, [r1, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	e9c3 6700 	strd	r6, r7, [r3]
 8009d40:	68e3      	ldr	r3, [r4, #12]
 8009d42:	3301      	adds	r3, #1
 8009d44:	60e3      	str	r3, [r4, #12]
 8009d46:	e66c      	b.n	8009a22 <_scanf_float+0x82>
 8009d48:	9b04      	ldr	r3, [sp, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0e4      	beq.n	8009d18 <_scanf_float+0x378>
 8009d4e:	9905      	ldr	r1, [sp, #20]
 8009d50:	230a      	movs	r3, #10
 8009d52:	462a      	mov	r2, r5
 8009d54:	3101      	adds	r1, #1
 8009d56:	4640      	mov	r0, r8
 8009d58:	f002 fe4a 	bl	800c9f0 <_strtol_r>
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	9e05      	ldr	r6, [sp, #20]
 8009d60:	1ac2      	subs	r2, r0, r3
 8009d62:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009d66:	429e      	cmp	r6, r3
 8009d68:	bf28      	it	cs
 8009d6a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009d6e:	4912      	ldr	r1, [pc, #72]	; (8009db8 <_scanf_float+0x418>)
 8009d70:	4630      	mov	r0, r6
 8009d72:	f000 f955 	bl	800a020 <siprintf>
 8009d76:	e7cf      	b.n	8009d18 <_scanf_float+0x378>
 8009d78:	f011 0f04 	tst.w	r1, #4
 8009d7c:	9903      	ldr	r1, [sp, #12]
 8009d7e:	600a      	str	r2, [r1, #0]
 8009d80:	d1db      	bne.n	8009d3a <_scanf_float+0x39a>
 8009d82:	f8d3 8000 	ldr.w	r8, [r3]
 8009d86:	ee10 2a10 	vmov	r2, s0
 8009d8a:	ee10 0a10 	vmov	r0, s0
 8009d8e:	463b      	mov	r3, r7
 8009d90:	4639      	mov	r1, r7
 8009d92:	f7f6 fecb 	bl	8000b2c <__aeabi_dcmpun>
 8009d96:	b128      	cbz	r0, 8009da4 <_scanf_float+0x404>
 8009d98:	4808      	ldr	r0, [pc, #32]	; (8009dbc <_scanf_float+0x41c>)
 8009d9a:	f000 fb49 	bl	800a430 <nanf>
 8009d9e:	ed88 0a00 	vstr	s0, [r8]
 8009da2:	e7cd      	b.n	8009d40 <_scanf_float+0x3a0>
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7f6 ff1e 	bl	8000be8 <__aeabi_d2f>
 8009dac:	f8c8 0000 	str.w	r0, [r8]
 8009db0:	e7c6      	b.n	8009d40 <_scanf_float+0x3a0>
 8009db2:	2500      	movs	r5, #0
 8009db4:	e635      	b.n	8009a22 <_scanf_float+0x82>
 8009db6:	bf00      	nop
 8009db8:	0800e996 	.word	0x0800e996
 8009dbc:	0800e9d6 	.word	0x0800e9d6

08009dc0 <std>:
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	b510      	push	{r4, lr}
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	e9c0 3300 	strd	r3, r3, [r0]
 8009dca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009dce:	6083      	str	r3, [r0, #8]
 8009dd0:	8181      	strh	r1, [r0, #12]
 8009dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8009dd4:	81c2      	strh	r2, [r0, #14]
 8009dd6:	6183      	str	r3, [r0, #24]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	2208      	movs	r2, #8
 8009ddc:	305c      	adds	r0, #92	; 0x5c
 8009dde:	f000 fa23 	bl	800a228 <memset>
 8009de2:	4b0d      	ldr	r3, [pc, #52]	; (8009e18 <std+0x58>)
 8009de4:	6263      	str	r3, [r4, #36]	; 0x24
 8009de6:	4b0d      	ldr	r3, [pc, #52]	; (8009e1c <std+0x5c>)
 8009de8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009dea:	4b0d      	ldr	r3, [pc, #52]	; (8009e20 <std+0x60>)
 8009dec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009dee:	4b0d      	ldr	r3, [pc, #52]	; (8009e24 <std+0x64>)
 8009df0:	6323      	str	r3, [r4, #48]	; 0x30
 8009df2:	4b0d      	ldr	r3, [pc, #52]	; (8009e28 <std+0x68>)
 8009df4:	6224      	str	r4, [r4, #32]
 8009df6:	429c      	cmp	r4, r3
 8009df8:	d006      	beq.n	8009e08 <std+0x48>
 8009dfa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009dfe:	4294      	cmp	r4, r2
 8009e00:	d002      	beq.n	8009e08 <std+0x48>
 8009e02:	33d0      	adds	r3, #208	; 0xd0
 8009e04:	429c      	cmp	r4, r3
 8009e06:	d105      	bne.n	8009e14 <std+0x54>
 8009e08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e10:	f000 bafc 	b.w	800a40c <__retarget_lock_init_recursive>
 8009e14:	bd10      	pop	{r4, pc}
 8009e16:	bf00      	nop
 8009e18:	0800a061 	.word	0x0800a061
 8009e1c:	0800a083 	.word	0x0800a083
 8009e20:	0800a0bb 	.word	0x0800a0bb
 8009e24:	0800a0df 	.word	0x0800a0df
 8009e28:	20004dbc 	.word	0x20004dbc

08009e2c <stdio_exit_handler>:
 8009e2c:	4a02      	ldr	r2, [pc, #8]	; (8009e38 <stdio_exit_handler+0xc>)
 8009e2e:	4903      	ldr	r1, [pc, #12]	; (8009e3c <stdio_exit_handler+0x10>)
 8009e30:	4803      	ldr	r0, [pc, #12]	; (8009e40 <stdio_exit_handler+0x14>)
 8009e32:	f000 b869 	b.w	8009f08 <_fwalk_sglue>
 8009e36:	bf00      	nop
 8009e38:	20000058 	.word	0x20000058
 8009e3c:	0800d039 	.word	0x0800d039
 8009e40:	20000064 	.word	0x20000064

08009e44 <cleanup_stdio>:
 8009e44:	6841      	ldr	r1, [r0, #4]
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <cleanup_stdio+0x34>)
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	d001      	beq.n	8009e54 <cleanup_stdio+0x10>
 8009e50:	f003 f8f2 	bl	800d038 <_fflush_r>
 8009e54:	68a1      	ldr	r1, [r4, #8]
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <cleanup_stdio+0x38>)
 8009e58:	4299      	cmp	r1, r3
 8009e5a:	d002      	beq.n	8009e62 <cleanup_stdio+0x1e>
 8009e5c:	4620      	mov	r0, r4
 8009e5e:	f003 f8eb 	bl	800d038 <_fflush_r>
 8009e62:	68e1      	ldr	r1, [r4, #12]
 8009e64:	4b06      	ldr	r3, [pc, #24]	; (8009e80 <cleanup_stdio+0x3c>)
 8009e66:	4299      	cmp	r1, r3
 8009e68:	d004      	beq.n	8009e74 <cleanup_stdio+0x30>
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e70:	f003 b8e2 	b.w	800d038 <_fflush_r>
 8009e74:	bd10      	pop	{r4, pc}
 8009e76:	bf00      	nop
 8009e78:	20004dbc 	.word	0x20004dbc
 8009e7c:	20004e24 	.word	0x20004e24
 8009e80:	20004e8c 	.word	0x20004e8c

08009e84 <global_stdio_init.part.0>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <global_stdio_init.part.0+0x30>)
 8009e88:	4c0b      	ldr	r4, [pc, #44]	; (8009eb8 <global_stdio_init.part.0+0x34>)
 8009e8a:	4a0c      	ldr	r2, [pc, #48]	; (8009ebc <global_stdio_init.part.0+0x38>)
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	4620      	mov	r0, r4
 8009e90:	2200      	movs	r2, #0
 8009e92:	2104      	movs	r1, #4
 8009e94:	f7ff ff94 	bl	8009dc0 <std>
 8009e98:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	2109      	movs	r1, #9
 8009ea0:	f7ff ff8e 	bl	8009dc0 <std>
 8009ea4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ea8:	2202      	movs	r2, #2
 8009eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eae:	2112      	movs	r1, #18
 8009eb0:	f7ff bf86 	b.w	8009dc0 <std>
 8009eb4:	20004ef4 	.word	0x20004ef4
 8009eb8:	20004dbc 	.word	0x20004dbc
 8009ebc:	08009e2d 	.word	0x08009e2d

08009ec0 <__sfp_lock_acquire>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__sfp_lock_acquire+0x8>)
 8009ec2:	f000 baa4 	b.w	800a40e <__retarget_lock_acquire_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	20004efd 	.word	0x20004efd

08009ecc <__sfp_lock_release>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__sfp_lock_release+0x8>)
 8009ece:	f000 ba9f 	b.w	800a410 <__retarget_lock_release_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20004efd 	.word	0x20004efd

08009ed8 <__sinit>:
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	4604      	mov	r4, r0
 8009edc:	f7ff fff0 	bl	8009ec0 <__sfp_lock_acquire>
 8009ee0:	6a23      	ldr	r3, [r4, #32]
 8009ee2:	b11b      	cbz	r3, 8009eec <__sinit+0x14>
 8009ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee8:	f7ff bff0 	b.w	8009ecc <__sfp_lock_release>
 8009eec:	4b04      	ldr	r3, [pc, #16]	; (8009f00 <__sinit+0x28>)
 8009eee:	6223      	str	r3, [r4, #32]
 8009ef0:	4b04      	ldr	r3, [pc, #16]	; (8009f04 <__sinit+0x2c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f5      	bne.n	8009ee4 <__sinit+0xc>
 8009ef8:	f7ff ffc4 	bl	8009e84 <global_stdio_init.part.0>
 8009efc:	e7f2      	b.n	8009ee4 <__sinit+0xc>
 8009efe:	bf00      	nop
 8009f00:	08009e45 	.word	0x08009e45
 8009f04:	20004ef4 	.word	0x20004ef4

08009f08 <_fwalk_sglue>:
 8009f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	4688      	mov	r8, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	2600      	movs	r6, #0
 8009f14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f18:	f1b9 0901 	subs.w	r9, r9, #1
 8009f1c:	d505      	bpl.n	8009f2a <_fwalk_sglue+0x22>
 8009f1e:	6824      	ldr	r4, [r4, #0]
 8009f20:	2c00      	cmp	r4, #0
 8009f22:	d1f7      	bne.n	8009f14 <_fwalk_sglue+0xc>
 8009f24:	4630      	mov	r0, r6
 8009f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	89ab      	ldrh	r3, [r5, #12]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d907      	bls.n	8009f40 <_fwalk_sglue+0x38>
 8009f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f34:	3301      	adds	r3, #1
 8009f36:	d003      	beq.n	8009f40 <_fwalk_sglue+0x38>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	4638      	mov	r0, r7
 8009f3c:	47c0      	blx	r8
 8009f3e:	4306      	orrs	r6, r0
 8009f40:	3568      	adds	r5, #104	; 0x68
 8009f42:	e7e9      	b.n	8009f18 <_fwalk_sglue+0x10>

08009f44 <iprintf>:
 8009f44:	b40f      	push	{r0, r1, r2, r3}
 8009f46:	b507      	push	{r0, r1, r2, lr}
 8009f48:	4906      	ldr	r1, [pc, #24]	; (8009f64 <iprintf+0x20>)
 8009f4a:	ab04      	add	r3, sp, #16
 8009f4c:	6808      	ldr	r0, [r1, #0]
 8009f4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f52:	6881      	ldr	r1, [r0, #8]
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	f002 fecf 	bl	800ccf8 <_vfiprintf_r>
 8009f5a:	b003      	add	sp, #12
 8009f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f60:	b004      	add	sp, #16
 8009f62:	4770      	bx	lr
 8009f64:	200000b0 	.word	0x200000b0

08009f68 <_puts_r>:
 8009f68:	6a03      	ldr	r3, [r0, #32]
 8009f6a:	b570      	push	{r4, r5, r6, lr}
 8009f6c:	6884      	ldr	r4, [r0, #8]
 8009f6e:	4605      	mov	r5, r0
 8009f70:	460e      	mov	r6, r1
 8009f72:	b90b      	cbnz	r3, 8009f78 <_puts_r+0x10>
 8009f74:	f7ff ffb0 	bl	8009ed8 <__sinit>
 8009f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f7a:	07db      	lsls	r3, r3, #31
 8009f7c:	d405      	bmi.n	8009f8a <_puts_r+0x22>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	0598      	lsls	r0, r3, #22
 8009f82:	d402      	bmi.n	8009f8a <_puts_r+0x22>
 8009f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f86:	f000 fa42 	bl	800a40e <__retarget_lock_acquire_recursive>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	0719      	lsls	r1, r3, #28
 8009f8e:	d513      	bpl.n	8009fb8 <_puts_r+0x50>
 8009f90:	6923      	ldr	r3, [r4, #16]
 8009f92:	b18b      	cbz	r3, 8009fb8 <_puts_r+0x50>
 8009f94:	3e01      	subs	r6, #1
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	60a3      	str	r3, [r4, #8]
 8009fa0:	b9e9      	cbnz	r1, 8009fde <_puts_r+0x76>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	da2e      	bge.n	800a004 <_puts_r+0x9c>
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	210a      	movs	r1, #10
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 f8a6 	bl	800a0fc <__swbuf_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d007      	beq.n	8009fc4 <_puts_r+0x5c>
 8009fb4:	250a      	movs	r5, #10
 8009fb6:	e007      	b.n	8009fc8 <_puts_r+0x60>
 8009fb8:	4621      	mov	r1, r4
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f000 f8dc 	bl	800a178 <__swsetup_r>
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d0e7      	beq.n	8009f94 <_puts_r+0x2c>
 8009fc4:	f04f 35ff 	mov.w	r5, #4294967295
 8009fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fca:	07da      	lsls	r2, r3, #31
 8009fcc:	d405      	bmi.n	8009fda <_puts_r+0x72>
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	059b      	lsls	r3, r3, #22
 8009fd2:	d402      	bmi.n	8009fda <_puts_r+0x72>
 8009fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fd6:	f000 fa1b 	bl	800a410 <__retarget_lock_release_recursive>
 8009fda:	4628      	mov	r0, r5
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da04      	bge.n	8009fec <_puts_r+0x84>
 8009fe2:	69a2      	ldr	r2, [r4, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	dc06      	bgt.n	8009ff6 <_puts_r+0x8e>
 8009fe8:	290a      	cmp	r1, #10
 8009fea:	d004      	beq.n	8009ff6 <_puts_r+0x8e>
 8009fec:	6823      	ldr	r3, [r4, #0]
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	6022      	str	r2, [r4, #0]
 8009ff2:	7019      	strb	r1, [r3, #0]
 8009ff4:	e7cf      	b.n	8009f96 <_puts_r+0x2e>
 8009ff6:	4622      	mov	r2, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f87f 	bl	800a0fc <__swbuf_r>
 8009ffe:	3001      	adds	r0, #1
 800a000:	d1c9      	bne.n	8009f96 <_puts_r+0x2e>
 800a002:	e7df      	b.n	8009fc4 <_puts_r+0x5c>
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	250a      	movs	r5, #10
 800a008:	1c5a      	adds	r2, r3, #1
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	701d      	strb	r5, [r3, #0]
 800a00e:	e7db      	b.n	8009fc8 <_puts_r+0x60>

0800a010 <puts>:
 800a010:	4b02      	ldr	r3, [pc, #8]	; (800a01c <puts+0xc>)
 800a012:	4601      	mov	r1, r0
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f7ff bfa7 	b.w	8009f68 <_puts_r>
 800a01a:	bf00      	nop
 800a01c:	200000b0 	.word	0x200000b0

0800a020 <siprintf>:
 800a020:	b40e      	push	{r1, r2, r3}
 800a022:	b500      	push	{lr}
 800a024:	b09c      	sub	sp, #112	; 0x70
 800a026:	ab1d      	add	r3, sp, #116	; 0x74
 800a028:	9002      	str	r0, [sp, #8]
 800a02a:	9006      	str	r0, [sp, #24]
 800a02c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a030:	4809      	ldr	r0, [pc, #36]	; (800a058 <siprintf+0x38>)
 800a032:	9107      	str	r1, [sp, #28]
 800a034:	9104      	str	r1, [sp, #16]
 800a036:	4909      	ldr	r1, [pc, #36]	; (800a05c <siprintf+0x3c>)
 800a038:	f853 2b04 	ldr.w	r2, [r3], #4
 800a03c:	9105      	str	r1, [sp, #20]
 800a03e:	6800      	ldr	r0, [r0, #0]
 800a040:	9301      	str	r3, [sp, #4]
 800a042:	a902      	add	r1, sp, #8
 800a044:	f002 fd30 	bl	800caa8 <_svfiprintf_r>
 800a048:	9b02      	ldr	r3, [sp, #8]
 800a04a:	2200      	movs	r2, #0
 800a04c:	701a      	strb	r2, [r3, #0]
 800a04e:	b01c      	add	sp, #112	; 0x70
 800a050:	f85d eb04 	ldr.w	lr, [sp], #4
 800a054:	b003      	add	sp, #12
 800a056:	4770      	bx	lr
 800a058:	200000b0 	.word	0x200000b0
 800a05c:	ffff0208 	.word	0xffff0208

0800a060 <__sread>:
 800a060:	b510      	push	{r4, lr}
 800a062:	460c      	mov	r4, r1
 800a064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a068:	f000 f982 	bl	800a370 <_read_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	bfab      	itete	ge
 800a070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a072:	89a3      	ldrhlt	r3, [r4, #12]
 800a074:	181b      	addge	r3, r3, r0
 800a076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a07a:	bfac      	ite	ge
 800a07c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a07e:	81a3      	strhlt	r3, [r4, #12]
 800a080:	bd10      	pop	{r4, pc}

0800a082 <__swrite>:
 800a082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a086:	461f      	mov	r7, r3
 800a088:	898b      	ldrh	r3, [r1, #12]
 800a08a:	05db      	lsls	r3, r3, #23
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	4616      	mov	r6, r2
 800a092:	d505      	bpl.n	800a0a0 <__swrite+0x1e>
 800a094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a098:	2302      	movs	r3, #2
 800a09a:	2200      	movs	r2, #0
 800a09c:	f000 f956 	bl	800a34c <_lseek_r>
 800a0a0:	89a3      	ldrh	r3, [r4, #12]
 800a0a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	4632      	mov	r2, r6
 800a0ae:	463b      	mov	r3, r7
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b6:	f000 b96d 	b.w	800a394 <_write_r>

0800a0ba <__sseek>:
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	460c      	mov	r4, r1
 800a0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0c2:	f000 f943 	bl	800a34c <_lseek_r>
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	bf15      	itete	ne
 800a0cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0d6:	81a3      	strheq	r3, [r4, #12]
 800a0d8:	bf18      	it	ne
 800a0da:	81a3      	strhne	r3, [r4, #12]
 800a0dc:	bd10      	pop	{r4, pc}

0800a0de <__sclose>:
 800a0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e2:	f000 b8cd 	b.w	800a280 <_close_r>
	...

0800a0e8 <viprintf>:
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4903      	ldr	r1, [pc, #12]	; (800a0f8 <viprintf+0x10>)
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6808      	ldr	r0, [r1, #0]
 800a0f0:	6881      	ldr	r1, [r0, #8]
 800a0f2:	f002 be01 	b.w	800ccf8 <_vfiprintf_r>
 800a0f6:	bf00      	nop
 800a0f8:	200000b0 	.word	0x200000b0

0800a0fc <__swbuf_r>:
 800a0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0fe:	460e      	mov	r6, r1
 800a100:	4614      	mov	r4, r2
 800a102:	4605      	mov	r5, r0
 800a104:	b118      	cbz	r0, 800a10e <__swbuf_r+0x12>
 800a106:	6a03      	ldr	r3, [r0, #32]
 800a108:	b90b      	cbnz	r3, 800a10e <__swbuf_r+0x12>
 800a10a:	f7ff fee5 	bl	8009ed8 <__sinit>
 800a10e:	69a3      	ldr	r3, [r4, #24]
 800a110:	60a3      	str	r3, [r4, #8]
 800a112:	89a3      	ldrh	r3, [r4, #12]
 800a114:	071a      	lsls	r2, r3, #28
 800a116:	d525      	bpl.n	800a164 <__swbuf_r+0x68>
 800a118:	6923      	ldr	r3, [r4, #16]
 800a11a:	b31b      	cbz	r3, 800a164 <__swbuf_r+0x68>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	6922      	ldr	r2, [r4, #16]
 800a120:	1a98      	subs	r0, r3, r2
 800a122:	6963      	ldr	r3, [r4, #20]
 800a124:	b2f6      	uxtb	r6, r6
 800a126:	4283      	cmp	r3, r0
 800a128:	4637      	mov	r7, r6
 800a12a:	dc04      	bgt.n	800a136 <__swbuf_r+0x3a>
 800a12c:	4621      	mov	r1, r4
 800a12e:	4628      	mov	r0, r5
 800a130:	f002 ff82 	bl	800d038 <_fflush_r>
 800a134:	b9e0      	cbnz	r0, 800a170 <__swbuf_r+0x74>
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	3b01      	subs	r3, #1
 800a13a:	60a3      	str	r3, [r4, #8]
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	6022      	str	r2, [r4, #0]
 800a142:	701e      	strb	r6, [r3, #0]
 800a144:	6962      	ldr	r2, [r4, #20]
 800a146:	1c43      	adds	r3, r0, #1
 800a148:	429a      	cmp	r2, r3
 800a14a:	d004      	beq.n	800a156 <__swbuf_r+0x5a>
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	07db      	lsls	r3, r3, #31
 800a150:	d506      	bpl.n	800a160 <__swbuf_r+0x64>
 800a152:	2e0a      	cmp	r6, #10
 800a154:	d104      	bne.n	800a160 <__swbuf_r+0x64>
 800a156:	4621      	mov	r1, r4
 800a158:	4628      	mov	r0, r5
 800a15a:	f002 ff6d 	bl	800d038 <_fflush_r>
 800a15e:	b938      	cbnz	r0, 800a170 <__swbuf_r+0x74>
 800a160:	4638      	mov	r0, r7
 800a162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f000 f806 	bl	800a178 <__swsetup_r>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d0d5      	beq.n	800a11c <__swbuf_r+0x20>
 800a170:	f04f 37ff 	mov.w	r7, #4294967295
 800a174:	e7f4      	b.n	800a160 <__swbuf_r+0x64>
	...

0800a178 <__swsetup_r>:
 800a178:	b538      	push	{r3, r4, r5, lr}
 800a17a:	4b2a      	ldr	r3, [pc, #168]	; (800a224 <__swsetup_r+0xac>)
 800a17c:	4605      	mov	r5, r0
 800a17e:	6818      	ldr	r0, [r3, #0]
 800a180:	460c      	mov	r4, r1
 800a182:	b118      	cbz	r0, 800a18c <__swsetup_r+0x14>
 800a184:	6a03      	ldr	r3, [r0, #32]
 800a186:	b90b      	cbnz	r3, 800a18c <__swsetup_r+0x14>
 800a188:	f7ff fea6 	bl	8009ed8 <__sinit>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a192:	0718      	lsls	r0, r3, #28
 800a194:	d422      	bmi.n	800a1dc <__swsetup_r+0x64>
 800a196:	06d9      	lsls	r1, r3, #27
 800a198:	d407      	bmi.n	800a1aa <__swsetup_r+0x32>
 800a19a:	2309      	movs	r3, #9
 800a19c:	602b      	str	r3, [r5, #0]
 800a19e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	e034      	b.n	800a214 <__swsetup_r+0x9c>
 800a1aa:	0758      	lsls	r0, r3, #29
 800a1ac:	d512      	bpl.n	800a1d4 <__swsetup_r+0x5c>
 800a1ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1b0:	b141      	cbz	r1, 800a1c4 <__swsetup_r+0x4c>
 800a1b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1b6:	4299      	cmp	r1, r3
 800a1b8:	d002      	beq.n	800a1c0 <__swsetup_r+0x48>
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f000 ffd6 	bl	800b16c <_free_r>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6363      	str	r3, [r4, #52]	; 0x34
 800a1c4:	89a3      	ldrh	r3, [r4, #12]
 800a1c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1ca:	81a3      	strh	r3, [r4, #12]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	6063      	str	r3, [r4, #4]
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	6023      	str	r3, [r4, #0]
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	f043 0308 	orr.w	r3, r3, #8
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	b94b      	cbnz	r3, 800a1f4 <__swsetup_r+0x7c>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ea:	d003      	beq.n	800a1f4 <__swsetup_r+0x7c>
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f002 ff82 	bl	800d0f8 <__smakebuf_r>
 800a1f4:	89a0      	ldrh	r0, [r4, #12]
 800a1f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1fa:	f010 0301 	ands.w	r3, r0, #1
 800a1fe:	d00a      	beq.n	800a216 <__swsetup_r+0x9e>
 800a200:	2300      	movs	r3, #0
 800a202:	60a3      	str	r3, [r4, #8]
 800a204:	6963      	ldr	r3, [r4, #20]
 800a206:	425b      	negs	r3, r3
 800a208:	61a3      	str	r3, [r4, #24]
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	b943      	cbnz	r3, 800a220 <__swsetup_r+0xa8>
 800a20e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a212:	d1c4      	bne.n	800a19e <__swsetup_r+0x26>
 800a214:	bd38      	pop	{r3, r4, r5, pc}
 800a216:	0781      	lsls	r1, r0, #30
 800a218:	bf58      	it	pl
 800a21a:	6963      	ldrpl	r3, [r4, #20]
 800a21c:	60a3      	str	r3, [r4, #8]
 800a21e:	e7f4      	b.n	800a20a <__swsetup_r+0x92>
 800a220:	2000      	movs	r0, #0
 800a222:	e7f7      	b.n	800a214 <__swsetup_r+0x9c>
 800a224:	200000b0 	.word	0x200000b0

0800a228 <memset>:
 800a228:	4402      	add	r2, r0
 800a22a:	4603      	mov	r3, r0
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d100      	bne.n	800a232 <memset+0xa>
 800a230:	4770      	bx	lr
 800a232:	f803 1b01 	strb.w	r1, [r3], #1
 800a236:	e7f9      	b.n	800a22c <memset+0x4>

0800a238 <strncasecmp>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4e0e      	ldr	r6, [pc, #56]	; (800a274 <strncasecmp+0x3c>)
 800a23c:	4605      	mov	r5, r0
 800a23e:	440a      	add	r2, r1
 800a240:	428a      	cmp	r2, r1
 800a242:	d101      	bne.n	800a248 <strncasecmp+0x10>
 800a244:	2000      	movs	r0, #0
 800a246:	e013      	b.n	800a270 <strncasecmp+0x38>
 800a248:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a24c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a250:	5cf0      	ldrb	r0, [r6, r3]
 800a252:	f000 0003 	and.w	r0, r0, #3
 800a256:	2801      	cmp	r0, #1
 800a258:	5d30      	ldrb	r0, [r6, r4]
 800a25a:	f000 0003 	and.w	r0, r0, #3
 800a25e:	bf08      	it	eq
 800a260:	3320      	addeq	r3, #32
 800a262:	2801      	cmp	r0, #1
 800a264:	bf08      	it	eq
 800a266:	3420      	addeq	r4, #32
 800a268:	1b18      	subs	r0, r3, r4
 800a26a:	d101      	bne.n	800a270 <strncasecmp+0x38>
 800a26c:	2c00      	cmp	r4, #0
 800a26e:	d1e7      	bne.n	800a240 <strncasecmp+0x8>
 800a270:	bd70      	pop	{r4, r5, r6, pc}
 800a272:	bf00      	nop
 800a274:	0800ebf9 	.word	0x0800ebf9

0800a278 <_localeconv_r>:
 800a278:	4800      	ldr	r0, [pc, #0]	; (800a27c <_localeconv_r+0x4>)
 800a27a:	4770      	bx	lr
 800a27c:	200001a4 	.word	0x200001a4

0800a280 <_close_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d06      	ldr	r5, [pc, #24]	; (800a29c <_close_r+0x1c>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f7f7 fad9 	bl	8001842 <_close>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d102      	bne.n	800a29a <_close_r+0x1a>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b103      	cbz	r3, 800a29a <_close_r+0x1a>
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	20004ef8 	.word	0x20004ef8

0800a2a0 <_reclaim_reent>:
 800a2a0:	4b29      	ldr	r3, [pc, #164]	; (800a348 <_reclaim_reent+0xa8>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4283      	cmp	r3, r0
 800a2a6:	b570      	push	{r4, r5, r6, lr}
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	d04b      	beq.n	800a344 <_reclaim_reent+0xa4>
 800a2ac:	69c3      	ldr	r3, [r0, #28]
 800a2ae:	b143      	cbz	r3, 800a2c2 <_reclaim_reent+0x22>
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d144      	bne.n	800a340 <_reclaim_reent+0xa0>
 800a2b6:	69e3      	ldr	r3, [r4, #28]
 800a2b8:	6819      	ldr	r1, [r3, #0]
 800a2ba:	b111      	cbz	r1, 800a2c2 <_reclaim_reent+0x22>
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 ff55 	bl	800b16c <_free_r>
 800a2c2:	6961      	ldr	r1, [r4, #20]
 800a2c4:	b111      	cbz	r1, 800a2cc <_reclaim_reent+0x2c>
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 ff50 	bl	800b16c <_free_r>
 800a2cc:	69e1      	ldr	r1, [r4, #28]
 800a2ce:	b111      	cbz	r1, 800a2d6 <_reclaim_reent+0x36>
 800a2d0:	4620      	mov	r0, r4
 800a2d2:	f000 ff4b 	bl	800b16c <_free_r>
 800a2d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800a2d8:	b111      	cbz	r1, 800a2e0 <_reclaim_reent+0x40>
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 ff46 	bl	800b16c <_free_r>
 800a2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2e2:	b111      	cbz	r1, 800a2ea <_reclaim_reent+0x4a>
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f000 ff41 	bl	800b16c <_free_r>
 800a2ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a2ec:	b111      	cbz	r1, 800a2f4 <_reclaim_reent+0x54>
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 ff3c 	bl	800b16c <_free_r>
 800a2f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a2f6:	b111      	cbz	r1, 800a2fe <_reclaim_reent+0x5e>
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 ff37 	bl	800b16c <_free_r>
 800a2fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a300:	b111      	cbz	r1, 800a308 <_reclaim_reent+0x68>
 800a302:	4620      	mov	r0, r4
 800a304:	f000 ff32 	bl	800b16c <_free_r>
 800a308:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800a30a:	b111      	cbz	r1, 800a312 <_reclaim_reent+0x72>
 800a30c:	4620      	mov	r0, r4
 800a30e:	f000 ff2d 	bl	800b16c <_free_r>
 800a312:	6a23      	ldr	r3, [r4, #32]
 800a314:	b1b3      	cbz	r3, 800a344 <_reclaim_reent+0xa4>
 800a316:	4620      	mov	r0, r4
 800a318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a31c:	4718      	bx	r3
 800a31e:	5949      	ldr	r1, [r1, r5]
 800a320:	b941      	cbnz	r1, 800a334 <_reclaim_reent+0x94>
 800a322:	3504      	adds	r5, #4
 800a324:	69e3      	ldr	r3, [r4, #28]
 800a326:	2d80      	cmp	r5, #128	; 0x80
 800a328:	68d9      	ldr	r1, [r3, #12]
 800a32a:	d1f8      	bne.n	800a31e <_reclaim_reent+0x7e>
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 ff1d 	bl	800b16c <_free_r>
 800a332:	e7c0      	b.n	800a2b6 <_reclaim_reent+0x16>
 800a334:	680e      	ldr	r6, [r1, #0]
 800a336:	4620      	mov	r0, r4
 800a338:	f000 ff18 	bl	800b16c <_free_r>
 800a33c:	4631      	mov	r1, r6
 800a33e:	e7ef      	b.n	800a320 <_reclaim_reent+0x80>
 800a340:	2500      	movs	r5, #0
 800a342:	e7ef      	b.n	800a324 <_reclaim_reent+0x84>
 800a344:	bd70      	pop	{r4, r5, r6, pc}
 800a346:	bf00      	nop
 800a348:	200000b0 	.word	0x200000b0

0800a34c <_lseek_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d07      	ldr	r5, [pc, #28]	; (800a36c <_lseek_r+0x20>)
 800a350:	4604      	mov	r4, r0
 800a352:	4608      	mov	r0, r1
 800a354:	4611      	mov	r1, r2
 800a356:	2200      	movs	r2, #0
 800a358:	602a      	str	r2, [r5, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f7f7 fa98 	bl	8001890 <_lseek>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_lseek_r+0x1e>
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	b103      	cbz	r3, 800a36a <_lseek_r+0x1e>
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	20004ef8 	.word	0x20004ef8

0800a370 <_read_r>:
 800a370:	b538      	push	{r3, r4, r5, lr}
 800a372:	4d07      	ldr	r5, [pc, #28]	; (800a390 <_read_r+0x20>)
 800a374:	4604      	mov	r4, r0
 800a376:	4608      	mov	r0, r1
 800a378:	4611      	mov	r1, r2
 800a37a:	2200      	movs	r2, #0
 800a37c:	602a      	str	r2, [r5, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	f7f7 fa26 	bl	80017d0 <_read>
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d102      	bne.n	800a38e <_read_r+0x1e>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	b103      	cbz	r3, 800a38e <_read_r+0x1e>
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	bd38      	pop	{r3, r4, r5, pc}
 800a390:	20004ef8 	.word	0x20004ef8

0800a394 <_write_r>:
 800a394:	b538      	push	{r3, r4, r5, lr}
 800a396:	4d07      	ldr	r5, [pc, #28]	; (800a3b4 <_write_r+0x20>)
 800a398:	4604      	mov	r4, r0
 800a39a:	4608      	mov	r0, r1
 800a39c:	4611      	mov	r1, r2
 800a39e:	2200      	movs	r2, #0
 800a3a0:	602a      	str	r2, [r5, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	f7f7 fa31 	bl	800180a <_write>
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	d102      	bne.n	800a3b2 <_write_r+0x1e>
 800a3ac:	682b      	ldr	r3, [r5, #0]
 800a3ae:	b103      	cbz	r3, 800a3b2 <_write_r+0x1e>
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	bd38      	pop	{r3, r4, r5, pc}
 800a3b4:	20004ef8 	.word	0x20004ef8

0800a3b8 <__errno>:
 800a3b8:	4b01      	ldr	r3, [pc, #4]	; (800a3c0 <__errno+0x8>)
 800a3ba:	6818      	ldr	r0, [r3, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	200000b0 	.word	0x200000b0

0800a3c4 <__libc_init_array>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	4d0d      	ldr	r5, [pc, #52]	; (800a3fc <__libc_init_array+0x38>)
 800a3c8:	4c0d      	ldr	r4, [pc, #52]	; (800a400 <__libc_init_array+0x3c>)
 800a3ca:	1b64      	subs	r4, r4, r5
 800a3cc:	10a4      	asrs	r4, r4, #2
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	42a6      	cmp	r6, r4
 800a3d2:	d109      	bne.n	800a3e8 <__libc_init_array+0x24>
 800a3d4:	4d0b      	ldr	r5, [pc, #44]	; (800a404 <__libc_init_array+0x40>)
 800a3d6:	4c0c      	ldr	r4, [pc, #48]	; (800a408 <__libc_init_array+0x44>)
 800a3d8:	f003 fb40 	bl	800da5c <_init>
 800a3dc:	1b64      	subs	r4, r4, r5
 800a3de:	10a4      	asrs	r4, r4, #2
 800a3e0:	2600      	movs	r6, #0
 800a3e2:	42a6      	cmp	r6, r4
 800a3e4:	d105      	bne.n	800a3f2 <__libc_init_array+0x2e>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ec:	4798      	blx	r3
 800a3ee:	3601      	adds	r6, #1
 800a3f0:	e7ee      	b.n	800a3d0 <__libc_init_array+0xc>
 800a3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3f6:	4798      	blx	r3
 800a3f8:	3601      	adds	r6, #1
 800a3fa:	e7f2      	b.n	800a3e2 <__libc_init_array+0x1e>
 800a3fc:	0800ed7c 	.word	0x0800ed7c
 800a400:	0800ed7c 	.word	0x0800ed7c
 800a404:	0800ed7c 	.word	0x0800ed7c
 800a408:	0800ed80 	.word	0x0800ed80

0800a40c <__retarget_lock_init_recursive>:
 800a40c:	4770      	bx	lr

0800a40e <__retarget_lock_acquire_recursive>:
 800a40e:	4770      	bx	lr

0800a410 <__retarget_lock_release_recursive>:
 800a410:	4770      	bx	lr

0800a412 <memcpy>:
 800a412:	440a      	add	r2, r1
 800a414:	4291      	cmp	r1, r2
 800a416:	f100 33ff 	add.w	r3, r0, #4294967295
 800a41a:	d100      	bne.n	800a41e <memcpy+0xc>
 800a41c:	4770      	bx	lr
 800a41e:	b510      	push	{r4, lr}
 800a420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a428:	4291      	cmp	r1, r2
 800a42a:	d1f9      	bne.n	800a420 <memcpy+0xe>
 800a42c:	bd10      	pop	{r4, pc}
	...

0800a430 <nanf>:
 800a430:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a438 <nanf+0x8>
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	7fc00000 	.word	0x7fc00000

0800a43c <__assert_func>:
 800a43c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a43e:	4614      	mov	r4, r2
 800a440:	461a      	mov	r2, r3
 800a442:	4b09      	ldr	r3, [pc, #36]	; (800a468 <__assert_func+0x2c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4605      	mov	r5, r0
 800a448:	68d8      	ldr	r0, [r3, #12]
 800a44a:	b14c      	cbz	r4, 800a460 <__assert_func+0x24>
 800a44c:	4b07      	ldr	r3, [pc, #28]	; (800a46c <__assert_func+0x30>)
 800a44e:	9100      	str	r1, [sp, #0]
 800a450:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a454:	4906      	ldr	r1, [pc, #24]	; (800a470 <__assert_func+0x34>)
 800a456:	462b      	mov	r3, r5
 800a458:	f002 fe16 	bl	800d088 <fiprintf>
 800a45c:	f002 fef0 	bl	800d240 <abort>
 800a460:	4b04      	ldr	r3, [pc, #16]	; (800a474 <__assert_func+0x38>)
 800a462:	461c      	mov	r4, r3
 800a464:	e7f3      	b.n	800a44e <__assert_func+0x12>
 800a466:	bf00      	nop
 800a468:	200000b0 	.word	0x200000b0
 800a46c:	0800e99b 	.word	0x0800e99b
 800a470:	0800e9a8 	.word	0x0800e9a8
 800a474:	0800e9d6 	.word	0x0800e9d6

0800a478 <quorem>:
 800a478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	6903      	ldr	r3, [r0, #16]
 800a47e:	690c      	ldr	r4, [r1, #16]
 800a480:	42a3      	cmp	r3, r4
 800a482:	4607      	mov	r7, r0
 800a484:	db7e      	blt.n	800a584 <quorem+0x10c>
 800a486:	3c01      	subs	r4, #1
 800a488:	f101 0814 	add.w	r8, r1, #20
 800a48c:	f100 0514 	add.w	r5, r0, #20
 800a490:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a494:	9301      	str	r3, [sp, #4]
 800a496:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a49a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a49e:	3301      	adds	r3, #1
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4ae:	d331      	bcc.n	800a514 <quorem+0x9c>
 800a4b0:	f04f 0e00 	mov.w	lr, #0
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	46ac      	mov	ip, r5
 800a4b8:	46f2      	mov	sl, lr
 800a4ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4be:	b293      	uxth	r3, r2
 800a4c0:	fb06 e303 	mla	r3, r6, r3, lr
 800a4c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4c8:	0c1a      	lsrs	r2, r3, #16
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	ebaa 0303 	sub.w	r3, sl, r3
 800a4d0:	f8dc a000 	ldr.w	sl, [ip]
 800a4d4:	fa13 f38a 	uxtah	r3, r3, sl
 800a4d8:	fb06 220e 	mla	r2, r6, lr, r2
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4e4:	b292      	uxth	r2, r2
 800a4e6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4ee:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4f2:	4581      	cmp	r9, r0
 800a4f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4f8:	f84c 3b04 	str.w	r3, [ip], #4
 800a4fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a500:	d2db      	bcs.n	800a4ba <quorem+0x42>
 800a502:	f855 300b 	ldr.w	r3, [r5, fp]
 800a506:	b92b      	cbnz	r3, 800a514 <quorem+0x9c>
 800a508:	9b01      	ldr	r3, [sp, #4]
 800a50a:	3b04      	subs	r3, #4
 800a50c:	429d      	cmp	r5, r3
 800a50e:	461a      	mov	r2, r3
 800a510:	d32c      	bcc.n	800a56c <quorem+0xf4>
 800a512:	613c      	str	r4, [r7, #16]
 800a514:	4638      	mov	r0, r7
 800a516:	f001 f9ef 	bl	800b8f8 <__mcmp>
 800a51a:	2800      	cmp	r0, #0
 800a51c:	db22      	blt.n	800a564 <quorem+0xec>
 800a51e:	3601      	adds	r6, #1
 800a520:	4629      	mov	r1, r5
 800a522:	2000      	movs	r0, #0
 800a524:	f858 2b04 	ldr.w	r2, [r8], #4
 800a528:	f8d1 c000 	ldr.w	ip, [r1]
 800a52c:	b293      	uxth	r3, r2
 800a52e:	1ac3      	subs	r3, r0, r3
 800a530:	0c12      	lsrs	r2, r2, #16
 800a532:	fa13 f38c 	uxtah	r3, r3, ip
 800a536:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a53a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a53e:	b29b      	uxth	r3, r3
 800a540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a544:	45c1      	cmp	r9, r8
 800a546:	f841 3b04 	str.w	r3, [r1], #4
 800a54a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a54e:	d2e9      	bcs.n	800a524 <quorem+0xac>
 800a550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a554:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a558:	b922      	cbnz	r2, 800a564 <quorem+0xec>
 800a55a:	3b04      	subs	r3, #4
 800a55c:	429d      	cmp	r5, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	d30a      	bcc.n	800a578 <quorem+0x100>
 800a562:	613c      	str	r4, [r7, #16]
 800a564:	4630      	mov	r0, r6
 800a566:	b003      	add	sp, #12
 800a568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56c:	6812      	ldr	r2, [r2, #0]
 800a56e:	3b04      	subs	r3, #4
 800a570:	2a00      	cmp	r2, #0
 800a572:	d1ce      	bne.n	800a512 <quorem+0x9a>
 800a574:	3c01      	subs	r4, #1
 800a576:	e7c9      	b.n	800a50c <quorem+0x94>
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	3b04      	subs	r3, #4
 800a57c:	2a00      	cmp	r2, #0
 800a57e:	d1f0      	bne.n	800a562 <quorem+0xea>
 800a580:	3c01      	subs	r4, #1
 800a582:	e7eb      	b.n	800a55c <quorem+0xe4>
 800a584:	2000      	movs	r0, #0
 800a586:	e7ee      	b.n	800a566 <quorem+0xee>

0800a588 <_dtoa_r>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	ed2d 8b04 	vpush	{d8-d9}
 800a590:	69c5      	ldr	r5, [r0, #28]
 800a592:	b093      	sub	sp, #76	; 0x4c
 800a594:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a598:	ec57 6b10 	vmov	r6, r7, d0
 800a59c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5a0:	9107      	str	r1, [sp, #28]
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a6:	930d      	str	r3, [sp, #52]	; 0x34
 800a5a8:	b975      	cbnz	r5, 800a5c8 <_dtoa_r+0x40>
 800a5aa:	2010      	movs	r0, #16
 800a5ac:	f000 fe2a 	bl	800b204 <malloc>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	61e0      	str	r0, [r4, #28]
 800a5b4:	b920      	cbnz	r0, 800a5c0 <_dtoa_r+0x38>
 800a5b6:	4bae      	ldr	r3, [pc, #696]	; (800a870 <_dtoa_r+0x2e8>)
 800a5b8:	21ef      	movs	r1, #239	; 0xef
 800a5ba:	48ae      	ldr	r0, [pc, #696]	; (800a874 <_dtoa_r+0x2ec>)
 800a5bc:	f7ff ff3e 	bl	800a43c <__assert_func>
 800a5c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5c4:	6005      	str	r5, [r0, #0]
 800a5c6:	60c5      	str	r5, [r0, #12]
 800a5c8:	69e3      	ldr	r3, [r4, #28]
 800a5ca:	6819      	ldr	r1, [r3, #0]
 800a5cc:	b151      	cbz	r1, 800a5e4 <_dtoa_r+0x5c>
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	604a      	str	r2, [r1, #4]
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	4093      	lsls	r3, r2
 800a5d6:	608b      	str	r3, [r1, #8]
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f000 ff07 	bl	800b3ec <_Bfree>
 800a5de:	69e3      	ldr	r3, [r4, #28]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	1e3b      	subs	r3, r7, #0
 800a5e6:	bfbb      	ittet	lt
 800a5e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5ec:	9303      	strlt	r3, [sp, #12]
 800a5ee:	2300      	movge	r3, #0
 800a5f0:	2201      	movlt	r2, #1
 800a5f2:	bfac      	ite	ge
 800a5f4:	f8c8 3000 	strge.w	r3, [r8]
 800a5f8:	f8c8 2000 	strlt.w	r2, [r8]
 800a5fc:	4b9e      	ldr	r3, [pc, #632]	; (800a878 <_dtoa_r+0x2f0>)
 800a5fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a602:	ea33 0308 	bics.w	r3, r3, r8
 800a606:	d11b      	bne.n	800a640 <_dtoa_r+0xb8>
 800a608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a60a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a60e:	6013      	str	r3, [r2, #0]
 800a610:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a614:	4333      	orrs	r3, r6
 800a616:	f000 8593 	beq.w	800b140 <_dtoa_r+0xbb8>
 800a61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a61c:	b963      	cbnz	r3, 800a638 <_dtoa_r+0xb0>
 800a61e:	4b97      	ldr	r3, [pc, #604]	; (800a87c <_dtoa_r+0x2f4>)
 800a620:	e027      	b.n	800a672 <_dtoa_r+0xea>
 800a622:	4b97      	ldr	r3, [pc, #604]	; (800a880 <_dtoa_r+0x2f8>)
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	3308      	adds	r3, #8
 800a628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	9800      	ldr	r0, [sp, #0]
 800a62e:	b013      	add	sp, #76	; 0x4c
 800a630:	ecbd 8b04 	vpop	{d8-d9}
 800a634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a638:	4b90      	ldr	r3, [pc, #576]	; (800a87c <_dtoa_r+0x2f4>)
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	3303      	adds	r3, #3
 800a63e:	e7f3      	b.n	800a628 <_dtoa_r+0xa0>
 800a640:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a644:	2200      	movs	r2, #0
 800a646:	ec51 0b17 	vmov	r0, r1, d7
 800a64a:	eeb0 8a47 	vmov.f32	s16, s14
 800a64e:	eef0 8a67 	vmov.f32	s17, s15
 800a652:	2300      	movs	r3, #0
 800a654:	f7f6 fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a658:	4681      	mov	r9, r0
 800a65a:	b160      	cbz	r0, 800a676 <_dtoa_r+0xee>
 800a65c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a65e:	2301      	movs	r3, #1
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 8568 	beq.w	800b13a <_dtoa_r+0xbb2>
 800a66a:	4b86      	ldr	r3, [pc, #536]	; (800a884 <_dtoa_r+0x2fc>)
 800a66c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a66e:	6013      	str	r3, [r2, #0]
 800a670:	3b01      	subs	r3, #1
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	e7da      	b.n	800a62c <_dtoa_r+0xa4>
 800a676:	aa10      	add	r2, sp, #64	; 0x40
 800a678:	a911      	add	r1, sp, #68	; 0x44
 800a67a:	4620      	mov	r0, r4
 800a67c:	eeb0 0a48 	vmov.f32	s0, s16
 800a680:	eef0 0a68 	vmov.f32	s1, s17
 800a684:	f001 fa4e 	bl	800bb24 <__d2b>
 800a688:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a68c:	4682      	mov	sl, r0
 800a68e:	2d00      	cmp	r5, #0
 800a690:	d07f      	beq.n	800a792 <_dtoa_r+0x20a>
 800a692:	ee18 3a90 	vmov	r3, s17
 800a696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a69a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a69e:	ec51 0b18 	vmov	r0, r1, d8
 800a6a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4b75      	ldr	r3, [pc, #468]	; (800a888 <_dtoa_r+0x300>)
 800a6b4:	f7f5 fde8 	bl	8000288 <__aeabi_dsub>
 800a6b8:	a367      	add	r3, pc, #412	; (adr r3, 800a858 <_dtoa_r+0x2d0>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 ff9b 	bl	80005f8 <__aeabi_dmul>
 800a6c2:	a367      	add	r3, pc, #412	; (adr r3, 800a860 <_dtoa_r+0x2d8>)
 800a6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c8:	f7f5 fde0 	bl	800028c <__adddf3>
 800a6cc:	4606      	mov	r6, r0
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	f7f5 ff27 	bl	8000524 <__aeabi_i2d>
 800a6d6:	a364      	add	r3, pc, #400	; (adr r3, 800a868 <_dtoa_r+0x2e0>)
 800a6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6dc:	f7f5 ff8c 	bl	80005f8 <__aeabi_dmul>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 fdd0 	bl	800028c <__adddf3>
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
 800a6f0:	f7f6 fa32 	bl	8000b58 <__aeabi_d2iz>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4683      	mov	fp, r0
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	f7f6 f9ed 	bl	8000adc <__aeabi_dcmplt>
 800a702:	b148      	cbz	r0, 800a718 <_dtoa_r+0x190>
 800a704:	4658      	mov	r0, fp
 800a706:	f7f5 ff0d 	bl	8000524 <__aeabi_i2d>
 800a70a:	4632      	mov	r2, r6
 800a70c:	463b      	mov	r3, r7
 800a70e:	f7f6 f9db 	bl	8000ac8 <__aeabi_dcmpeq>
 800a712:	b908      	cbnz	r0, 800a718 <_dtoa_r+0x190>
 800a714:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a718:	f1bb 0f16 	cmp.w	fp, #22
 800a71c:	d857      	bhi.n	800a7ce <_dtoa_r+0x246>
 800a71e:	4b5b      	ldr	r3, [pc, #364]	; (800a88c <_dtoa_r+0x304>)
 800a720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a728:	ec51 0b18 	vmov	r0, r1, d8
 800a72c:	f7f6 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800a730:	2800      	cmp	r0, #0
 800a732:	d04e      	beq.n	800a7d2 <_dtoa_r+0x24a>
 800a734:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a738:	2300      	movs	r3, #0
 800a73a:	930c      	str	r3, [sp, #48]	; 0x30
 800a73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a73e:	1b5b      	subs	r3, r3, r5
 800a740:	1e5a      	subs	r2, r3, #1
 800a742:	bf45      	ittet	mi
 800a744:	f1c3 0301 	rsbmi	r3, r3, #1
 800a748:	9305      	strmi	r3, [sp, #20]
 800a74a:	2300      	movpl	r3, #0
 800a74c:	2300      	movmi	r3, #0
 800a74e:	9206      	str	r2, [sp, #24]
 800a750:	bf54      	ite	pl
 800a752:	9305      	strpl	r3, [sp, #20]
 800a754:	9306      	strmi	r3, [sp, #24]
 800a756:	f1bb 0f00 	cmp.w	fp, #0
 800a75a:	db3c      	blt.n	800a7d6 <_dtoa_r+0x24e>
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a762:	445b      	add	r3, fp
 800a764:	9306      	str	r3, [sp, #24]
 800a766:	2300      	movs	r3, #0
 800a768:	9308      	str	r3, [sp, #32]
 800a76a:	9b07      	ldr	r3, [sp, #28]
 800a76c:	2b09      	cmp	r3, #9
 800a76e:	d868      	bhi.n	800a842 <_dtoa_r+0x2ba>
 800a770:	2b05      	cmp	r3, #5
 800a772:	bfc4      	itt	gt
 800a774:	3b04      	subgt	r3, #4
 800a776:	9307      	strgt	r3, [sp, #28]
 800a778:	9b07      	ldr	r3, [sp, #28]
 800a77a:	f1a3 0302 	sub.w	r3, r3, #2
 800a77e:	bfcc      	ite	gt
 800a780:	2500      	movgt	r5, #0
 800a782:	2501      	movle	r5, #1
 800a784:	2b03      	cmp	r3, #3
 800a786:	f200 8085 	bhi.w	800a894 <_dtoa_r+0x30c>
 800a78a:	e8df f003 	tbb	[pc, r3]
 800a78e:	3b2e      	.short	0x3b2e
 800a790:	5839      	.short	0x5839
 800a792:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a796:	441d      	add	r5, r3
 800a798:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	bfc1      	itttt	gt
 800a7a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7a4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a7a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a7ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a7b0:	bfd6      	itet	le
 800a7b2:	f1c3 0320 	rsble	r3, r3, #32
 800a7b6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a7ba:	fa06 f003 	lslle.w	r0, r6, r3
 800a7be:	f7f5 fea1 	bl	8000504 <__aeabi_ui2d>
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a7c8:	3d01      	subs	r5, #1
 800a7ca:	920e      	str	r2, [sp, #56]	; 0x38
 800a7cc:	e76f      	b.n	800a6ae <_dtoa_r+0x126>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e7b3      	b.n	800a73a <_dtoa_r+0x1b2>
 800a7d2:	900c      	str	r0, [sp, #48]	; 0x30
 800a7d4:	e7b2      	b.n	800a73c <_dtoa_r+0x1b4>
 800a7d6:	9b05      	ldr	r3, [sp, #20]
 800a7d8:	eba3 030b 	sub.w	r3, r3, fp
 800a7dc:	9305      	str	r3, [sp, #20]
 800a7de:	f1cb 0300 	rsb	r3, fp, #0
 800a7e2:	9308      	str	r3, [sp, #32]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7e8:	e7bf      	b.n	800a76a <_dtoa_r+0x1e2>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dc52      	bgt.n	800a89a <_dtoa_r+0x312>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	9301      	str	r3, [sp, #4]
 800a7f8:	9304      	str	r3, [sp, #16]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	920a      	str	r2, [sp, #40]	; 0x28
 800a7fe:	e00b      	b.n	800a818 <_dtoa_r+0x290>
 800a800:	2301      	movs	r3, #1
 800a802:	e7f3      	b.n	800a7ec <_dtoa_r+0x264>
 800a804:	2300      	movs	r3, #0
 800a806:	9309      	str	r3, [sp, #36]	; 0x24
 800a808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a80a:	445b      	add	r3, fp
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	3301      	adds	r3, #1
 800a810:	2b01      	cmp	r3, #1
 800a812:	9304      	str	r3, [sp, #16]
 800a814:	bfb8      	it	lt
 800a816:	2301      	movlt	r3, #1
 800a818:	69e0      	ldr	r0, [r4, #28]
 800a81a:	2100      	movs	r1, #0
 800a81c:	2204      	movs	r2, #4
 800a81e:	f102 0614 	add.w	r6, r2, #20
 800a822:	429e      	cmp	r6, r3
 800a824:	d93d      	bls.n	800a8a2 <_dtoa_r+0x31a>
 800a826:	6041      	str	r1, [r0, #4]
 800a828:	4620      	mov	r0, r4
 800a82a:	f000 fd9f 	bl	800b36c <_Balloc>
 800a82e:	9000      	str	r0, [sp, #0]
 800a830:	2800      	cmp	r0, #0
 800a832:	d139      	bne.n	800a8a8 <_dtoa_r+0x320>
 800a834:	4b16      	ldr	r3, [pc, #88]	; (800a890 <_dtoa_r+0x308>)
 800a836:	4602      	mov	r2, r0
 800a838:	f240 11af 	movw	r1, #431	; 0x1af
 800a83c:	e6bd      	b.n	800a5ba <_dtoa_r+0x32>
 800a83e:	2301      	movs	r3, #1
 800a840:	e7e1      	b.n	800a806 <_dtoa_r+0x27e>
 800a842:	2501      	movs	r5, #1
 800a844:	2300      	movs	r3, #0
 800a846:	9307      	str	r3, [sp, #28]
 800a848:	9509      	str	r5, [sp, #36]	; 0x24
 800a84a:	f04f 33ff 	mov.w	r3, #4294967295
 800a84e:	9301      	str	r3, [sp, #4]
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	2200      	movs	r2, #0
 800a854:	2312      	movs	r3, #18
 800a856:	e7d1      	b.n	800a7fc <_dtoa_r+0x274>
 800a858:	636f4361 	.word	0x636f4361
 800a85c:	3fd287a7 	.word	0x3fd287a7
 800a860:	8b60c8b3 	.word	0x8b60c8b3
 800a864:	3fc68a28 	.word	0x3fc68a28
 800a868:	509f79fb 	.word	0x509f79fb
 800a86c:	3fd34413 	.word	0x3fd34413
 800a870:	0800e8f3 	.word	0x0800e8f3
 800a874:	0800e9e4 	.word	0x0800e9e4
 800a878:	7ff00000 	.word	0x7ff00000
 800a87c:	0800e9e0 	.word	0x0800e9e0
 800a880:	0800e9d7 	.word	0x0800e9d7
 800a884:	0800e973 	.word	0x0800e973
 800a888:	3ff80000 	.word	0x3ff80000
 800a88c:	0800ead0 	.word	0x0800ead0
 800a890:	0800ea3c 	.word	0x0800ea3c
 800a894:	2301      	movs	r3, #1
 800a896:	9309      	str	r3, [sp, #36]	; 0x24
 800a898:	e7d7      	b.n	800a84a <_dtoa_r+0x2c2>
 800a89a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a89c:	9301      	str	r3, [sp, #4]
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	e7ba      	b.n	800a818 <_dtoa_r+0x290>
 800a8a2:	3101      	adds	r1, #1
 800a8a4:	0052      	lsls	r2, r2, #1
 800a8a6:	e7ba      	b.n	800a81e <_dtoa_r+0x296>
 800a8a8:	69e3      	ldr	r3, [r4, #28]
 800a8aa:	9a00      	ldr	r2, [sp, #0]
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	2b0e      	cmp	r3, #14
 800a8b2:	f200 80a8 	bhi.w	800aa06 <_dtoa_r+0x47e>
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	f000 80a5 	beq.w	800aa06 <_dtoa_r+0x47e>
 800a8bc:	f1bb 0f00 	cmp.w	fp, #0
 800a8c0:	dd38      	ble.n	800a934 <_dtoa_r+0x3ac>
 800a8c2:	4bc0      	ldr	r3, [pc, #768]	; (800abc4 <_dtoa_r+0x63c>)
 800a8c4:	f00b 020f 	and.w	r2, fp, #15
 800a8c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a8d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a8d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a8d8:	d019      	beq.n	800a90e <_dtoa_r+0x386>
 800a8da:	4bbb      	ldr	r3, [pc, #748]	; (800abc8 <_dtoa_r+0x640>)
 800a8dc:	ec51 0b18 	vmov	r0, r1, d8
 800a8e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8e4:	f7f5 ffb2 	bl	800084c <__aeabi_ddiv>
 800a8e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8ec:	f008 080f 	and.w	r8, r8, #15
 800a8f0:	2503      	movs	r5, #3
 800a8f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800abc8 <_dtoa_r+0x640>
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	d10a      	bne.n	800a912 <_dtoa_r+0x38a>
 800a8fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a900:	4632      	mov	r2, r6
 800a902:	463b      	mov	r3, r7
 800a904:	f7f5 ffa2 	bl	800084c <__aeabi_ddiv>
 800a908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a90c:	e02b      	b.n	800a966 <_dtoa_r+0x3de>
 800a90e:	2502      	movs	r5, #2
 800a910:	e7ef      	b.n	800a8f2 <_dtoa_r+0x36a>
 800a912:	f018 0f01 	tst.w	r8, #1
 800a916:	d008      	beq.n	800a92a <_dtoa_r+0x3a2>
 800a918:	4630      	mov	r0, r6
 800a91a:	4639      	mov	r1, r7
 800a91c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a920:	f7f5 fe6a 	bl	80005f8 <__aeabi_dmul>
 800a924:	3501      	adds	r5, #1
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a92e:	f109 0908 	add.w	r9, r9, #8
 800a932:	e7e0      	b.n	800a8f6 <_dtoa_r+0x36e>
 800a934:	f000 809f 	beq.w	800aa76 <_dtoa_r+0x4ee>
 800a938:	f1cb 0600 	rsb	r6, fp, #0
 800a93c:	4ba1      	ldr	r3, [pc, #644]	; (800abc4 <_dtoa_r+0x63c>)
 800a93e:	4fa2      	ldr	r7, [pc, #648]	; (800abc8 <_dtoa_r+0x640>)
 800a940:	f006 020f 	and.w	r2, r6, #15
 800a944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	ec51 0b18 	vmov	r0, r1, d8
 800a950:	f7f5 fe52 	bl	80005f8 <__aeabi_dmul>
 800a954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a958:	1136      	asrs	r6, r6, #4
 800a95a:	2300      	movs	r3, #0
 800a95c:	2502      	movs	r5, #2
 800a95e:	2e00      	cmp	r6, #0
 800a960:	d17e      	bne.n	800aa60 <_dtoa_r+0x4d8>
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1d0      	bne.n	800a908 <_dtoa_r+0x380>
 800a966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a968:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 8084 	beq.w	800aa7a <_dtoa_r+0x4f2>
 800a972:	4b96      	ldr	r3, [pc, #600]	; (800abcc <_dtoa_r+0x644>)
 800a974:	2200      	movs	r2, #0
 800a976:	4640      	mov	r0, r8
 800a978:	4649      	mov	r1, r9
 800a97a:	f7f6 f8af 	bl	8000adc <__aeabi_dcmplt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d07b      	beq.n	800aa7a <_dtoa_r+0x4f2>
 800a982:	9b04      	ldr	r3, [sp, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d078      	beq.n	800aa7a <_dtoa_r+0x4f2>
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	dd39      	ble.n	800aa02 <_dtoa_r+0x47a>
 800a98e:	4b90      	ldr	r3, [pc, #576]	; (800abd0 <_dtoa_r+0x648>)
 800a990:	2200      	movs	r2, #0
 800a992:	4640      	mov	r0, r8
 800a994:	4649      	mov	r1, r9
 800a996:	f7f5 fe2f 	bl	80005f8 <__aeabi_dmul>
 800a99a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a99e:	9e01      	ldr	r6, [sp, #4]
 800a9a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	f7f5 fdba 	bl	8000524 <__aeabi_i2d>
 800a9b0:	4642      	mov	r2, r8
 800a9b2:	464b      	mov	r3, r9
 800a9b4:	f7f5 fe20 	bl	80005f8 <__aeabi_dmul>
 800a9b8:	4b86      	ldr	r3, [pc, #536]	; (800abd4 <_dtoa_r+0x64c>)
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f7f5 fc66 	bl	800028c <__adddf3>
 800a9c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a9c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9c8:	9303      	str	r3, [sp, #12]
 800a9ca:	2e00      	cmp	r6, #0
 800a9cc:	d158      	bne.n	800aa80 <_dtoa_r+0x4f8>
 800a9ce:	4b82      	ldr	r3, [pc, #520]	; (800abd8 <_dtoa_r+0x650>)
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4640      	mov	r0, r8
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	f7f5 fc57 	bl	8000288 <__aeabi_dsub>
 800a9da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9de:	4680      	mov	r8, r0
 800a9e0:	4689      	mov	r9, r1
 800a9e2:	f7f6 f899 	bl	8000b18 <__aeabi_dcmpgt>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f040 8296 	bne.w	800af18 <_dtoa_r+0x990>
 800a9ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a9f6:	4649      	mov	r1, r9
 800a9f8:	f7f6 f870 	bl	8000adc <__aeabi_dcmplt>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	f040 8289 	bne.w	800af14 <_dtoa_r+0x98c>
 800aa02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f2c0 814e 	blt.w	800acaa <_dtoa_r+0x722>
 800aa0e:	f1bb 0f0e 	cmp.w	fp, #14
 800aa12:	f300 814a 	bgt.w	800acaa <_dtoa_r+0x722>
 800aa16:	4b6b      	ldr	r3, [pc, #428]	; (800abc4 <_dtoa_r+0x63c>)
 800aa18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f280 80dc 	bge.w	800abe0 <_dtoa_r+0x658>
 800aa28:	9b04      	ldr	r3, [sp, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f300 80d8 	bgt.w	800abe0 <_dtoa_r+0x658>
 800aa30:	f040 826f 	bne.w	800af12 <_dtoa_r+0x98a>
 800aa34:	4b68      	ldr	r3, [pc, #416]	; (800abd8 <_dtoa_r+0x650>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	4640      	mov	r0, r8
 800aa3a:	4649      	mov	r1, r9
 800aa3c:	f7f5 fddc 	bl	80005f8 <__aeabi_dmul>
 800aa40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa44:	f7f6 f85e 	bl	8000b04 <__aeabi_dcmpge>
 800aa48:	9e04      	ldr	r6, [sp, #16]
 800aa4a:	4637      	mov	r7, r6
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f040 8245 	bne.w	800aedc <_dtoa_r+0x954>
 800aa52:	9d00      	ldr	r5, [sp, #0]
 800aa54:	2331      	movs	r3, #49	; 0x31
 800aa56:	f805 3b01 	strb.w	r3, [r5], #1
 800aa5a:	f10b 0b01 	add.w	fp, fp, #1
 800aa5e:	e241      	b.n	800aee4 <_dtoa_r+0x95c>
 800aa60:	07f2      	lsls	r2, r6, #31
 800aa62:	d505      	bpl.n	800aa70 <_dtoa_r+0x4e8>
 800aa64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa68:	f7f5 fdc6 	bl	80005f8 <__aeabi_dmul>
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	2301      	movs	r3, #1
 800aa70:	1076      	asrs	r6, r6, #1
 800aa72:	3708      	adds	r7, #8
 800aa74:	e773      	b.n	800a95e <_dtoa_r+0x3d6>
 800aa76:	2502      	movs	r5, #2
 800aa78:	e775      	b.n	800a966 <_dtoa_r+0x3de>
 800aa7a:	9e04      	ldr	r6, [sp, #16]
 800aa7c:	465f      	mov	r7, fp
 800aa7e:	e792      	b.n	800a9a6 <_dtoa_r+0x41e>
 800aa80:	9900      	ldr	r1, [sp, #0]
 800aa82:	4b50      	ldr	r3, [pc, #320]	; (800abc4 <_dtoa_r+0x63c>)
 800aa84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa88:	4431      	add	r1, r6
 800aa8a:	9102      	str	r1, [sp, #8]
 800aa8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa8e:	eeb0 9a47 	vmov.f32	s18, s14
 800aa92:	eef0 9a67 	vmov.f32	s19, s15
 800aa96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa9e:	2900      	cmp	r1, #0
 800aaa0:	d044      	beq.n	800ab2c <_dtoa_r+0x5a4>
 800aaa2:	494e      	ldr	r1, [pc, #312]	; (800abdc <_dtoa_r+0x654>)
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	f7f5 fed1 	bl	800084c <__aeabi_ddiv>
 800aaaa:	ec53 2b19 	vmov	r2, r3, d9
 800aaae:	f7f5 fbeb 	bl	8000288 <__aeabi_dsub>
 800aab2:	9d00      	ldr	r5, [sp, #0]
 800aab4:	ec41 0b19 	vmov	d9, r0, r1
 800aab8:	4649      	mov	r1, r9
 800aaba:	4640      	mov	r0, r8
 800aabc:	f7f6 f84c 	bl	8000b58 <__aeabi_d2iz>
 800aac0:	4606      	mov	r6, r0
 800aac2:	f7f5 fd2f 	bl	8000524 <__aeabi_i2d>
 800aac6:	4602      	mov	r2, r0
 800aac8:	460b      	mov	r3, r1
 800aaca:	4640      	mov	r0, r8
 800aacc:	4649      	mov	r1, r9
 800aace:	f7f5 fbdb 	bl	8000288 <__aeabi_dsub>
 800aad2:	3630      	adds	r6, #48	; 0x30
 800aad4:	f805 6b01 	strb.w	r6, [r5], #1
 800aad8:	ec53 2b19 	vmov	r2, r3, d9
 800aadc:	4680      	mov	r8, r0
 800aade:	4689      	mov	r9, r1
 800aae0:	f7f5 fffc 	bl	8000adc <__aeabi_dcmplt>
 800aae4:	2800      	cmp	r0, #0
 800aae6:	d164      	bne.n	800abb2 <_dtoa_r+0x62a>
 800aae8:	4642      	mov	r2, r8
 800aaea:	464b      	mov	r3, r9
 800aaec:	4937      	ldr	r1, [pc, #220]	; (800abcc <_dtoa_r+0x644>)
 800aaee:	2000      	movs	r0, #0
 800aaf0:	f7f5 fbca 	bl	8000288 <__aeabi_dsub>
 800aaf4:	ec53 2b19 	vmov	r2, r3, d9
 800aaf8:	f7f5 fff0 	bl	8000adc <__aeabi_dcmplt>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	f040 80b6 	bne.w	800ac6e <_dtoa_r+0x6e6>
 800ab02:	9b02      	ldr	r3, [sp, #8]
 800ab04:	429d      	cmp	r5, r3
 800ab06:	f43f af7c 	beq.w	800aa02 <_dtoa_r+0x47a>
 800ab0a:	4b31      	ldr	r3, [pc, #196]	; (800abd0 <_dtoa_r+0x648>)
 800ab0c:	ec51 0b19 	vmov	r0, r1, d9
 800ab10:	2200      	movs	r2, #0
 800ab12:	f7f5 fd71 	bl	80005f8 <__aeabi_dmul>
 800ab16:	4b2e      	ldr	r3, [pc, #184]	; (800abd0 <_dtoa_r+0x648>)
 800ab18:	ec41 0b19 	vmov	d9, r0, r1
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	f7f5 fd69 	bl	80005f8 <__aeabi_dmul>
 800ab26:	4680      	mov	r8, r0
 800ab28:	4689      	mov	r9, r1
 800ab2a:	e7c5      	b.n	800aab8 <_dtoa_r+0x530>
 800ab2c:	ec51 0b17 	vmov	r0, r1, d7
 800ab30:	f7f5 fd62 	bl	80005f8 <__aeabi_dmul>
 800ab34:	9b02      	ldr	r3, [sp, #8]
 800ab36:	9d00      	ldr	r5, [sp, #0]
 800ab38:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab3a:	ec41 0b19 	vmov	d9, r0, r1
 800ab3e:	4649      	mov	r1, r9
 800ab40:	4640      	mov	r0, r8
 800ab42:	f7f6 f809 	bl	8000b58 <__aeabi_d2iz>
 800ab46:	4606      	mov	r6, r0
 800ab48:	f7f5 fcec 	bl	8000524 <__aeabi_i2d>
 800ab4c:	3630      	adds	r6, #48	; 0x30
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	4640      	mov	r0, r8
 800ab54:	4649      	mov	r1, r9
 800ab56:	f7f5 fb97 	bl	8000288 <__aeabi_dsub>
 800ab5a:	f805 6b01 	strb.w	r6, [r5], #1
 800ab5e:	9b02      	ldr	r3, [sp, #8]
 800ab60:	429d      	cmp	r5, r3
 800ab62:	4680      	mov	r8, r0
 800ab64:	4689      	mov	r9, r1
 800ab66:	f04f 0200 	mov.w	r2, #0
 800ab6a:	d124      	bne.n	800abb6 <_dtoa_r+0x62e>
 800ab6c:	4b1b      	ldr	r3, [pc, #108]	; (800abdc <_dtoa_r+0x654>)
 800ab6e:	ec51 0b19 	vmov	r0, r1, d9
 800ab72:	f7f5 fb8b 	bl	800028c <__adddf3>
 800ab76:	4602      	mov	r2, r0
 800ab78:	460b      	mov	r3, r1
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	f7f5 ffcb 	bl	8000b18 <__aeabi_dcmpgt>
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d173      	bne.n	800ac6e <_dtoa_r+0x6e6>
 800ab86:	ec53 2b19 	vmov	r2, r3, d9
 800ab8a:	4914      	ldr	r1, [pc, #80]	; (800abdc <_dtoa_r+0x654>)
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	f7f5 fb7b 	bl	8000288 <__aeabi_dsub>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	4640      	mov	r0, r8
 800ab98:	4649      	mov	r1, r9
 800ab9a:	f7f5 ff9f 	bl	8000adc <__aeabi_dcmplt>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f43f af2f 	beq.w	800aa02 <_dtoa_r+0x47a>
 800aba4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aba6:	1e6b      	subs	r3, r5, #1
 800aba8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abae:	2b30      	cmp	r3, #48	; 0x30
 800abb0:	d0f8      	beq.n	800aba4 <_dtoa_r+0x61c>
 800abb2:	46bb      	mov	fp, r7
 800abb4:	e04a      	b.n	800ac4c <_dtoa_r+0x6c4>
 800abb6:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <_dtoa_r+0x648>)
 800abb8:	f7f5 fd1e 	bl	80005f8 <__aeabi_dmul>
 800abbc:	4680      	mov	r8, r0
 800abbe:	4689      	mov	r9, r1
 800abc0:	e7bd      	b.n	800ab3e <_dtoa_r+0x5b6>
 800abc2:	bf00      	nop
 800abc4:	0800ead0 	.word	0x0800ead0
 800abc8:	0800eaa8 	.word	0x0800eaa8
 800abcc:	3ff00000 	.word	0x3ff00000
 800abd0:	40240000 	.word	0x40240000
 800abd4:	401c0000 	.word	0x401c0000
 800abd8:	40140000 	.word	0x40140000
 800abdc:	3fe00000 	.word	0x3fe00000
 800abe0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abe4:	9d00      	ldr	r5, [sp, #0]
 800abe6:	4642      	mov	r2, r8
 800abe8:	464b      	mov	r3, r9
 800abea:	4630      	mov	r0, r6
 800abec:	4639      	mov	r1, r7
 800abee:	f7f5 fe2d 	bl	800084c <__aeabi_ddiv>
 800abf2:	f7f5 ffb1 	bl	8000b58 <__aeabi_d2iz>
 800abf6:	9001      	str	r0, [sp, #4]
 800abf8:	f7f5 fc94 	bl	8000524 <__aeabi_i2d>
 800abfc:	4642      	mov	r2, r8
 800abfe:	464b      	mov	r3, r9
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	4602      	mov	r2, r0
 800ac06:	460b      	mov	r3, r1
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	f7f5 fb3c 	bl	8000288 <__aeabi_dsub>
 800ac10:	9e01      	ldr	r6, [sp, #4]
 800ac12:	9f04      	ldr	r7, [sp, #16]
 800ac14:	3630      	adds	r6, #48	; 0x30
 800ac16:	f805 6b01 	strb.w	r6, [r5], #1
 800ac1a:	9e00      	ldr	r6, [sp, #0]
 800ac1c:	1bae      	subs	r6, r5, r6
 800ac1e:	42b7      	cmp	r7, r6
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	d134      	bne.n	800ac90 <_dtoa_r+0x708>
 800ac26:	f7f5 fb31 	bl	800028c <__adddf3>
 800ac2a:	4642      	mov	r2, r8
 800ac2c:	464b      	mov	r3, r9
 800ac2e:	4606      	mov	r6, r0
 800ac30:	460f      	mov	r7, r1
 800ac32:	f7f5 ff71 	bl	8000b18 <__aeabi_dcmpgt>
 800ac36:	b9c8      	cbnz	r0, 800ac6c <_dtoa_r+0x6e4>
 800ac38:	4642      	mov	r2, r8
 800ac3a:	464b      	mov	r3, r9
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	4639      	mov	r1, r7
 800ac40:	f7f5 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac44:	b110      	cbz	r0, 800ac4c <_dtoa_r+0x6c4>
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	07db      	lsls	r3, r3, #31
 800ac4a:	d40f      	bmi.n	800ac6c <_dtoa_r+0x6e4>
 800ac4c:	4651      	mov	r1, sl
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f000 fbcc 	bl	800b3ec <_Bfree>
 800ac54:	2300      	movs	r3, #0
 800ac56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac58:	702b      	strb	r3, [r5, #0]
 800ac5a:	f10b 0301 	add.w	r3, fp, #1
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f43f ace2 	beq.w	800a62c <_dtoa_r+0xa4>
 800ac68:	601d      	str	r5, [r3, #0]
 800ac6a:	e4df      	b.n	800a62c <_dtoa_r+0xa4>
 800ac6c:	465f      	mov	r7, fp
 800ac6e:	462b      	mov	r3, r5
 800ac70:	461d      	mov	r5, r3
 800ac72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac76:	2a39      	cmp	r2, #57	; 0x39
 800ac78:	d106      	bne.n	800ac88 <_dtoa_r+0x700>
 800ac7a:	9a00      	ldr	r2, [sp, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d1f7      	bne.n	800ac70 <_dtoa_r+0x6e8>
 800ac80:	9900      	ldr	r1, [sp, #0]
 800ac82:	2230      	movs	r2, #48	; 0x30
 800ac84:	3701      	adds	r7, #1
 800ac86:	700a      	strb	r2, [r1, #0]
 800ac88:	781a      	ldrb	r2, [r3, #0]
 800ac8a:	3201      	adds	r2, #1
 800ac8c:	701a      	strb	r2, [r3, #0]
 800ac8e:	e790      	b.n	800abb2 <_dtoa_r+0x62a>
 800ac90:	4ba3      	ldr	r3, [pc, #652]	; (800af20 <_dtoa_r+0x998>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fcb0 	bl	80005f8 <__aeabi_dmul>
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4606      	mov	r6, r0
 800ac9e:	460f      	mov	r7, r1
 800aca0:	f7f5 ff12 	bl	8000ac8 <__aeabi_dcmpeq>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d09e      	beq.n	800abe6 <_dtoa_r+0x65e>
 800aca8:	e7d0      	b.n	800ac4c <_dtoa_r+0x6c4>
 800acaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acac:	2a00      	cmp	r2, #0
 800acae:	f000 80ca 	beq.w	800ae46 <_dtoa_r+0x8be>
 800acb2:	9a07      	ldr	r2, [sp, #28]
 800acb4:	2a01      	cmp	r2, #1
 800acb6:	f300 80ad 	bgt.w	800ae14 <_dtoa_r+0x88c>
 800acba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	f000 80a5 	beq.w	800ae0c <_dtoa_r+0x884>
 800acc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acc6:	9e08      	ldr	r6, [sp, #32]
 800acc8:	9d05      	ldr	r5, [sp, #20]
 800acca:	9a05      	ldr	r2, [sp, #20]
 800accc:	441a      	add	r2, r3
 800acce:	9205      	str	r2, [sp, #20]
 800acd0:	9a06      	ldr	r2, [sp, #24]
 800acd2:	2101      	movs	r1, #1
 800acd4:	441a      	add	r2, r3
 800acd6:	4620      	mov	r0, r4
 800acd8:	9206      	str	r2, [sp, #24]
 800acda:	f000 fc87 	bl	800b5ec <__i2b>
 800acde:	4607      	mov	r7, r0
 800ace0:	b165      	cbz	r5, 800acfc <_dtoa_r+0x774>
 800ace2:	9b06      	ldr	r3, [sp, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	dd09      	ble.n	800acfc <_dtoa_r+0x774>
 800ace8:	42ab      	cmp	r3, r5
 800acea:	9a05      	ldr	r2, [sp, #20]
 800acec:	bfa8      	it	ge
 800acee:	462b      	movge	r3, r5
 800acf0:	1ad2      	subs	r2, r2, r3
 800acf2:	9205      	str	r2, [sp, #20]
 800acf4:	9a06      	ldr	r2, [sp, #24]
 800acf6:	1aed      	subs	r5, r5, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	9306      	str	r3, [sp, #24]
 800acfc:	9b08      	ldr	r3, [sp, #32]
 800acfe:	b1f3      	cbz	r3, 800ad3e <_dtoa_r+0x7b6>
 800ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	f000 80a3 	beq.w	800ae4e <_dtoa_r+0x8c6>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dd10      	ble.n	800ad2e <_dtoa_r+0x7a6>
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 fd2b 	bl	800b76c <__pow5mult>
 800ad16:	4652      	mov	r2, sl
 800ad18:	4601      	mov	r1, r0
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 fc7b 	bl	800b618 <__multiply>
 800ad22:	4651      	mov	r1, sl
 800ad24:	4680      	mov	r8, r0
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 fb60 	bl	800b3ec <_Bfree>
 800ad2c:	46c2      	mov	sl, r8
 800ad2e:	9b08      	ldr	r3, [sp, #32]
 800ad30:	1b9a      	subs	r2, r3, r6
 800ad32:	d004      	beq.n	800ad3e <_dtoa_r+0x7b6>
 800ad34:	4651      	mov	r1, sl
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fd18 	bl	800b76c <__pow5mult>
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	2101      	movs	r1, #1
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 fc53 	bl	800b5ec <__i2b>
 800ad46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	f340 8081 	ble.w	800ae52 <_dtoa_r+0x8ca>
 800ad50:	461a      	mov	r2, r3
 800ad52:	4601      	mov	r1, r0
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fd09 	bl	800b76c <__pow5mult>
 800ad5a:	9b07      	ldr	r3, [sp, #28]
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	dd7a      	ble.n	800ae58 <_dtoa_r+0x8d0>
 800ad62:	f04f 0800 	mov.w	r8, #0
 800ad66:	6933      	ldr	r3, [r6, #16]
 800ad68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad6c:	6918      	ldr	r0, [r3, #16]
 800ad6e:	f000 fbef 	bl	800b550 <__hi0bits>
 800ad72:	f1c0 0020 	rsb	r0, r0, #32
 800ad76:	9b06      	ldr	r3, [sp, #24]
 800ad78:	4418      	add	r0, r3
 800ad7a:	f010 001f 	ands.w	r0, r0, #31
 800ad7e:	f000 8094 	beq.w	800aeaa <_dtoa_r+0x922>
 800ad82:	f1c0 0320 	rsb	r3, r0, #32
 800ad86:	2b04      	cmp	r3, #4
 800ad88:	f340 8085 	ble.w	800ae96 <_dtoa_r+0x90e>
 800ad8c:	9b05      	ldr	r3, [sp, #20]
 800ad8e:	f1c0 001c 	rsb	r0, r0, #28
 800ad92:	4403      	add	r3, r0
 800ad94:	9305      	str	r3, [sp, #20]
 800ad96:	9b06      	ldr	r3, [sp, #24]
 800ad98:	4403      	add	r3, r0
 800ad9a:	4405      	add	r5, r0
 800ad9c:	9306      	str	r3, [sp, #24]
 800ad9e:	9b05      	ldr	r3, [sp, #20]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd05      	ble.n	800adb0 <_dtoa_r+0x828>
 800ada4:	4651      	mov	r1, sl
 800ada6:	461a      	mov	r2, r3
 800ada8:	4620      	mov	r0, r4
 800adaa:	f000 fd39 	bl	800b820 <__lshift>
 800adae:	4682      	mov	sl, r0
 800adb0:	9b06      	ldr	r3, [sp, #24]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	dd05      	ble.n	800adc2 <_dtoa_r+0x83a>
 800adb6:	4631      	mov	r1, r6
 800adb8:	461a      	mov	r2, r3
 800adba:	4620      	mov	r0, r4
 800adbc:	f000 fd30 	bl	800b820 <__lshift>
 800adc0:	4606      	mov	r6, r0
 800adc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d072      	beq.n	800aeae <_dtoa_r+0x926>
 800adc8:	4631      	mov	r1, r6
 800adca:	4650      	mov	r0, sl
 800adcc:	f000 fd94 	bl	800b8f8 <__mcmp>
 800add0:	2800      	cmp	r0, #0
 800add2:	da6c      	bge.n	800aeae <_dtoa_r+0x926>
 800add4:	2300      	movs	r3, #0
 800add6:	4651      	mov	r1, sl
 800add8:	220a      	movs	r2, #10
 800adda:	4620      	mov	r0, r4
 800addc:	f000 fb28 	bl	800b430 <__multadd>
 800ade0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ade6:	4682      	mov	sl, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f000 81b0 	beq.w	800b14e <_dtoa_r+0xbc6>
 800adee:	2300      	movs	r3, #0
 800adf0:	4639      	mov	r1, r7
 800adf2:	220a      	movs	r2, #10
 800adf4:	4620      	mov	r0, r4
 800adf6:	f000 fb1b 	bl	800b430 <__multadd>
 800adfa:	9b01      	ldr	r3, [sp, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	4607      	mov	r7, r0
 800ae00:	f300 8096 	bgt.w	800af30 <_dtoa_r+0x9a8>
 800ae04:	9b07      	ldr	r3, [sp, #28]
 800ae06:	2b02      	cmp	r3, #2
 800ae08:	dc59      	bgt.n	800aebe <_dtoa_r+0x936>
 800ae0a:	e091      	b.n	800af30 <_dtoa_r+0x9a8>
 800ae0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae12:	e758      	b.n	800acc6 <_dtoa_r+0x73e>
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	1e5e      	subs	r6, r3, #1
 800ae18:	9b08      	ldr	r3, [sp, #32]
 800ae1a:	42b3      	cmp	r3, r6
 800ae1c:	bfbf      	itttt	lt
 800ae1e:	9b08      	ldrlt	r3, [sp, #32]
 800ae20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ae22:	9608      	strlt	r6, [sp, #32]
 800ae24:	1af3      	sublt	r3, r6, r3
 800ae26:	bfb4      	ite	lt
 800ae28:	18d2      	addlt	r2, r2, r3
 800ae2a:	1b9e      	subge	r6, r3, r6
 800ae2c:	9b04      	ldr	r3, [sp, #16]
 800ae2e:	bfbc      	itt	lt
 800ae30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ae32:	2600      	movlt	r6, #0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	bfb7      	itett	lt
 800ae38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ae3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ae40:	1a9d      	sublt	r5, r3, r2
 800ae42:	2300      	movlt	r3, #0
 800ae44:	e741      	b.n	800acca <_dtoa_r+0x742>
 800ae46:	9e08      	ldr	r6, [sp, #32]
 800ae48:	9d05      	ldr	r5, [sp, #20]
 800ae4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae4c:	e748      	b.n	800ace0 <_dtoa_r+0x758>
 800ae4e:	9a08      	ldr	r2, [sp, #32]
 800ae50:	e770      	b.n	800ad34 <_dtoa_r+0x7ac>
 800ae52:	9b07      	ldr	r3, [sp, #28]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	dc19      	bgt.n	800ae8c <_dtoa_r+0x904>
 800ae58:	9b02      	ldr	r3, [sp, #8]
 800ae5a:	b9bb      	cbnz	r3, 800ae8c <_dtoa_r+0x904>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae62:	b99b      	cbnz	r3, 800ae8c <_dtoa_r+0x904>
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae6a:	0d1b      	lsrs	r3, r3, #20
 800ae6c:	051b      	lsls	r3, r3, #20
 800ae6e:	b183      	cbz	r3, 800ae92 <_dtoa_r+0x90a>
 800ae70:	9b05      	ldr	r3, [sp, #20]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9305      	str	r3, [sp, #20]
 800ae76:	9b06      	ldr	r3, [sp, #24]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	9306      	str	r3, [sp, #24]
 800ae7c:	f04f 0801 	mov.w	r8, #1
 800ae80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f47f af6f 	bne.w	800ad66 <_dtoa_r+0x7de>
 800ae88:	2001      	movs	r0, #1
 800ae8a:	e774      	b.n	800ad76 <_dtoa_r+0x7ee>
 800ae8c:	f04f 0800 	mov.w	r8, #0
 800ae90:	e7f6      	b.n	800ae80 <_dtoa_r+0x8f8>
 800ae92:	4698      	mov	r8, r3
 800ae94:	e7f4      	b.n	800ae80 <_dtoa_r+0x8f8>
 800ae96:	d082      	beq.n	800ad9e <_dtoa_r+0x816>
 800ae98:	9a05      	ldr	r2, [sp, #20]
 800ae9a:	331c      	adds	r3, #28
 800ae9c:	441a      	add	r2, r3
 800ae9e:	9205      	str	r2, [sp, #20]
 800aea0:	9a06      	ldr	r2, [sp, #24]
 800aea2:	441a      	add	r2, r3
 800aea4:	441d      	add	r5, r3
 800aea6:	9206      	str	r2, [sp, #24]
 800aea8:	e779      	b.n	800ad9e <_dtoa_r+0x816>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	e7f4      	b.n	800ae98 <_dtoa_r+0x910>
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc37      	bgt.n	800af24 <_dtoa_r+0x99c>
 800aeb4:	9b07      	ldr	r3, [sp, #28]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	dd34      	ble.n	800af24 <_dtoa_r+0x99c>
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	b963      	cbnz	r3, 800aedc <_dtoa_r+0x954>
 800aec2:	4631      	mov	r1, r6
 800aec4:	2205      	movs	r2, #5
 800aec6:	4620      	mov	r0, r4
 800aec8:	f000 fab2 	bl	800b430 <__multadd>
 800aecc:	4601      	mov	r1, r0
 800aece:	4606      	mov	r6, r0
 800aed0:	4650      	mov	r0, sl
 800aed2:	f000 fd11 	bl	800b8f8 <__mcmp>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	f73f adbb 	bgt.w	800aa52 <_dtoa_r+0x4ca>
 800aedc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aede:	9d00      	ldr	r5, [sp, #0]
 800aee0:	ea6f 0b03 	mvn.w	fp, r3
 800aee4:	f04f 0800 	mov.w	r8, #0
 800aee8:	4631      	mov	r1, r6
 800aeea:	4620      	mov	r0, r4
 800aeec:	f000 fa7e 	bl	800b3ec <_Bfree>
 800aef0:	2f00      	cmp	r7, #0
 800aef2:	f43f aeab 	beq.w	800ac4c <_dtoa_r+0x6c4>
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	d005      	beq.n	800af08 <_dtoa_r+0x980>
 800aefc:	45b8      	cmp	r8, r7
 800aefe:	d003      	beq.n	800af08 <_dtoa_r+0x980>
 800af00:	4641      	mov	r1, r8
 800af02:	4620      	mov	r0, r4
 800af04:	f000 fa72 	bl	800b3ec <_Bfree>
 800af08:	4639      	mov	r1, r7
 800af0a:	4620      	mov	r0, r4
 800af0c:	f000 fa6e 	bl	800b3ec <_Bfree>
 800af10:	e69c      	b.n	800ac4c <_dtoa_r+0x6c4>
 800af12:	2600      	movs	r6, #0
 800af14:	4637      	mov	r7, r6
 800af16:	e7e1      	b.n	800aedc <_dtoa_r+0x954>
 800af18:	46bb      	mov	fp, r7
 800af1a:	4637      	mov	r7, r6
 800af1c:	e599      	b.n	800aa52 <_dtoa_r+0x4ca>
 800af1e:	bf00      	nop
 800af20:	40240000 	.word	0x40240000
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	2b00      	cmp	r3, #0
 800af28:	f000 80c8 	beq.w	800b0bc <_dtoa_r+0xb34>
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	2d00      	cmp	r5, #0
 800af32:	dd05      	ble.n	800af40 <_dtoa_r+0x9b8>
 800af34:	4639      	mov	r1, r7
 800af36:	462a      	mov	r2, r5
 800af38:	4620      	mov	r0, r4
 800af3a:	f000 fc71 	bl	800b820 <__lshift>
 800af3e:	4607      	mov	r7, r0
 800af40:	f1b8 0f00 	cmp.w	r8, #0
 800af44:	d05b      	beq.n	800affe <_dtoa_r+0xa76>
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fa0f 	bl	800b36c <_Balloc>
 800af4e:	4605      	mov	r5, r0
 800af50:	b928      	cbnz	r0, 800af5e <_dtoa_r+0x9d6>
 800af52:	4b83      	ldr	r3, [pc, #524]	; (800b160 <_dtoa_r+0xbd8>)
 800af54:	4602      	mov	r2, r0
 800af56:	f240 21ef 	movw	r1, #751	; 0x2ef
 800af5a:	f7ff bb2e 	b.w	800a5ba <_dtoa_r+0x32>
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	3202      	adds	r2, #2
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	f107 010c 	add.w	r1, r7, #12
 800af68:	300c      	adds	r0, #12
 800af6a:	f7ff fa52 	bl	800a412 <memcpy>
 800af6e:	2201      	movs	r2, #1
 800af70:	4629      	mov	r1, r5
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fc54 	bl	800b820 <__lshift>
 800af78:	9b00      	ldr	r3, [sp, #0]
 800af7a:	3301      	adds	r3, #1
 800af7c:	9304      	str	r3, [sp, #16]
 800af7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af82:	4413      	add	r3, r2
 800af84:	9308      	str	r3, [sp, #32]
 800af86:	9b02      	ldr	r3, [sp, #8]
 800af88:	f003 0301 	and.w	r3, r3, #1
 800af8c:	46b8      	mov	r8, r7
 800af8e:	9306      	str	r3, [sp, #24]
 800af90:	4607      	mov	r7, r0
 800af92:	9b04      	ldr	r3, [sp, #16]
 800af94:	4631      	mov	r1, r6
 800af96:	3b01      	subs	r3, #1
 800af98:	4650      	mov	r0, sl
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	f7ff fa6c 	bl	800a478 <quorem>
 800afa0:	4641      	mov	r1, r8
 800afa2:	9002      	str	r0, [sp, #8]
 800afa4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800afa8:	4650      	mov	r0, sl
 800afaa:	f000 fca5 	bl	800b8f8 <__mcmp>
 800afae:	463a      	mov	r2, r7
 800afb0:	9005      	str	r0, [sp, #20]
 800afb2:	4631      	mov	r1, r6
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fcbb 	bl	800b930 <__mdiff>
 800afba:	68c2      	ldr	r2, [r0, #12]
 800afbc:	4605      	mov	r5, r0
 800afbe:	bb02      	cbnz	r2, 800b002 <_dtoa_r+0xa7a>
 800afc0:	4601      	mov	r1, r0
 800afc2:	4650      	mov	r0, sl
 800afc4:	f000 fc98 	bl	800b8f8 <__mcmp>
 800afc8:	4602      	mov	r2, r0
 800afca:	4629      	mov	r1, r5
 800afcc:	4620      	mov	r0, r4
 800afce:	9209      	str	r2, [sp, #36]	; 0x24
 800afd0:	f000 fa0c 	bl	800b3ec <_Bfree>
 800afd4:	9b07      	ldr	r3, [sp, #28]
 800afd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afd8:	9d04      	ldr	r5, [sp, #16]
 800afda:	ea43 0102 	orr.w	r1, r3, r2
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	4319      	orrs	r1, r3
 800afe2:	d110      	bne.n	800b006 <_dtoa_r+0xa7e>
 800afe4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800afe8:	d029      	beq.n	800b03e <_dtoa_r+0xab6>
 800afea:	9b05      	ldr	r3, [sp, #20]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dd02      	ble.n	800aff6 <_dtoa_r+0xa6e>
 800aff0:	9b02      	ldr	r3, [sp, #8]
 800aff2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aff6:	9b01      	ldr	r3, [sp, #4]
 800aff8:	f883 9000 	strb.w	r9, [r3]
 800affc:	e774      	b.n	800aee8 <_dtoa_r+0x960>
 800affe:	4638      	mov	r0, r7
 800b000:	e7ba      	b.n	800af78 <_dtoa_r+0x9f0>
 800b002:	2201      	movs	r2, #1
 800b004:	e7e1      	b.n	800afca <_dtoa_r+0xa42>
 800b006:	9b05      	ldr	r3, [sp, #20]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	db04      	blt.n	800b016 <_dtoa_r+0xa8e>
 800b00c:	9907      	ldr	r1, [sp, #28]
 800b00e:	430b      	orrs	r3, r1
 800b010:	9906      	ldr	r1, [sp, #24]
 800b012:	430b      	orrs	r3, r1
 800b014:	d120      	bne.n	800b058 <_dtoa_r+0xad0>
 800b016:	2a00      	cmp	r2, #0
 800b018:	dded      	ble.n	800aff6 <_dtoa_r+0xa6e>
 800b01a:	4651      	mov	r1, sl
 800b01c:	2201      	movs	r2, #1
 800b01e:	4620      	mov	r0, r4
 800b020:	f000 fbfe 	bl	800b820 <__lshift>
 800b024:	4631      	mov	r1, r6
 800b026:	4682      	mov	sl, r0
 800b028:	f000 fc66 	bl	800b8f8 <__mcmp>
 800b02c:	2800      	cmp	r0, #0
 800b02e:	dc03      	bgt.n	800b038 <_dtoa_r+0xab0>
 800b030:	d1e1      	bne.n	800aff6 <_dtoa_r+0xa6e>
 800b032:	f019 0f01 	tst.w	r9, #1
 800b036:	d0de      	beq.n	800aff6 <_dtoa_r+0xa6e>
 800b038:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b03c:	d1d8      	bne.n	800aff0 <_dtoa_r+0xa68>
 800b03e:	9a01      	ldr	r2, [sp, #4]
 800b040:	2339      	movs	r3, #57	; 0x39
 800b042:	7013      	strb	r3, [r2, #0]
 800b044:	462b      	mov	r3, r5
 800b046:	461d      	mov	r5, r3
 800b048:	3b01      	subs	r3, #1
 800b04a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b04e:	2a39      	cmp	r2, #57	; 0x39
 800b050:	d06c      	beq.n	800b12c <_dtoa_r+0xba4>
 800b052:	3201      	adds	r2, #1
 800b054:	701a      	strb	r2, [r3, #0]
 800b056:	e747      	b.n	800aee8 <_dtoa_r+0x960>
 800b058:	2a00      	cmp	r2, #0
 800b05a:	dd07      	ble.n	800b06c <_dtoa_r+0xae4>
 800b05c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b060:	d0ed      	beq.n	800b03e <_dtoa_r+0xab6>
 800b062:	9a01      	ldr	r2, [sp, #4]
 800b064:	f109 0301 	add.w	r3, r9, #1
 800b068:	7013      	strb	r3, [r2, #0]
 800b06a:	e73d      	b.n	800aee8 <_dtoa_r+0x960>
 800b06c:	9b04      	ldr	r3, [sp, #16]
 800b06e:	9a08      	ldr	r2, [sp, #32]
 800b070:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b074:	4293      	cmp	r3, r2
 800b076:	d043      	beq.n	800b100 <_dtoa_r+0xb78>
 800b078:	4651      	mov	r1, sl
 800b07a:	2300      	movs	r3, #0
 800b07c:	220a      	movs	r2, #10
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 f9d6 	bl	800b430 <__multadd>
 800b084:	45b8      	cmp	r8, r7
 800b086:	4682      	mov	sl, r0
 800b088:	f04f 0300 	mov.w	r3, #0
 800b08c:	f04f 020a 	mov.w	r2, #10
 800b090:	4641      	mov	r1, r8
 800b092:	4620      	mov	r0, r4
 800b094:	d107      	bne.n	800b0a6 <_dtoa_r+0xb1e>
 800b096:	f000 f9cb 	bl	800b430 <__multadd>
 800b09a:	4680      	mov	r8, r0
 800b09c:	4607      	mov	r7, r0
 800b09e:	9b04      	ldr	r3, [sp, #16]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	9304      	str	r3, [sp, #16]
 800b0a4:	e775      	b.n	800af92 <_dtoa_r+0xa0a>
 800b0a6:	f000 f9c3 	bl	800b430 <__multadd>
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	4680      	mov	r8, r0
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	220a      	movs	r2, #10
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 f9bc 	bl	800b430 <__multadd>
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	e7f0      	b.n	800b09e <_dtoa_r+0xb16>
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	9d00      	ldr	r5, [sp, #0]
 800b0c2:	4631      	mov	r1, r6
 800b0c4:	4650      	mov	r0, sl
 800b0c6:	f7ff f9d7 	bl	800a478 <quorem>
 800b0ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0ce:	9b00      	ldr	r3, [sp, #0]
 800b0d0:	f805 9b01 	strb.w	r9, [r5], #1
 800b0d4:	1aea      	subs	r2, r5, r3
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	dd07      	ble.n	800b0ec <_dtoa_r+0xb64>
 800b0dc:	4651      	mov	r1, sl
 800b0de:	2300      	movs	r3, #0
 800b0e0:	220a      	movs	r2, #10
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 f9a4 	bl	800b430 <__multadd>
 800b0e8:	4682      	mov	sl, r0
 800b0ea:	e7ea      	b.n	800b0c2 <_dtoa_r+0xb3a>
 800b0ec:	9b01      	ldr	r3, [sp, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	bfc8      	it	gt
 800b0f2:	461d      	movgt	r5, r3
 800b0f4:	9b00      	ldr	r3, [sp, #0]
 800b0f6:	bfd8      	it	le
 800b0f8:	2501      	movle	r5, #1
 800b0fa:	441d      	add	r5, r3
 800b0fc:	f04f 0800 	mov.w	r8, #0
 800b100:	4651      	mov	r1, sl
 800b102:	2201      	movs	r2, #1
 800b104:	4620      	mov	r0, r4
 800b106:	f000 fb8b 	bl	800b820 <__lshift>
 800b10a:	4631      	mov	r1, r6
 800b10c:	4682      	mov	sl, r0
 800b10e:	f000 fbf3 	bl	800b8f8 <__mcmp>
 800b112:	2800      	cmp	r0, #0
 800b114:	dc96      	bgt.n	800b044 <_dtoa_r+0xabc>
 800b116:	d102      	bne.n	800b11e <_dtoa_r+0xb96>
 800b118:	f019 0f01 	tst.w	r9, #1
 800b11c:	d192      	bne.n	800b044 <_dtoa_r+0xabc>
 800b11e:	462b      	mov	r3, r5
 800b120:	461d      	mov	r5, r3
 800b122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b126:	2a30      	cmp	r2, #48	; 0x30
 800b128:	d0fa      	beq.n	800b120 <_dtoa_r+0xb98>
 800b12a:	e6dd      	b.n	800aee8 <_dtoa_r+0x960>
 800b12c:	9a00      	ldr	r2, [sp, #0]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d189      	bne.n	800b046 <_dtoa_r+0xabe>
 800b132:	f10b 0b01 	add.w	fp, fp, #1
 800b136:	2331      	movs	r3, #49	; 0x31
 800b138:	e796      	b.n	800b068 <_dtoa_r+0xae0>
 800b13a:	4b0a      	ldr	r3, [pc, #40]	; (800b164 <_dtoa_r+0xbdc>)
 800b13c:	f7ff ba99 	b.w	800a672 <_dtoa_r+0xea>
 800b140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b142:	2b00      	cmp	r3, #0
 800b144:	f47f aa6d 	bne.w	800a622 <_dtoa_r+0x9a>
 800b148:	4b07      	ldr	r3, [pc, #28]	; (800b168 <_dtoa_r+0xbe0>)
 800b14a:	f7ff ba92 	b.w	800a672 <_dtoa_r+0xea>
 800b14e:	9b01      	ldr	r3, [sp, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	dcb5      	bgt.n	800b0c0 <_dtoa_r+0xb38>
 800b154:	9b07      	ldr	r3, [sp, #28]
 800b156:	2b02      	cmp	r3, #2
 800b158:	f73f aeb1 	bgt.w	800aebe <_dtoa_r+0x936>
 800b15c:	e7b0      	b.n	800b0c0 <_dtoa_r+0xb38>
 800b15e:	bf00      	nop
 800b160:	0800ea3c 	.word	0x0800ea3c
 800b164:	0800e972 	.word	0x0800e972
 800b168:	0800e9d7 	.word	0x0800e9d7

0800b16c <_free_r>:
 800b16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b16e:	2900      	cmp	r1, #0
 800b170:	d044      	beq.n	800b1fc <_free_r+0x90>
 800b172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b176:	9001      	str	r0, [sp, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f1a1 0404 	sub.w	r4, r1, #4
 800b17e:	bfb8      	it	lt
 800b180:	18e4      	addlt	r4, r4, r3
 800b182:	f000 f8e7 	bl	800b354 <__malloc_lock>
 800b186:	4a1e      	ldr	r2, [pc, #120]	; (800b200 <_free_r+0x94>)
 800b188:	9801      	ldr	r0, [sp, #4]
 800b18a:	6813      	ldr	r3, [r2, #0]
 800b18c:	b933      	cbnz	r3, 800b19c <_free_r+0x30>
 800b18e:	6063      	str	r3, [r4, #4]
 800b190:	6014      	str	r4, [r2, #0]
 800b192:	b003      	add	sp, #12
 800b194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b198:	f000 b8e2 	b.w	800b360 <__malloc_unlock>
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	d908      	bls.n	800b1b2 <_free_r+0x46>
 800b1a0:	6825      	ldr	r5, [r4, #0]
 800b1a2:	1961      	adds	r1, r4, r5
 800b1a4:	428b      	cmp	r3, r1
 800b1a6:	bf01      	itttt	eq
 800b1a8:	6819      	ldreq	r1, [r3, #0]
 800b1aa:	685b      	ldreq	r3, [r3, #4]
 800b1ac:	1949      	addeq	r1, r1, r5
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	e7ed      	b.n	800b18e <_free_r+0x22>
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	b10b      	cbz	r3, 800b1bc <_free_r+0x50>
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	d9fa      	bls.n	800b1b2 <_free_r+0x46>
 800b1bc:	6811      	ldr	r1, [r2, #0]
 800b1be:	1855      	adds	r5, r2, r1
 800b1c0:	42a5      	cmp	r5, r4
 800b1c2:	d10b      	bne.n	800b1dc <_free_r+0x70>
 800b1c4:	6824      	ldr	r4, [r4, #0]
 800b1c6:	4421      	add	r1, r4
 800b1c8:	1854      	adds	r4, r2, r1
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	6011      	str	r1, [r2, #0]
 800b1ce:	d1e0      	bne.n	800b192 <_free_r+0x26>
 800b1d0:	681c      	ldr	r4, [r3, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	6053      	str	r3, [r2, #4]
 800b1d6:	440c      	add	r4, r1
 800b1d8:	6014      	str	r4, [r2, #0]
 800b1da:	e7da      	b.n	800b192 <_free_r+0x26>
 800b1dc:	d902      	bls.n	800b1e4 <_free_r+0x78>
 800b1de:	230c      	movs	r3, #12
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	e7d6      	b.n	800b192 <_free_r+0x26>
 800b1e4:	6825      	ldr	r5, [r4, #0]
 800b1e6:	1961      	adds	r1, r4, r5
 800b1e8:	428b      	cmp	r3, r1
 800b1ea:	bf04      	itt	eq
 800b1ec:	6819      	ldreq	r1, [r3, #0]
 800b1ee:	685b      	ldreq	r3, [r3, #4]
 800b1f0:	6063      	str	r3, [r4, #4]
 800b1f2:	bf04      	itt	eq
 800b1f4:	1949      	addeq	r1, r1, r5
 800b1f6:	6021      	streq	r1, [r4, #0]
 800b1f8:	6054      	str	r4, [r2, #4]
 800b1fa:	e7ca      	b.n	800b192 <_free_r+0x26>
 800b1fc:	b003      	add	sp, #12
 800b1fe:	bd30      	pop	{r4, r5, pc}
 800b200:	20004f00 	.word	0x20004f00

0800b204 <malloc>:
 800b204:	4b02      	ldr	r3, [pc, #8]	; (800b210 <malloc+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 b823 	b.w	800b254 <_malloc_r>
 800b20e:	bf00      	nop
 800b210:	200000b0 	.word	0x200000b0

0800b214 <sbrk_aligned>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	4e0e      	ldr	r6, [pc, #56]	; (800b250 <sbrk_aligned+0x3c>)
 800b218:	460c      	mov	r4, r1
 800b21a:	6831      	ldr	r1, [r6, #0]
 800b21c:	4605      	mov	r5, r0
 800b21e:	b911      	cbnz	r1, 800b226 <sbrk_aligned+0x12>
 800b220:	f001 fff4 	bl	800d20c <_sbrk_r>
 800b224:	6030      	str	r0, [r6, #0]
 800b226:	4621      	mov	r1, r4
 800b228:	4628      	mov	r0, r5
 800b22a:	f001 ffef 	bl	800d20c <_sbrk_r>
 800b22e:	1c43      	adds	r3, r0, #1
 800b230:	d00a      	beq.n	800b248 <sbrk_aligned+0x34>
 800b232:	1cc4      	adds	r4, r0, #3
 800b234:	f024 0403 	bic.w	r4, r4, #3
 800b238:	42a0      	cmp	r0, r4
 800b23a:	d007      	beq.n	800b24c <sbrk_aligned+0x38>
 800b23c:	1a21      	subs	r1, r4, r0
 800b23e:	4628      	mov	r0, r5
 800b240:	f001 ffe4 	bl	800d20c <_sbrk_r>
 800b244:	3001      	adds	r0, #1
 800b246:	d101      	bne.n	800b24c <sbrk_aligned+0x38>
 800b248:	f04f 34ff 	mov.w	r4, #4294967295
 800b24c:	4620      	mov	r0, r4
 800b24e:	bd70      	pop	{r4, r5, r6, pc}
 800b250:	20004f04 	.word	0x20004f04

0800b254 <_malloc_r>:
 800b254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b258:	1ccd      	adds	r5, r1, #3
 800b25a:	f025 0503 	bic.w	r5, r5, #3
 800b25e:	3508      	adds	r5, #8
 800b260:	2d0c      	cmp	r5, #12
 800b262:	bf38      	it	cc
 800b264:	250c      	movcc	r5, #12
 800b266:	2d00      	cmp	r5, #0
 800b268:	4607      	mov	r7, r0
 800b26a:	db01      	blt.n	800b270 <_malloc_r+0x1c>
 800b26c:	42a9      	cmp	r1, r5
 800b26e:	d905      	bls.n	800b27c <_malloc_r+0x28>
 800b270:	230c      	movs	r3, #12
 800b272:	603b      	str	r3, [r7, #0]
 800b274:	2600      	movs	r6, #0
 800b276:	4630      	mov	r0, r6
 800b278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b27c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b350 <_malloc_r+0xfc>
 800b280:	f000 f868 	bl	800b354 <__malloc_lock>
 800b284:	f8d8 3000 	ldr.w	r3, [r8]
 800b288:	461c      	mov	r4, r3
 800b28a:	bb5c      	cbnz	r4, 800b2e4 <_malloc_r+0x90>
 800b28c:	4629      	mov	r1, r5
 800b28e:	4638      	mov	r0, r7
 800b290:	f7ff ffc0 	bl	800b214 <sbrk_aligned>
 800b294:	1c43      	adds	r3, r0, #1
 800b296:	4604      	mov	r4, r0
 800b298:	d155      	bne.n	800b346 <_malloc_r+0xf2>
 800b29a:	f8d8 4000 	ldr.w	r4, [r8]
 800b29e:	4626      	mov	r6, r4
 800b2a0:	2e00      	cmp	r6, #0
 800b2a2:	d145      	bne.n	800b330 <_malloc_r+0xdc>
 800b2a4:	2c00      	cmp	r4, #0
 800b2a6:	d048      	beq.n	800b33a <_malloc_r+0xe6>
 800b2a8:	6823      	ldr	r3, [r4, #0]
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	eb04 0903 	add.w	r9, r4, r3
 800b2b2:	f001 ffab 	bl	800d20c <_sbrk_r>
 800b2b6:	4581      	cmp	r9, r0
 800b2b8:	d13f      	bne.n	800b33a <_malloc_r+0xe6>
 800b2ba:	6821      	ldr	r1, [r4, #0]
 800b2bc:	1a6d      	subs	r5, r5, r1
 800b2be:	4629      	mov	r1, r5
 800b2c0:	4638      	mov	r0, r7
 800b2c2:	f7ff ffa7 	bl	800b214 <sbrk_aligned>
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d037      	beq.n	800b33a <_malloc_r+0xe6>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	442b      	add	r3, r5
 800b2ce:	6023      	str	r3, [r4, #0]
 800b2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d038      	beq.n	800b34a <_malloc_r+0xf6>
 800b2d8:	685a      	ldr	r2, [r3, #4]
 800b2da:	42a2      	cmp	r2, r4
 800b2dc:	d12b      	bne.n	800b336 <_malloc_r+0xe2>
 800b2de:	2200      	movs	r2, #0
 800b2e0:	605a      	str	r2, [r3, #4]
 800b2e2:	e00f      	b.n	800b304 <_malloc_r+0xb0>
 800b2e4:	6822      	ldr	r2, [r4, #0]
 800b2e6:	1b52      	subs	r2, r2, r5
 800b2e8:	d41f      	bmi.n	800b32a <_malloc_r+0xd6>
 800b2ea:	2a0b      	cmp	r2, #11
 800b2ec:	d917      	bls.n	800b31e <_malloc_r+0xca>
 800b2ee:	1961      	adds	r1, r4, r5
 800b2f0:	42a3      	cmp	r3, r4
 800b2f2:	6025      	str	r5, [r4, #0]
 800b2f4:	bf18      	it	ne
 800b2f6:	6059      	strne	r1, [r3, #4]
 800b2f8:	6863      	ldr	r3, [r4, #4]
 800b2fa:	bf08      	it	eq
 800b2fc:	f8c8 1000 	streq.w	r1, [r8]
 800b300:	5162      	str	r2, [r4, r5]
 800b302:	604b      	str	r3, [r1, #4]
 800b304:	4638      	mov	r0, r7
 800b306:	f104 060b 	add.w	r6, r4, #11
 800b30a:	f000 f829 	bl	800b360 <__malloc_unlock>
 800b30e:	f026 0607 	bic.w	r6, r6, #7
 800b312:	1d23      	adds	r3, r4, #4
 800b314:	1af2      	subs	r2, r6, r3
 800b316:	d0ae      	beq.n	800b276 <_malloc_r+0x22>
 800b318:	1b9b      	subs	r3, r3, r6
 800b31a:	50a3      	str	r3, [r4, r2]
 800b31c:	e7ab      	b.n	800b276 <_malloc_r+0x22>
 800b31e:	42a3      	cmp	r3, r4
 800b320:	6862      	ldr	r2, [r4, #4]
 800b322:	d1dd      	bne.n	800b2e0 <_malloc_r+0x8c>
 800b324:	f8c8 2000 	str.w	r2, [r8]
 800b328:	e7ec      	b.n	800b304 <_malloc_r+0xb0>
 800b32a:	4623      	mov	r3, r4
 800b32c:	6864      	ldr	r4, [r4, #4]
 800b32e:	e7ac      	b.n	800b28a <_malloc_r+0x36>
 800b330:	4634      	mov	r4, r6
 800b332:	6876      	ldr	r6, [r6, #4]
 800b334:	e7b4      	b.n	800b2a0 <_malloc_r+0x4c>
 800b336:	4613      	mov	r3, r2
 800b338:	e7cc      	b.n	800b2d4 <_malloc_r+0x80>
 800b33a:	230c      	movs	r3, #12
 800b33c:	603b      	str	r3, [r7, #0]
 800b33e:	4638      	mov	r0, r7
 800b340:	f000 f80e 	bl	800b360 <__malloc_unlock>
 800b344:	e797      	b.n	800b276 <_malloc_r+0x22>
 800b346:	6025      	str	r5, [r4, #0]
 800b348:	e7dc      	b.n	800b304 <_malloc_r+0xb0>
 800b34a:	605b      	str	r3, [r3, #4]
 800b34c:	deff      	udf	#255	; 0xff
 800b34e:	bf00      	nop
 800b350:	20004f00 	.word	0x20004f00

0800b354 <__malloc_lock>:
 800b354:	4801      	ldr	r0, [pc, #4]	; (800b35c <__malloc_lock+0x8>)
 800b356:	f7ff b85a 	b.w	800a40e <__retarget_lock_acquire_recursive>
 800b35a:	bf00      	nop
 800b35c:	20004efc 	.word	0x20004efc

0800b360 <__malloc_unlock>:
 800b360:	4801      	ldr	r0, [pc, #4]	; (800b368 <__malloc_unlock+0x8>)
 800b362:	f7ff b855 	b.w	800a410 <__retarget_lock_release_recursive>
 800b366:	bf00      	nop
 800b368:	20004efc 	.word	0x20004efc

0800b36c <_Balloc>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	69c6      	ldr	r6, [r0, #28]
 800b370:	4604      	mov	r4, r0
 800b372:	460d      	mov	r5, r1
 800b374:	b976      	cbnz	r6, 800b394 <_Balloc+0x28>
 800b376:	2010      	movs	r0, #16
 800b378:	f7ff ff44 	bl	800b204 <malloc>
 800b37c:	4602      	mov	r2, r0
 800b37e:	61e0      	str	r0, [r4, #28]
 800b380:	b920      	cbnz	r0, 800b38c <_Balloc+0x20>
 800b382:	4b18      	ldr	r3, [pc, #96]	; (800b3e4 <_Balloc+0x78>)
 800b384:	4818      	ldr	r0, [pc, #96]	; (800b3e8 <_Balloc+0x7c>)
 800b386:	216b      	movs	r1, #107	; 0x6b
 800b388:	f7ff f858 	bl	800a43c <__assert_func>
 800b38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b390:	6006      	str	r6, [r0, #0]
 800b392:	60c6      	str	r6, [r0, #12]
 800b394:	69e6      	ldr	r6, [r4, #28]
 800b396:	68f3      	ldr	r3, [r6, #12]
 800b398:	b183      	cbz	r3, 800b3bc <_Balloc+0x50>
 800b39a:	69e3      	ldr	r3, [r4, #28]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3a2:	b9b8      	cbnz	r0, 800b3d4 <_Balloc+0x68>
 800b3a4:	2101      	movs	r1, #1
 800b3a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b3aa:	1d72      	adds	r2, r6, #5
 800b3ac:	0092      	lsls	r2, r2, #2
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f001 ff4d 	bl	800d24e <_calloc_r>
 800b3b4:	b160      	cbz	r0, 800b3d0 <_Balloc+0x64>
 800b3b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3ba:	e00e      	b.n	800b3da <_Balloc+0x6e>
 800b3bc:	2221      	movs	r2, #33	; 0x21
 800b3be:	2104      	movs	r1, #4
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f001 ff44 	bl	800d24e <_calloc_r>
 800b3c6:	69e3      	ldr	r3, [r4, #28]
 800b3c8:	60f0      	str	r0, [r6, #12]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e4      	bne.n	800b39a <_Balloc+0x2e>
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	6802      	ldr	r2, [r0, #0]
 800b3d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3e0:	e7f7      	b.n	800b3d2 <_Balloc+0x66>
 800b3e2:	bf00      	nop
 800b3e4:	0800e8f3 	.word	0x0800e8f3
 800b3e8:	0800ea4d 	.word	0x0800ea4d

0800b3ec <_Bfree>:
 800b3ec:	b570      	push	{r4, r5, r6, lr}
 800b3ee:	69c6      	ldr	r6, [r0, #28]
 800b3f0:	4605      	mov	r5, r0
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	b976      	cbnz	r6, 800b414 <_Bfree+0x28>
 800b3f6:	2010      	movs	r0, #16
 800b3f8:	f7ff ff04 	bl	800b204 <malloc>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	61e8      	str	r0, [r5, #28]
 800b400:	b920      	cbnz	r0, 800b40c <_Bfree+0x20>
 800b402:	4b09      	ldr	r3, [pc, #36]	; (800b428 <_Bfree+0x3c>)
 800b404:	4809      	ldr	r0, [pc, #36]	; (800b42c <_Bfree+0x40>)
 800b406:	218f      	movs	r1, #143	; 0x8f
 800b408:	f7ff f818 	bl	800a43c <__assert_func>
 800b40c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b410:	6006      	str	r6, [r0, #0]
 800b412:	60c6      	str	r6, [r0, #12]
 800b414:	b13c      	cbz	r4, 800b426 <_Bfree+0x3a>
 800b416:	69eb      	ldr	r3, [r5, #28]
 800b418:	6862      	ldr	r2, [r4, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b420:	6021      	str	r1, [r4, #0]
 800b422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	0800e8f3 	.word	0x0800e8f3
 800b42c:	0800ea4d 	.word	0x0800ea4d

0800b430 <__multadd>:
 800b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b434:	690d      	ldr	r5, [r1, #16]
 800b436:	4607      	mov	r7, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	461e      	mov	r6, r3
 800b43c:	f101 0c14 	add.w	ip, r1, #20
 800b440:	2000      	movs	r0, #0
 800b442:	f8dc 3000 	ldr.w	r3, [ip]
 800b446:	b299      	uxth	r1, r3
 800b448:	fb02 6101 	mla	r1, r2, r1, r6
 800b44c:	0c1e      	lsrs	r6, r3, #16
 800b44e:	0c0b      	lsrs	r3, r1, #16
 800b450:	fb02 3306 	mla	r3, r2, r6, r3
 800b454:	b289      	uxth	r1, r1
 800b456:	3001      	adds	r0, #1
 800b458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b45c:	4285      	cmp	r5, r0
 800b45e:	f84c 1b04 	str.w	r1, [ip], #4
 800b462:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b466:	dcec      	bgt.n	800b442 <__multadd+0x12>
 800b468:	b30e      	cbz	r6, 800b4ae <__multadd+0x7e>
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	42ab      	cmp	r3, r5
 800b46e:	dc19      	bgt.n	800b4a4 <__multadd+0x74>
 800b470:	6861      	ldr	r1, [r4, #4]
 800b472:	4638      	mov	r0, r7
 800b474:	3101      	adds	r1, #1
 800b476:	f7ff ff79 	bl	800b36c <_Balloc>
 800b47a:	4680      	mov	r8, r0
 800b47c:	b928      	cbnz	r0, 800b48a <__multadd+0x5a>
 800b47e:	4602      	mov	r2, r0
 800b480:	4b0c      	ldr	r3, [pc, #48]	; (800b4b4 <__multadd+0x84>)
 800b482:	480d      	ldr	r0, [pc, #52]	; (800b4b8 <__multadd+0x88>)
 800b484:	21ba      	movs	r1, #186	; 0xba
 800b486:	f7fe ffd9 	bl	800a43c <__assert_func>
 800b48a:	6922      	ldr	r2, [r4, #16]
 800b48c:	3202      	adds	r2, #2
 800b48e:	f104 010c 	add.w	r1, r4, #12
 800b492:	0092      	lsls	r2, r2, #2
 800b494:	300c      	adds	r0, #12
 800b496:	f7fe ffbc 	bl	800a412 <memcpy>
 800b49a:	4621      	mov	r1, r4
 800b49c:	4638      	mov	r0, r7
 800b49e:	f7ff ffa5 	bl	800b3ec <_Bfree>
 800b4a2:	4644      	mov	r4, r8
 800b4a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	615e      	str	r6, [r3, #20]
 800b4ac:	6125      	str	r5, [r4, #16]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b4:	0800ea3c 	.word	0x0800ea3c
 800b4b8:	0800ea4d 	.word	0x0800ea4d

0800b4bc <__s2b>:
 800b4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	4615      	mov	r5, r2
 800b4c4:	461f      	mov	r7, r3
 800b4c6:	2209      	movs	r2, #9
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	db09      	blt.n	800b4ec <__s2b+0x30>
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7ff ff47 	bl	800b36c <_Balloc>
 800b4de:	b940      	cbnz	r0, 800b4f2 <__s2b+0x36>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	4b19      	ldr	r3, [pc, #100]	; (800b548 <__s2b+0x8c>)
 800b4e4:	4819      	ldr	r0, [pc, #100]	; (800b54c <__s2b+0x90>)
 800b4e6:	21d3      	movs	r1, #211	; 0xd3
 800b4e8:	f7fe ffa8 	bl	800a43c <__assert_func>
 800b4ec:	0052      	lsls	r2, r2, #1
 800b4ee:	3101      	adds	r1, #1
 800b4f0:	e7f0      	b.n	800b4d4 <__s2b+0x18>
 800b4f2:	9b08      	ldr	r3, [sp, #32]
 800b4f4:	6143      	str	r3, [r0, #20]
 800b4f6:	2d09      	cmp	r5, #9
 800b4f8:	f04f 0301 	mov.w	r3, #1
 800b4fc:	6103      	str	r3, [r0, #16]
 800b4fe:	dd16      	ble.n	800b52e <__s2b+0x72>
 800b500:	f104 0909 	add.w	r9, r4, #9
 800b504:	46c8      	mov	r8, r9
 800b506:	442c      	add	r4, r5
 800b508:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b50c:	4601      	mov	r1, r0
 800b50e:	3b30      	subs	r3, #48	; 0x30
 800b510:	220a      	movs	r2, #10
 800b512:	4630      	mov	r0, r6
 800b514:	f7ff ff8c 	bl	800b430 <__multadd>
 800b518:	45a0      	cmp	r8, r4
 800b51a:	d1f5      	bne.n	800b508 <__s2b+0x4c>
 800b51c:	f1a5 0408 	sub.w	r4, r5, #8
 800b520:	444c      	add	r4, r9
 800b522:	1b2d      	subs	r5, r5, r4
 800b524:	1963      	adds	r3, r4, r5
 800b526:	42bb      	cmp	r3, r7
 800b528:	db04      	blt.n	800b534 <__s2b+0x78>
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	340a      	adds	r4, #10
 800b530:	2509      	movs	r5, #9
 800b532:	e7f6      	b.n	800b522 <__s2b+0x66>
 800b534:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b538:	4601      	mov	r1, r0
 800b53a:	3b30      	subs	r3, #48	; 0x30
 800b53c:	220a      	movs	r2, #10
 800b53e:	4630      	mov	r0, r6
 800b540:	f7ff ff76 	bl	800b430 <__multadd>
 800b544:	e7ee      	b.n	800b524 <__s2b+0x68>
 800b546:	bf00      	nop
 800b548:	0800ea3c 	.word	0x0800ea3c
 800b54c:	0800ea4d 	.word	0x0800ea4d

0800b550 <__hi0bits>:
 800b550:	0c03      	lsrs	r3, r0, #16
 800b552:	041b      	lsls	r3, r3, #16
 800b554:	b9d3      	cbnz	r3, 800b58c <__hi0bits+0x3c>
 800b556:	0400      	lsls	r0, r0, #16
 800b558:	2310      	movs	r3, #16
 800b55a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b55e:	bf04      	itt	eq
 800b560:	0200      	lsleq	r0, r0, #8
 800b562:	3308      	addeq	r3, #8
 800b564:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b568:	bf04      	itt	eq
 800b56a:	0100      	lsleq	r0, r0, #4
 800b56c:	3304      	addeq	r3, #4
 800b56e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b572:	bf04      	itt	eq
 800b574:	0080      	lsleq	r0, r0, #2
 800b576:	3302      	addeq	r3, #2
 800b578:	2800      	cmp	r0, #0
 800b57a:	db05      	blt.n	800b588 <__hi0bits+0x38>
 800b57c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b580:	f103 0301 	add.w	r3, r3, #1
 800b584:	bf08      	it	eq
 800b586:	2320      	moveq	r3, #32
 800b588:	4618      	mov	r0, r3
 800b58a:	4770      	bx	lr
 800b58c:	2300      	movs	r3, #0
 800b58e:	e7e4      	b.n	800b55a <__hi0bits+0xa>

0800b590 <__lo0bits>:
 800b590:	6803      	ldr	r3, [r0, #0]
 800b592:	f013 0207 	ands.w	r2, r3, #7
 800b596:	d00c      	beq.n	800b5b2 <__lo0bits+0x22>
 800b598:	07d9      	lsls	r1, r3, #31
 800b59a:	d422      	bmi.n	800b5e2 <__lo0bits+0x52>
 800b59c:	079a      	lsls	r2, r3, #30
 800b59e:	bf49      	itett	mi
 800b5a0:	085b      	lsrmi	r3, r3, #1
 800b5a2:	089b      	lsrpl	r3, r3, #2
 800b5a4:	6003      	strmi	r3, [r0, #0]
 800b5a6:	2201      	movmi	r2, #1
 800b5a8:	bf5c      	itt	pl
 800b5aa:	6003      	strpl	r3, [r0, #0]
 800b5ac:	2202      	movpl	r2, #2
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	4770      	bx	lr
 800b5b2:	b299      	uxth	r1, r3
 800b5b4:	b909      	cbnz	r1, 800b5ba <__lo0bits+0x2a>
 800b5b6:	0c1b      	lsrs	r3, r3, #16
 800b5b8:	2210      	movs	r2, #16
 800b5ba:	b2d9      	uxtb	r1, r3
 800b5bc:	b909      	cbnz	r1, 800b5c2 <__lo0bits+0x32>
 800b5be:	3208      	adds	r2, #8
 800b5c0:	0a1b      	lsrs	r3, r3, #8
 800b5c2:	0719      	lsls	r1, r3, #28
 800b5c4:	bf04      	itt	eq
 800b5c6:	091b      	lsreq	r3, r3, #4
 800b5c8:	3204      	addeq	r2, #4
 800b5ca:	0799      	lsls	r1, r3, #30
 800b5cc:	bf04      	itt	eq
 800b5ce:	089b      	lsreq	r3, r3, #2
 800b5d0:	3202      	addeq	r2, #2
 800b5d2:	07d9      	lsls	r1, r3, #31
 800b5d4:	d403      	bmi.n	800b5de <__lo0bits+0x4e>
 800b5d6:	085b      	lsrs	r3, r3, #1
 800b5d8:	f102 0201 	add.w	r2, r2, #1
 800b5dc:	d003      	beq.n	800b5e6 <__lo0bits+0x56>
 800b5de:	6003      	str	r3, [r0, #0]
 800b5e0:	e7e5      	b.n	800b5ae <__lo0bits+0x1e>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	e7e3      	b.n	800b5ae <__lo0bits+0x1e>
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	e7e1      	b.n	800b5ae <__lo0bits+0x1e>
	...

0800b5ec <__i2b>:
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	460c      	mov	r4, r1
 800b5f0:	2101      	movs	r1, #1
 800b5f2:	f7ff febb 	bl	800b36c <_Balloc>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	b928      	cbnz	r0, 800b606 <__i2b+0x1a>
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <__i2b+0x24>)
 800b5fc:	4805      	ldr	r0, [pc, #20]	; (800b614 <__i2b+0x28>)
 800b5fe:	f240 1145 	movw	r1, #325	; 0x145
 800b602:	f7fe ff1b 	bl	800a43c <__assert_func>
 800b606:	2301      	movs	r3, #1
 800b608:	6144      	str	r4, [r0, #20]
 800b60a:	6103      	str	r3, [r0, #16]
 800b60c:	bd10      	pop	{r4, pc}
 800b60e:	bf00      	nop
 800b610:	0800ea3c 	.word	0x0800ea3c
 800b614:	0800ea4d 	.word	0x0800ea4d

0800b618 <__multiply>:
 800b618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4691      	mov	r9, r2
 800b61e:	690a      	ldr	r2, [r1, #16]
 800b620:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b624:	429a      	cmp	r2, r3
 800b626:	bfb8      	it	lt
 800b628:	460b      	movlt	r3, r1
 800b62a:	460c      	mov	r4, r1
 800b62c:	bfbc      	itt	lt
 800b62e:	464c      	movlt	r4, r9
 800b630:	4699      	movlt	r9, r3
 800b632:	6927      	ldr	r7, [r4, #16]
 800b634:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	6861      	ldr	r1, [r4, #4]
 800b63c:	eb07 060a 	add.w	r6, r7, sl
 800b640:	42b3      	cmp	r3, r6
 800b642:	b085      	sub	sp, #20
 800b644:	bfb8      	it	lt
 800b646:	3101      	addlt	r1, #1
 800b648:	f7ff fe90 	bl	800b36c <_Balloc>
 800b64c:	b930      	cbnz	r0, 800b65c <__multiply+0x44>
 800b64e:	4602      	mov	r2, r0
 800b650:	4b44      	ldr	r3, [pc, #272]	; (800b764 <__multiply+0x14c>)
 800b652:	4845      	ldr	r0, [pc, #276]	; (800b768 <__multiply+0x150>)
 800b654:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b658:	f7fe fef0 	bl	800a43c <__assert_func>
 800b65c:	f100 0514 	add.w	r5, r0, #20
 800b660:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b664:	462b      	mov	r3, r5
 800b666:	2200      	movs	r2, #0
 800b668:	4543      	cmp	r3, r8
 800b66a:	d321      	bcc.n	800b6b0 <__multiply+0x98>
 800b66c:	f104 0314 	add.w	r3, r4, #20
 800b670:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b674:	f109 0314 	add.w	r3, r9, #20
 800b678:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b67c:	9202      	str	r2, [sp, #8]
 800b67e:	1b3a      	subs	r2, r7, r4
 800b680:	3a15      	subs	r2, #21
 800b682:	f022 0203 	bic.w	r2, r2, #3
 800b686:	3204      	adds	r2, #4
 800b688:	f104 0115 	add.w	r1, r4, #21
 800b68c:	428f      	cmp	r7, r1
 800b68e:	bf38      	it	cc
 800b690:	2204      	movcc	r2, #4
 800b692:	9201      	str	r2, [sp, #4]
 800b694:	9a02      	ldr	r2, [sp, #8]
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d80c      	bhi.n	800b6b6 <__multiply+0x9e>
 800b69c:	2e00      	cmp	r6, #0
 800b69e:	dd03      	ble.n	800b6a8 <__multiply+0x90>
 800b6a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d05b      	beq.n	800b760 <__multiply+0x148>
 800b6a8:	6106      	str	r6, [r0, #16]
 800b6aa:	b005      	add	sp, #20
 800b6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b0:	f843 2b04 	str.w	r2, [r3], #4
 800b6b4:	e7d8      	b.n	800b668 <__multiply+0x50>
 800b6b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6ba:	f1ba 0f00 	cmp.w	sl, #0
 800b6be:	d024      	beq.n	800b70a <__multiply+0xf2>
 800b6c0:	f104 0e14 	add.w	lr, r4, #20
 800b6c4:	46a9      	mov	r9, r5
 800b6c6:	f04f 0c00 	mov.w	ip, #0
 800b6ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b6ce:	f8d9 1000 	ldr.w	r1, [r9]
 800b6d2:	fa1f fb82 	uxth.w	fp, r2
 800b6d6:	b289      	uxth	r1, r1
 800b6d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b6dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800b6e4:	4461      	add	r1, ip
 800b6e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800b6ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b6f2:	b289      	uxth	r1, r1
 800b6f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6f8:	4577      	cmp	r7, lr
 800b6fa:	f849 1b04 	str.w	r1, [r9], #4
 800b6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b702:	d8e2      	bhi.n	800b6ca <__multiply+0xb2>
 800b704:	9a01      	ldr	r2, [sp, #4]
 800b706:	f845 c002 	str.w	ip, [r5, r2]
 800b70a:	9a03      	ldr	r2, [sp, #12]
 800b70c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b710:	3304      	adds	r3, #4
 800b712:	f1b9 0f00 	cmp.w	r9, #0
 800b716:	d021      	beq.n	800b75c <__multiply+0x144>
 800b718:	6829      	ldr	r1, [r5, #0]
 800b71a:	f104 0c14 	add.w	ip, r4, #20
 800b71e:	46ae      	mov	lr, r5
 800b720:	f04f 0a00 	mov.w	sl, #0
 800b724:	f8bc b000 	ldrh.w	fp, [ip]
 800b728:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b72c:	fb09 220b 	mla	r2, r9, fp, r2
 800b730:	4452      	add	r2, sl
 800b732:	b289      	uxth	r1, r1
 800b734:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b738:	f84e 1b04 	str.w	r1, [lr], #4
 800b73c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b740:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b744:	f8be 1000 	ldrh.w	r1, [lr]
 800b748:	fb09 110a 	mla	r1, r9, sl, r1
 800b74c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b750:	4567      	cmp	r7, ip
 800b752:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b756:	d8e5      	bhi.n	800b724 <__multiply+0x10c>
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	50a9      	str	r1, [r5, r2]
 800b75c:	3504      	adds	r5, #4
 800b75e:	e799      	b.n	800b694 <__multiply+0x7c>
 800b760:	3e01      	subs	r6, #1
 800b762:	e79b      	b.n	800b69c <__multiply+0x84>
 800b764:	0800ea3c 	.word	0x0800ea3c
 800b768:	0800ea4d 	.word	0x0800ea4d

0800b76c <__pow5mult>:
 800b76c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b770:	4615      	mov	r5, r2
 800b772:	f012 0203 	ands.w	r2, r2, #3
 800b776:	4606      	mov	r6, r0
 800b778:	460f      	mov	r7, r1
 800b77a:	d007      	beq.n	800b78c <__pow5mult+0x20>
 800b77c:	4c25      	ldr	r4, [pc, #148]	; (800b814 <__pow5mult+0xa8>)
 800b77e:	3a01      	subs	r2, #1
 800b780:	2300      	movs	r3, #0
 800b782:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b786:	f7ff fe53 	bl	800b430 <__multadd>
 800b78a:	4607      	mov	r7, r0
 800b78c:	10ad      	asrs	r5, r5, #2
 800b78e:	d03d      	beq.n	800b80c <__pow5mult+0xa0>
 800b790:	69f4      	ldr	r4, [r6, #28]
 800b792:	b97c      	cbnz	r4, 800b7b4 <__pow5mult+0x48>
 800b794:	2010      	movs	r0, #16
 800b796:	f7ff fd35 	bl	800b204 <malloc>
 800b79a:	4602      	mov	r2, r0
 800b79c:	61f0      	str	r0, [r6, #28]
 800b79e:	b928      	cbnz	r0, 800b7ac <__pow5mult+0x40>
 800b7a0:	4b1d      	ldr	r3, [pc, #116]	; (800b818 <__pow5mult+0xac>)
 800b7a2:	481e      	ldr	r0, [pc, #120]	; (800b81c <__pow5mult+0xb0>)
 800b7a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7a8:	f7fe fe48 	bl	800a43c <__assert_func>
 800b7ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7b0:	6004      	str	r4, [r0, #0]
 800b7b2:	60c4      	str	r4, [r0, #12]
 800b7b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7bc:	b94c      	cbnz	r4, 800b7d2 <__pow5mult+0x66>
 800b7be:	f240 2171 	movw	r1, #625	; 0x271
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ff12 	bl	800b5ec <__i2b>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	6003      	str	r3, [r0, #0]
 800b7d2:	f04f 0900 	mov.w	r9, #0
 800b7d6:	07eb      	lsls	r3, r5, #31
 800b7d8:	d50a      	bpl.n	800b7f0 <__pow5mult+0x84>
 800b7da:	4639      	mov	r1, r7
 800b7dc:	4622      	mov	r2, r4
 800b7de:	4630      	mov	r0, r6
 800b7e0:	f7ff ff1a 	bl	800b618 <__multiply>
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	f7ff fdff 	bl	800b3ec <_Bfree>
 800b7ee:	4647      	mov	r7, r8
 800b7f0:	106d      	asrs	r5, r5, #1
 800b7f2:	d00b      	beq.n	800b80c <__pow5mult+0xa0>
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	b938      	cbnz	r0, 800b808 <__pow5mult+0x9c>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	4621      	mov	r1, r4
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	f7ff ff0b 	bl	800b618 <__multiply>
 800b802:	6020      	str	r0, [r4, #0]
 800b804:	f8c0 9000 	str.w	r9, [r0]
 800b808:	4604      	mov	r4, r0
 800b80a:	e7e4      	b.n	800b7d6 <__pow5mult+0x6a>
 800b80c:	4638      	mov	r0, r7
 800b80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b812:	bf00      	nop
 800b814:	0800eb98 	.word	0x0800eb98
 800b818:	0800e8f3 	.word	0x0800e8f3
 800b81c:	0800ea4d 	.word	0x0800ea4d

0800b820 <__lshift>:
 800b820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b824:	460c      	mov	r4, r1
 800b826:	6849      	ldr	r1, [r1, #4]
 800b828:	6923      	ldr	r3, [r4, #16]
 800b82a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b82e:	68a3      	ldr	r3, [r4, #8]
 800b830:	4607      	mov	r7, r0
 800b832:	4691      	mov	r9, r2
 800b834:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b838:	f108 0601 	add.w	r6, r8, #1
 800b83c:	42b3      	cmp	r3, r6
 800b83e:	db0b      	blt.n	800b858 <__lshift+0x38>
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff fd93 	bl	800b36c <_Balloc>
 800b846:	4605      	mov	r5, r0
 800b848:	b948      	cbnz	r0, 800b85e <__lshift+0x3e>
 800b84a:	4602      	mov	r2, r0
 800b84c:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <__lshift+0xd0>)
 800b84e:	4829      	ldr	r0, [pc, #164]	; (800b8f4 <__lshift+0xd4>)
 800b850:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b854:	f7fe fdf2 	bl	800a43c <__assert_func>
 800b858:	3101      	adds	r1, #1
 800b85a:	005b      	lsls	r3, r3, #1
 800b85c:	e7ee      	b.n	800b83c <__lshift+0x1c>
 800b85e:	2300      	movs	r3, #0
 800b860:	f100 0114 	add.w	r1, r0, #20
 800b864:	f100 0210 	add.w	r2, r0, #16
 800b868:	4618      	mov	r0, r3
 800b86a:	4553      	cmp	r3, sl
 800b86c:	db33      	blt.n	800b8d6 <__lshift+0xb6>
 800b86e:	6920      	ldr	r0, [r4, #16]
 800b870:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b874:	f104 0314 	add.w	r3, r4, #20
 800b878:	f019 091f 	ands.w	r9, r9, #31
 800b87c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b880:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b884:	d02b      	beq.n	800b8de <__lshift+0xbe>
 800b886:	f1c9 0e20 	rsb	lr, r9, #32
 800b88a:	468a      	mov	sl, r1
 800b88c:	2200      	movs	r2, #0
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	fa00 f009 	lsl.w	r0, r0, r9
 800b894:	4310      	orrs	r0, r2
 800b896:	f84a 0b04 	str.w	r0, [sl], #4
 800b89a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b89e:	459c      	cmp	ip, r3
 800b8a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8a4:	d8f3      	bhi.n	800b88e <__lshift+0x6e>
 800b8a6:	ebac 0304 	sub.w	r3, ip, r4
 800b8aa:	3b15      	subs	r3, #21
 800b8ac:	f023 0303 	bic.w	r3, r3, #3
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	f104 0015 	add.w	r0, r4, #21
 800b8b6:	4584      	cmp	ip, r0
 800b8b8:	bf38      	it	cc
 800b8ba:	2304      	movcc	r3, #4
 800b8bc:	50ca      	str	r2, [r1, r3]
 800b8be:	b10a      	cbz	r2, 800b8c4 <__lshift+0xa4>
 800b8c0:	f108 0602 	add.w	r6, r8, #2
 800b8c4:	3e01      	subs	r6, #1
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	612e      	str	r6, [r5, #16]
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f7ff fd8e 	bl	800b3ec <_Bfree>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8da:	3301      	adds	r3, #1
 800b8dc:	e7c5      	b.n	800b86a <__lshift+0x4a>
 800b8de:	3904      	subs	r1, #4
 800b8e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8e8:	459c      	cmp	ip, r3
 800b8ea:	d8f9      	bhi.n	800b8e0 <__lshift+0xc0>
 800b8ec:	e7ea      	b.n	800b8c4 <__lshift+0xa4>
 800b8ee:	bf00      	nop
 800b8f0:	0800ea3c 	.word	0x0800ea3c
 800b8f4:	0800ea4d 	.word	0x0800ea4d

0800b8f8 <__mcmp>:
 800b8f8:	b530      	push	{r4, r5, lr}
 800b8fa:	6902      	ldr	r2, [r0, #16]
 800b8fc:	690c      	ldr	r4, [r1, #16]
 800b8fe:	1b12      	subs	r2, r2, r4
 800b900:	d10e      	bne.n	800b920 <__mcmp+0x28>
 800b902:	f100 0314 	add.w	r3, r0, #20
 800b906:	3114      	adds	r1, #20
 800b908:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b90c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b910:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b914:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b918:	42a5      	cmp	r5, r4
 800b91a:	d003      	beq.n	800b924 <__mcmp+0x2c>
 800b91c:	d305      	bcc.n	800b92a <__mcmp+0x32>
 800b91e:	2201      	movs	r2, #1
 800b920:	4610      	mov	r0, r2
 800b922:	bd30      	pop	{r4, r5, pc}
 800b924:	4283      	cmp	r3, r0
 800b926:	d3f3      	bcc.n	800b910 <__mcmp+0x18>
 800b928:	e7fa      	b.n	800b920 <__mcmp+0x28>
 800b92a:	f04f 32ff 	mov.w	r2, #4294967295
 800b92e:	e7f7      	b.n	800b920 <__mcmp+0x28>

0800b930 <__mdiff>:
 800b930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	460c      	mov	r4, r1
 800b936:	4606      	mov	r6, r0
 800b938:	4611      	mov	r1, r2
 800b93a:	4620      	mov	r0, r4
 800b93c:	4690      	mov	r8, r2
 800b93e:	f7ff ffdb 	bl	800b8f8 <__mcmp>
 800b942:	1e05      	subs	r5, r0, #0
 800b944:	d110      	bne.n	800b968 <__mdiff+0x38>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff fd0f 	bl	800b36c <_Balloc>
 800b94e:	b930      	cbnz	r0, 800b95e <__mdiff+0x2e>
 800b950:	4b3a      	ldr	r3, [pc, #232]	; (800ba3c <__mdiff+0x10c>)
 800b952:	4602      	mov	r2, r0
 800b954:	f240 2137 	movw	r1, #567	; 0x237
 800b958:	4839      	ldr	r0, [pc, #228]	; (800ba40 <__mdiff+0x110>)
 800b95a:	f7fe fd6f 	bl	800a43c <__assert_func>
 800b95e:	2301      	movs	r3, #1
 800b960:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	bfa4      	itt	ge
 800b96a:	4643      	movge	r3, r8
 800b96c:	46a0      	movge	r8, r4
 800b96e:	4630      	mov	r0, r6
 800b970:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b974:	bfa6      	itte	ge
 800b976:	461c      	movge	r4, r3
 800b978:	2500      	movge	r5, #0
 800b97a:	2501      	movlt	r5, #1
 800b97c:	f7ff fcf6 	bl	800b36c <_Balloc>
 800b980:	b920      	cbnz	r0, 800b98c <__mdiff+0x5c>
 800b982:	4b2e      	ldr	r3, [pc, #184]	; (800ba3c <__mdiff+0x10c>)
 800b984:	4602      	mov	r2, r0
 800b986:	f240 2145 	movw	r1, #581	; 0x245
 800b98a:	e7e5      	b.n	800b958 <__mdiff+0x28>
 800b98c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b990:	6926      	ldr	r6, [r4, #16]
 800b992:	60c5      	str	r5, [r0, #12]
 800b994:	f104 0914 	add.w	r9, r4, #20
 800b998:	f108 0514 	add.w	r5, r8, #20
 800b99c:	f100 0e14 	add.w	lr, r0, #20
 800b9a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9a8:	f108 0210 	add.w	r2, r8, #16
 800b9ac:	46f2      	mov	sl, lr
 800b9ae:	2100      	movs	r1, #0
 800b9b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9b8:	fa11 f88b 	uxtah	r8, r1, fp
 800b9bc:	b299      	uxth	r1, r3
 800b9be:	0c1b      	lsrs	r3, r3, #16
 800b9c0:	eba8 0801 	sub.w	r8, r8, r1
 800b9c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9cc:	fa1f f888 	uxth.w	r8, r8
 800b9d0:	1419      	asrs	r1, r3, #16
 800b9d2:	454e      	cmp	r6, r9
 800b9d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9d8:	f84a 3b04 	str.w	r3, [sl], #4
 800b9dc:	d8e8      	bhi.n	800b9b0 <__mdiff+0x80>
 800b9de:	1b33      	subs	r3, r6, r4
 800b9e0:	3b15      	subs	r3, #21
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	3304      	adds	r3, #4
 800b9e8:	3415      	adds	r4, #21
 800b9ea:	42a6      	cmp	r6, r4
 800b9ec:	bf38      	it	cc
 800b9ee:	2304      	movcc	r3, #4
 800b9f0:	441d      	add	r5, r3
 800b9f2:	4473      	add	r3, lr
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	462e      	mov	r6, r5
 800b9f8:	4566      	cmp	r6, ip
 800b9fa:	d30e      	bcc.n	800ba1a <__mdiff+0xea>
 800b9fc:	f10c 0203 	add.w	r2, ip, #3
 800ba00:	1b52      	subs	r2, r2, r5
 800ba02:	f022 0203 	bic.w	r2, r2, #3
 800ba06:	3d03      	subs	r5, #3
 800ba08:	45ac      	cmp	ip, r5
 800ba0a:	bf38      	it	cc
 800ba0c:	2200      	movcc	r2, #0
 800ba0e:	4413      	add	r3, r2
 800ba10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba14:	b17a      	cbz	r2, 800ba36 <__mdiff+0x106>
 800ba16:	6107      	str	r7, [r0, #16]
 800ba18:	e7a4      	b.n	800b964 <__mdiff+0x34>
 800ba1a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba1e:	fa11 f288 	uxtah	r2, r1, r8
 800ba22:	1414      	asrs	r4, r2, #16
 800ba24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba28:	b292      	uxth	r2, r2
 800ba2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba2e:	f84e 2b04 	str.w	r2, [lr], #4
 800ba32:	1421      	asrs	r1, r4, #16
 800ba34:	e7e0      	b.n	800b9f8 <__mdiff+0xc8>
 800ba36:	3f01      	subs	r7, #1
 800ba38:	e7ea      	b.n	800ba10 <__mdiff+0xe0>
 800ba3a:	bf00      	nop
 800ba3c:	0800ea3c 	.word	0x0800ea3c
 800ba40:	0800ea4d 	.word	0x0800ea4d

0800ba44 <__ulp>:
 800ba44:	b082      	sub	sp, #8
 800ba46:	ed8d 0b00 	vstr	d0, [sp]
 800ba4a:	9a01      	ldr	r2, [sp, #4]
 800ba4c:	4b0f      	ldr	r3, [pc, #60]	; (800ba8c <__ulp+0x48>)
 800ba4e:	4013      	ands	r3, r2
 800ba50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dc08      	bgt.n	800ba6a <__ulp+0x26>
 800ba58:	425b      	negs	r3, r3
 800ba5a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ba5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba62:	da04      	bge.n	800ba6e <__ulp+0x2a>
 800ba64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba68:	4113      	asrs	r3, r2
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	e008      	b.n	800ba80 <__ulp+0x3c>
 800ba6e:	f1a2 0314 	sub.w	r3, r2, #20
 800ba72:	2b1e      	cmp	r3, #30
 800ba74:	bfda      	itte	le
 800ba76:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ba7a:	40da      	lsrle	r2, r3
 800ba7c:	2201      	movgt	r2, #1
 800ba7e:	2300      	movs	r3, #0
 800ba80:	4619      	mov	r1, r3
 800ba82:	4610      	mov	r0, r2
 800ba84:	ec41 0b10 	vmov	d0, r0, r1
 800ba88:	b002      	add	sp, #8
 800ba8a:	4770      	bx	lr
 800ba8c:	7ff00000 	.word	0x7ff00000

0800ba90 <__b2d>:
 800ba90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba94:	6906      	ldr	r6, [r0, #16]
 800ba96:	f100 0814 	add.w	r8, r0, #20
 800ba9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ba9e:	1f37      	subs	r7, r6, #4
 800baa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800baa4:	4610      	mov	r0, r2
 800baa6:	f7ff fd53 	bl	800b550 <__hi0bits>
 800baaa:	f1c0 0320 	rsb	r3, r0, #32
 800baae:	280a      	cmp	r0, #10
 800bab0:	600b      	str	r3, [r1, #0]
 800bab2:	491b      	ldr	r1, [pc, #108]	; (800bb20 <__b2d+0x90>)
 800bab4:	dc15      	bgt.n	800bae2 <__b2d+0x52>
 800bab6:	f1c0 0c0b 	rsb	ip, r0, #11
 800baba:	fa22 f30c 	lsr.w	r3, r2, ip
 800babe:	45b8      	cmp	r8, r7
 800bac0:	ea43 0501 	orr.w	r5, r3, r1
 800bac4:	bf34      	ite	cc
 800bac6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800baca:	2300      	movcs	r3, #0
 800bacc:	3015      	adds	r0, #21
 800bace:	fa02 f000 	lsl.w	r0, r2, r0
 800bad2:	fa23 f30c 	lsr.w	r3, r3, ip
 800bad6:	4303      	orrs	r3, r0
 800bad8:	461c      	mov	r4, r3
 800bada:	ec45 4b10 	vmov	d0, r4, r5
 800bade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae2:	45b8      	cmp	r8, r7
 800bae4:	bf3a      	itte	cc
 800bae6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800baea:	f1a6 0708 	subcc.w	r7, r6, #8
 800baee:	2300      	movcs	r3, #0
 800baf0:	380b      	subs	r0, #11
 800baf2:	d012      	beq.n	800bb1a <__b2d+0x8a>
 800baf4:	f1c0 0120 	rsb	r1, r0, #32
 800baf8:	fa23 f401 	lsr.w	r4, r3, r1
 800bafc:	4082      	lsls	r2, r0
 800bafe:	4322      	orrs	r2, r4
 800bb00:	4547      	cmp	r7, r8
 800bb02:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bb06:	bf8c      	ite	hi
 800bb08:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb0c:	2200      	movls	r2, #0
 800bb0e:	4083      	lsls	r3, r0
 800bb10:	40ca      	lsrs	r2, r1
 800bb12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb16:	4313      	orrs	r3, r2
 800bb18:	e7de      	b.n	800bad8 <__b2d+0x48>
 800bb1a:	ea42 0501 	orr.w	r5, r2, r1
 800bb1e:	e7db      	b.n	800bad8 <__b2d+0x48>
 800bb20:	3ff00000 	.word	0x3ff00000

0800bb24 <__d2b>:
 800bb24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb28:	460f      	mov	r7, r1
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	ec59 8b10 	vmov	r8, r9, d0
 800bb30:	4616      	mov	r6, r2
 800bb32:	f7ff fc1b 	bl	800b36c <_Balloc>
 800bb36:	4604      	mov	r4, r0
 800bb38:	b930      	cbnz	r0, 800bb48 <__d2b+0x24>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	4b24      	ldr	r3, [pc, #144]	; (800bbd0 <__d2b+0xac>)
 800bb3e:	4825      	ldr	r0, [pc, #148]	; (800bbd4 <__d2b+0xb0>)
 800bb40:	f240 310f 	movw	r1, #783	; 0x30f
 800bb44:	f7fe fc7a 	bl	800a43c <__assert_func>
 800bb48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb50:	bb2d      	cbnz	r5, 800bb9e <__d2b+0x7a>
 800bb52:	9301      	str	r3, [sp, #4]
 800bb54:	f1b8 0300 	subs.w	r3, r8, #0
 800bb58:	d026      	beq.n	800bba8 <__d2b+0x84>
 800bb5a:	4668      	mov	r0, sp
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	f7ff fd17 	bl	800b590 <__lo0bits>
 800bb62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb66:	b1e8      	cbz	r0, 800bba4 <__d2b+0x80>
 800bb68:	f1c0 0320 	rsb	r3, r0, #32
 800bb6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb70:	430b      	orrs	r3, r1
 800bb72:	40c2      	lsrs	r2, r0
 800bb74:	6163      	str	r3, [r4, #20]
 800bb76:	9201      	str	r2, [sp, #4]
 800bb78:	9b01      	ldr	r3, [sp, #4]
 800bb7a:	61a3      	str	r3, [r4, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	bf14      	ite	ne
 800bb80:	2202      	movne	r2, #2
 800bb82:	2201      	moveq	r2, #1
 800bb84:	6122      	str	r2, [r4, #16]
 800bb86:	b1bd      	cbz	r5, 800bbb8 <__d2b+0x94>
 800bb88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb8c:	4405      	add	r5, r0
 800bb8e:	603d      	str	r5, [r7, #0]
 800bb90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb94:	6030      	str	r0, [r6, #0]
 800bb96:	4620      	mov	r0, r4
 800bb98:	b003      	add	sp, #12
 800bb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bba2:	e7d6      	b.n	800bb52 <__d2b+0x2e>
 800bba4:	6161      	str	r1, [r4, #20]
 800bba6:	e7e7      	b.n	800bb78 <__d2b+0x54>
 800bba8:	a801      	add	r0, sp, #4
 800bbaa:	f7ff fcf1 	bl	800b590 <__lo0bits>
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	6163      	str	r3, [r4, #20]
 800bbb2:	3020      	adds	r0, #32
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	e7e5      	b.n	800bb84 <__d2b+0x60>
 800bbb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbc0:	6038      	str	r0, [r7, #0]
 800bbc2:	6918      	ldr	r0, [r3, #16]
 800bbc4:	f7ff fcc4 	bl	800b550 <__hi0bits>
 800bbc8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbcc:	e7e2      	b.n	800bb94 <__d2b+0x70>
 800bbce:	bf00      	nop
 800bbd0:	0800ea3c 	.word	0x0800ea3c
 800bbd4:	0800ea4d 	.word	0x0800ea4d

0800bbd8 <__ratio>:
 800bbd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	4688      	mov	r8, r1
 800bbde:	4669      	mov	r1, sp
 800bbe0:	4681      	mov	r9, r0
 800bbe2:	f7ff ff55 	bl	800ba90 <__b2d>
 800bbe6:	a901      	add	r1, sp, #4
 800bbe8:	4640      	mov	r0, r8
 800bbea:	ec55 4b10 	vmov	r4, r5, d0
 800bbee:	f7ff ff4f 	bl	800ba90 <__b2d>
 800bbf2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bbf6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bbfa:	eba3 0c02 	sub.w	ip, r3, r2
 800bbfe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc02:	1a9b      	subs	r3, r3, r2
 800bc04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bc08:	ec51 0b10 	vmov	r0, r1, d0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfd6      	itet	le
 800bc10:	460a      	movle	r2, r1
 800bc12:	462a      	movgt	r2, r5
 800bc14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc18:	468b      	mov	fp, r1
 800bc1a:	462f      	mov	r7, r5
 800bc1c:	bfd4      	ite	le
 800bc1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bc22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc26:	4620      	mov	r0, r4
 800bc28:	ee10 2a10 	vmov	r2, s0
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4639      	mov	r1, r7
 800bc30:	f7f4 fe0c 	bl	800084c <__aeabi_ddiv>
 800bc34:	ec41 0b10 	vmov	d0, r0, r1
 800bc38:	b003      	add	sp, #12
 800bc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc3e <__copybits>:
 800bc3e:	3901      	subs	r1, #1
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	1149      	asrs	r1, r1, #5
 800bc44:	6914      	ldr	r4, [r2, #16]
 800bc46:	3101      	adds	r1, #1
 800bc48:	f102 0314 	add.w	r3, r2, #20
 800bc4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc54:	1f05      	subs	r5, r0, #4
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	d30c      	bcc.n	800bc74 <__copybits+0x36>
 800bc5a:	1aa3      	subs	r3, r4, r2
 800bc5c:	3b11      	subs	r3, #17
 800bc5e:	f023 0303 	bic.w	r3, r3, #3
 800bc62:	3211      	adds	r2, #17
 800bc64:	42a2      	cmp	r2, r4
 800bc66:	bf88      	it	hi
 800bc68:	2300      	movhi	r3, #0
 800bc6a:	4418      	add	r0, r3
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	4288      	cmp	r0, r1
 800bc70:	d305      	bcc.n	800bc7e <__copybits+0x40>
 800bc72:	bd70      	pop	{r4, r5, r6, pc}
 800bc74:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc78:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc7c:	e7eb      	b.n	800bc56 <__copybits+0x18>
 800bc7e:	f840 3b04 	str.w	r3, [r0], #4
 800bc82:	e7f4      	b.n	800bc6e <__copybits+0x30>

0800bc84 <__any_on>:
 800bc84:	f100 0214 	add.w	r2, r0, #20
 800bc88:	6900      	ldr	r0, [r0, #16]
 800bc8a:	114b      	asrs	r3, r1, #5
 800bc8c:	4298      	cmp	r0, r3
 800bc8e:	b510      	push	{r4, lr}
 800bc90:	db11      	blt.n	800bcb6 <__any_on+0x32>
 800bc92:	dd0a      	ble.n	800bcaa <__any_on+0x26>
 800bc94:	f011 011f 	ands.w	r1, r1, #31
 800bc98:	d007      	beq.n	800bcaa <__any_on+0x26>
 800bc9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc9e:	fa24 f001 	lsr.w	r0, r4, r1
 800bca2:	fa00 f101 	lsl.w	r1, r0, r1
 800bca6:	428c      	cmp	r4, r1
 800bca8:	d10b      	bne.n	800bcc2 <__any_on+0x3e>
 800bcaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d803      	bhi.n	800bcba <__any_on+0x36>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	bd10      	pop	{r4, pc}
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	e7f7      	b.n	800bcaa <__any_on+0x26>
 800bcba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	d0f5      	beq.n	800bcae <__any_on+0x2a>
 800bcc2:	2001      	movs	r0, #1
 800bcc4:	e7f6      	b.n	800bcb4 <__any_on+0x30>

0800bcc6 <sulp>:
 800bcc6:	b570      	push	{r4, r5, r6, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	460d      	mov	r5, r1
 800bccc:	ec45 4b10 	vmov	d0, r4, r5
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	f7ff feb7 	bl	800ba44 <__ulp>
 800bcd6:	ec51 0b10 	vmov	r0, r1, d0
 800bcda:	b17e      	cbz	r6, 800bcfc <sulp+0x36>
 800bcdc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bce0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	dd09      	ble.n	800bcfc <sulp+0x36>
 800bce8:	051b      	lsls	r3, r3, #20
 800bcea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bcee:	2400      	movs	r4, #0
 800bcf0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	f7f4 fc7e 	bl	80005f8 <__aeabi_dmul>
 800bcfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd00 <_strtod_l>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	ed2d 8b02 	vpush	{d8}
 800bd08:	b09b      	sub	sp, #108	; 0x6c
 800bd0a:	4604      	mov	r4, r0
 800bd0c:	9213      	str	r2, [sp, #76]	; 0x4c
 800bd0e:	2200      	movs	r2, #0
 800bd10:	9216      	str	r2, [sp, #88]	; 0x58
 800bd12:	460d      	mov	r5, r1
 800bd14:	f04f 0800 	mov.w	r8, #0
 800bd18:	f04f 0900 	mov.w	r9, #0
 800bd1c:	460a      	mov	r2, r1
 800bd1e:	9215      	str	r2, [sp, #84]	; 0x54
 800bd20:	7811      	ldrb	r1, [r2, #0]
 800bd22:	292b      	cmp	r1, #43	; 0x2b
 800bd24:	d04c      	beq.n	800bdc0 <_strtod_l+0xc0>
 800bd26:	d83a      	bhi.n	800bd9e <_strtod_l+0x9e>
 800bd28:	290d      	cmp	r1, #13
 800bd2a:	d834      	bhi.n	800bd96 <_strtod_l+0x96>
 800bd2c:	2908      	cmp	r1, #8
 800bd2e:	d834      	bhi.n	800bd9a <_strtod_l+0x9a>
 800bd30:	2900      	cmp	r1, #0
 800bd32:	d03d      	beq.n	800bdb0 <_strtod_l+0xb0>
 800bd34:	2200      	movs	r2, #0
 800bd36:	920a      	str	r2, [sp, #40]	; 0x28
 800bd38:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bd3a:	7832      	ldrb	r2, [r6, #0]
 800bd3c:	2a30      	cmp	r2, #48	; 0x30
 800bd3e:	f040 80b4 	bne.w	800beaa <_strtod_l+0x1aa>
 800bd42:	7872      	ldrb	r2, [r6, #1]
 800bd44:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bd48:	2a58      	cmp	r2, #88	; 0x58
 800bd4a:	d170      	bne.n	800be2e <_strtod_l+0x12e>
 800bd4c:	9302      	str	r3, [sp, #8]
 800bd4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd50:	9301      	str	r3, [sp, #4]
 800bd52:	ab16      	add	r3, sp, #88	; 0x58
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	4a8e      	ldr	r2, [pc, #568]	; (800bf90 <_strtod_l+0x290>)
 800bd58:	ab17      	add	r3, sp, #92	; 0x5c
 800bd5a:	a915      	add	r1, sp, #84	; 0x54
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f001 faf3 	bl	800d348 <__gethex>
 800bd62:	f010 070f 	ands.w	r7, r0, #15
 800bd66:	4605      	mov	r5, r0
 800bd68:	d005      	beq.n	800bd76 <_strtod_l+0x76>
 800bd6a:	2f06      	cmp	r7, #6
 800bd6c:	d12a      	bne.n	800bdc4 <_strtod_l+0xc4>
 800bd6e:	3601      	adds	r6, #1
 800bd70:	2300      	movs	r3, #0
 800bd72:	9615      	str	r6, [sp, #84]	; 0x54
 800bd74:	930a      	str	r3, [sp, #40]	; 0x28
 800bd76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f040 857f 	bne.w	800c87c <_strtod_l+0xb7c>
 800bd7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd80:	b1db      	cbz	r3, 800bdba <_strtod_l+0xba>
 800bd82:	4642      	mov	r2, r8
 800bd84:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd88:	ec43 2b10 	vmov	d0, r2, r3
 800bd8c:	b01b      	add	sp, #108	; 0x6c
 800bd8e:	ecbd 8b02 	vpop	{d8}
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	2920      	cmp	r1, #32
 800bd98:	d1cc      	bne.n	800bd34 <_strtod_l+0x34>
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	e7bf      	b.n	800bd1e <_strtod_l+0x1e>
 800bd9e:	292d      	cmp	r1, #45	; 0x2d
 800bda0:	d1c8      	bne.n	800bd34 <_strtod_l+0x34>
 800bda2:	2101      	movs	r1, #1
 800bda4:	910a      	str	r1, [sp, #40]	; 0x28
 800bda6:	1c51      	adds	r1, r2, #1
 800bda8:	9115      	str	r1, [sp, #84]	; 0x54
 800bdaa:	7852      	ldrb	r2, [r2, #1]
 800bdac:	2a00      	cmp	r2, #0
 800bdae:	d1c3      	bne.n	800bd38 <_strtod_l+0x38>
 800bdb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdb2:	9515      	str	r5, [sp, #84]	; 0x54
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 855f 	bne.w	800c878 <_strtod_l+0xb78>
 800bdba:	4642      	mov	r2, r8
 800bdbc:	464b      	mov	r3, r9
 800bdbe:	e7e3      	b.n	800bd88 <_strtod_l+0x88>
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	e7ef      	b.n	800bda4 <_strtod_l+0xa4>
 800bdc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bdc6:	b13a      	cbz	r2, 800bdd8 <_strtod_l+0xd8>
 800bdc8:	2135      	movs	r1, #53	; 0x35
 800bdca:	a818      	add	r0, sp, #96	; 0x60
 800bdcc:	f7ff ff37 	bl	800bc3e <__copybits>
 800bdd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff fb0a 	bl	800b3ec <_Bfree>
 800bdd8:	3f01      	subs	r7, #1
 800bdda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bddc:	2f04      	cmp	r7, #4
 800bdde:	d806      	bhi.n	800bdee <_strtod_l+0xee>
 800bde0:	e8df f007 	tbb	[pc, r7]
 800bde4:	201d0314 	.word	0x201d0314
 800bde8:	14          	.byte	0x14
 800bde9:	00          	.byte	0x00
 800bdea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800bdee:	05e9      	lsls	r1, r5, #23
 800bdf0:	bf48      	it	mi
 800bdf2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800bdf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bdfa:	0d1b      	lsrs	r3, r3, #20
 800bdfc:	051b      	lsls	r3, r3, #20
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d1b9      	bne.n	800bd76 <_strtod_l+0x76>
 800be02:	f7fe fad9 	bl	800a3b8 <__errno>
 800be06:	2322      	movs	r3, #34	; 0x22
 800be08:	6003      	str	r3, [r0, #0]
 800be0a:	e7b4      	b.n	800bd76 <_strtod_l+0x76>
 800be0c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800be10:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be18:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800be1c:	e7e7      	b.n	800bdee <_strtod_l+0xee>
 800be1e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800bf98 <_strtod_l+0x298>
 800be22:	e7e4      	b.n	800bdee <_strtod_l+0xee>
 800be24:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800be28:	f04f 38ff 	mov.w	r8, #4294967295
 800be2c:	e7df      	b.n	800bdee <_strtod_l+0xee>
 800be2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	9215      	str	r2, [sp, #84]	; 0x54
 800be34:	785b      	ldrb	r3, [r3, #1]
 800be36:	2b30      	cmp	r3, #48	; 0x30
 800be38:	d0f9      	beq.n	800be2e <_strtod_l+0x12e>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d09b      	beq.n	800bd76 <_strtod_l+0x76>
 800be3e:	2301      	movs	r3, #1
 800be40:	f04f 0a00 	mov.w	sl, #0
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be48:	930b      	str	r3, [sp, #44]	; 0x2c
 800be4a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800be4e:	46d3      	mov	fp, sl
 800be50:	220a      	movs	r2, #10
 800be52:	9815      	ldr	r0, [sp, #84]	; 0x54
 800be54:	7806      	ldrb	r6, [r0, #0]
 800be56:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800be5a:	b2d9      	uxtb	r1, r3
 800be5c:	2909      	cmp	r1, #9
 800be5e:	d926      	bls.n	800beae <_strtod_l+0x1ae>
 800be60:	494c      	ldr	r1, [pc, #304]	; (800bf94 <_strtod_l+0x294>)
 800be62:	2201      	movs	r2, #1
 800be64:	f001 f99e 	bl	800d1a4 <strncmp>
 800be68:	2800      	cmp	r0, #0
 800be6a:	d030      	beq.n	800bece <_strtod_l+0x1ce>
 800be6c:	2000      	movs	r0, #0
 800be6e:	4632      	mov	r2, r6
 800be70:	9005      	str	r0, [sp, #20]
 800be72:	465e      	mov	r6, fp
 800be74:	4603      	mov	r3, r0
 800be76:	2a65      	cmp	r2, #101	; 0x65
 800be78:	d001      	beq.n	800be7e <_strtod_l+0x17e>
 800be7a:	2a45      	cmp	r2, #69	; 0x45
 800be7c:	d113      	bne.n	800bea6 <_strtod_l+0x1a6>
 800be7e:	b91e      	cbnz	r6, 800be88 <_strtod_l+0x188>
 800be80:	9a04      	ldr	r2, [sp, #16]
 800be82:	4302      	orrs	r2, r0
 800be84:	d094      	beq.n	800bdb0 <_strtod_l+0xb0>
 800be86:	2600      	movs	r6, #0
 800be88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800be8a:	1c6a      	adds	r2, r5, #1
 800be8c:	9215      	str	r2, [sp, #84]	; 0x54
 800be8e:	786a      	ldrb	r2, [r5, #1]
 800be90:	2a2b      	cmp	r2, #43	; 0x2b
 800be92:	d074      	beq.n	800bf7e <_strtod_l+0x27e>
 800be94:	2a2d      	cmp	r2, #45	; 0x2d
 800be96:	d078      	beq.n	800bf8a <_strtod_l+0x28a>
 800be98:	f04f 0c00 	mov.w	ip, #0
 800be9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bea0:	2909      	cmp	r1, #9
 800bea2:	d97f      	bls.n	800bfa4 <_strtod_l+0x2a4>
 800bea4:	9515      	str	r5, [sp, #84]	; 0x54
 800bea6:	2700      	movs	r7, #0
 800bea8:	e09e      	b.n	800bfe8 <_strtod_l+0x2e8>
 800beaa:	2300      	movs	r3, #0
 800beac:	e7c8      	b.n	800be40 <_strtod_l+0x140>
 800beae:	f1bb 0f08 	cmp.w	fp, #8
 800beb2:	bfd8      	it	le
 800beb4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800beb6:	f100 0001 	add.w	r0, r0, #1
 800beba:	bfda      	itte	le
 800bebc:	fb02 3301 	mlale	r3, r2, r1, r3
 800bec0:	9309      	strle	r3, [sp, #36]	; 0x24
 800bec2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800bec6:	f10b 0b01 	add.w	fp, fp, #1
 800beca:	9015      	str	r0, [sp, #84]	; 0x54
 800becc:	e7c1      	b.n	800be52 <_strtod_l+0x152>
 800bece:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	9215      	str	r2, [sp, #84]	; 0x54
 800bed4:	785a      	ldrb	r2, [r3, #1]
 800bed6:	f1bb 0f00 	cmp.w	fp, #0
 800beda:	d037      	beq.n	800bf4c <_strtod_l+0x24c>
 800bedc:	9005      	str	r0, [sp, #20]
 800bede:	465e      	mov	r6, fp
 800bee0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	d912      	bls.n	800bf0e <_strtod_l+0x20e>
 800bee8:	2301      	movs	r3, #1
 800beea:	e7c4      	b.n	800be76 <_strtod_l+0x176>
 800beec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	9215      	str	r2, [sp, #84]	; 0x54
 800bef2:	785a      	ldrb	r2, [r3, #1]
 800bef4:	3001      	adds	r0, #1
 800bef6:	2a30      	cmp	r2, #48	; 0x30
 800bef8:	d0f8      	beq.n	800beec <_strtod_l+0x1ec>
 800befa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800befe:	2b08      	cmp	r3, #8
 800bf00:	f200 84c1 	bhi.w	800c886 <_strtod_l+0xb86>
 800bf04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf06:	9005      	str	r0, [sp, #20]
 800bf08:	2000      	movs	r0, #0
 800bf0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf0c:	4606      	mov	r6, r0
 800bf0e:	3a30      	subs	r2, #48	; 0x30
 800bf10:	f100 0301 	add.w	r3, r0, #1
 800bf14:	d014      	beq.n	800bf40 <_strtod_l+0x240>
 800bf16:	9905      	ldr	r1, [sp, #20]
 800bf18:	4419      	add	r1, r3
 800bf1a:	9105      	str	r1, [sp, #20]
 800bf1c:	4633      	mov	r3, r6
 800bf1e:	eb00 0c06 	add.w	ip, r0, r6
 800bf22:	210a      	movs	r1, #10
 800bf24:	4563      	cmp	r3, ip
 800bf26:	d113      	bne.n	800bf50 <_strtod_l+0x250>
 800bf28:	1833      	adds	r3, r6, r0
 800bf2a:	2b08      	cmp	r3, #8
 800bf2c:	f106 0601 	add.w	r6, r6, #1
 800bf30:	4406      	add	r6, r0
 800bf32:	dc1a      	bgt.n	800bf6a <_strtod_l+0x26a>
 800bf34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf36:	230a      	movs	r3, #10
 800bf38:	fb03 2301 	mla	r3, r3, r1, r2
 800bf3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bf42:	1c51      	adds	r1, r2, #1
 800bf44:	9115      	str	r1, [sp, #84]	; 0x54
 800bf46:	7852      	ldrb	r2, [r2, #1]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	e7c9      	b.n	800bee0 <_strtod_l+0x1e0>
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	e7d2      	b.n	800bef6 <_strtod_l+0x1f6>
 800bf50:	2b08      	cmp	r3, #8
 800bf52:	f103 0301 	add.w	r3, r3, #1
 800bf56:	dc03      	bgt.n	800bf60 <_strtod_l+0x260>
 800bf58:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bf5a:	434f      	muls	r7, r1
 800bf5c:	9709      	str	r7, [sp, #36]	; 0x24
 800bf5e:	e7e1      	b.n	800bf24 <_strtod_l+0x224>
 800bf60:	2b10      	cmp	r3, #16
 800bf62:	bfd8      	it	le
 800bf64:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bf68:	e7dc      	b.n	800bf24 <_strtod_l+0x224>
 800bf6a:	2e10      	cmp	r6, #16
 800bf6c:	bfdc      	itt	le
 800bf6e:	230a      	movle	r3, #10
 800bf70:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bf74:	e7e3      	b.n	800bf3e <_strtod_l+0x23e>
 800bf76:	2300      	movs	r3, #0
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e780      	b.n	800be80 <_strtod_l+0x180>
 800bf7e:	f04f 0c00 	mov.w	ip, #0
 800bf82:	1caa      	adds	r2, r5, #2
 800bf84:	9215      	str	r2, [sp, #84]	; 0x54
 800bf86:	78aa      	ldrb	r2, [r5, #2]
 800bf88:	e788      	b.n	800be9c <_strtod_l+0x19c>
 800bf8a:	f04f 0c01 	mov.w	ip, #1
 800bf8e:	e7f8      	b.n	800bf82 <_strtod_l+0x282>
 800bf90:	0800eba8 	.word	0x0800eba8
 800bf94:	0800eba4 	.word	0x0800eba4
 800bf98:	7ff00000 	.word	0x7ff00000
 800bf9c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bf9e:	1c51      	adds	r1, r2, #1
 800bfa0:	9115      	str	r1, [sp, #84]	; 0x54
 800bfa2:	7852      	ldrb	r2, [r2, #1]
 800bfa4:	2a30      	cmp	r2, #48	; 0x30
 800bfa6:	d0f9      	beq.n	800bf9c <_strtod_l+0x29c>
 800bfa8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bfac:	2908      	cmp	r1, #8
 800bfae:	f63f af7a 	bhi.w	800bea6 <_strtod_l+0x1a6>
 800bfb2:	3a30      	subs	r2, #48	; 0x30
 800bfb4:	9208      	str	r2, [sp, #32]
 800bfb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfb8:	920c      	str	r2, [sp, #48]	; 0x30
 800bfba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bfbc:	1c57      	adds	r7, r2, #1
 800bfbe:	9715      	str	r7, [sp, #84]	; 0x54
 800bfc0:	7852      	ldrb	r2, [r2, #1]
 800bfc2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bfc6:	f1be 0f09 	cmp.w	lr, #9
 800bfca:	d938      	bls.n	800c03e <_strtod_l+0x33e>
 800bfcc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bfce:	1a7f      	subs	r7, r7, r1
 800bfd0:	2f08      	cmp	r7, #8
 800bfd2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bfd6:	dc03      	bgt.n	800bfe0 <_strtod_l+0x2e0>
 800bfd8:	9908      	ldr	r1, [sp, #32]
 800bfda:	428f      	cmp	r7, r1
 800bfdc:	bfa8      	it	ge
 800bfde:	460f      	movge	r7, r1
 800bfe0:	f1bc 0f00 	cmp.w	ip, #0
 800bfe4:	d000      	beq.n	800bfe8 <_strtod_l+0x2e8>
 800bfe6:	427f      	negs	r7, r7
 800bfe8:	2e00      	cmp	r6, #0
 800bfea:	d14f      	bne.n	800c08c <_strtod_l+0x38c>
 800bfec:	9904      	ldr	r1, [sp, #16]
 800bfee:	4301      	orrs	r1, r0
 800bff0:	f47f aec1 	bne.w	800bd76 <_strtod_l+0x76>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f47f aedb 	bne.w	800bdb0 <_strtod_l+0xb0>
 800bffa:	2a69      	cmp	r2, #105	; 0x69
 800bffc:	d029      	beq.n	800c052 <_strtod_l+0x352>
 800bffe:	dc26      	bgt.n	800c04e <_strtod_l+0x34e>
 800c000:	2a49      	cmp	r2, #73	; 0x49
 800c002:	d026      	beq.n	800c052 <_strtod_l+0x352>
 800c004:	2a4e      	cmp	r2, #78	; 0x4e
 800c006:	f47f aed3 	bne.w	800bdb0 <_strtod_l+0xb0>
 800c00a:	499b      	ldr	r1, [pc, #620]	; (800c278 <_strtod_l+0x578>)
 800c00c:	a815      	add	r0, sp, #84	; 0x54
 800c00e:	f001 fbdb 	bl	800d7c8 <__match>
 800c012:	2800      	cmp	r0, #0
 800c014:	f43f aecc 	beq.w	800bdb0 <_strtod_l+0xb0>
 800c018:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b28      	cmp	r3, #40	; 0x28
 800c01e:	d12f      	bne.n	800c080 <_strtod_l+0x380>
 800c020:	4996      	ldr	r1, [pc, #600]	; (800c27c <_strtod_l+0x57c>)
 800c022:	aa18      	add	r2, sp, #96	; 0x60
 800c024:	a815      	add	r0, sp, #84	; 0x54
 800c026:	f001 fbe3 	bl	800d7f0 <__hexnan>
 800c02a:	2805      	cmp	r0, #5
 800c02c:	d128      	bne.n	800c080 <_strtod_l+0x380>
 800c02e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c030:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c034:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c038:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c03c:	e69b      	b.n	800bd76 <_strtod_l+0x76>
 800c03e:	9f08      	ldr	r7, [sp, #32]
 800c040:	210a      	movs	r1, #10
 800c042:	fb01 2107 	mla	r1, r1, r7, r2
 800c046:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c04a:	9208      	str	r2, [sp, #32]
 800c04c:	e7b5      	b.n	800bfba <_strtod_l+0x2ba>
 800c04e:	2a6e      	cmp	r2, #110	; 0x6e
 800c050:	e7d9      	b.n	800c006 <_strtod_l+0x306>
 800c052:	498b      	ldr	r1, [pc, #556]	; (800c280 <_strtod_l+0x580>)
 800c054:	a815      	add	r0, sp, #84	; 0x54
 800c056:	f001 fbb7 	bl	800d7c8 <__match>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	f43f aea8 	beq.w	800bdb0 <_strtod_l+0xb0>
 800c060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c062:	4988      	ldr	r1, [pc, #544]	; (800c284 <_strtod_l+0x584>)
 800c064:	3b01      	subs	r3, #1
 800c066:	a815      	add	r0, sp, #84	; 0x54
 800c068:	9315      	str	r3, [sp, #84]	; 0x54
 800c06a:	f001 fbad 	bl	800d7c8 <__match>
 800c06e:	b910      	cbnz	r0, 800c076 <_strtod_l+0x376>
 800c070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c072:	3301      	adds	r3, #1
 800c074:	9315      	str	r3, [sp, #84]	; 0x54
 800c076:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800c294 <_strtod_l+0x594>
 800c07a:	f04f 0800 	mov.w	r8, #0
 800c07e:	e67a      	b.n	800bd76 <_strtod_l+0x76>
 800c080:	4881      	ldr	r0, [pc, #516]	; (800c288 <_strtod_l+0x588>)
 800c082:	f001 f8d5 	bl	800d230 <nan>
 800c086:	ec59 8b10 	vmov	r8, r9, d0
 800c08a:	e674      	b.n	800bd76 <_strtod_l+0x76>
 800c08c:	9b05      	ldr	r3, [sp, #20]
 800c08e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c090:	1afb      	subs	r3, r7, r3
 800c092:	f1bb 0f00 	cmp.w	fp, #0
 800c096:	bf08      	it	eq
 800c098:	46b3      	moveq	fp, r6
 800c09a:	2e10      	cmp	r6, #16
 800c09c:	9308      	str	r3, [sp, #32]
 800c09e:	4635      	mov	r5, r6
 800c0a0:	bfa8      	it	ge
 800c0a2:	2510      	movge	r5, #16
 800c0a4:	f7f4 fa2e 	bl	8000504 <__aeabi_ui2d>
 800c0a8:	2e09      	cmp	r6, #9
 800c0aa:	4680      	mov	r8, r0
 800c0ac:	4689      	mov	r9, r1
 800c0ae:	dd13      	ble.n	800c0d8 <_strtod_l+0x3d8>
 800c0b0:	4b76      	ldr	r3, [pc, #472]	; (800c28c <_strtod_l+0x58c>)
 800c0b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c0b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c0ba:	f7f4 fa9d 	bl	80005f8 <__aeabi_dmul>
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4650      	mov	r0, sl
 800c0c2:	4689      	mov	r9, r1
 800c0c4:	f7f4 fa1e 	bl	8000504 <__aeabi_ui2d>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	f7f4 f8dc 	bl	800028c <__adddf3>
 800c0d4:	4680      	mov	r8, r0
 800c0d6:	4689      	mov	r9, r1
 800c0d8:	2e0f      	cmp	r6, #15
 800c0da:	dc38      	bgt.n	800c14e <_strtod_l+0x44e>
 800c0dc:	9b08      	ldr	r3, [sp, #32]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	f43f ae49 	beq.w	800bd76 <_strtod_l+0x76>
 800c0e4:	dd24      	ble.n	800c130 <_strtod_l+0x430>
 800c0e6:	2b16      	cmp	r3, #22
 800c0e8:	dc0b      	bgt.n	800c102 <_strtod_l+0x402>
 800c0ea:	4968      	ldr	r1, [pc, #416]	; (800c28c <_strtod_l+0x58c>)
 800c0ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0f4:	4642      	mov	r2, r8
 800c0f6:	464b      	mov	r3, r9
 800c0f8:	f7f4 fa7e 	bl	80005f8 <__aeabi_dmul>
 800c0fc:	4680      	mov	r8, r0
 800c0fe:	4689      	mov	r9, r1
 800c100:	e639      	b.n	800bd76 <_strtod_l+0x76>
 800c102:	9a08      	ldr	r2, [sp, #32]
 800c104:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c108:	4293      	cmp	r3, r2
 800c10a:	db20      	blt.n	800c14e <_strtod_l+0x44e>
 800c10c:	4c5f      	ldr	r4, [pc, #380]	; (800c28c <_strtod_l+0x58c>)
 800c10e:	f1c6 060f 	rsb	r6, r6, #15
 800c112:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c116:	4642      	mov	r2, r8
 800c118:	464b      	mov	r3, r9
 800c11a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c11e:	f7f4 fa6b 	bl	80005f8 <__aeabi_dmul>
 800c122:	9b08      	ldr	r3, [sp, #32]
 800c124:	1b9e      	subs	r6, r3, r6
 800c126:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c12a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c12e:	e7e3      	b.n	800c0f8 <_strtod_l+0x3f8>
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	3316      	adds	r3, #22
 800c134:	db0b      	blt.n	800c14e <_strtod_l+0x44e>
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	1bdf      	subs	r7, r3, r7
 800c13a:	4b54      	ldr	r3, [pc, #336]	; (800c28c <_strtod_l+0x58c>)
 800c13c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c140:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c144:	4640      	mov	r0, r8
 800c146:	4649      	mov	r1, r9
 800c148:	f7f4 fb80 	bl	800084c <__aeabi_ddiv>
 800c14c:	e7d6      	b.n	800c0fc <_strtod_l+0x3fc>
 800c14e:	9b08      	ldr	r3, [sp, #32]
 800c150:	1b75      	subs	r5, r6, r5
 800c152:	441d      	add	r5, r3
 800c154:	2d00      	cmp	r5, #0
 800c156:	dd70      	ble.n	800c23a <_strtod_l+0x53a>
 800c158:	f015 030f 	ands.w	r3, r5, #15
 800c15c:	d00a      	beq.n	800c174 <_strtod_l+0x474>
 800c15e:	494b      	ldr	r1, [pc, #300]	; (800c28c <_strtod_l+0x58c>)
 800c160:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c164:	4642      	mov	r2, r8
 800c166:	464b      	mov	r3, r9
 800c168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16c:	f7f4 fa44 	bl	80005f8 <__aeabi_dmul>
 800c170:	4680      	mov	r8, r0
 800c172:	4689      	mov	r9, r1
 800c174:	f035 050f 	bics.w	r5, r5, #15
 800c178:	d04d      	beq.n	800c216 <_strtod_l+0x516>
 800c17a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c17e:	dd22      	ble.n	800c1c6 <_strtod_l+0x4c6>
 800c180:	2500      	movs	r5, #0
 800c182:	46ab      	mov	fp, r5
 800c184:	9509      	str	r5, [sp, #36]	; 0x24
 800c186:	9505      	str	r5, [sp, #20]
 800c188:	2322      	movs	r3, #34	; 0x22
 800c18a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c294 <_strtod_l+0x594>
 800c18e:	6023      	str	r3, [r4, #0]
 800c190:	f04f 0800 	mov.w	r8, #0
 800c194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c196:	2b00      	cmp	r3, #0
 800c198:	f43f aded 	beq.w	800bd76 <_strtod_l+0x76>
 800c19c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c19e:	4620      	mov	r0, r4
 800c1a0:	f7ff f924 	bl	800b3ec <_Bfree>
 800c1a4:	9905      	ldr	r1, [sp, #20]
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f7ff f920 	bl	800b3ec <_Bfree>
 800c1ac:	4659      	mov	r1, fp
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f7ff f91c 	bl	800b3ec <_Bfree>
 800c1b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f7ff f918 	bl	800b3ec <_Bfree>
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f7ff f914 	bl	800b3ec <_Bfree>
 800c1c4:	e5d7      	b.n	800bd76 <_strtod_l+0x76>
 800c1c6:	4b32      	ldr	r3, [pc, #200]	; (800c290 <_strtod_l+0x590>)
 800c1c8:	9304      	str	r3, [sp, #16]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	112d      	asrs	r5, r5, #4
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	469a      	mov	sl, r3
 800c1d4:	2d01      	cmp	r5, #1
 800c1d6:	dc21      	bgt.n	800c21c <_strtod_l+0x51c>
 800c1d8:	b10b      	cbz	r3, 800c1de <_strtod_l+0x4de>
 800c1da:	4680      	mov	r8, r0
 800c1dc:	4689      	mov	r9, r1
 800c1de:	492c      	ldr	r1, [pc, #176]	; (800c290 <_strtod_l+0x590>)
 800c1e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c1e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c1e8:	4642      	mov	r2, r8
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1f0:	f7f4 fa02 	bl	80005f8 <__aeabi_dmul>
 800c1f4:	4b27      	ldr	r3, [pc, #156]	; (800c294 <_strtod_l+0x594>)
 800c1f6:	460a      	mov	r2, r1
 800c1f8:	400b      	ands	r3, r1
 800c1fa:	4927      	ldr	r1, [pc, #156]	; (800c298 <_strtod_l+0x598>)
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	4680      	mov	r8, r0
 800c200:	d8be      	bhi.n	800c180 <_strtod_l+0x480>
 800c202:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c206:	428b      	cmp	r3, r1
 800c208:	bf86      	itte	hi
 800c20a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c29c <_strtod_l+0x59c>
 800c20e:	f04f 38ff 	movhi.w	r8, #4294967295
 800c212:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c216:	2300      	movs	r3, #0
 800c218:	9304      	str	r3, [sp, #16]
 800c21a:	e07b      	b.n	800c314 <_strtod_l+0x614>
 800c21c:	07ea      	lsls	r2, r5, #31
 800c21e:	d505      	bpl.n	800c22c <_strtod_l+0x52c>
 800c220:	9b04      	ldr	r3, [sp, #16]
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	f7f4 f9e7 	bl	80005f8 <__aeabi_dmul>
 800c22a:	2301      	movs	r3, #1
 800c22c:	9a04      	ldr	r2, [sp, #16]
 800c22e:	3208      	adds	r2, #8
 800c230:	f10a 0a01 	add.w	sl, sl, #1
 800c234:	106d      	asrs	r5, r5, #1
 800c236:	9204      	str	r2, [sp, #16]
 800c238:	e7cc      	b.n	800c1d4 <_strtod_l+0x4d4>
 800c23a:	d0ec      	beq.n	800c216 <_strtod_l+0x516>
 800c23c:	426d      	negs	r5, r5
 800c23e:	f015 020f 	ands.w	r2, r5, #15
 800c242:	d00a      	beq.n	800c25a <_strtod_l+0x55a>
 800c244:	4b11      	ldr	r3, [pc, #68]	; (800c28c <_strtod_l+0x58c>)
 800c246:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c24a:	4640      	mov	r0, r8
 800c24c:	4649      	mov	r1, r9
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	f7f4 fafb 	bl	800084c <__aeabi_ddiv>
 800c256:	4680      	mov	r8, r0
 800c258:	4689      	mov	r9, r1
 800c25a:	112d      	asrs	r5, r5, #4
 800c25c:	d0db      	beq.n	800c216 <_strtod_l+0x516>
 800c25e:	2d1f      	cmp	r5, #31
 800c260:	dd1e      	ble.n	800c2a0 <_strtod_l+0x5a0>
 800c262:	2500      	movs	r5, #0
 800c264:	46ab      	mov	fp, r5
 800c266:	9509      	str	r5, [sp, #36]	; 0x24
 800c268:	9505      	str	r5, [sp, #20]
 800c26a:	2322      	movs	r3, #34	; 0x22
 800c26c:	f04f 0800 	mov.w	r8, #0
 800c270:	f04f 0900 	mov.w	r9, #0
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	e78d      	b.n	800c194 <_strtod_l+0x494>
 800c278:	0800e96f 	.word	0x0800e96f
 800c27c:	0800ebbc 	.word	0x0800ebbc
 800c280:	0800e967 	.word	0x0800e967
 800c284:	0800e9da 	.word	0x0800e9da
 800c288:	0800e9d6 	.word	0x0800e9d6
 800c28c:	0800ead0 	.word	0x0800ead0
 800c290:	0800eaa8 	.word	0x0800eaa8
 800c294:	7ff00000 	.word	0x7ff00000
 800c298:	7ca00000 	.word	0x7ca00000
 800c29c:	7fefffff 	.word	0x7fefffff
 800c2a0:	f015 0310 	ands.w	r3, r5, #16
 800c2a4:	bf18      	it	ne
 800c2a6:	236a      	movne	r3, #106	; 0x6a
 800c2a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c64c <_strtod_l+0x94c>
 800c2ac:	9304      	str	r3, [sp, #16]
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	07ea      	lsls	r2, r5, #31
 800c2b6:	d504      	bpl.n	800c2c2 <_strtod_l+0x5c2>
 800c2b8:	e9da 2300 	ldrd	r2, r3, [sl]
 800c2bc:	f7f4 f99c 	bl	80005f8 <__aeabi_dmul>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	106d      	asrs	r5, r5, #1
 800c2c4:	f10a 0a08 	add.w	sl, sl, #8
 800c2c8:	d1f4      	bne.n	800c2b4 <_strtod_l+0x5b4>
 800c2ca:	b10b      	cbz	r3, 800c2d0 <_strtod_l+0x5d0>
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	4689      	mov	r9, r1
 800c2d0:	9b04      	ldr	r3, [sp, #16]
 800c2d2:	b1bb      	cbz	r3, 800c304 <_strtod_l+0x604>
 800c2d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c2d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	4649      	mov	r1, r9
 800c2e0:	dd10      	ble.n	800c304 <_strtod_l+0x604>
 800c2e2:	2b1f      	cmp	r3, #31
 800c2e4:	f340 811e 	ble.w	800c524 <_strtod_l+0x824>
 800c2e8:	2b34      	cmp	r3, #52	; 0x34
 800c2ea:	bfde      	ittt	le
 800c2ec:	f04f 33ff 	movle.w	r3, #4294967295
 800c2f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c2f4:	4093      	lslle	r3, r2
 800c2f6:	f04f 0800 	mov.w	r8, #0
 800c2fa:	bfcc      	ite	gt
 800c2fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c300:	ea03 0901 	andle.w	r9, r3, r1
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	4640      	mov	r0, r8
 800c30a:	4649      	mov	r1, r9
 800c30c:	f7f4 fbdc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c310:	2800      	cmp	r0, #0
 800c312:	d1a6      	bne.n	800c262 <_strtod_l+0x562>
 800c314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c31a:	4633      	mov	r3, r6
 800c31c:	465a      	mov	r2, fp
 800c31e:	4620      	mov	r0, r4
 800c320:	f7ff f8cc 	bl	800b4bc <__s2b>
 800c324:	9009      	str	r0, [sp, #36]	; 0x24
 800c326:	2800      	cmp	r0, #0
 800c328:	f43f af2a 	beq.w	800c180 <_strtod_l+0x480>
 800c32c:	9a08      	ldr	r2, [sp, #32]
 800c32e:	9b05      	ldr	r3, [sp, #20]
 800c330:	2a00      	cmp	r2, #0
 800c332:	eba3 0307 	sub.w	r3, r3, r7
 800c336:	bfa8      	it	ge
 800c338:	2300      	movge	r3, #0
 800c33a:	930c      	str	r3, [sp, #48]	; 0x30
 800c33c:	2500      	movs	r5, #0
 800c33e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c342:	9312      	str	r3, [sp, #72]	; 0x48
 800c344:	46ab      	mov	fp, r5
 800c346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c348:	4620      	mov	r0, r4
 800c34a:	6859      	ldr	r1, [r3, #4]
 800c34c:	f7ff f80e 	bl	800b36c <_Balloc>
 800c350:	9005      	str	r0, [sp, #20]
 800c352:	2800      	cmp	r0, #0
 800c354:	f43f af18 	beq.w	800c188 <_strtod_l+0x488>
 800c358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35a:	691a      	ldr	r2, [r3, #16]
 800c35c:	3202      	adds	r2, #2
 800c35e:	f103 010c 	add.w	r1, r3, #12
 800c362:	0092      	lsls	r2, r2, #2
 800c364:	300c      	adds	r0, #12
 800c366:	f7fe f854 	bl	800a412 <memcpy>
 800c36a:	ec49 8b10 	vmov	d0, r8, r9
 800c36e:	aa18      	add	r2, sp, #96	; 0x60
 800c370:	a917      	add	r1, sp, #92	; 0x5c
 800c372:	4620      	mov	r0, r4
 800c374:	f7ff fbd6 	bl	800bb24 <__d2b>
 800c378:	ec49 8b18 	vmov	d8, r8, r9
 800c37c:	9016      	str	r0, [sp, #88]	; 0x58
 800c37e:	2800      	cmp	r0, #0
 800c380:	f43f af02 	beq.w	800c188 <_strtod_l+0x488>
 800c384:	2101      	movs	r1, #1
 800c386:	4620      	mov	r0, r4
 800c388:	f7ff f930 	bl	800b5ec <__i2b>
 800c38c:	4683      	mov	fp, r0
 800c38e:	2800      	cmp	r0, #0
 800c390:	f43f aefa 	beq.w	800c188 <_strtod_l+0x488>
 800c394:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c396:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c398:	2e00      	cmp	r6, #0
 800c39a:	bfab      	itete	ge
 800c39c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c39e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c3a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c3a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c3a6:	bfac      	ite	ge
 800c3a8:	eb06 0a03 	addge.w	sl, r6, r3
 800c3ac:	1b9f      	sublt	r7, r3, r6
 800c3ae:	9b04      	ldr	r3, [sp, #16]
 800c3b0:	1af6      	subs	r6, r6, r3
 800c3b2:	4416      	add	r6, r2
 800c3b4:	4ba0      	ldr	r3, [pc, #640]	; (800c638 <_strtod_l+0x938>)
 800c3b6:	3e01      	subs	r6, #1
 800c3b8:	429e      	cmp	r6, r3
 800c3ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c3be:	f280 80c4 	bge.w	800c54a <_strtod_l+0x84a>
 800c3c2:	1b9b      	subs	r3, r3, r6
 800c3c4:	2b1f      	cmp	r3, #31
 800c3c6:	eba2 0203 	sub.w	r2, r2, r3
 800c3ca:	f04f 0101 	mov.w	r1, #1
 800c3ce:	f300 80b0 	bgt.w	800c532 <_strtod_l+0x832>
 800c3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d6:	930e      	str	r3, [sp, #56]	; 0x38
 800c3d8:	2300      	movs	r3, #0
 800c3da:	930d      	str	r3, [sp, #52]	; 0x34
 800c3dc:	eb0a 0602 	add.w	r6, sl, r2
 800c3e0:	9b04      	ldr	r3, [sp, #16]
 800c3e2:	45b2      	cmp	sl, r6
 800c3e4:	4417      	add	r7, r2
 800c3e6:	441f      	add	r7, r3
 800c3e8:	4653      	mov	r3, sl
 800c3ea:	bfa8      	it	ge
 800c3ec:	4633      	movge	r3, r6
 800c3ee:	42bb      	cmp	r3, r7
 800c3f0:	bfa8      	it	ge
 800c3f2:	463b      	movge	r3, r7
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	bfc2      	ittt	gt
 800c3f8:	1af6      	subgt	r6, r6, r3
 800c3fa:	1aff      	subgt	r7, r7, r3
 800c3fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c402:	2b00      	cmp	r3, #0
 800c404:	dd17      	ble.n	800c436 <_strtod_l+0x736>
 800c406:	4659      	mov	r1, fp
 800c408:	461a      	mov	r2, r3
 800c40a:	4620      	mov	r0, r4
 800c40c:	f7ff f9ae 	bl	800b76c <__pow5mult>
 800c410:	4683      	mov	fp, r0
 800c412:	2800      	cmp	r0, #0
 800c414:	f43f aeb8 	beq.w	800c188 <_strtod_l+0x488>
 800c418:	4601      	mov	r1, r0
 800c41a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7ff f8fb 	bl	800b618 <__multiply>
 800c422:	900b      	str	r0, [sp, #44]	; 0x2c
 800c424:	2800      	cmp	r0, #0
 800c426:	f43f aeaf 	beq.w	800c188 <_strtod_l+0x488>
 800c42a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c42c:	4620      	mov	r0, r4
 800c42e:	f7fe ffdd 	bl	800b3ec <_Bfree>
 800c432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c434:	9316      	str	r3, [sp, #88]	; 0x58
 800c436:	2e00      	cmp	r6, #0
 800c438:	f300 808c 	bgt.w	800c554 <_strtod_l+0x854>
 800c43c:	9b08      	ldr	r3, [sp, #32]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	dd08      	ble.n	800c454 <_strtod_l+0x754>
 800c442:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c444:	9905      	ldr	r1, [sp, #20]
 800c446:	4620      	mov	r0, r4
 800c448:	f7ff f990 	bl	800b76c <__pow5mult>
 800c44c:	9005      	str	r0, [sp, #20]
 800c44e:	2800      	cmp	r0, #0
 800c450:	f43f ae9a 	beq.w	800c188 <_strtod_l+0x488>
 800c454:	2f00      	cmp	r7, #0
 800c456:	dd08      	ble.n	800c46a <_strtod_l+0x76a>
 800c458:	9905      	ldr	r1, [sp, #20]
 800c45a:	463a      	mov	r2, r7
 800c45c:	4620      	mov	r0, r4
 800c45e:	f7ff f9df 	bl	800b820 <__lshift>
 800c462:	9005      	str	r0, [sp, #20]
 800c464:	2800      	cmp	r0, #0
 800c466:	f43f ae8f 	beq.w	800c188 <_strtod_l+0x488>
 800c46a:	f1ba 0f00 	cmp.w	sl, #0
 800c46e:	dd08      	ble.n	800c482 <_strtod_l+0x782>
 800c470:	4659      	mov	r1, fp
 800c472:	4652      	mov	r2, sl
 800c474:	4620      	mov	r0, r4
 800c476:	f7ff f9d3 	bl	800b820 <__lshift>
 800c47a:	4683      	mov	fp, r0
 800c47c:	2800      	cmp	r0, #0
 800c47e:	f43f ae83 	beq.w	800c188 <_strtod_l+0x488>
 800c482:	9a05      	ldr	r2, [sp, #20]
 800c484:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c486:	4620      	mov	r0, r4
 800c488:	f7ff fa52 	bl	800b930 <__mdiff>
 800c48c:	4605      	mov	r5, r0
 800c48e:	2800      	cmp	r0, #0
 800c490:	f43f ae7a 	beq.w	800c188 <_strtod_l+0x488>
 800c494:	68c3      	ldr	r3, [r0, #12]
 800c496:	930b      	str	r3, [sp, #44]	; 0x2c
 800c498:	2300      	movs	r3, #0
 800c49a:	60c3      	str	r3, [r0, #12]
 800c49c:	4659      	mov	r1, fp
 800c49e:	f7ff fa2b 	bl	800b8f8 <__mcmp>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	da60      	bge.n	800c568 <_strtod_l+0x868>
 800c4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4a8:	ea53 0308 	orrs.w	r3, r3, r8
 800c4ac:	f040 8084 	bne.w	800c5b8 <_strtod_l+0x8b8>
 800c4b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d17f      	bne.n	800c5b8 <_strtod_l+0x8b8>
 800c4b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4bc:	0d1b      	lsrs	r3, r3, #20
 800c4be:	051b      	lsls	r3, r3, #20
 800c4c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c4c4:	d978      	bls.n	800c5b8 <_strtod_l+0x8b8>
 800c4c6:	696b      	ldr	r3, [r5, #20]
 800c4c8:	b913      	cbnz	r3, 800c4d0 <_strtod_l+0x7d0>
 800c4ca:	692b      	ldr	r3, [r5, #16]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	dd73      	ble.n	800c5b8 <_strtod_l+0x8b8>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	f7ff f9a3 	bl	800b820 <__lshift>
 800c4da:	4659      	mov	r1, fp
 800c4dc:	4605      	mov	r5, r0
 800c4de:	f7ff fa0b 	bl	800b8f8 <__mcmp>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	dd68      	ble.n	800c5b8 <_strtod_l+0x8b8>
 800c4e6:	9904      	ldr	r1, [sp, #16]
 800c4e8:	4a54      	ldr	r2, [pc, #336]	; (800c63c <_strtod_l+0x93c>)
 800c4ea:	464b      	mov	r3, r9
 800c4ec:	2900      	cmp	r1, #0
 800c4ee:	f000 8084 	beq.w	800c5fa <_strtod_l+0x8fa>
 800c4f2:	ea02 0109 	and.w	r1, r2, r9
 800c4f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c4fa:	dc7e      	bgt.n	800c5fa <_strtod_l+0x8fa>
 800c4fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c500:	f77f aeb3 	ble.w	800c26a <_strtod_l+0x56a>
 800c504:	4b4e      	ldr	r3, [pc, #312]	; (800c640 <_strtod_l+0x940>)
 800c506:	4640      	mov	r0, r8
 800c508:	4649      	mov	r1, r9
 800c50a:	2200      	movs	r2, #0
 800c50c:	f7f4 f874 	bl	80005f8 <__aeabi_dmul>
 800c510:	4b4a      	ldr	r3, [pc, #296]	; (800c63c <_strtod_l+0x93c>)
 800c512:	400b      	ands	r3, r1
 800c514:	4680      	mov	r8, r0
 800c516:	4689      	mov	r9, r1
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f47f ae3f 	bne.w	800c19c <_strtod_l+0x49c>
 800c51e:	2322      	movs	r3, #34	; 0x22
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	e63b      	b.n	800c19c <_strtod_l+0x49c>
 800c524:	f04f 32ff 	mov.w	r2, #4294967295
 800c528:	fa02 f303 	lsl.w	r3, r2, r3
 800c52c:	ea03 0808 	and.w	r8, r3, r8
 800c530:	e6e8      	b.n	800c304 <_strtod_l+0x604>
 800c532:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c536:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c53a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c53e:	36e2      	adds	r6, #226	; 0xe2
 800c540:	fa01 f306 	lsl.w	r3, r1, r6
 800c544:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c548:	e748      	b.n	800c3dc <_strtod_l+0x6dc>
 800c54a:	2100      	movs	r1, #0
 800c54c:	2301      	movs	r3, #1
 800c54e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c552:	e743      	b.n	800c3dc <_strtod_l+0x6dc>
 800c554:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c556:	4632      	mov	r2, r6
 800c558:	4620      	mov	r0, r4
 800c55a:	f7ff f961 	bl	800b820 <__lshift>
 800c55e:	9016      	str	r0, [sp, #88]	; 0x58
 800c560:	2800      	cmp	r0, #0
 800c562:	f47f af6b 	bne.w	800c43c <_strtod_l+0x73c>
 800c566:	e60f      	b.n	800c188 <_strtod_l+0x488>
 800c568:	46ca      	mov	sl, r9
 800c56a:	d171      	bne.n	800c650 <_strtod_l+0x950>
 800c56c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c56e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c572:	b352      	cbz	r2, 800c5ca <_strtod_l+0x8ca>
 800c574:	4a33      	ldr	r2, [pc, #204]	; (800c644 <_strtod_l+0x944>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d12a      	bne.n	800c5d0 <_strtod_l+0x8d0>
 800c57a:	9b04      	ldr	r3, [sp, #16]
 800c57c:	4641      	mov	r1, r8
 800c57e:	b1fb      	cbz	r3, 800c5c0 <_strtod_l+0x8c0>
 800c580:	4b2e      	ldr	r3, [pc, #184]	; (800c63c <_strtod_l+0x93c>)
 800c582:	ea09 0303 	and.w	r3, r9, r3
 800c586:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c58a:	f04f 32ff 	mov.w	r2, #4294967295
 800c58e:	d81a      	bhi.n	800c5c6 <_strtod_l+0x8c6>
 800c590:	0d1b      	lsrs	r3, r3, #20
 800c592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c596:	fa02 f303 	lsl.w	r3, r2, r3
 800c59a:	4299      	cmp	r1, r3
 800c59c:	d118      	bne.n	800c5d0 <_strtod_l+0x8d0>
 800c59e:	4b2a      	ldr	r3, [pc, #168]	; (800c648 <_strtod_l+0x948>)
 800c5a0:	459a      	cmp	sl, r3
 800c5a2:	d102      	bne.n	800c5aa <_strtod_l+0x8aa>
 800c5a4:	3101      	adds	r1, #1
 800c5a6:	f43f adef 	beq.w	800c188 <_strtod_l+0x488>
 800c5aa:	4b24      	ldr	r3, [pc, #144]	; (800c63c <_strtod_l+0x93c>)
 800c5ac:	ea0a 0303 	and.w	r3, sl, r3
 800c5b0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c5b4:	f04f 0800 	mov.w	r8, #0
 800c5b8:	9b04      	ldr	r3, [sp, #16]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1a2      	bne.n	800c504 <_strtod_l+0x804>
 800c5be:	e5ed      	b.n	800c19c <_strtod_l+0x49c>
 800c5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c4:	e7e9      	b.n	800c59a <_strtod_l+0x89a>
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	e7e7      	b.n	800c59a <_strtod_l+0x89a>
 800c5ca:	ea53 0308 	orrs.w	r3, r3, r8
 800c5ce:	d08a      	beq.n	800c4e6 <_strtod_l+0x7e6>
 800c5d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5d2:	b1e3      	cbz	r3, 800c60e <_strtod_l+0x90e>
 800c5d4:	ea13 0f0a 	tst.w	r3, sl
 800c5d8:	d0ee      	beq.n	800c5b8 <_strtod_l+0x8b8>
 800c5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5dc:	9a04      	ldr	r2, [sp, #16]
 800c5de:	4640      	mov	r0, r8
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	b1c3      	cbz	r3, 800c616 <_strtod_l+0x916>
 800c5e4:	f7ff fb6f 	bl	800bcc6 <sulp>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	460b      	mov	r3, r1
 800c5ec:	ec51 0b18 	vmov	r0, r1, d8
 800c5f0:	f7f3 fe4c 	bl	800028c <__adddf3>
 800c5f4:	4680      	mov	r8, r0
 800c5f6:	4689      	mov	r9, r1
 800c5f8:	e7de      	b.n	800c5b8 <_strtod_l+0x8b8>
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c600:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c604:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c608:	f04f 38ff 	mov.w	r8, #4294967295
 800c60c:	e7d4      	b.n	800c5b8 <_strtod_l+0x8b8>
 800c60e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c610:	ea13 0f08 	tst.w	r3, r8
 800c614:	e7e0      	b.n	800c5d8 <_strtod_l+0x8d8>
 800c616:	f7ff fb56 	bl	800bcc6 <sulp>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	ec51 0b18 	vmov	r0, r1, d8
 800c622:	f7f3 fe31 	bl	8000288 <__aeabi_dsub>
 800c626:	2200      	movs	r2, #0
 800c628:	2300      	movs	r3, #0
 800c62a:	4680      	mov	r8, r0
 800c62c:	4689      	mov	r9, r1
 800c62e:	f7f4 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c632:	2800      	cmp	r0, #0
 800c634:	d0c0      	beq.n	800c5b8 <_strtod_l+0x8b8>
 800c636:	e618      	b.n	800c26a <_strtod_l+0x56a>
 800c638:	fffffc02 	.word	0xfffffc02
 800c63c:	7ff00000 	.word	0x7ff00000
 800c640:	39500000 	.word	0x39500000
 800c644:	000fffff 	.word	0x000fffff
 800c648:	7fefffff 	.word	0x7fefffff
 800c64c:	0800ebd0 	.word	0x0800ebd0
 800c650:	4659      	mov	r1, fp
 800c652:	4628      	mov	r0, r5
 800c654:	f7ff fac0 	bl	800bbd8 <__ratio>
 800c658:	ec57 6b10 	vmov	r6, r7, d0
 800c65c:	ee10 0a10 	vmov	r0, s0
 800c660:	2200      	movs	r2, #0
 800c662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c666:	4639      	mov	r1, r7
 800c668:	f7f4 fa42 	bl	8000af0 <__aeabi_dcmple>
 800c66c:	2800      	cmp	r0, #0
 800c66e:	d071      	beq.n	800c754 <_strtod_l+0xa54>
 800c670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c672:	2b00      	cmp	r3, #0
 800c674:	d17c      	bne.n	800c770 <_strtod_l+0xa70>
 800c676:	f1b8 0f00 	cmp.w	r8, #0
 800c67a:	d15a      	bne.n	800c732 <_strtod_l+0xa32>
 800c67c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c680:	2b00      	cmp	r3, #0
 800c682:	d15d      	bne.n	800c740 <_strtod_l+0xa40>
 800c684:	4b90      	ldr	r3, [pc, #576]	; (800c8c8 <_strtod_l+0xbc8>)
 800c686:	2200      	movs	r2, #0
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	f7f4 fa26 	bl	8000adc <__aeabi_dcmplt>
 800c690:	2800      	cmp	r0, #0
 800c692:	d15c      	bne.n	800c74e <_strtod_l+0xa4e>
 800c694:	4630      	mov	r0, r6
 800c696:	4639      	mov	r1, r7
 800c698:	4b8c      	ldr	r3, [pc, #560]	; (800c8cc <_strtod_l+0xbcc>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	f7f3 ffac 	bl	80005f8 <__aeabi_dmul>
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	460f      	mov	r7, r1
 800c6a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c6a8:	9606      	str	r6, [sp, #24]
 800c6aa:	9307      	str	r3, [sp, #28]
 800c6ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6b0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c6b4:	4b86      	ldr	r3, [pc, #536]	; (800c8d0 <_strtod_l+0xbd0>)
 800c6b6:	ea0a 0303 	and.w	r3, sl, r3
 800c6ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c6bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6be:	4b85      	ldr	r3, [pc, #532]	; (800c8d4 <_strtod_l+0xbd4>)
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	f040 8090 	bne.w	800c7e6 <_strtod_l+0xae6>
 800c6c6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c6ca:	ec49 8b10 	vmov	d0, r8, r9
 800c6ce:	f7ff f9b9 	bl	800ba44 <__ulp>
 800c6d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6d6:	ec51 0b10 	vmov	r0, r1, d0
 800c6da:	f7f3 ff8d 	bl	80005f8 <__aeabi_dmul>
 800c6de:	4642      	mov	r2, r8
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	f7f3 fdd3 	bl	800028c <__adddf3>
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4979      	ldr	r1, [pc, #484]	; (800c8d0 <_strtod_l+0xbd0>)
 800c6ea:	4a7b      	ldr	r2, [pc, #492]	; (800c8d8 <_strtod_l+0xbd8>)
 800c6ec:	4019      	ands	r1, r3
 800c6ee:	4291      	cmp	r1, r2
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	d944      	bls.n	800c77e <_strtod_l+0xa7e>
 800c6f4:	ee18 2a90 	vmov	r2, s17
 800c6f8:	4b78      	ldr	r3, [pc, #480]	; (800c8dc <_strtod_l+0xbdc>)
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d104      	bne.n	800c708 <_strtod_l+0xa08>
 800c6fe:	ee18 3a10 	vmov	r3, s16
 800c702:	3301      	adds	r3, #1
 800c704:	f43f ad40 	beq.w	800c188 <_strtod_l+0x488>
 800c708:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c8dc <_strtod_l+0xbdc>
 800c70c:	f04f 38ff 	mov.w	r8, #4294967295
 800c710:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c712:	4620      	mov	r0, r4
 800c714:	f7fe fe6a 	bl	800b3ec <_Bfree>
 800c718:	9905      	ldr	r1, [sp, #20]
 800c71a:	4620      	mov	r0, r4
 800c71c:	f7fe fe66 	bl	800b3ec <_Bfree>
 800c720:	4659      	mov	r1, fp
 800c722:	4620      	mov	r0, r4
 800c724:	f7fe fe62 	bl	800b3ec <_Bfree>
 800c728:	4629      	mov	r1, r5
 800c72a:	4620      	mov	r0, r4
 800c72c:	f7fe fe5e 	bl	800b3ec <_Bfree>
 800c730:	e609      	b.n	800c346 <_strtod_l+0x646>
 800c732:	f1b8 0f01 	cmp.w	r8, #1
 800c736:	d103      	bne.n	800c740 <_strtod_l+0xa40>
 800c738:	f1b9 0f00 	cmp.w	r9, #0
 800c73c:	f43f ad95 	beq.w	800c26a <_strtod_l+0x56a>
 800c740:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c898 <_strtod_l+0xb98>
 800c744:	4f60      	ldr	r7, [pc, #384]	; (800c8c8 <_strtod_l+0xbc8>)
 800c746:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c74a:	2600      	movs	r6, #0
 800c74c:	e7ae      	b.n	800c6ac <_strtod_l+0x9ac>
 800c74e:	4f5f      	ldr	r7, [pc, #380]	; (800c8cc <_strtod_l+0xbcc>)
 800c750:	2600      	movs	r6, #0
 800c752:	e7a7      	b.n	800c6a4 <_strtod_l+0x9a4>
 800c754:	4b5d      	ldr	r3, [pc, #372]	; (800c8cc <_strtod_l+0xbcc>)
 800c756:	4630      	mov	r0, r6
 800c758:	4639      	mov	r1, r7
 800c75a:	2200      	movs	r2, #0
 800c75c:	f7f3 ff4c 	bl	80005f8 <__aeabi_dmul>
 800c760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c762:	4606      	mov	r6, r0
 800c764:	460f      	mov	r7, r1
 800c766:	2b00      	cmp	r3, #0
 800c768:	d09c      	beq.n	800c6a4 <_strtod_l+0x9a4>
 800c76a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c76e:	e79d      	b.n	800c6ac <_strtod_l+0x9ac>
 800c770:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c8a0 <_strtod_l+0xba0>
 800c774:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c778:	ec57 6b17 	vmov	r6, r7, d7
 800c77c:	e796      	b.n	800c6ac <_strtod_l+0x9ac>
 800c77e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c782:	9b04      	ldr	r3, [sp, #16]
 800c784:	46ca      	mov	sl, r9
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1c2      	bne.n	800c710 <_strtod_l+0xa10>
 800c78a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c78e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c790:	0d1b      	lsrs	r3, r3, #20
 800c792:	051b      	lsls	r3, r3, #20
 800c794:	429a      	cmp	r2, r3
 800c796:	d1bb      	bne.n	800c710 <_strtod_l+0xa10>
 800c798:	4630      	mov	r0, r6
 800c79a:	4639      	mov	r1, r7
 800c79c:	f7f4 fa8c 	bl	8000cb8 <__aeabi_d2lz>
 800c7a0:	f7f3 fefc 	bl	800059c <__aeabi_l2d>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	f7f3 fd6c 	bl	8000288 <__aeabi_dsub>
 800c7b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7b2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c7b6:	ea43 0308 	orr.w	r3, r3, r8
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	4606      	mov	r6, r0
 800c7be:	460f      	mov	r7, r1
 800c7c0:	d054      	beq.n	800c86c <_strtod_l+0xb6c>
 800c7c2:	a339      	add	r3, pc, #228	; (adr r3, 800c8a8 <_strtod_l+0xba8>)
 800c7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c8:	f7f4 f988 	bl	8000adc <__aeabi_dcmplt>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	f47f ace5 	bne.w	800c19c <_strtod_l+0x49c>
 800c7d2:	a337      	add	r3, pc, #220	; (adr r3, 800c8b0 <_strtod_l+0xbb0>)
 800c7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d8:	4630      	mov	r0, r6
 800c7da:	4639      	mov	r1, r7
 800c7dc:	f7f4 f99c 	bl	8000b18 <__aeabi_dcmpgt>
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d095      	beq.n	800c710 <_strtod_l+0xa10>
 800c7e4:	e4da      	b.n	800c19c <_strtod_l+0x49c>
 800c7e6:	9b04      	ldr	r3, [sp, #16]
 800c7e8:	b333      	cbz	r3, 800c838 <_strtod_l+0xb38>
 800c7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7f0:	d822      	bhi.n	800c838 <_strtod_l+0xb38>
 800c7f2:	a331      	add	r3, pc, #196	; (adr r3, 800c8b8 <_strtod_l+0xbb8>)
 800c7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 f978 	bl	8000af0 <__aeabi_dcmple>
 800c800:	b1a0      	cbz	r0, 800c82c <_strtod_l+0xb2c>
 800c802:	4639      	mov	r1, r7
 800c804:	4630      	mov	r0, r6
 800c806:	f7f4 f9cf 	bl	8000ba8 <__aeabi_d2uiz>
 800c80a:	2801      	cmp	r0, #1
 800c80c:	bf38      	it	cc
 800c80e:	2001      	movcc	r0, #1
 800c810:	f7f3 fe78 	bl	8000504 <__aeabi_ui2d>
 800c814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c816:	4606      	mov	r6, r0
 800c818:	460f      	mov	r7, r1
 800c81a:	bb23      	cbnz	r3, 800c866 <_strtod_l+0xb66>
 800c81c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c820:	9010      	str	r0, [sp, #64]	; 0x40
 800c822:	9311      	str	r3, [sp, #68]	; 0x44
 800c824:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c828:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c82c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c82e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c830:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c834:	1a9b      	subs	r3, r3, r2
 800c836:	930f      	str	r3, [sp, #60]	; 0x3c
 800c838:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c83c:	eeb0 0a48 	vmov.f32	s0, s16
 800c840:	eef0 0a68 	vmov.f32	s1, s17
 800c844:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c848:	f7ff f8fc 	bl	800ba44 <__ulp>
 800c84c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c850:	ec53 2b10 	vmov	r2, r3, d0
 800c854:	f7f3 fed0 	bl	80005f8 <__aeabi_dmul>
 800c858:	ec53 2b18 	vmov	r2, r3, d8
 800c85c:	f7f3 fd16 	bl	800028c <__adddf3>
 800c860:	4680      	mov	r8, r0
 800c862:	4689      	mov	r9, r1
 800c864:	e78d      	b.n	800c782 <_strtod_l+0xa82>
 800c866:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c86a:	e7db      	b.n	800c824 <_strtod_l+0xb24>
 800c86c:	a314      	add	r3, pc, #80	; (adr r3, 800c8c0 <_strtod_l+0xbc0>)
 800c86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c872:	f7f4 f933 	bl	8000adc <__aeabi_dcmplt>
 800c876:	e7b3      	b.n	800c7e0 <_strtod_l+0xae0>
 800c878:	2300      	movs	r3, #0
 800c87a:	930a      	str	r3, [sp, #40]	; 0x28
 800c87c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c87e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c880:	6013      	str	r3, [r2, #0]
 800c882:	f7ff ba7c 	b.w	800bd7e <_strtod_l+0x7e>
 800c886:	2a65      	cmp	r2, #101	; 0x65
 800c888:	f43f ab75 	beq.w	800bf76 <_strtod_l+0x276>
 800c88c:	2a45      	cmp	r2, #69	; 0x45
 800c88e:	f43f ab72 	beq.w	800bf76 <_strtod_l+0x276>
 800c892:	2301      	movs	r3, #1
 800c894:	f7ff bbaa 	b.w	800bfec <_strtod_l+0x2ec>
 800c898:	00000000 	.word	0x00000000
 800c89c:	bff00000 	.word	0xbff00000
 800c8a0:	00000000 	.word	0x00000000
 800c8a4:	3ff00000 	.word	0x3ff00000
 800c8a8:	94a03595 	.word	0x94a03595
 800c8ac:	3fdfffff 	.word	0x3fdfffff
 800c8b0:	35afe535 	.word	0x35afe535
 800c8b4:	3fe00000 	.word	0x3fe00000
 800c8b8:	ffc00000 	.word	0xffc00000
 800c8bc:	41dfffff 	.word	0x41dfffff
 800c8c0:	94a03595 	.word	0x94a03595
 800c8c4:	3fcfffff 	.word	0x3fcfffff
 800c8c8:	3ff00000 	.word	0x3ff00000
 800c8cc:	3fe00000 	.word	0x3fe00000
 800c8d0:	7ff00000 	.word	0x7ff00000
 800c8d4:	7fe00000 	.word	0x7fe00000
 800c8d8:	7c9fffff 	.word	0x7c9fffff
 800c8dc:	7fefffff 	.word	0x7fefffff

0800c8e0 <_strtod_r>:
 800c8e0:	4b01      	ldr	r3, [pc, #4]	; (800c8e8 <_strtod_r+0x8>)
 800c8e2:	f7ff ba0d 	b.w	800bd00 <_strtod_l>
 800c8e6:	bf00      	nop
 800c8e8:	200000b4 	.word	0x200000b4

0800c8ec <_strtol_l.constprop.0>:
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f2:	d001      	beq.n	800c8f8 <_strtol_l.constprop.0+0xc>
 800c8f4:	2b24      	cmp	r3, #36	; 0x24
 800c8f6:	d906      	bls.n	800c906 <_strtol_l.constprop.0+0x1a>
 800c8f8:	f7fd fd5e 	bl	800a3b8 <__errno>
 800c8fc:	2316      	movs	r3, #22
 800c8fe:	6003      	str	r3, [r0, #0]
 800c900:	2000      	movs	r0, #0
 800c902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c906:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c9ec <_strtol_l.constprop.0+0x100>
 800c90a:	460d      	mov	r5, r1
 800c90c:	462e      	mov	r6, r5
 800c90e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c912:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c916:	f017 0708 	ands.w	r7, r7, #8
 800c91a:	d1f7      	bne.n	800c90c <_strtol_l.constprop.0+0x20>
 800c91c:	2c2d      	cmp	r4, #45	; 0x2d
 800c91e:	d132      	bne.n	800c986 <_strtol_l.constprop.0+0x9a>
 800c920:	782c      	ldrb	r4, [r5, #0]
 800c922:	2701      	movs	r7, #1
 800c924:	1cb5      	adds	r5, r6, #2
 800c926:	2b00      	cmp	r3, #0
 800c928:	d05b      	beq.n	800c9e2 <_strtol_l.constprop.0+0xf6>
 800c92a:	2b10      	cmp	r3, #16
 800c92c:	d109      	bne.n	800c942 <_strtol_l.constprop.0+0x56>
 800c92e:	2c30      	cmp	r4, #48	; 0x30
 800c930:	d107      	bne.n	800c942 <_strtol_l.constprop.0+0x56>
 800c932:	782c      	ldrb	r4, [r5, #0]
 800c934:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c938:	2c58      	cmp	r4, #88	; 0x58
 800c93a:	d14d      	bne.n	800c9d8 <_strtol_l.constprop.0+0xec>
 800c93c:	786c      	ldrb	r4, [r5, #1]
 800c93e:	2310      	movs	r3, #16
 800c940:	3502      	adds	r5, #2
 800c942:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c946:	f108 38ff 	add.w	r8, r8, #4294967295
 800c94a:	f04f 0e00 	mov.w	lr, #0
 800c94e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c952:	4676      	mov	r6, lr
 800c954:	fb03 8a19 	mls	sl, r3, r9, r8
 800c958:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c95c:	f1bc 0f09 	cmp.w	ip, #9
 800c960:	d816      	bhi.n	800c990 <_strtol_l.constprop.0+0xa4>
 800c962:	4664      	mov	r4, ip
 800c964:	42a3      	cmp	r3, r4
 800c966:	dd24      	ble.n	800c9b2 <_strtol_l.constprop.0+0xc6>
 800c968:	f1be 3fff 	cmp.w	lr, #4294967295
 800c96c:	d008      	beq.n	800c980 <_strtol_l.constprop.0+0x94>
 800c96e:	45b1      	cmp	r9, r6
 800c970:	d31c      	bcc.n	800c9ac <_strtol_l.constprop.0+0xc0>
 800c972:	d101      	bne.n	800c978 <_strtol_l.constprop.0+0x8c>
 800c974:	45a2      	cmp	sl, r4
 800c976:	db19      	blt.n	800c9ac <_strtol_l.constprop.0+0xc0>
 800c978:	fb06 4603 	mla	r6, r6, r3, r4
 800c97c:	f04f 0e01 	mov.w	lr, #1
 800c980:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c984:	e7e8      	b.n	800c958 <_strtol_l.constprop.0+0x6c>
 800c986:	2c2b      	cmp	r4, #43	; 0x2b
 800c988:	bf04      	itt	eq
 800c98a:	782c      	ldrbeq	r4, [r5, #0]
 800c98c:	1cb5      	addeq	r5, r6, #2
 800c98e:	e7ca      	b.n	800c926 <_strtol_l.constprop.0+0x3a>
 800c990:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c994:	f1bc 0f19 	cmp.w	ip, #25
 800c998:	d801      	bhi.n	800c99e <_strtol_l.constprop.0+0xb2>
 800c99a:	3c37      	subs	r4, #55	; 0x37
 800c99c:	e7e2      	b.n	800c964 <_strtol_l.constprop.0+0x78>
 800c99e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c9a2:	f1bc 0f19 	cmp.w	ip, #25
 800c9a6:	d804      	bhi.n	800c9b2 <_strtol_l.constprop.0+0xc6>
 800c9a8:	3c57      	subs	r4, #87	; 0x57
 800c9aa:	e7db      	b.n	800c964 <_strtol_l.constprop.0+0x78>
 800c9ac:	f04f 3eff 	mov.w	lr, #4294967295
 800c9b0:	e7e6      	b.n	800c980 <_strtol_l.constprop.0+0x94>
 800c9b2:	f1be 3fff 	cmp.w	lr, #4294967295
 800c9b6:	d105      	bne.n	800c9c4 <_strtol_l.constprop.0+0xd8>
 800c9b8:	2322      	movs	r3, #34	; 0x22
 800c9ba:	6003      	str	r3, [r0, #0]
 800c9bc:	4646      	mov	r6, r8
 800c9be:	b942      	cbnz	r2, 800c9d2 <_strtol_l.constprop.0+0xe6>
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	e79e      	b.n	800c902 <_strtol_l.constprop.0+0x16>
 800c9c4:	b107      	cbz	r7, 800c9c8 <_strtol_l.constprop.0+0xdc>
 800c9c6:	4276      	negs	r6, r6
 800c9c8:	2a00      	cmp	r2, #0
 800c9ca:	d0f9      	beq.n	800c9c0 <_strtol_l.constprop.0+0xd4>
 800c9cc:	f1be 0f00 	cmp.w	lr, #0
 800c9d0:	d000      	beq.n	800c9d4 <_strtol_l.constprop.0+0xe8>
 800c9d2:	1e69      	subs	r1, r5, #1
 800c9d4:	6011      	str	r1, [r2, #0]
 800c9d6:	e7f3      	b.n	800c9c0 <_strtol_l.constprop.0+0xd4>
 800c9d8:	2430      	movs	r4, #48	; 0x30
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1b1      	bne.n	800c942 <_strtol_l.constprop.0+0x56>
 800c9de:	2308      	movs	r3, #8
 800c9e0:	e7af      	b.n	800c942 <_strtol_l.constprop.0+0x56>
 800c9e2:	2c30      	cmp	r4, #48	; 0x30
 800c9e4:	d0a5      	beq.n	800c932 <_strtol_l.constprop.0+0x46>
 800c9e6:	230a      	movs	r3, #10
 800c9e8:	e7ab      	b.n	800c942 <_strtol_l.constprop.0+0x56>
 800c9ea:	bf00      	nop
 800c9ec:	0800ebf9 	.word	0x0800ebf9

0800c9f0 <_strtol_r>:
 800c9f0:	f7ff bf7c 	b.w	800c8ec <_strtol_l.constprop.0>

0800c9f4 <__ssputs_r>:
 800c9f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9f8:	688e      	ldr	r6, [r1, #8]
 800c9fa:	461f      	mov	r7, r3
 800c9fc:	42be      	cmp	r6, r7
 800c9fe:	680b      	ldr	r3, [r1, #0]
 800ca00:	4682      	mov	sl, r0
 800ca02:	460c      	mov	r4, r1
 800ca04:	4690      	mov	r8, r2
 800ca06:	d82c      	bhi.n	800ca62 <__ssputs_r+0x6e>
 800ca08:	898a      	ldrh	r2, [r1, #12]
 800ca0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca0e:	d026      	beq.n	800ca5e <__ssputs_r+0x6a>
 800ca10:	6965      	ldr	r5, [r4, #20]
 800ca12:	6909      	ldr	r1, [r1, #16]
 800ca14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca18:	eba3 0901 	sub.w	r9, r3, r1
 800ca1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ca20:	1c7b      	adds	r3, r7, #1
 800ca22:	444b      	add	r3, r9
 800ca24:	106d      	asrs	r5, r5, #1
 800ca26:	429d      	cmp	r5, r3
 800ca28:	bf38      	it	cc
 800ca2a:	461d      	movcc	r5, r3
 800ca2c:	0553      	lsls	r3, r2, #21
 800ca2e:	d527      	bpl.n	800ca80 <__ssputs_r+0x8c>
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7fe fc0f 	bl	800b254 <_malloc_r>
 800ca36:	4606      	mov	r6, r0
 800ca38:	b360      	cbz	r0, 800ca94 <__ssputs_r+0xa0>
 800ca3a:	6921      	ldr	r1, [r4, #16]
 800ca3c:	464a      	mov	r2, r9
 800ca3e:	f7fd fce8 	bl	800a412 <memcpy>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca4c:	81a3      	strh	r3, [r4, #12]
 800ca4e:	6126      	str	r6, [r4, #16]
 800ca50:	6165      	str	r5, [r4, #20]
 800ca52:	444e      	add	r6, r9
 800ca54:	eba5 0509 	sub.w	r5, r5, r9
 800ca58:	6026      	str	r6, [r4, #0]
 800ca5a:	60a5      	str	r5, [r4, #8]
 800ca5c:	463e      	mov	r6, r7
 800ca5e:	42be      	cmp	r6, r7
 800ca60:	d900      	bls.n	800ca64 <__ssputs_r+0x70>
 800ca62:	463e      	mov	r6, r7
 800ca64:	6820      	ldr	r0, [r4, #0]
 800ca66:	4632      	mov	r2, r6
 800ca68:	4641      	mov	r1, r8
 800ca6a:	f000 fb81 	bl	800d170 <memmove>
 800ca6e:	68a3      	ldr	r3, [r4, #8]
 800ca70:	1b9b      	subs	r3, r3, r6
 800ca72:	60a3      	str	r3, [r4, #8]
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	4433      	add	r3, r6
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	2000      	movs	r0, #0
 800ca7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca80:	462a      	mov	r2, r5
 800ca82:	f000 ff62 	bl	800d94a <_realloc_r>
 800ca86:	4606      	mov	r6, r0
 800ca88:	2800      	cmp	r0, #0
 800ca8a:	d1e0      	bne.n	800ca4e <__ssputs_r+0x5a>
 800ca8c:	6921      	ldr	r1, [r4, #16]
 800ca8e:	4650      	mov	r0, sl
 800ca90:	f7fe fb6c 	bl	800b16c <_free_r>
 800ca94:	230c      	movs	r3, #12
 800ca96:	f8ca 3000 	str.w	r3, [sl]
 800ca9a:	89a3      	ldrh	r3, [r4, #12]
 800ca9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800caa0:	81a3      	strh	r3, [r4, #12]
 800caa2:	f04f 30ff 	mov.w	r0, #4294967295
 800caa6:	e7e9      	b.n	800ca7c <__ssputs_r+0x88>

0800caa8 <_svfiprintf_r>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	4698      	mov	r8, r3
 800caae:	898b      	ldrh	r3, [r1, #12]
 800cab0:	061b      	lsls	r3, r3, #24
 800cab2:	b09d      	sub	sp, #116	; 0x74
 800cab4:	4607      	mov	r7, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	4614      	mov	r4, r2
 800caba:	d50e      	bpl.n	800cada <_svfiprintf_r+0x32>
 800cabc:	690b      	ldr	r3, [r1, #16]
 800cabe:	b963      	cbnz	r3, 800cada <_svfiprintf_r+0x32>
 800cac0:	2140      	movs	r1, #64	; 0x40
 800cac2:	f7fe fbc7 	bl	800b254 <_malloc_r>
 800cac6:	6028      	str	r0, [r5, #0]
 800cac8:	6128      	str	r0, [r5, #16]
 800caca:	b920      	cbnz	r0, 800cad6 <_svfiprintf_r+0x2e>
 800cacc:	230c      	movs	r3, #12
 800cace:	603b      	str	r3, [r7, #0]
 800cad0:	f04f 30ff 	mov.w	r0, #4294967295
 800cad4:	e0d0      	b.n	800cc78 <_svfiprintf_r+0x1d0>
 800cad6:	2340      	movs	r3, #64	; 0x40
 800cad8:	616b      	str	r3, [r5, #20]
 800cada:	2300      	movs	r3, #0
 800cadc:	9309      	str	r3, [sp, #36]	; 0x24
 800cade:	2320      	movs	r3, #32
 800cae0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cae4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae8:	2330      	movs	r3, #48	; 0x30
 800caea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc90 <_svfiprintf_r+0x1e8>
 800caee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caf2:	f04f 0901 	mov.w	r9, #1
 800caf6:	4623      	mov	r3, r4
 800caf8:	469a      	mov	sl, r3
 800cafa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cafe:	b10a      	cbz	r2, 800cb04 <_svfiprintf_r+0x5c>
 800cb00:	2a25      	cmp	r2, #37	; 0x25
 800cb02:	d1f9      	bne.n	800caf8 <_svfiprintf_r+0x50>
 800cb04:	ebba 0b04 	subs.w	fp, sl, r4
 800cb08:	d00b      	beq.n	800cb22 <_svfiprintf_r+0x7a>
 800cb0a:	465b      	mov	r3, fp
 800cb0c:	4622      	mov	r2, r4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7ff ff6f 	bl	800c9f4 <__ssputs_r>
 800cb16:	3001      	adds	r0, #1
 800cb18:	f000 80a9 	beq.w	800cc6e <_svfiprintf_r+0x1c6>
 800cb1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb1e:	445a      	add	r2, fp
 800cb20:	9209      	str	r2, [sp, #36]	; 0x24
 800cb22:	f89a 3000 	ldrb.w	r3, [sl]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	f000 80a1 	beq.w	800cc6e <_svfiprintf_r+0x1c6>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb36:	f10a 0a01 	add.w	sl, sl, #1
 800cb3a:	9304      	str	r3, [sp, #16]
 800cb3c:	9307      	str	r3, [sp, #28]
 800cb3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb42:	931a      	str	r3, [sp, #104]	; 0x68
 800cb44:	4654      	mov	r4, sl
 800cb46:	2205      	movs	r2, #5
 800cb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb4c:	4850      	ldr	r0, [pc, #320]	; (800cc90 <_svfiprintf_r+0x1e8>)
 800cb4e:	f7f3 fb3f 	bl	80001d0 <memchr>
 800cb52:	9a04      	ldr	r2, [sp, #16]
 800cb54:	b9d8      	cbnz	r0, 800cb8e <_svfiprintf_r+0xe6>
 800cb56:	06d0      	lsls	r0, r2, #27
 800cb58:	bf44      	itt	mi
 800cb5a:	2320      	movmi	r3, #32
 800cb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb60:	0711      	lsls	r1, r2, #28
 800cb62:	bf44      	itt	mi
 800cb64:	232b      	movmi	r3, #43	; 0x2b
 800cb66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cb6e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb70:	d015      	beq.n	800cb9e <_svfiprintf_r+0xf6>
 800cb72:	9a07      	ldr	r2, [sp, #28]
 800cb74:	4654      	mov	r4, sl
 800cb76:	2000      	movs	r0, #0
 800cb78:	f04f 0c0a 	mov.w	ip, #10
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb82:	3b30      	subs	r3, #48	; 0x30
 800cb84:	2b09      	cmp	r3, #9
 800cb86:	d94d      	bls.n	800cc24 <_svfiprintf_r+0x17c>
 800cb88:	b1b0      	cbz	r0, 800cbb8 <_svfiprintf_r+0x110>
 800cb8a:	9207      	str	r2, [sp, #28]
 800cb8c:	e014      	b.n	800cbb8 <_svfiprintf_r+0x110>
 800cb8e:	eba0 0308 	sub.w	r3, r0, r8
 800cb92:	fa09 f303 	lsl.w	r3, r9, r3
 800cb96:	4313      	orrs	r3, r2
 800cb98:	9304      	str	r3, [sp, #16]
 800cb9a:	46a2      	mov	sl, r4
 800cb9c:	e7d2      	b.n	800cb44 <_svfiprintf_r+0x9c>
 800cb9e:	9b03      	ldr	r3, [sp, #12]
 800cba0:	1d19      	adds	r1, r3, #4
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	9103      	str	r1, [sp, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	bfbb      	ittet	lt
 800cbaa:	425b      	neglt	r3, r3
 800cbac:	f042 0202 	orrlt.w	r2, r2, #2
 800cbb0:	9307      	strge	r3, [sp, #28]
 800cbb2:	9307      	strlt	r3, [sp, #28]
 800cbb4:	bfb8      	it	lt
 800cbb6:	9204      	strlt	r2, [sp, #16]
 800cbb8:	7823      	ldrb	r3, [r4, #0]
 800cbba:	2b2e      	cmp	r3, #46	; 0x2e
 800cbbc:	d10c      	bne.n	800cbd8 <_svfiprintf_r+0x130>
 800cbbe:	7863      	ldrb	r3, [r4, #1]
 800cbc0:	2b2a      	cmp	r3, #42	; 0x2a
 800cbc2:	d134      	bne.n	800cc2e <_svfiprintf_r+0x186>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	1d1a      	adds	r2, r3, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	9203      	str	r2, [sp, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfb8      	it	lt
 800cbd0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbd4:	3402      	adds	r4, #2
 800cbd6:	9305      	str	r3, [sp, #20]
 800cbd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cca0 <_svfiprintf_r+0x1f8>
 800cbdc:	7821      	ldrb	r1, [r4, #0]
 800cbde:	2203      	movs	r2, #3
 800cbe0:	4650      	mov	r0, sl
 800cbe2:	f7f3 faf5 	bl	80001d0 <memchr>
 800cbe6:	b138      	cbz	r0, 800cbf8 <_svfiprintf_r+0x150>
 800cbe8:	9b04      	ldr	r3, [sp, #16]
 800cbea:	eba0 000a 	sub.w	r0, r0, sl
 800cbee:	2240      	movs	r2, #64	; 0x40
 800cbf0:	4082      	lsls	r2, r0
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	3401      	adds	r4, #1
 800cbf6:	9304      	str	r3, [sp, #16]
 800cbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbfc:	4825      	ldr	r0, [pc, #148]	; (800cc94 <_svfiprintf_r+0x1ec>)
 800cbfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc02:	2206      	movs	r2, #6
 800cc04:	f7f3 fae4 	bl	80001d0 <memchr>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	d038      	beq.n	800cc7e <_svfiprintf_r+0x1d6>
 800cc0c:	4b22      	ldr	r3, [pc, #136]	; (800cc98 <_svfiprintf_r+0x1f0>)
 800cc0e:	bb1b      	cbnz	r3, 800cc58 <_svfiprintf_r+0x1b0>
 800cc10:	9b03      	ldr	r3, [sp, #12]
 800cc12:	3307      	adds	r3, #7
 800cc14:	f023 0307 	bic.w	r3, r3, #7
 800cc18:	3308      	adds	r3, #8
 800cc1a:	9303      	str	r3, [sp, #12]
 800cc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc1e:	4433      	add	r3, r6
 800cc20:	9309      	str	r3, [sp, #36]	; 0x24
 800cc22:	e768      	b.n	800caf6 <_svfiprintf_r+0x4e>
 800cc24:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc28:	460c      	mov	r4, r1
 800cc2a:	2001      	movs	r0, #1
 800cc2c:	e7a6      	b.n	800cb7c <_svfiprintf_r+0xd4>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	3401      	adds	r4, #1
 800cc32:	9305      	str	r3, [sp, #20]
 800cc34:	4619      	mov	r1, r3
 800cc36:	f04f 0c0a 	mov.w	ip, #10
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc40:	3a30      	subs	r2, #48	; 0x30
 800cc42:	2a09      	cmp	r2, #9
 800cc44:	d903      	bls.n	800cc4e <_svfiprintf_r+0x1a6>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0c6      	beq.n	800cbd8 <_svfiprintf_r+0x130>
 800cc4a:	9105      	str	r1, [sp, #20]
 800cc4c:	e7c4      	b.n	800cbd8 <_svfiprintf_r+0x130>
 800cc4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc52:	4604      	mov	r4, r0
 800cc54:	2301      	movs	r3, #1
 800cc56:	e7f0      	b.n	800cc3a <_svfiprintf_r+0x192>
 800cc58:	ab03      	add	r3, sp, #12
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4b0f      	ldr	r3, [pc, #60]	; (800cc9c <_svfiprintf_r+0x1f4>)
 800cc60:	a904      	add	r1, sp, #16
 800cc62:	4638      	mov	r0, r7
 800cc64:	f7fc fad6 	bl	8009214 <_printf_float>
 800cc68:	1c42      	adds	r2, r0, #1
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	d1d6      	bne.n	800cc1c <_svfiprintf_r+0x174>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	065b      	lsls	r3, r3, #25
 800cc72:	f53f af2d 	bmi.w	800cad0 <_svfiprintf_r+0x28>
 800cc76:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc78:	b01d      	add	sp, #116	; 0x74
 800cc7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7e:	ab03      	add	r3, sp, #12
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	462a      	mov	r2, r5
 800cc84:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <_svfiprintf_r+0x1f4>)
 800cc86:	a904      	add	r1, sp, #16
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f7fc fd67 	bl	800975c <_printf_i>
 800cc8e:	e7eb      	b.n	800cc68 <_svfiprintf_r+0x1c0>
 800cc90:	0800ecf9 	.word	0x0800ecf9
 800cc94:	0800ed03 	.word	0x0800ed03
 800cc98:	08009215 	.word	0x08009215
 800cc9c:	0800c9f5 	.word	0x0800c9f5
 800cca0:	0800ecff 	.word	0x0800ecff

0800cca4 <__sfputc_r>:
 800cca4:	6893      	ldr	r3, [r2, #8]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	b410      	push	{r4}
 800ccac:	6093      	str	r3, [r2, #8]
 800ccae:	da08      	bge.n	800ccc2 <__sfputc_r+0x1e>
 800ccb0:	6994      	ldr	r4, [r2, #24]
 800ccb2:	42a3      	cmp	r3, r4
 800ccb4:	db01      	blt.n	800ccba <__sfputc_r+0x16>
 800ccb6:	290a      	cmp	r1, #10
 800ccb8:	d103      	bne.n	800ccc2 <__sfputc_r+0x1e>
 800ccba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccbe:	f7fd ba1d 	b.w	800a0fc <__swbuf_r>
 800ccc2:	6813      	ldr	r3, [r2, #0]
 800ccc4:	1c58      	adds	r0, r3, #1
 800ccc6:	6010      	str	r0, [r2, #0]
 800ccc8:	7019      	strb	r1, [r3, #0]
 800ccca:	4608      	mov	r0, r1
 800cccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccd0:	4770      	bx	lr

0800ccd2 <__sfputs_r>:
 800ccd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd4:	4606      	mov	r6, r0
 800ccd6:	460f      	mov	r7, r1
 800ccd8:	4614      	mov	r4, r2
 800ccda:	18d5      	adds	r5, r2, r3
 800ccdc:	42ac      	cmp	r4, r5
 800ccde:	d101      	bne.n	800cce4 <__sfputs_r+0x12>
 800cce0:	2000      	movs	r0, #0
 800cce2:	e007      	b.n	800ccf4 <__sfputs_r+0x22>
 800cce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce8:	463a      	mov	r2, r7
 800ccea:	4630      	mov	r0, r6
 800ccec:	f7ff ffda 	bl	800cca4 <__sfputc_r>
 800ccf0:	1c43      	adds	r3, r0, #1
 800ccf2:	d1f3      	bne.n	800ccdc <__sfputs_r+0xa>
 800ccf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ccf8 <_vfiprintf_r>:
 800ccf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccfc:	460d      	mov	r5, r1
 800ccfe:	b09d      	sub	sp, #116	; 0x74
 800cd00:	4614      	mov	r4, r2
 800cd02:	4698      	mov	r8, r3
 800cd04:	4606      	mov	r6, r0
 800cd06:	b118      	cbz	r0, 800cd10 <_vfiprintf_r+0x18>
 800cd08:	6a03      	ldr	r3, [r0, #32]
 800cd0a:	b90b      	cbnz	r3, 800cd10 <_vfiprintf_r+0x18>
 800cd0c:	f7fd f8e4 	bl	8009ed8 <__sinit>
 800cd10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd12:	07d9      	lsls	r1, r3, #31
 800cd14:	d405      	bmi.n	800cd22 <_vfiprintf_r+0x2a>
 800cd16:	89ab      	ldrh	r3, [r5, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d402      	bmi.n	800cd22 <_vfiprintf_r+0x2a>
 800cd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd1e:	f7fd fb76 	bl	800a40e <__retarget_lock_acquire_recursive>
 800cd22:	89ab      	ldrh	r3, [r5, #12]
 800cd24:	071b      	lsls	r3, r3, #28
 800cd26:	d501      	bpl.n	800cd2c <_vfiprintf_r+0x34>
 800cd28:	692b      	ldr	r3, [r5, #16]
 800cd2a:	b99b      	cbnz	r3, 800cd54 <_vfiprintf_r+0x5c>
 800cd2c:	4629      	mov	r1, r5
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f7fd fa22 	bl	800a178 <__swsetup_r>
 800cd34:	b170      	cbz	r0, 800cd54 <_vfiprintf_r+0x5c>
 800cd36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd38:	07dc      	lsls	r4, r3, #31
 800cd3a:	d504      	bpl.n	800cd46 <_vfiprintf_r+0x4e>
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd40:	b01d      	add	sp, #116	; 0x74
 800cd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd46:	89ab      	ldrh	r3, [r5, #12]
 800cd48:	0598      	lsls	r0, r3, #22
 800cd4a:	d4f7      	bmi.n	800cd3c <_vfiprintf_r+0x44>
 800cd4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd4e:	f7fd fb5f 	bl	800a410 <__retarget_lock_release_recursive>
 800cd52:	e7f3      	b.n	800cd3c <_vfiprintf_r+0x44>
 800cd54:	2300      	movs	r3, #0
 800cd56:	9309      	str	r3, [sp, #36]	; 0x24
 800cd58:	2320      	movs	r3, #32
 800cd5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd5e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd62:	2330      	movs	r3, #48	; 0x30
 800cd64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800cf18 <_vfiprintf_r+0x220>
 800cd68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd6c:	f04f 0901 	mov.w	r9, #1
 800cd70:	4623      	mov	r3, r4
 800cd72:	469a      	mov	sl, r3
 800cd74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd78:	b10a      	cbz	r2, 800cd7e <_vfiprintf_r+0x86>
 800cd7a:	2a25      	cmp	r2, #37	; 0x25
 800cd7c:	d1f9      	bne.n	800cd72 <_vfiprintf_r+0x7a>
 800cd7e:	ebba 0b04 	subs.w	fp, sl, r4
 800cd82:	d00b      	beq.n	800cd9c <_vfiprintf_r+0xa4>
 800cd84:	465b      	mov	r3, fp
 800cd86:	4622      	mov	r2, r4
 800cd88:	4629      	mov	r1, r5
 800cd8a:	4630      	mov	r0, r6
 800cd8c:	f7ff ffa1 	bl	800ccd2 <__sfputs_r>
 800cd90:	3001      	adds	r0, #1
 800cd92:	f000 80a9 	beq.w	800cee8 <_vfiprintf_r+0x1f0>
 800cd96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd98:	445a      	add	r2, fp
 800cd9a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 80a1 	beq.w	800cee8 <_vfiprintf_r+0x1f0>
 800cda6:	2300      	movs	r3, #0
 800cda8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdb0:	f10a 0a01 	add.w	sl, sl, #1
 800cdb4:	9304      	str	r3, [sp, #16]
 800cdb6:	9307      	str	r3, [sp, #28]
 800cdb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdbc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdbe:	4654      	mov	r4, sl
 800cdc0:	2205      	movs	r2, #5
 800cdc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc6:	4854      	ldr	r0, [pc, #336]	; (800cf18 <_vfiprintf_r+0x220>)
 800cdc8:	f7f3 fa02 	bl	80001d0 <memchr>
 800cdcc:	9a04      	ldr	r2, [sp, #16]
 800cdce:	b9d8      	cbnz	r0, 800ce08 <_vfiprintf_r+0x110>
 800cdd0:	06d1      	lsls	r1, r2, #27
 800cdd2:	bf44      	itt	mi
 800cdd4:	2320      	movmi	r3, #32
 800cdd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdda:	0713      	lsls	r3, r2, #28
 800cddc:	bf44      	itt	mi
 800cdde:	232b      	movmi	r3, #43	; 0x2b
 800cde0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cde4:	f89a 3000 	ldrb.w	r3, [sl]
 800cde8:	2b2a      	cmp	r3, #42	; 0x2a
 800cdea:	d015      	beq.n	800ce18 <_vfiprintf_r+0x120>
 800cdec:	9a07      	ldr	r2, [sp, #28]
 800cdee:	4654      	mov	r4, sl
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	f04f 0c0a 	mov.w	ip, #10
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdfc:	3b30      	subs	r3, #48	; 0x30
 800cdfe:	2b09      	cmp	r3, #9
 800ce00:	d94d      	bls.n	800ce9e <_vfiprintf_r+0x1a6>
 800ce02:	b1b0      	cbz	r0, 800ce32 <_vfiprintf_r+0x13a>
 800ce04:	9207      	str	r2, [sp, #28]
 800ce06:	e014      	b.n	800ce32 <_vfiprintf_r+0x13a>
 800ce08:	eba0 0308 	sub.w	r3, r0, r8
 800ce0c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce10:	4313      	orrs	r3, r2
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	46a2      	mov	sl, r4
 800ce16:	e7d2      	b.n	800cdbe <_vfiprintf_r+0xc6>
 800ce18:	9b03      	ldr	r3, [sp, #12]
 800ce1a:	1d19      	adds	r1, r3, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	9103      	str	r1, [sp, #12]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	bfbb      	ittet	lt
 800ce24:	425b      	neglt	r3, r3
 800ce26:	f042 0202 	orrlt.w	r2, r2, #2
 800ce2a:	9307      	strge	r3, [sp, #28]
 800ce2c:	9307      	strlt	r3, [sp, #28]
 800ce2e:	bfb8      	it	lt
 800ce30:	9204      	strlt	r2, [sp, #16]
 800ce32:	7823      	ldrb	r3, [r4, #0]
 800ce34:	2b2e      	cmp	r3, #46	; 0x2e
 800ce36:	d10c      	bne.n	800ce52 <_vfiprintf_r+0x15a>
 800ce38:	7863      	ldrb	r3, [r4, #1]
 800ce3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce3c:	d134      	bne.n	800cea8 <_vfiprintf_r+0x1b0>
 800ce3e:	9b03      	ldr	r3, [sp, #12]
 800ce40:	1d1a      	adds	r2, r3, #4
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	9203      	str	r2, [sp, #12]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bfb8      	it	lt
 800ce4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ce4e:	3402      	adds	r4, #2
 800ce50:	9305      	str	r3, [sp, #20]
 800ce52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cf28 <_vfiprintf_r+0x230>
 800ce56:	7821      	ldrb	r1, [r4, #0]
 800ce58:	2203      	movs	r2, #3
 800ce5a:	4650      	mov	r0, sl
 800ce5c:	f7f3 f9b8 	bl	80001d0 <memchr>
 800ce60:	b138      	cbz	r0, 800ce72 <_vfiprintf_r+0x17a>
 800ce62:	9b04      	ldr	r3, [sp, #16]
 800ce64:	eba0 000a 	sub.w	r0, r0, sl
 800ce68:	2240      	movs	r2, #64	; 0x40
 800ce6a:	4082      	lsls	r2, r0
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	3401      	adds	r4, #1
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce76:	4829      	ldr	r0, [pc, #164]	; (800cf1c <_vfiprintf_r+0x224>)
 800ce78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce7c:	2206      	movs	r2, #6
 800ce7e:	f7f3 f9a7 	bl	80001d0 <memchr>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	d03f      	beq.n	800cf06 <_vfiprintf_r+0x20e>
 800ce86:	4b26      	ldr	r3, [pc, #152]	; (800cf20 <_vfiprintf_r+0x228>)
 800ce88:	bb1b      	cbnz	r3, 800ced2 <_vfiprintf_r+0x1da>
 800ce8a:	9b03      	ldr	r3, [sp, #12]
 800ce8c:	3307      	adds	r3, #7
 800ce8e:	f023 0307 	bic.w	r3, r3, #7
 800ce92:	3308      	adds	r3, #8
 800ce94:	9303      	str	r3, [sp, #12]
 800ce96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce98:	443b      	add	r3, r7
 800ce9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9c:	e768      	b.n	800cd70 <_vfiprintf_r+0x78>
 800ce9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cea2:	460c      	mov	r4, r1
 800cea4:	2001      	movs	r0, #1
 800cea6:	e7a6      	b.n	800cdf6 <_vfiprintf_r+0xfe>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	3401      	adds	r4, #1
 800ceac:	9305      	str	r3, [sp, #20]
 800ceae:	4619      	mov	r1, r3
 800ceb0:	f04f 0c0a 	mov.w	ip, #10
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ceba:	3a30      	subs	r2, #48	; 0x30
 800cebc:	2a09      	cmp	r2, #9
 800cebe:	d903      	bls.n	800cec8 <_vfiprintf_r+0x1d0>
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d0c6      	beq.n	800ce52 <_vfiprintf_r+0x15a>
 800cec4:	9105      	str	r1, [sp, #20]
 800cec6:	e7c4      	b.n	800ce52 <_vfiprintf_r+0x15a>
 800cec8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cecc:	4604      	mov	r4, r0
 800cece:	2301      	movs	r3, #1
 800ced0:	e7f0      	b.n	800ceb4 <_vfiprintf_r+0x1bc>
 800ced2:	ab03      	add	r3, sp, #12
 800ced4:	9300      	str	r3, [sp, #0]
 800ced6:	462a      	mov	r2, r5
 800ced8:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <_vfiprintf_r+0x22c>)
 800ceda:	a904      	add	r1, sp, #16
 800cedc:	4630      	mov	r0, r6
 800cede:	f7fc f999 	bl	8009214 <_printf_float>
 800cee2:	4607      	mov	r7, r0
 800cee4:	1c78      	adds	r0, r7, #1
 800cee6:	d1d6      	bne.n	800ce96 <_vfiprintf_r+0x19e>
 800cee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceea:	07d9      	lsls	r1, r3, #31
 800ceec:	d405      	bmi.n	800cefa <_vfiprintf_r+0x202>
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	059a      	lsls	r2, r3, #22
 800cef2:	d402      	bmi.n	800cefa <_vfiprintf_r+0x202>
 800cef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef6:	f7fd fa8b 	bl	800a410 <__retarget_lock_release_recursive>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	065b      	lsls	r3, r3, #25
 800cefe:	f53f af1d 	bmi.w	800cd3c <_vfiprintf_r+0x44>
 800cf02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf04:	e71c      	b.n	800cd40 <_vfiprintf_r+0x48>
 800cf06:	ab03      	add	r3, sp, #12
 800cf08:	9300      	str	r3, [sp, #0]
 800cf0a:	462a      	mov	r2, r5
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <_vfiprintf_r+0x22c>)
 800cf0e:	a904      	add	r1, sp, #16
 800cf10:	4630      	mov	r0, r6
 800cf12:	f7fc fc23 	bl	800975c <_printf_i>
 800cf16:	e7e4      	b.n	800cee2 <_vfiprintf_r+0x1ea>
 800cf18:	0800ecf9 	.word	0x0800ecf9
 800cf1c:	0800ed03 	.word	0x0800ed03
 800cf20:	08009215 	.word	0x08009215
 800cf24:	0800ccd3 	.word	0x0800ccd3
 800cf28:	0800ecff 	.word	0x0800ecff

0800cf2c <__sflush_r>:
 800cf2c:	898a      	ldrh	r2, [r1, #12]
 800cf2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf32:	4605      	mov	r5, r0
 800cf34:	0710      	lsls	r0, r2, #28
 800cf36:	460c      	mov	r4, r1
 800cf38:	d458      	bmi.n	800cfec <__sflush_r+0xc0>
 800cf3a:	684b      	ldr	r3, [r1, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	dc05      	bgt.n	800cf4c <__sflush_r+0x20>
 800cf40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	dc02      	bgt.n	800cf4c <__sflush_r+0x20>
 800cf46:	2000      	movs	r0, #0
 800cf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf4e:	2e00      	cmp	r6, #0
 800cf50:	d0f9      	beq.n	800cf46 <__sflush_r+0x1a>
 800cf52:	2300      	movs	r3, #0
 800cf54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf58:	682f      	ldr	r7, [r5, #0]
 800cf5a:	6a21      	ldr	r1, [r4, #32]
 800cf5c:	602b      	str	r3, [r5, #0]
 800cf5e:	d032      	beq.n	800cfc6 <__sflush_r+0x9a>
 800cf60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	075a      	lsls	r2, r3, #29
 800cf66:	d505      	bpl.n	800cf74 <__sflush_r+0x48>
 800cf68:	6863      	ldr	r3, [r4, #4]
 800cf6a:	1ac0      	subs	r0, r0, r3
 800cf6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf6e:	b10b      	cbz	r3, 800cf74 <__sflush_r+0x48>
 800cf70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf72:	1ac0      	subs	r0, r0, r3
 800cf74:	2300      	movs	r3, #0
 800cf76:	4602      	mov	r2, r0
 800cf78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf7a:	6a21      	ldr	r1, [r4, #32]
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	47b0      	blx	r6
 800cf80:	1c43      	adds	r3, r0, #1
 800cf82:	89a3      	ldrh	r3, [r4, #12]
 800cf84:	d106      	bne.n	800cf94 <__sflush_r+0x68>
 800cf86:	6829      	ldr	r1, [r5, #0]
 800cf88:	291d      	cmp	r1, #29
 800cf8a:	d82b      	bhi.n	800cfe4 <__sflush_r+0xb8>
 800cf8c:	4a29      	ldr	r2, [pc, #164]	; (800d034 <__sflush_r+0x108>)
 800cf8e:	410a      	asrs	r2, r1
 800cf90:	07d6      	lsls	r6, r2, #31
 800cf92:	d427      	bmi.n	800cfe4 <__sflush_r+0xb8>
 800cf94:	2200      	movs	r2, #0
 800cf96:	6062      	str	r2, [r4, #4]
 800cf98:	04d9      	lsls	r1, r3, #19
 800cf9a:	6922      	ldr	r2, [r4, #16]
 800cf9c:	6022      	str	r2, [r4, #0]
 800cf9e:	d504      	bpl.n	800cfaa <__sflush_r+0x7e>
 800cfa0:	1c42      	adds	r2, r0, #1
 800cfa2:	d101      	bne.n	800cfa8 <__sflush_r+0x7c>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	b903      	cbnz	r3, 800cfaa <__sflush_r+0x7e>
 800cfa8:	6560      	str	r0, [r4, #84]	; 0x54
 800cfaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfac:	602f      	str	r7, [r5, #0]
 800cfae:	2900      	cmp	r1, #0
 800cfb0:	d0c9      	beq.n	800cf46 <__sflush_r+0x1a>
 800cfb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfb6:	4299      	cmp	r1, r3
 800cfb8:	d002      	beq.n	800cfc0 <__sflush_r+0x94>
 800cfba:	4628      	mov	r0, r5
 800cfbc:	f7fe f8d6 	bl	800b16c <_free_r>
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	6360      	str	r0, [r4, #52]	; 0x34
 800cfc4:	e7c0      	b.n	800cf48 <__sflush_r+0x1c>
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b0      	blx	r6
 800cfcc:	1c41      	adds	r1, r0, #1
 800cfce:	d1c8      	bne.n	800cf62 <__sflush_r+0x36>
 800cfd0:	682b      	ldr	r3, [r5, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d0c5      	beq.n	800cf62 <__sflush_r+0x36>
 800cfd6:	2b1d      	cmp	r3, #29
 800cfd8:	d001      	beq.n	800cfde <__sflush_r+0xb2>
 800cfda:	2b16      	cmp	r3, #22
 800cfdc:	d101      	bne.n	800cfe2 <__sflush_r+0xb6>
 800cfde:	602f      	str	r7, [r5, #0]
 800cfe0:	e7b1      	b.n	800cf46 <__sflush_r+0x1a>
 800cfe2:	89a3      	ldrh	r3, [r4, #12]
 800cfe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	e7ad      	b.n	800cf48 <__sflush_r+0x1c>
 800cfec:	690f      	ldr	r7, [r1, #16]
 800cfee:	2f00      	cmp	r7, #0
 800cff0:	d0a9      	beq.n	800cf46 <__sflush_r+0x1a>
 800cff2:	0793      	lsls	r3, r2, #30
 800cff4:	680e      	ldr	r6, [r1, #0]
 800cff6:	bf08      	it	eq
 800cff8:	694b      	ldreq	r3, [r1, #20]
 800cffa:	600f      	str	r7, [r1, #0]
 800cffc:	bf18      	it	ne
 800cffe:	2300      	movne	r3, #0
 800d000:	eba6 0807 	sub.w	r8, r6, r7
 800d004:	608b      	str	r3, [r1, #8]
 800d006:	f1b8 0f00 	cmp.w	r8, #0
 800d00a:	dd9c      	ble.n	800cf46 <__sflush_r+0x1a>
 800d00c:	6a21      	ldr	r1, [r4, #32]
 800d00e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d010:	4643      	mov	r3, r8
 800d012:	463a      	mov	r2, r7
 800d014:	4628      	mov	r0, r5
 800d016:	47b0      	blx	r6
 800d018:	2800      	cmp	r0, #0
 800d01a:	dc06      	bgt.n	800d02a <__sflush_r+0xfe>
 800d01c:	89a3      	ldrh	r3, [r4, #12]
 800d01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d022:	81a3      	strh	r3, [r4, #12]
 800d024:	f04f 30ff 	mov.w	r0, #4294967295
 800d028:	e78e      	b.n	800cf48 <__sflush_r+0x1c>
 800d02a:	4407      	add	r7, r0
 800d02c:	eba8 0800 	sub.w	r8, r8, r0
 800d030:	e7e9      	b.n	800d006 <__sflush_r+0xda>
 800d032:	bf00      	nop
 800d034:	dfbffffe 	.word	0xdfbffffe

0800d038 <_fflush_r>:
 800d038:	b538      	push	{r3, r4, r5, lr}
 800d03a:	690b      	ldr	r3, [r1, #16]
 800d03c:	4605      	mov	r5, r0
 800d03e:	460c      	mov	r4, r1
 800d040:	b913      	cbnz	r3, 800d048 <_fflush_r+0x10>
 800d042:	2500      	movs	r5, #0
 800d044:	4628      	mov	r0, r5
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	b118      	cbz	r0, 800d052 <_fflush_r+0x1a>
 800d04a:	6a03      	ldr	r3, [r0, #32]
 800d04c:	b90b      	cbnz	r3, 800d052 <_fflush_r+0x1a>
 800d04e:	f7fc ff43 	bl	8009ed8 <__sinit>
 800d052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0f3      	beq.n	800d042 <_fflush_r+0xa>
 800d05a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d05c:	07d0      	lsls	r0, r2, #31
 800d05e:	d404      	bmi.n	800d06a <_fflush_r+0x32>
 800d060:	0599      	lsls	r1, r3, #22
 800d062:	d402      	bmi.n	800d06a <_fflush_r+0x32>
 800d064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d066:	f7fd f9d2 	bl	800a40e <__retarget_lock_acquire_recursive>
 800d06a:	4628      	mov	r0, r5
 800d06c:	4621      	mov	r1, r4
 800d06e:	f7ff ff5d 	bl	800cf2c <__sflush_r>
 800d072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d074:	07da      	lsls	r2, r3, #31
 800d076:	4605      	mov	r5, r0
 800d078:	d4e4      	bmi.n	800d044 <_fflush_r+0xc>
 800d07a:	89a3      	ldrh	r3, [r4, #12]
 800d07c:	059b      	lsls	r3, r3, #22
 800d07e:	d4e1      	bmi.n	800d044 <_fflush_r+0xc>
 800d080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d082:	f7fd f9c5 	bl	800a410 <__retarget_lock_release_recursive>
 800d086:	e7dd      	b.n	800d044 <_fflush_r+0xc>

0800d088 <fiprintf>:
 800d088:	b40e      	push	{r1, r2, r3}
 800d08a:	b503      	push	{r0, r1, lr}
 800d08c:	4601      	mov	r1, r0
 800d08e:	ab03      	add	r3, sp, #12
 800d090:	4805      	ldr	r0, [pc, #20]	; (800d0a8 <fiprintf+0x20>)
 800d092:	f853 2b04 	ldr.w	r2, [r3], #4
 800d096:	6800      	ldr	r0, [r0, #0]
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	f7ff fe2d 	bl	800ccf8 <_vfiprintf_r>
 800d09e:	b002      	add	sp, #8
 800d0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a4:	b003      	add	sp, #12
 800d0a6:	4770      	bx	lr
 800d0a8:	200000b0 	.word	0x200000b0

0800d0ac <__swhatbuf_r>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b4:	2900      	cmp	r1, #0
 800d0b6:	b096      	sub	sp, #88	; 0x58
 800d0b8:	4615      	mov	r5, r2
 800d0ba:	461e      	mov	r6, r3
 800d0bc:	da0d      	bge.n	800d0da <__swhatbuf_r+0x2e>
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d0c4:	f04f 0100 	mov.w	r1, #0
 800d0c8:	bf0c      	ite	eq
 800d0ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d0ce:	2340      	movne	r3, #64	; 0x40
 800d0d0:	2000      	movs	r0, #0
 800d0d2:	6031      	str	r1, [r6, #0]
 800d0d4:	602b      	str	r3, [r5, #0]
 800d0d6:	b016      	add	sp, #88	; 0x58
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
 800d0da:	466a      	mov	r2, sp
 800d0dc:	f000 f874 	bl	800d1c8 <_fstat_r>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	dbec      	blt.n	800d0be <__swhatbuf_r+0x12>
 800d0e4:	9901      	ldr	r1, [sp, #4]
 800d0e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d0ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d0ee:	4259      	negs	r1, r3
 800d0f0:	4159      	adcs	r1, r3
 800d0f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0f6:	e7eb      	b.n	800d0d0 <__swhatbuf_r+0x24>

0800d0f8 <__smakebuf_r>:
 800d0f8:	898b      	ldrh	r3, [r1, #12]
 800d0fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0fc:	079d      	lsls	r5, r3, #30
 800d0fe:	4606      	mov	r6, r0
 800d100:	460c      	mov	r4, r1
 800d102:	d507      	bpl.n	800d114 <__smakebuf_r+0x1c>
 800d104:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d108:	6023      	str	r3, [r4, #0]
 800d10a:	6123      	str	r3, [r4, #16]
 800d10c:	2301      	movs	r3, #1
 800d10e:	6163      	str	r3, [r4, #20]
 800d110:	b002      	add	sp, #8
 800d112:	bd70      	pop	{r4, r5, r6, pc}
 800d114:	ab01      	add	r3, sp, #4
 800d116:	466a      	mov	r2, sp
 800d118:	f7ff ffc8 	bl	800d0ac <__swhatbuf_r>
 800d11c:	9900      	ldr	r1, [sp, #0]
 800d11e:	4605      	mov	r5, r0
 800d120:	4630      	mov	r0, r6
 800d122:	f7fe f897 	bl	800b254 <_malloc_r>
 800d126:	b948      	cbnz	r0, 800d13c <__smakebuf_r+0x44>
 800d128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d12c:	059a      	lsls	r2, r3, #22
 800d12e:	d4ef      	bmi.n	800d110 <__smakebuf_r+0x18>
 800d130:	f023 0303 	bic.w	r3, r3, #3
 800d134:	f043 0302 	orr.w	r3, r3, #2
 800d138:	81a3      	strh	r3, [r4, #12]
 800d13a:	e7e3      	b.n	800d104 <__smakebuf_r+0xc>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	6020      	str	r0, [r4, #0]
 800d140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d144:	81a3      	strh	r3, [r4, #12]
 800d146:	9b00      	ldr	r3, [sp, #0]
 800d148:	6163      	str	r3, [r4, #20]
 800d14a:	9b01      	ldr	r3, [sp, #4]
 800d14c:	6120      	str	r0, [r4, #16]
 800d14e:	b15b      	cbz	r3, 800d168 <__smakebuf_r+0x70>
 800d150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d154:	4630      	mov	r0, r6
 800d156:	f000 f849 	bl	800d1ec <_isatty_r>
 800d15a:	b128      	cbz	r0, 800d168 <__smakebuf_r+0x70>
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	f023 0303 	bic.w	r3, r3, #3
 800d162:	f043 0301 	orr.w	r3, r3, #1
 800d166:	81a3      	strh	r3, [r4, #12]
 800d168:	89a3      	ldrh	r3, [r4, #12]
 800d16a:	431d      	orrs	r5, r3
 800d16c:	81a5      	strh	r5, [r4, #12]
 800d16e:	e7cf      	b.n	800d110 <__smakebuf_r+0x18>

0800d170 <memmove>:
 800d170:	4288      	cmp	r0, r1
 800d172:	b510      	push	{r4, lr}
 800d174:	eb01 0402 	add.w	r4, r1, r2
 800d178:	d902      	bls.n	800d180 <memmove+0x10>
 800d17a:	4284      	cmp	r4, r0
 800d17c:	4623      	mov	r3, r4
 800d17e:	d807      	bhi.n	800d190 <memmove+0x20>
 800d180:	1e43      	subs	r3, r0, #1
 800d182:	42a1      	cmp	r1, r4
 800d184:	d008      	beq.n	800d198 <memmove+0x28>
 800d186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d18a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d18e:	e7f8      	b.n	800d182 <memmove+0x12>
 800d190:	4402      	add	r2, r0
 800d192:	4601      	mov	r1, r0
 800d194:	428a      	cmp	r2, r1
 800d196:	d100      	bne.n	800d19a <memmove+0x2a>
 800d198:	bd10      	pop	{r4, pc}
 800d19a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d19e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1a2:	e7f7      	b.n	800d194 <memmove+0x24>

0800d1a4 <strncmp>:
 800d1a4:	b510      	push	{r4, lr}
 800d1a6:	b16a      	cbz	r2, 800d1c4 <strncmp+0x20>
 800d1a8:	3901      	subs	r1, #1
 800d1aa:	1884      	adds	r4, r0, r2
 800d1ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d103      	bne.n	800d1c0 <strncmp+0x1c>
 800d1b8:	42a0      	cmp	r0, r4
 800d1ba:	d001      	beq.n	800d1c0 <strncmp+0x1c>
 800d1bc:	2a00      	cmp	r2, #0
 800d1be:	d1f5      	bne.n	800d1ac <strncmp+0x8>
 800d1c0:	1ad0      	subs	r0, r2, r3
 800d1c2:	bd10      	pop	{r4, pc}
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	e7fc      	b.n	800d1c2 <strncmp+0x1e>

0800d1c8 <_fstat_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4d07      	ldr	r5, [pc, #28]	; (800d1e8 <_fstat_r+0x20>)
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	4608      	mov	r0, r1
 800d1d2:	4611      	mov	r1, r2
 800d1d4:	602b      	str	r3, [r5, #0]
 800d1d6:	f7f4 fb40 	bl	800185a <_fstat>
 800d1da:	1c43      	adds	r3, r0, #1
 800d1dc:	d102      	bne.n	800d1e4 <_fstat_r+0x1c>
 800d1de:	682b      	ldr	r3, [r5, #0]
 800d1e0:	b103      	cbz	r3, 800d1e4 <_fstat_r+0x1c>
 800d1e2:	6023      	str	r3, [r4, #0]
 800d1e4:	bd38      	pop	{r3, r4, r5, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20004ef8 	.word	0x20004ef8

0800d1ec <_isatty_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4d06      	ldr	r5, [pc, #24]	; (800d208 <_isatty_r+0x1c>)
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	4608      	mov	r0, r1
 800d1f6:	602b      	str	r3, [r5, #0]
 800d1f8:	f7f4 fb3f 	bl	800187a <_isatty>
 800d1fc:	1c43      	adds	r3, r0, #1
 800d1fe:	d102      	bne.n	800d206 <_isatty_r+0x1a>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	b103      	cbz	r3, 800d206 <_isatty_r+0x1a>
 800d204:	6023      	str	r3, [r4, #0]
 800d206:	bd38      	pop	{r3, r4, r5, pc}
 800d208:	20004ef8 	.word	0x20004ef8

0800d20c <_sbrk_r>:
 800d20c:	b538      	push	{r3, r4, r5, lr}
 800d20e:	4d06      	ldr	r5, [pc, #24]	; (800d228 <_sbrk_r+0x1c>)
 800d210:	2300      	movs	r3, #0
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	602b      	str	r3, [r5, #0]
 800d218:	f7f4 fb48 	bl	80018ac <_sbrk>
 800d21c:	1c43      	adds	r3, r0, #1
 800d21e:	d102      	bne.n	800d226 <_sbrk_r+0x1a>
 800d220:	682b      	ldr	r3, [r5, #0]
 800d222:	b103      	cbz	r3, 800d226 <_sbrk_r+0x1a>
 800d224:	6023      	str	r3, [r4, #0]
 800d226:	bd38      	pop	{r3, r4, r5, pc}
 800d228:	20004ef8 	.word	0x20004ef8
 800d22c:	00000000 	.word	0x00000000

0800d230 <nan>:
 800d230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d238 <nan+0x8>
 800d234:	4770      	bx	lr
 800d236:	bf00      	nop
 800d238:	00000000 	.word	0x00000000
 800d23c:	7ff80000 	.word	0x7ff80000

0800d240 <abort>:
 800d240:	b508      	push	{r3, lr}
 800d242:	2006      	movs	r0, #6
 800d244:	f000 fbe6 	bl	800da14 <raise>
 800d248:	2001      	movs	r0, #1
 800d24a:	f7f4 fab7 	bl	80017bc <_exit>

0800d24e <_calloc_r>:
 800d24e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d250:	fba1 2402 	umull	r2, r4, r1, r2
 800d254:	b94c      	cbnz	r4, 800d26a <_calloc_r+0x1c>
 800d256:	4611      	mov	r1, r2
 800d258:	9201      	str	r2, [sp, #4]
 800d25a:	f7fd fffb 	bl	800b254 <_malloc_r>
 800d25e:	9a01      	ldr	r2, [sp, #4]
 800d260:	4605      	mov	r5, r0
 800d262:	b930      	cbnz	r0, 800d272 <_calloc_r+0x24>
 800d264:	4628      	mov	r0, r5
 800d266:	b003      	add	sp, #12
 800d268:	bd30      	pop	{r4, r5, pc}
 800d26a:	220c      	movs	r2, #12
 800d26c:	6002      	str	r2, [r0, #0]
 800d26e:	2500      	movs	r5, #0
 800d270:	e7f8      	b.n	800d264 <_calloc_r+0x16>
 800d272:	4621      	mov	r1, r4
 800d274:	f7fc ffd8 	bl	800a228 <memset>
 800d278:	e7f4      	b.n	800d264 <_calloc_r+0x16>

0800d27a <rshift>:
 800d27a:	6903      	ldr	r3, [r0, #16]
 800d27c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d284:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d288:	f100 0414 	add.w	r4, r0, #20
 800d28c:	dd45      	ble.n	800d31a <rshift+0xa0>
 800d28e:	f011 011f 	ands.w	r1, r1, #31
 800d292:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d296:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d29a:	d10c      	bne.n	800d2b6 <rshift+0x3c>
 800d29c:	f100 0710 	add.w	r7, r0, #16
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	42b1      	cmp	r1, r6
 800d2a4:	d334      	bcc.n	800d310 <rshift+0x96>
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	1eea      	subs	r2, r5, #3
 800d2ac:	4296      	cmp	r6, r2
 800d2ae:	bf38      	it	cc
 800d2b0:	2300      	movcc	r3, #0
 800d2b2:	4423      	add	r3, r4
 800d2b4:	e015      	b.n	800d2e2 <rshift+0x68>
 800d2b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2ba:	f1c1 0820 	rsb	r8, r1, #32
 800d2be:	40cf      	lsrs	r7, r1
 800d2c0:	f105 0e04 	add.w	lr, r5, #4
 800d2c4:	46a1      	mov	r9, r4
 800d2c6:	4576      	cmp	r6, lr
 800d2c8:	46f4      	mov	ip, lr
 800d2ca:	d815      	bhi.n	800d2f8 <rshift+0x7e>
 800d2cc:	1a9a      	subs	r2, r3, r2
 800d2ce:	0092      	lsls	r2, r2, #2
 800d2d0:	3a04      	subs	r2, #4
 800d2d2:	3501      	adds	r5, #1
 800d2d4:	42ae      	cmp	r6, r5
 800d2d6:	bf38      	it	cc
 800d2d8:	2200      	movcc	r2, #0
 800d2da:	18a3      	adds	r3, r4, r2
 800d2dc:	50a7      	str	r7, [r4, r2]
 800d2de:	b107      	cbz	r7, 800d2e2 <rshift+0x68>
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	1b1a      	subs	r2, r3, r4
 800d2e4:	42a3      	cmp	r3, r4
 800d2e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2ea:	bf08      	it	eq
 800d2ec:	2300      	moveq	r3, #0
 800d2ee:	6102      	str	r2, [r0, #16]
 800d2f0:	bf08      	it	eq
 800d2f2:	6143      	streq	r3, [r0, #20]
 800d2f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2f8:	f8dc c000 	ldr.w	ip, [ip]
 800d2fc:	fa0c fc08 	lsl.w	ip, ip, r8
 800d300:	ea4c 0707 	orr.w	r7, ip, r7
 800d304:	f849 7b04 	str.w	r7, [r9], #4
 800d308:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d30c:	40cf      	lsrs	r7, r1
 800d30e:	e7da      	b.n	800d2c6 <rshift+0x4c>
 800d310:	f851 cb04 	ldr.w	ip, [r1], #4
 800d314:	f847 cf04 	str.w	ip, [r7, #4]!
 800d318:	e7c3      	b.n	800d2a2 <rshift+0x28>
 800d31a:	4623      	mov	r3, r4
 800d31c:	e7e1      	b.n	800d2e2 <rshift+0x68>

0800d31e <__hexdig_fun>:
 800d31e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d322:	2b09      	cmp	r3, #9
 800d324:	d802      	bhi.n	800d32c <__hexdig_fun+0xe>
 800d326:	3820      	subs	r0, #32
 800d328:	b2c0      	uxtb	r0, r0
 800d32a:	4770      	bx	lr
 800d32c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d330:	2b05      	cmp	r3, #5
 800d332:	d801      	bhi.n	800d338 <__hexdig_fun+0x1a>
 800d334:	3847      	subs	r0, #71	; 0x47
 800d336:	e7f7      	b.n	800d328 <__hexdig_fun+0xa>
 800d338:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d33c:	2b05      	cmp	r3, #5
 800d33e:	d801      	bhi.n	800d344 <__hexdig_fun+0x26>
 800d340:	3827      	subs	r0, #39	; 0x27
 800d342:	e7f1      	b.n	800d328 <__hexdig_fun+0xa>
 800d344:	2000      	movs	r0, #0
 800d346:	4770      	bx	lr

0800d348 <__gethex>:
 800d348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34c:	4617      	mov	r7, r2
 800d34e:	680a      	ldr	r2, [r1, #0]
 800d350:	b085      	sub	sp, #20
 800d352:	f102 0b02 	add.w	fp, r2, #2
 800d356:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d35a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d35e:	4681      	mov	r9, r0
 800d360:	468a      	mov	sl, r1
 800d362:	9302      	str	r3, [sp, #8]
 800d364:	32fe      	adds	r2, #254	; 0xfe
 800d366:	eb02 030b 	add.w	r3, r2, fp
 800d36a:	46d8      	mov	r8, fp
 800d36c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d370:	9301      	str	r3, [sp, #4]
 800d372:	2830      	cmp	r0, #48	; 0x30
 800d374:	d0f7      	beq.n	800d366 <__gethex+0x1e>
 800d376:	f7ff ffd2 	bl	800d31e <__hexdig_fun>
 800d37a:	4604      	mov	r4, r0
 800d37c:	2800      	cmp	r0, #0
 800d37e:	d138      	bne.n	800d3f2 <__gethex+0xaa>
 800d380:	49a7      	ldr	r1, [pc, #668]	; (800d620 <__gethex+0x2d8>)
 800d382:	2201      	movs	r2, #1
 800d384:	4640      	mov	r0, r8
 800d386:	f7ff ff0d 	bl	800d1a4 <strncmp>
 800d38a:	4606      	mov	r6, r0
 800d38c:	2800      	cmp	r0, #0
 800d38e:	d169      	bne.n	800d464 <__gethex+0x11c>
 800d390:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d394:	465d      	mov	r5, fp
 800d396:	f7ff ffc2 	bl	800d31e <__hexdig_fun>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d064      	beq.n	800d468 <__gethex+0x120>
 800d39e:	465a      	mov	r2, fp
 800d3a0:	7810      	ldrb	r0, [r2, #0]
 800d3a2:	2830      	cmp	r0, #48	; 0x30
 800d3a4:	4690      	mov	r8, r2
 800d3a6:	f102 0201 	add.w	r2, r2, #1
 800d3aa:	d0f9      	beq.n	800d3a0 <__gethex+0x58>
 800d3ac:	f7ff ffb7 	bl	800d31e <__hexdig_fun>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	fab0 f480 	clz	r4, r0
 800d3b6:	0964      	lsrs	r4, r4, #5
 800d3b8:	465e      	mov	r6, fp
 800d3ba:	9301      	str	r3, [sp, #4]
 800d3bc:	4642      	mov	r2, r8
 800d3be:	4615      	mov	r5, r2
 800d3c0:	3201      	adds	r2, #1
 800d3c2:	7828      	ldrb	r0, [r5, #0]
 800d3c4:	f7ff ffab 	bl	800d31e <__hexdig_fun>
 800d3c8:	2800      	cmp	r0, #0
 800d3ca:	d1f8      	bne.n	800d3be <__gethex+0x76>
 800d3cc:	4994      	ldr	r1, [pc, #592]	; (800d620 <__gethex+0x2d8>)
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	4628      	mov	r0, r5
 800d3d2:	f7ff fee7 	bl	800d1a4 <strncmp>
 800d3d6:	b978      	cbnz	r0, 800d3f8 <__gethex+0xb0>
 800d3d8:	b946      	cbnz	r6, 800d3ec <__gethex+0xa4>
 800d3da:	1c6e      	adds	r6, r5, #1
 800d3dc:	4632      	mov	r2, r6
 800d3de:	4615      	mov	r5, r2
 800d3e0:	3201      	adds	r2, #1
 800d3e2:	7828      	ldrb	r0, [r5, #0]
 800d3e4:	f7ff ff9b 	bl	800d31e <__hexdig_fun>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d1f8      	bne.n	800d3de <__gethex+0x96>
 800d3ec:	1b73      	subs	r3, r6, r5
 800d3ee:	009e      	lsls	r6, r3, #2
 800d3f0:	e004      	b.n	800d3fc <__gethex+0xb4>
 800d3f2:	2400      	movs	r4, #0
 800d3f4:	4626      	mov	r6, r4
 800d3f6:	e7e1      	b.n	800d3bc <__gethex+0x74>
 800d3f8:	2e00      	cmp	r6, #0
 800d3fa:	d1f7      	bne.n	800d3ec <__gethex+0xa4>
 800d3fc:	782b      	ldrb	r3, [r5, #0]
 800d3fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d402:	2b50      	cmp	r3, #80	; 0x50
 800d404:	d13d      	bne.n	800d482 <__gethex+0x13a>
 800d406:	786b      	ldrb	r3, [r5, #1]
 800d408:	2b2b      	cmp	r3, #43	; 0x2b
 800d40a:	d02f      	beq.n	800d46c <__gethex+0x124>
 800d40c:	2b2d      	cmp	r3, #45	; 0x2d
 800d40e:	d031      	beq.n	800d474 <__gethex+0x12c>
 800d410:	1c69      	adds	r1, r5, #1
 800d412:	f04f 0b00 	mov.w	fp, #0
 800d416:	7808      	ldrb	r0, [r1, #0]
 800d418:	f7ff ff81 	bl	800d31e <__hexdig_fun>
 800d41c:	1e42      	subs	r2, r0, #1
 800d41e:	b2d2      	uxtb	r2, r2
 800d420:	2a18      	cmp	r2, #24
 800d422:	d82e      	bhi.n	800d482 <__gethex+0x13a>
 800d424:	f1a0 0210 	sub.w	r2, r0, #16
 800d428:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d42c:	f7ff ff77 	bl	800d31e <__hexdig_fun>
 800d430:	f100 3cff 	add.w	ip, r0, #4294967295
 800d434:	fa5f fc8c 	uxtb.w	ip, ip
 800d438:	f1bc 0f18 	cmp.w	ip, #24
 800d43c:	d91d      	bls.n	800d47a <__gethex+0x132>
 800d43e:	f1bb 0f00 	cmp.w	fp, #0
 800d442:	d000      	beq.n	800d446 <__gethex+0xfe>
 800d444:	4252      	negs	r2, r2
 800d446:	4416      	add	r6, r2
 800d448:	f8ca 1000 	str.w	r1, [sl]
 800d44c:	b1dc      	cbz	r4, 800d486 <__gethex+0x13e>
 800d44e:	9b01      	ldr	r3, [sp, #4]
 800d450:	2b00      	cmp	r3, #0
 800d452:	bf14      	ite	ne
 800d454:	f04f 0800 	movne.w	r8, #0
 800d458:	f04f 0806 	moveq.w	r8, #6
 800d45c:	4640      	mov	r0, r8
 800d45e:	b005      	add	sp, #20
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d464:	4645      	mov	r5, r8
 800d466:	4626      	mov	r6, r4
 800d468:	2401      	movs	r4, #1
 800d46a:	e7c7      	b.n	800d3fc <__gethex+0xb4>
 800d46c:	f04f 0b00 	mov.w	fp, #0
 800d470:	1ca9      	adds	r1, r5, #2
 800d472:	e7d0      	b.n	800d416 <__gethex+0xce>
 800d474:	f04f 0b01 	mov.w	fp, #1
 800d478:	e7fa      	b.n	800d470 <__gethex+0x128>
 800d47a:	230a      	movs	r3, #10
 800d47c:	fb03 0002 	mla	r0, r3, r2, r0
 800d480:	e7d0      	b.n	800d424 <__gethex+0xdc>
 800d482:	4629      	mov	r1, r5
 800d484:	e7e0      	b.n	800d448 <__gethex+0x100>
 800d486:	eba5 0308 	sub.w	r3, r5, r8
 800d48a:	3b01      	subs	r3, #1
 800d48c:	4621      	mov	r1, r4
 800d48e:	2b07      	cmp	r3, #7
 800d490:	dc0a      	bgt.n	800d4a8 <__gethex+0x160>
 800d492:	4648      	mov	r0, r9
 800d494:	f7fd ff6a 	bl	800b36c <_Balloc>
 800d498:	4604      	mov	r4, r0
 800d49a:	b940      	cbnz	r0, 800d4ae <__gethex+0x166>
 800d49c:	4b61      	ldr	r3, [pc, #388]	; (800d624 <__gethex+0x2dc>)
 800d49e:	4602      	mov	r2, r0
 800d4a0:	21e4      	movs	r1, #228	; 0xe4
 800d4a2:	4861      	ldr	r0, [pc, #388]	; (800d628 <__gethex+0x2e0>)
 800d4a4:	f7fc ffca 	bl	800a43c <__assert_func>
 800d4a8:	3101      	adds	r1, #1
 800d4aa:	105b      	asrs	r3, r3, #1
 800d4ac:	e7ef      	b.n	800d48e <__gethex+0x146>
 800d4ae:	f100 0a14 	add.w	sl, r0, #20
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	495a      	ldr	r1, [pc, #360]	; (800d620 <__gethex+0x2d8>)
 800d4b6:	f8cd a004 	str.w	sl, [sp, #4]
 800d4ba:	469b      	mov	fp, r3
 800d4bc:	45a8      	cmp	r8, r5
 800d4be:	d342      	bcc.n	800d546 <__gethex+0x1fe>
 800d4c0:	9801      	ldr	r0, [sp, #4]
 800d4c2:	f840 bb04 	str.w	fp, [r0], #4
 800d4c6:	eba0 000a 	sub.w	r0, r0, sl
 800d4ca:	1080      	asrs	r0, r0, #2
 800d4cc:	6120      	str	r0, [r4, #16]
 800d4ce:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d4d2:	4658      	mov	r0, fp
 800d4d4:	f7fe f83c 	bl	800b550 <__hi0bits>
 800d4d8:	683d      	ldr	r5, [r7, #0]
 800d4da:	eba8 0000 	sub.w	r0, r8, r0
 800d4de:	42a8      	cmp	r0, r5
 800d4e0:	dd59      	ble.n	800d596 <__gethex+0x24e>
 800d4e2:	eba0 0805 	sub.w	r8, r0, r5
 800d4e6:	4641      	mov	r1, r8
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f7fe fbcb 	bl	800bc84 <__any_on>
 800d4ee:	4683      	mov	fp, r0
 800d4f0:	b1b8      	cbz	r0, 800d522 <__gethex+0x1da>
 800d4f2:	f108 33ff 	add.w	r3, r8, #4294967295
 800d4f6:	1159      	asrs	r1, r3, #5
 800d4f8:	f003 021f 	and.w	r2, r3, #31
 800d4fc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d500:	f04f 0b01 	mov.w	fp, #1
 800d504:	fa0b f202 	lsl.w	r2, fp, r2
 800d508:	420a      	tst	r2, r1
 800d50a:	d00a      	beq.n	800d522 <__gethex+0x1da>
 800d50c:	455b      	cmp	r3, fp
 800d50e:	dd06      	ble.n	800d51e <__gethex+0x1d6>
 800d510:	f1a8 0102 	sub.w	r1, r8, #2
 800d514:	4620      	mov	r0, r4
 800d516:	f7fe fbb5 	bl	800bc84 <__any_on>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d138      	bne.n	800d590 <__gethex+0x248>
 800d51e:	f04f 0b02 	mov.w	fp, #2
 800d522:	4641      	mov	r1, r8
 800d524:	4620      	mov	r0, r4
 800d526:	f7ff fea8 	bl	800d27a <rshift>
 800d52a:	4446      	add	r6, r8
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	42b3      	cmp	r3, r6
 800d530:	da41      	bge.n	800d5b6 <__gethex+0x26e>
 800d532:	4621      	mov	r1, r4
 800d534:	4648      	mov	r0, r9
 800d536:	f7fd ff59 	bl	800b3ec <_Bfree>
 800d53a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d53c:	2300      	movs	r3, #0
 800d53e:	6013      	str	r3, [r2, #0]
 800d540:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d544:	e78a      	b.n	800d45c <__gethex+0x114>
 800d546:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d54a:	2a2e      	cmp	r2, #46	; 0x2e
 800d54c:	d014      	beq.n	800d578 <__gethex+0x230>
 800d54e:	2b20      	cmp	r3, #32
 800d550:	d106      	bne.n	800d560 <__gethex+0x218>
 800d552:	9b01      	ldr	r3, [sp, #4]
 800d554:	f843 bb04 	str.w	fp, [r3], #4
 800d558:	f04f 0b00 	mov.w	fp, #0
 800d55c:	9301      	str	r3, [sp, #4]
 800d55e:	465b      	mov	r3, fp
 800d560:	7828      	ldrb	r0, [r5, #0]
 800d562:	9303      	str	r3, [sp, #12]
 800d564:	f7ff fedb 	bl	800d31e <__hexdig_fun>
 800d568:	9b03      	ldr	r3, [sp, #12]
 800d56a:	f000 000f 	and.w	r0, r0, #15
 800d56e:	4098      	lsls	r0, r3
 800d570:	ea4b 0b00 	orr.w	fp, fp, r0
 800d574:	3304      	adds	r3, #4
 800d576:	e7a1      	b.n	800d4bc <__gethex+0x174>
 800d578:	45a8      	cmp	r8, r5
 800d57a:	d8e8      	bhi.n	800d54e <__gethex+0x206>
 800d57c:	2201      	movs	r2, #1
 800d57e:	4628      	mov	r0, r5
 800d580:	9303      	str	r3, [sp, #12]
 800d582:	f7ff fe0f 	bl	800d1a4 <strncmp>
 800d586:	4926      	ldr	r1, [pc, #152]	; (800d620 <__gethex+0x2d8>)
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	2800      	cmp	r0, #0
 800d58c:	d1df      	bne.n	800d54e <__gethex+0x206>
 800d58e:	e795      	b.n	800d4bc <__gethex+0x174>
 800d590:	f04f 0b03 	mov.w	fp, #3
 800d594:	e7c5      	b.n	800d522 <__gethex+0x1da>
 800d596:	da0b      	bge.n	800d5b0 <__gethex+0x268>
 800d598:	eba5 0800 	sub.w	r8, r5, r0
 800d59c:	4621      	mov	r1, r4
 800d59e:	4642      	mov	r2, r8
 800d5a0:	4648      	mov	r0, r9
 800d5a2:	f7fe f93d 	bl	800b820 <__lshift>
 800d5a6:	eba6 0608 	sub.w	r6, r6, r8
 800d5aa:	4604      	mov	r4, r0
 800d5ac:	f100 0a14 	add.w	sl, r0, #20
 800d5b0:	f04f 0b00 	mov.w	fp, #0
 800d5b4:	e7ba      	b.n	800d52c <__gethex+0x1e4>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	42b3      	cmp	r3, r6
 800d5ba:	dd73      	ble.n	800d6a4 <__gethex+0x35c>
 800d5bc:	1b9e      	subs	r6, r3, r6
 800d5be:	42b5      	cmp	r5, r6
 800d5c0:	dc34      	bgt.n	800d62c <__gethex+0x2e4>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d023      	beq.n	800d610 <__gethex+0x2c8>
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d025      	beq.n	800d618 <__gethex+0x2d0>
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d115      	bne.n	800d5fc <__gethex+0x2b4>
 800d5d0:	42b5      	cmp	r5, r6
 800d5d2:	d113      	bne.n	800d5fc <__gethex+0x2b4>
 800d5d4:	2d01      	cmp	r5, #1
 800d5d6:	d10b      	bne.n	800d5f0 <__gethex+0x2a8>
 800d5d8:	9a02      	ldr	r2, [sp, #8]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6013      	str	r3, [r2, #0]
 800d5de:	2301      	movs	r3, #1
 800d5e0:	6123      	str	r3, [r4, #16]
 800d5e2:	f8ca 3000 	str.w	r3, [sl]
 800d5e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5e8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d5ec:	601c      	str	r4, [r3, #0]
 800d5ee:	e735      	b.n	800d45c <__gethex+0x114>
 800d5f0:	1e69      	subs	r1, r5, #1
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f7fe fb46 	bl	800bc84 <__any_on>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d1ed      	bne.n	800d5d8 <__gethex+0x290>
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4648      	mov	r0, r9
 800d600:	f7fd fef4 	bl	800b3ec <_Bfree>
 800d604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d606:	2300      	movs	r3, #0
 800d608:	6013      	str	r3, [r2, #0]
 800d60a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d60e:	e725      	b.n	800d45c <__gethex+0x114>
 800d610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1f2      	bne.n	800d5fc <__gethex+0x2b4>
 800d616:	e7df      	b.n	800d5d8 <__gethex+0x290>
 800d618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1dc      	bne.n	800d5d8 <__gethex+0x290>
 800d61e:	e7ed      	b.n	800d5fc <__gethex+0x2b4>
 800d620:	0800eba4 	.word	0x0800eba4
 800d624:	0800ea3c 	.word	0x0800ea3c
 800d628:	0800ed12 	.word	0x0800ed12
 800d62c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d630:	f1bb 0f00 	cmp.w	fp, #0
 800d634:	d133      	bne.n	800d69e <__gethex+0x356>
 800d636:	f1b8 0f00 	cmp.w	r8, #0
 800d63a:	d004      	beq.n	800d646 <__gethex+0x2fe>
 800d63c:	4641      	mov	r1, r8
 800d63e:	4620      	mov	r0, r4
 800d640:	f7fe fb20 	bl	800bc84 <__any_on>
 800d644:	4683      	mov	fp, r0
 800d646:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d64a:	2301      	movs	r3, #1
 800d64c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d650:	f008 081f 	and.w	r8, r8, #31
 800d654:	fa03 f308 	lsl.w	r3, r3, r8
 800d658:	4213      	tst	r3, r2
 800d65a:	4631      	mov	r1, r6
 800d65c:	4620      	mov	r0, r4
 800d65e:	bf18      	it	ne
 800d660:	f04b 0b02 	orrne.w	fp, fp, #2
 800d664:	1bad      	subs	r5, r5, r6
 800d666:	f7ff fe08 	bl	800d27a <rshift>
 800d66a:	687e      	ldr	r6, [r7, #4]
 800d66c:	f04f 0802 	mov.w	r8, #2
 800d670:	f1bb 0f00 	cmp.w	fp, #0
 800d674:	d04a      	beq.n	800d70c <__gethex+0x3c4>
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d016      	beq.n	800d6aa <__gethex+0x362>
 800d67c:	2b03      	cmp	r3, #3
 800d67e:	d018      	beq.n	800d6b2 <__gethex+0x36a>
 800d680:	2b01      	cmp	r3, #1
 800d682:	d109      	bne.n	800d698 <__gethex+0x350>
 800d684:	f01b 0f02 	tst.w	fp, #2
 800d688:	d006      	beq.n	800d698 <__gethex+0x350>
 800d68a:	f8da 3000 	ldr.w	r3, [sl]
 800d68e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d692:	f01b 0f01 	tst.w	fp, #1
 800d696:	d10f      	bne.n	800d6b8 <__gethex+0x370>
 800d698:	f048 0810 	orr.w	r8, r8, #16
 800d69c:	e036      	b.n	800d70c <__gethex+0x3c4>
 800d69e:	f04f 0b01 	mov.w	fp, #1
 800d6a2:	e7d0      	b.n	800d646 <__gethex+0x2fe>
 800d6a4:	f04f 0801 	mov.w	r8, #1
 800d6a8:	e7e2      	b.n	800d670 <__gethex+0x328>
 800d6aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6ac:	f1c3 0301 	rsb	r3, r3, #1
 800d6b0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0ef      	beq.n	800d698 <__gethex+0x350>
 800d6b8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6bc:	f104 0214 	add.w	r2, r4, #20
 800d6c0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d6c4:	9301      	str	r3, [sp, #4]
 800d6c6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	4694      	mov	ip, r2
 800d6ce:	f852 1b04 	ldr.w	r1, [r2], #4
 800d6d2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d6d6:	d01e      	beq.n	800d716 <__gethex+0x3ce>
 800d6d8:	3101      	adds	r1, #1
 800d6da:	f8cc 1000 	str.w	r1, [ip]
 800d6de:	f1b8 0f02 	cmp.w	r8, #2
 800d6e2:	f104 0214 	add.w	r2, r4, #20
 800d6e6:	d13d      	bne.n	800d764 <__gethex+0x41c>
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	42ab      	cmp	r3, r5
 800d6ee:	d10b      	bne.n	800d708 <__gethex+0x3c0>
 800d6f0:	1169      	asrs	r1, r5, #5
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	f005 051f 	and.w	r5, r5, #31
 800d6f8:	fa03 f505 	lsl.w	r5, r3, r5
 800d6fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d700:	421d      	tst	r5, r3
 800d702:	bf18      	it	ne
 800d704:	f04f 0801 	movne.w	r8, #1
 800d708:	f048 0820 	orr.w	r8, r8, #32
 800d70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d70e:	601c      	str	r4, [r3, #0]
 800d710:	9b02      	ldr	r3, [sp, #8]
 800d712:	601e      	str	r6, [r3, #0]
 800d714:	e6a2      	b.n	800d45c <__gethex+0x114>
 800d716:	4290      	cmp	r0, r2
 800d718:	f842 3c04 	str.w	r3, [r2, #-4]
 800d71c:	d8d6      	bhi.n	800d6cc <__gethex+0x384>
 800d71e:	68a2      	ldr	r2, [r4, #8]
 800d720:	4593      	cmp	fp, r2
 800d722:	db17      	blt.n	800d754 <__gethex+0x40c>
 800d724:	6861      	ldr	r1, [r4, #4]
 800d726:	4648      	mov	r0, r9
 800d728:	3101      	adds	r1, #1
 800d72a:	f7fd fe1f 	bl	800b36c <_Balloc>
 800d72e:	4682      	mov	sl, r0
 800d730:	b918      	cbnz	r0, 800d73a <__gethex+0x3f2>
 800d732:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <__gethex+0x458>)
 800d734:	4602      	mov	r2, r0
 800d736:	2184      	movs	r1, #132	; 0x84
 800d738:	e6b3      	b.n	800d4a2 <__gethex+0x15a>
 800d73a:	6922      	ldr	r2, [r4, #16]
 800d73c:	3202      	adds	r2, #2
 800d73e:	f104 010c 	add.w	r1, r4, #12
 800d742:	0092      	lsls	r2, r2, #2
 800d744:	300c      	adds	r0, #12
 800d746:	f7fc fe64 	bl	800a412 <memcpy>
 800d74a:	4621      	mov	r1, r4
 800d74c:	4648      	mov	r0, r9
 800d74e:	f7fd fe4d 	bl	800b3ec <_Bfree>
 800d752:	4654      	mov	r4, sl
 800d754:	6922      	ldr	r2, [r4, #16]
 800d756:	1c51      	adds	r1, r2, #1
 800d758:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d75c:	6121      	str	r1, [r4, #16]
 800d75e:	2101      	movs	r1, #1
 800d760:	6151      	str	r1, [r2, #20]
 800d762:	e7bc      	b.n	800d6de <__gethex+0x396>
 800d764:	6921      	ldr	r1, [r4, #16]
 800d766:	4559      	cmp	r1, fp
 800d768:	dd0b      	ble.n	800d782 <__gethex+0x43a>
 800d76a:	2101      	movs	r1, #1
 800d76c:	4620      	mov	r0, r4
 800d76e:	f7ff fd84 	bl	800d27a <rshift>
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	3601      	adds	r6, #1
 800d776:	42b3      	cmp	r3, r6
 800d778:	f6ff aedb 	blt.w	800d532 <__gethex+0x1ea>
 800d77c:	f04f 0801 	mov.w	r8, #1
 800d780:	e7c2      	b.n	800d708 <__gethex+0x3c0>
 800d782:	f015 051f 	ands.w	r5, r5, #31
 800d786:	d0f9      	beq.n	800d77c <__gethex+0x434>
 800d788:	9b01      	ldr	r3, [sp, #4]
 800d78a:	441a      	add	r2, r3
 800d78c:	f1c5 0520 	rsb	r5, r5, #32
 800d790:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d794:	f7fd fedc 	bl	800b550 <__hi0bits>
 800d798:	42a8      	cmp	r0, r5
 800d79a:	dbe6      	blt.n	800d76a <__gethex+0x422>
 800d79c:	e7ee      	b.n	800d77c <__gethex+0x434>
 800d79e:	bf00      	nop
 800d7a0:	0800ea3c 	.word	0x0800ea3c

0800d7a4 <L_shift>:
 800d7a4:	f1c2 0208 	rsb	r2, r2, #8
 800d7a8:	0092      	lsls	r2, r2, #2
 800d7aa:	b570      	push	{r4, r5, r6, lr}
 800d7ac:	f1c2 0620 	rsb	r6, r2, #32
 800d7b0:	6843      	ldr	r3, [r0, #4]
 800d7b2:	6804      	ldr	r4, [r0, #0]
 800d7b4:	fa03 f506 	lsl.w	r5, r3, r6
 800d7b8:	432c      	orrs	r4, r5
 800d7ba:	40d3      	lsrs	r3, r2
 800d7bc:	6004      	str	r4, [r0, #0]
 800d7be:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7c2:	4288      	cmp	r0, r1
 800d7c4:	d3f4      	bcc.n	800d7b0 <L_shift+0xc>
 800d7c6:	bd70      	pop	{r4, r5, r6, pc}

0800d7c8 <__match>:
 800d7c8:	b530      	push	{r4, r5, lr}
 800d7ca:	6803      	ldr	r3, [r0, #0]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7d2:	b914      	cbnz	r4, 800d7da <__match+0x12>
 800d7d4:	6003      	str	r3, [r0, #0]
 800d7d6:	2001      	movs	r0, #1
 800d7d8:	bd30      	pop	{r4, r5, pc}
 800d7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7de:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7e2:	2d19      	cmp	r5, #25
 800d7e4:	bf98      	it	ls
 800d7e6:	3220      	addls	r2, #32
 800d7e8:	42a2      	cmp	r2, r4
 800d7ea:	d0f0      	beq.n	800d7ce <__match+0x6>
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	e7f3      	b.n	800d7d8 <__match+0x10>

0800d7f0 <__hexnan>:
 800d7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7f4:	680b      	ldr	r3, [r1, #0]
 800d7f6:	6801      	ldr	r1, [r0, #0]
 800d7f8:	115e      	asrs	r6, r3, #5
 800d7fa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d7fe:	f013 031f 	ands.w	r3, r3, #31
 800d802:	b087      	sub	sp, #28
 800d804:	bf18      	it	ne
 800d806:	3604      	addne	r6, #4
 800d808:	2500      	movs	r5, #0
 800d80a:	1f37      	subs	r7, r6, #4
 800d80c:	4682      	mov	sl, r0
 800d80e:	4690      	mov	r8, r2
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	f846 5c04 	str.w	r5, [r6, #-4]
 800d816:	46b9      	mov	r9, r7
 800d818:	463c      	mov	r4, r7
 800d81a:	9502      	str	r5, [sp, #8]
 800d81c:	46ab      	mov	fp, r5
 800d81e:	784a      	ldrb	r2, [r1, #1]
 800d820:	1c4b      	adds	r3, r1, #1
 800d822:	9303      	str	r3, [sp, #12]
 800d824:	b342      	cbz	r2, 800d878 <__hexnan+0x88>
 800d826:	4610      	mov	r0, r2
 800d828:	9105      	str	r1, [sp, #20]
 800d82a:	9204      	str	r2, [sp, #16]
 800d82c:	f7ff fd77 	bl	800d31e <__hexdig_fun>
 800d830:	2800      	cmp	r0, #0
 800d832:	d14f      	bne.n	800d8d4 <__hexnan+0xe4>
 800d834:	9a04      	ldr	r2, [sp, #16]
 800d836:	9905      	ldr	r1, [sp, #20]
 800d838:	2a20      	cmp	r2, #32
 800d83a:	d818      	bhi.n	800d86e <__hexnan+0x7e>
 800d83c:	9b02      	ldr	r3, [sp, #8]
 800d83e:	459b      	cmp	fp, r3
 800d840:	dd13      	ble.n	800d86a <__hexnan+0x7a>
 800d842:	454c      	cmp	r4, r9
 800d844:	d206      	bcs.n	800d854 <__hexnan+0x64>
 800d846:	2d07      	cmp	r5, #7
 800d848:	dc04      	bgt.n	800d854 <__hexnan+0x64>
 800d84a:	462a      	mov	r2, r5
 800d84c:	4649      	mov	r1, r9
 800d84e:	4620      	mov	r0, r4
 800d850:	f7ff ffa8 	bl	800d7a4 <L_shift>
 800d854:	4544      	cmp	r4, r8
 800d856:	d950      	bls.n	800d8fa <__hexnan+0x10a>
 800d858:	2300      	movs	r3, #0
 800d85a:	f1a4 0904 	sub.w	r9, r4, #4
 800d85e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d862:	f8cd b008 	str.w	fp, [sp, #8]
 800d866:	464c      	mov	r4, r9
 800d868:	461d      	mov	r5, r3
 800d86a:	9903      	ldr	r1, [sp, #12]
 800d86c:	e7d7      	b.n	800d81e <__hexnan+0x2e>
 800d86e:	2a29      	cmp	r2, #41	; 0x29
 800d870:	d155      	bne.n	800d91e <__hexnan+0x12e>
 800d872:	3102      	adds	r1, #2
 800d874:	f8ca 1000 	str.w	r1, [sl]
 800d878:	f1bb 0f00 	cmp.w	fp, #0
 800d87c:	d04f      	beq.n	800d91e <__hexnan+0x12e>
 800d87e:	454c      	cmp	r4, r9
 800d880:	d206      	bcs.n	800d890 <__hexnan+0xa0>
 800d882:	2d07      	cmp	r5, #7
 800d884:	dc04      	bgt.n	800d890 <__hexnan+0xa0>
 800d886:	462a      	mov	r2, r5
 800d888:	4649      	mov	r1, r9
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7ff ff8a 	bl	800d7a4 <L_shift>
 800d890:	4544      	cmp	r4, r8
 800d892:	d934      	bls.n	800d8fe <__hexnan+0x10e>
 800d894:	f1a8 0204 	sub.w	r2, r8, #4
 800d898:	4623      	mov	r3, r4
 800d89a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d89e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8a2:	429f      	cmp	r7, r3
 800d8a4:	d2f9      	bcs.n	800d89a <__hexnan+0xaa>
 800d8a6:	1b3b      	subs	r3, r7, r4
 800d8a8:	f023 0303 	bic.w	r3, r3, #3
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	3e03      	subs	r6, #3
 800d8b0:	3401      	adds	r4, #1
 800d8b2:	42a6      	cmp	r6, r4
 800d8b4:	bf38      	it	cc
 800d8b6:	2304      	movcc	r3, #4
 800d8b8:	4443      	add	r3, r8
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f843 2b04 	str.w	r2, [r3], #4
 800d8c0:	429f      	cmp	r7, r3
 800d8c2:	d2fb      	bcs.n	800d8bc <__hexnan+0xcc>
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	b91b      	cbnz	r3, 800d8d0 <__hexnan+0xe0>
 800d8c8:	4547      	cmp	r7, r8
 800d8ca:	d126      	bne.n	800d91a <__hexnan+0x12a>
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	603b      	str	r3, [r7, #0]
 800d8d0:	2005      	movs	r0, #5
 800d8d2:	e025      	b.n	800d920 <__hexnan+0x130>
 800d8d4:	3501      	adds	r5, #1
 800d8d6:	2d08      	cmp	r5, #8
 800d8d8:	f10b 0b01 	add.w	fp, fp, #1
 800d8dc:	dd06      	ble.n	800d8ec <__hexnan+0xfc>
 800d8de:	4544      	cmp	r4, r8
 800d8e0:	d9c3      	bls.n	800d86a <__hexnan+0x7a>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8e8:	2501      	movs	r5, #1
 800d8ea:	3c04      	subs	r4, #4
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	f000 000f 	and.w	r0, r0, #15
 800d8f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d8f6:	6020      	str	r0, [r4, #0]
 800d8f8:	e7b7      	b.n	800d86a <__hexnan+0x7a>
 800d8fa:	2508      	movs	r5, #8
 800d8fc:	e7b5      	b.n	800d86a <__hexnan+0x7a>
 800d8fe:	9b01      	ldr	r3, [sp, #4]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0df      	beq.n	800d8c4 <__hexnan+0xd4>
 800d904:	f1c3 0320 	rsb	r3, r3, #32
 800d908:	f04f 32ff 	mov.w	r2, #4294967295
 800d90c:	40da      	lsrs	r2, r3
 800d90e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d912:	4013      	ands	r3, r2
 800d914:	f846 3c04 	str.w	r3, [r6, #-4]
 800d918:	e7d4      	b.n	800d8c4 <__hexnan+0xd4>
 800d91a:	3f04      	subs	r7, #4
 800d91c:	e7d2      	b.n	800d8c4 <__hexnan+0xd4>
 800d91e:	2004      	movs	r0, #4
 800d920:	b007      	add	sp, #28
 800d922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d926 <__ascii_mbtowc>:
 800d926:	b082      	sub	sp, #8
 800d928:	b901      	cbnz	r1, 800d92c <__ascii_mbtowc+0x6>
 800d92a:	a901      	add	r1, sp, #4
 800d92c:	b142      	cbz	r2, 800d940 <__ascii_mbtowc+0x1a>
 800d92e:	b14b      	cbz	r3, 800d944 <__ascii_mbtowc+0x1e>
 800d930:	7813      	ldrb	r3, [r2, #0]
 800d932:	600b      	str	r3, [r1, #0]
 800d934:	7812      	ldrb	r2, [r2, #0]
 800d936:	1e10      	subs	r0, r2, #0
 800d938:	bf18      	it	ne
 800d93a:	2001      	movne	r0, #1
 800d93c:	b002      	add	sp, #8
 800d93e:	4770      	bx	lr
 800d940:	4610      	mov	r0, r2
 800d942:	e7fb      	b.n	800d93c <__ascii_mbtowc+0x16>
 800d944:	f06f 0001 	mvn.w	r0, #1
 800d948:	e7f8      	b.n	800d93c <__ascii_mbtowc+0x16>

0800d94a <_realloc_r>:
 800d94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d94e:	4680      	mov	r8, r0
 800d950:	4614      	mov	r4, r2
 800d952:	460e      	mov	r6, r1
 800d954:	b921      	cbnz	r1, 800d960 <_realloc_r+0x16>
 800d956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d95a:	4611      	mov	r1, r2
 800d95c:	f7fd bc7a 	b.w	800b254 <_malloc_r>
 800d960:	b92a      	cbnz	r2, 800d96e <_realloc_r+0x24>
 800d962:	f7fd fc03 	bl	800b16c <_free_r>
 800d966:	4625      	mov	r5, r4
 800d968:	4628      	mov	r0, r5
 800d96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d96e:	f000 f86d 	bl	800da4c <_malloc_usable_size_r>
 800d972:	4284      	cmp	r4, r0
 800d974:	4607      	mov	r7, r0
 800d976:	d802      	bhi.n	800d97e <_realloc_r+0x34>
 800d978:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d97c:	d812      	bhi.n	800d9a4 <_realloc_r+0x5a>
 800d97e:	4621      	mov	r1, r4
 800d980:	4640      	mov	r0, r8
 800d982:	f7fd fc67 	bl	800b254 <_malloc_r>
 800d986:	4605      	mov	r5, r0
 800d988:	2800      	cmp	r0, #0
 800d98a:	d0ed      	beq.n	800d968 <_realloc_r+0x1e>
 800d98c:	42bc      	cmp	r4, r7
 800d98e:	4622      	mov	r2, r4
 800d990:	4631      	mov	r1, r6
 800d992:	bf28      	it	cs
 800d994:	463a      	movcs	r2, r7
 800d996:	f7fc fd3c 	bl	800a412 <memcpy>
 800d99a:	4631      	mov	r1, r6
 800d99c:	4640      	mov	r0, r8
 800d99e:	f7fd fbe5 	bl	800b16c <_free_r>
 800d9a2:	e7e1      	b.n	800d968 <_realloc_r+0x1e>
 800d9a4:	4635      	mov	r5, r6
 800d9a6:	e7df      	b.n	800d968 <_realloc_r+0x1e>

0800d9a8 <__ascii_wctomb>:
 800d9a8:	b149      	cbz	r1, 800d9be <__ascii_wctomb+0x16>
 800d9aa:	2aff      	cmp	r2, #255	; 0xff
 800d9ac:	bf85      	ittet	hi
 800d9ae:	238a      	movhi	r3, #138	; 0x8a
 800d9b0:	6003      	strhi	r3, [r0, #0]
 800d9b2:	700a      	strbls	r2, [r1, #0]
 800d9b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d9b8:	bf98      	it	ls
 800d9ba:	2001      	movls	r0, #1
 800d9bc:	4770      	bx	lr
 800d9be:	4608      	mov	r0, r1
 800d9c0:	4770      	bx	lr

0800d9c2 <_raise_r>:
 800d9c2:	291f      	cmp	r1, #31
 800d9c4:	b538      	push	{r3, r4, r5, lr}
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	460d      	mov	r5, r1
 800d9ca:	d904      	bls.n	800d9d6 <_raise_r+0x14>
 800d9cc:	2316      	movs	r3, #22
 800d9ce:	6003      	str	r3, [r0, #0]
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d4:	bd38      	pop	{r3, r4, r5, pc}
 800d9d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d9d8:	b112      	cbz	r2, 800d9e0 <_raise_r+0x1e>
 800d9da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9de:	b94b      	cbnz	r3, 800d9f4 <_raise_r+0x32>
 800d9e0:	4620      	mov	r0, r4
 800d9e2:	f000 f831 	bl	800da48 <_getpid_r>
 800d9e6:	462a      	mov	r2, r5
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	4620      	mov	r0, r4
 800d9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9f0:	f000 b818 	b.w	800da24 <_kill_r>
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d00a      	beq.n	800da0e <_raise_r+0x4c>
 800d9f8:	1c59      	adds	r1, r3, #1
 800d9fa:	d103      	bne.n	800da04 <_raise_r+0x42>
 800d9fc:	2316      	movs	r3, #22
 800d9fe:	6003      	str	r3, [r0, #0]
 800da00:	2001      	movs	r0, #1
 800da02:	e7e7      	b.n	800d9d4 <_raise_r+0x12>
 800da04:	2400      	movs	r4, #0
 800da06:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da0a:	4628      	mov	r0, r5
 800da0c:	4798      	blx	r3
 800da0e:	2000      	movs	r0, #0
 800da10:	e7e0      	b.n	800d9d4 <_raise_r+0x12>
	...

0800da14 <raise>:
 800da14:	4b02      	ldr	r3, [pc, #8]	; (800da20 <raise+0xc>)
 800da16:	4601      	mov	r1, r0
 800da18:	6818      	ldr	r0, [r3, #0]
 800da1a:	f7ff bfd2 	b.w	800d9c2 <_raise_r>
 800da1e:	bf00      	nop
 800da20:	200000b0 	.word	0x200000b0

0800da24 <_kill_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4d07      	ldr	r5, [pc, #28]	; (800da44 <_kill_r+0x20>)
 800da28:	2300      	movs	r3, #0
 800da2a:	4604      	mov	r4, r0
 800da2c:	4608      	mov	r0, r1
 800da2e:	4611      	mov	r1, r2
 800da30:	602b      	str	r3, [r5, #0]
 800da32:	f7f3 feb3 	bl	800179c <_kill>
 800da36:	1c43      	adds	r3, r0, #1
 800da38:	d102      	bne.n	800da40 <_kill_r+0x1c>
 800da3a:	682b      	ldr	r3, [r5, #0]
 800da3c:	b103      	cbz	r3, 800da40 <_kill_r+0x1c>
 800da3e:	6023      	str	r3, [r4, #0]
 800da40:	bd38      	pop	{r3, r4, r5, pc}
 800da42:	bf00      	nop
 800da44:	20004ef8 	.word	0x20004ef8

0800da48 <_getpid_r>:
 800da48:	f7f3 bea0 	b.w	800178c <_getpid>

0800da4c <_malloc_usable_size_r>:
 800da4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da50:	1f18      	subs	r0, r3, #4
 800da52:	2b00      	cmp	r3, #0
 800da54:	bfbc      	itt	lt
 800da56:	580b      	ldrlt	r3, [r1, r0]
 800da58:	18c0      	addlt	r0, r0, r3
 800da5a:	4770      	bx	lr

0800da5c <_init>:
 800da5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5e:	bf00      	nop
 800da60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da62:	bc08      	pop	{r3}
 800da64:	469e      	mov	lr, r3
 800da66:	4770      	bx	lr

0800da68 <_fini>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	bf00      	nop
 800da6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6e:	bc08      	pop	{r3}
 800da70:	469e      	mov	lr, r3
 800da72:	4770      	bx	lr
