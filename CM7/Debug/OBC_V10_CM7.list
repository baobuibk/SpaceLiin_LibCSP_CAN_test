
OBC_V10_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  0800b474  0800b474  0000c474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c50c  0800c50c  0000e0bc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c50c  0800c50c  0000d50c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c514  0800c514  0000e0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c514  0800c514  0000d514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c518  0800c518  0000d518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  24000000  0800c51c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c60  240000bc  0800c5d8  0000e0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24040d1c  0800c5d8  0000ed1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000e0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0d1  00000000  00000000  0000e0ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e36  00000000  00000000  0002d1bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00032ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a8  00000000  00000000  00034cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044994  00000000  00000000  000362a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c0d  00000000  00000000  0007ac34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a724e  00000000  00000000  0009f841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00246a8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e70  00000000  00000000  00246ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0024e944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000bc 	.word	0x240000bc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b45c 	.word	0x0800b45c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000c0 	.word	0x240000c0
 80002dc:	0800b45c 	.word	0x0800b45c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b49      	ldr	r3, [pc, #292]	@ (80004bc <SystemInit+0x12c>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800039a:	4a48      	ldr	r2, [pc, #288]	@ (80004bc <SystemInit+0x12c>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b45      	ldr	r3, [pc, #276]	@ (80004bc <SystemInit+0x12c>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a44      	ldr	r2, [pc, #272]	@ (80004bc <SystemInit+0x12c>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b43      	ldr	r3, [pc, #268]	@ (80004c0 <SystemInit+0x130>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b40      	ldr	r3, [pc, #256]	@ (80004c0 <SystemInit+0x130>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a3e      	ldr	r2, [pc, #248]	@ (80004c0 <SystemInit+0x130>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b3d      	ldr	r3, [pc, #244]	@ (80004c4 <SystemInit+0x134>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a3c      	ldr	r2, [pc, #240]	@ (80004c4 <SystemInit+0x134>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b3a      	ldr	r3, [pc, #232]	@ (80004c4 <SystemInit+0x134>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b39      	ldr	r3, [pc, #228]	@ (80004c4 <SystemInit+0x134>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4938      	ldr	r1, [pc, #224]	@ (80004c4 <SystemInit+0x134>)
 80003e4:	4b38      	ldr	r3, [pc, #224]	@ (80004c8 <SystemInit+0x138>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <SystemInit+0x130>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <SystemInit+0x130>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a30      	ldr	r2, [pc, #192]	@ (80004c0 <SystemInit+0x130>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <SystemInit+0x134>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b2d      	ldr	r3, [pc, #180]	@ (80004c4 <SystemInit+0x134>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b2c      	ldr	r3, [pc, #176]	@ (80004c4 <SystemInit+0x134>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b2a      	ldr	r3, [pc, #168]	@ (80004c4 <SystemInit+0x134>)
 800041a:	4a2c      	ldr	r2, [pc, #176]	@ (80004cc <SystemInit+0x13c>)
 800041c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b29      	ldr	r3, [pc, #164]	@ (80004c4 <SystemInit+0x134>)
 8000420:	4a2b      	ldr	r2, [pc, #172]	@ (80004d0 <SystemInit+0x140>)
 8000422:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b27      	ldr	r3, [pc, #156]	@ (80004c4 <SystemInit+0x134>)
 8000426:	4a2b      	ldr	r2, [pc, #172]	@ (80004d4 <SystemInit+0x144>)
 8000428:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b26      	ldr	r3, [pc, #152]	@ (80004c4 <SystemInit+0x134>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b24      	ldr	r3, [pc, #144]	@ (80004c4 <SystemInit+0x134>)
 8000432:	4a28      	ldr	r2, [pc, #160]	@ (80004d4 <SystemInit+0x144>)
 8000434:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b23      	ldr	r3, [pc, #140]	@ (80004c4 <SystemInit+0x134>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b21      	ldr	r3, [pc, #132]	@ (80004c4 <SystemInit+0x134>)
 800043e:	4a25      	ldr	r2, [pc, #148]	@ (80004d4 <SystemInit+0x144>)
 8000440:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b20      	ldr	r3, [pc, #128]	@ (80004c4 <SystemInit+0x134>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b1e      	ldr	r3, [pc, #120]	@ (80004c4 <SystemInit+0x134>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1d      	ldr	r2, [pc, #116]	@ (80004c4 <SystemInit+0x134>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b1b      	ldr	r3, [pc, #108]	@ (80004c4 <SystemInit+0x134>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <SystemInit+0x148>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045e:	4a1e      	ldr	r2, [pc, #120]	@ (80004d8 <SystemInit+0x148>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000464:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <SystemInit+0x14c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <SystemInit+0x150>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <SystemInit+0x154>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800047a:	4b12      	ldr	r3, [pc, #72]	@ (80004c4 <SystemInit+0x134>)
 800047c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000480:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000484:	2b00      	cmp	r3, #0
 8000486:	d113      	bne.n	80004b0 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000488:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <SystemInit+0x134>)
 800048a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800048e:	4a0d      	ldr	r2, [pc, #52]	@ (80004c4 <SystemInit+0x134>)
 8000490:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000494:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000498:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <SystemInit+0x158>)
 800049a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800049e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80004a0:	4b08      	ldr	r3, [pc, #32]	@ (80004c4 <SystemInit+0x134>)
 80004a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80004a6:	4a07      	ldr	r2, [pc, #28]	@ (80004c4 <SystemInit+0x134>)
 80004a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80004ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	e000ed00 	.word	0xe000ed00
 80004c0:	52002000 	.word	0x52002000
 80004c4:	58024400 	.word	0x58024400
 80004c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004cc:	02020200 	.word	0x02020200
 80004d0:	01ff0000 	.word	0x01ff0000
 80004d4:	01010280 	.word	0x01010280
 80004d8:	580000c0 	.word	0x580000c0
 80004dc:	5c001000 	.word	0x5c001000
 80004e0:	ffff0000 	.word	0xffff0000
 80004e4:	51008108 	.word	0x51008108
 80004e8:	52004000 	.word	0x52004000

080004ec <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <ExitRun0Mode+0x30>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	f023 0306 	bic.w	r3, r3, #6
 80004f8:	4a08      	ldr	r2, [pc, #32]	@ (800051c <ExitRun0Mode+0x30>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000500:	bf00      	nop
 8000502:	4b06      	ldr	r3, [pc, #24]	@ (800051c <ExitRun0Mode+0x30>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800050a:	2b00      	cmp	r3, #0
 800050c:	d0f9      	beq.n	8000502 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	58024800 	.word	0x58024800

08000520 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <LL_RCC_HSE_Enable+0x1c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a04      	ldr	r2, [pc, #16]	@ (800053c <LL_RCC_HSE_Enable+0x1c>)
 800052a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800052e:	6013      	str	r3, [r2, #0]
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	58024400 	.word	0x58024400

08000540 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000544:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <LL_RCC_HSE_IsReady+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800054c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000550:	d101      	bne.n	8000556 <LL_RCC_HSE_IsReady+0x16>
 8000552:	2301      	movs	r3, #1
 8000554:	e000      	b.n	8000558 <LL_RCC_HSE_IsReady+0x18>
 8000556:	2300      	movs	r3, #0
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	58024400 	.word	0x58024400

08000568 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <LL_RCC_SetSysClkSource+0x24>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	f023 0207 	bic.w	r2, r3, #7
 8000578:	4904      	ldr	r1, [pc, #16]	@ (800058c <LL_RCC_SetSysClkSource+0x24>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	610b      	str	r3, [r1, #16]
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	58024400 	.word	0x58024400

08000590 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000594:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <LL_RCC_GetSysClkSource+0x18>)
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	58024400 	.word	0x58024400

080005ac <LL_RCC_SetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysPrescaler(uint32_t Prescaler)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1CPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <LL_RCC_SetSysPrescaler+0x24>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80005bc:	4904      	ldr	r1, [pc, #16]	@ (80005d0 <LL_RCC_SetSysPrescaler+0x24>)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4313      	orrs	r3, r2
 80005c2:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, Prescaler);
#endif /* RCC_D1CFGR_D1CPRE */
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	58024400 	.word	0x58024400

080005d4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_HPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f023 020f 	bic.w	r2, r3, #15
 80005e4:	4904      	ldr	r1, [pc, #16]	@ (80005f8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
#endif /* RCC_D1CFGR_HPRE */
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	58024400 	.word	0x58024400

080005fc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE1)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000606:	69db      	ldr	r3, [r3, #28]
 8000608:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800060c:	4904      	ldr	r1, [pc, #16]	@ (8000620 <LL_RCC_SetAPB1Prescaler+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	58024400 	.word	0x58024400

08000624 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE2)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 800062c:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <LL_RCC_SetAPB2Prescaler+0x24>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000634:	4904      	ldr	r1, [pc, #16]	@ (8000648 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4313      	orrs	r3, r2
 800063a:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	58024400 	.word	0x58024400

0800064c <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1PPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <LL_RCC_SetAPB3Prescaler+0x24>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800065c:	4904      	ldr	r1, [pc, #16]	@ (8000670 <LL_RCC_SetAPB3Prescaler+0x24>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4313      	orrs	r3, r2
 8000662:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, Prescaler);
#endif /* RCC_D1CFGR_D1PPRE */
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	58024400 	.word	0x58024400

08000674 <LL_RCC_SetAPB4Prescaler>:
  *         @arg @ref LL_RCC_APB4_DIV_8
  *         @arg @ref LL_RCC_APB4_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB4Prescaler(uint32_t Prescaler)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CFGR_D3PPRE)
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <LL_RCC_SetAPB4Prescaler+0x24>)
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8000684:	4904      	ldr	r1, [pc, #16]	@ (8000698 <LL_RCC_SetAPB4Prescaler+0x24>)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4313      	orrs	r3, r2
 800068a:	620b      	str	r3, [r1, #32]
#else
  MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, Prescaler);
#endif /* RCC_D3CFGR_D3PPRE */
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	58024400 	.word	0x58024400

0800069c <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <LL_RCC_SetClockSource+0x50>)
 80006aa:	4413      	add	r3, r2
 80006ac:	60fb      	str	r3, [r7, #12]
#else
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CDCCIPR + LL_CLKSOURCE_REG(ClkSource));
#endif /*  */
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	0e19      	lsrs	r1, r3, #24
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	f003 031f 	and.w	r3, r3, #31
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	43db      	mvns	r3, r3
 80006c4:	401a      	ands	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	0c1b      	lsrs	r3, r3, #16
 80006ca:	b2d9      	uxtb	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	0a1b      	lsrs	r3, r3, #8
 80006d0:	f003 031f 	and.w	r3, r3, #31
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	431a      	orrs	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	5802444c 	.word	0x5802444c

080006f0 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t ClkSource)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ffcf 	bl	800069c <LL_RCC_SetClockSource>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <LL_RCC_PLL_SetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <LL_RCC_PLL_SetSource+0x24>)
 8000712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000714:	f023 0203 	bic.w	r2, r3, #3
 8000718:	4904      	ldr	r1, [pc, #16]	@ (800072c <LL_RCC_PLL_SetSource+0x24>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	58024400 	.word	0x58024400

08000730 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <LL_RCC_PLL1_Enable+0x1c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	@ (800074c <LL_RCC_PLL1_Enable+0x1c>)
 800073a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	58024400 	.word	0x58024400

08000750 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <LL_RCC_PLL1_IsReady+0x24>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800075c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000760:	d101      	bne.n	8000766 <LL_RCC_PLL1_IsReady+0x16>
 8000762:	2301      	movs	r3, #1
 8000764:	e000      	b.n	8000768 <LL_RCC_PLL1_IsReady+0x18>
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	58024400 	.word	0x58024400

08000778 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <LL_RCC_PLL1P_Enable+0x1c>)
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <LL_RCC_PLL1P_Enable+0x1c>)
 8000782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000786:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024400 	.word	0x58024400

08000798 <LL_RCC_PLL1Q_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1Q_Enable(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN);
 800079c:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <LL_RCC_PLL1Q_Enable+0x1c>)
 800079e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <LL_RCC_PLL1Q_Enable+0x1c>)
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	58024400 	.word	0x58024400

080007b8 <LL_RCC_PLL1R_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1R_Enable(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <LL_RCC_PLL1R_Enable+0x1c>)
 80007be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <LL_RCC_PLL1R_Enable+0x1c>)
 80007c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	58024400 	.word	0x58024400

080007d8 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 80007e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e4:	f023 0202 	bic.w	r2, r3, #2
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4904      	ldr	r1, [pc, #16]	@ (8000800 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 80007ee:	4313      	orrs	r3, r2
 80007f0:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400

08000804 <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800080e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000810:	f023 020c 	bic.w	r2, r3, #12
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4904      	ldr	r1, [pc, #16]	@ (800082c <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800081a:	4313      	orrs	r3, r2
 800081c:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	58024400 	.word	0x58024400

08000830 <LL_RCC_PLL1_SetN>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t N)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <LL_RCC_PLL1_SetN+0x28>)
 800083a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800083c:	4b07      	ldr	r3, [pc, #28]	@ (800085c <LL_RCC_PLL1_SetN+0x2c>)
 800083e:	4013      	ands	r3, r2
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	3a01      	subs	r2, #1
 8000844:	4904      	ldr	r1, [pc, #16]	@ (8000858 <LL_RCC_PLL1_SetN+0x28>)
 8000846:	4313      	orrs	r3, r2
 8000848:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	58024400 	.word	0x58024400
 800085c:	fffffe00 	.word	0xfffffe00

08000860 <LL_RCC_PLL1_SetM>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <LL_RCC_PLL1_SetM+0x28>)
 800086a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800086c:	f423 727c 	bic.w	r2, r3, #1008	@ 0x3f0
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	4904      	ldr	r1, [pc, #16]	@ (8000888 <LL_RCC_PLL1_SetM+0x28>)
 8000876:	4313      	orrs	r3, r2
 8000878:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	58024400 	.word	0x58024400

0800088c <LL_RCC_PLL1_SetP>:
  * @param  P parameter can be a value between 2 (or 1*) and 128 (ODD division factor not supported)
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <LL_RCC_PLL1_SetP+0x28>)
 8000896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000898:	f423 427e 	bic.w	r2, r3, #65024	@ 0xfe00
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	025b      	lsls	r3, r3, #9
 80008a2:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <LL_RCC_PLL1_SetP+0x28>)
 80008a4:	4313      	orrs	r3, r2
 80008a6:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	58024400 	.word	0x58024400

080008b8 <LL_RCC_PLL1_SetQ>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <LL_RCC_PLL1_SetQ+0x28>)
 80008c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	041b      	lsls	r3, r3, #16
 80008ce:	4904      	ldr	r1, [pc, #16]	@ (80008e0 <LL_RCC_PLL1_SetQ+0x28>)
 80008d0:	4313      	orrs	r3, r2
 80008d2:	630b      	str	r3, [r1, #48]	@ 0x30
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	58024400 	.word	0x58024400

080008e4 <LL_RCC_PLL1_SetR>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 80008ec:	4b07      	ldr	r3, [pc, #28]	@ (800090c <LL_RCC_PLL1_SetR+0x28>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	061b      	lsls	r3, r3, #24
 80008fa:	4904      	ldr	r1, [pc, #16]	@ (800090c <LL_RCC_PLL1_SetR+0x28>)
 80008fc:	4313      	orrs	r3, r2
 80008fe:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	58024400 	.word	0x58024400

08000910 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <LL_AHB4_GRP1_EnableClock+0x34>)
 800091a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800091e:	4909      	ldr	r1, [pc, #36]	@ (8000944 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4313      	orrs	r3, r2
 8000924:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000928:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <LL_AHB4_GRP1_EnableClock+0x34>)
 800092a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	58024400 	.word	0x58024400

08000948 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <LL_APB2_GRP1_EnableClock+0x34>)
 8000952:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000956:	4909      	ldr	r1, [pc, #36]	@ (800097c <LL_APB2_GRP1_EnableClock+0x34>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4313      	orrs	r3, r2
 800095c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <LL_APB2_GRP1_EnableClock+0x34>)
 8000962:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4013      	ands	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800096c:	68fb      	ldr	r3, [r7, #12]
}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	58024400 	.word	0x58024400

08000980 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <LL_FLASH_SetLatency+0x24>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 020f 	bic.w	r2, r3, #15
 8000990:	4904      	ldr	r1, [pc, #16]	@ (80009a4 <LL_FLASH_SetLatency+0x24>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4313      	orrs	r3, r2
 8000996:	600b      	str	r3, [r1, #0]
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	52002000 	.word	0x52002000

080009a8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80009ac:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <LL_FLASH_GetLatency+0x18>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f003 030f 	and.w	r3, r3, #15
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	52002000 	.word	0x52002000

080009c4 <LL_MPU_Enable>:
  *         @arg @ref LL_MPU_CTRL_PRIVILEGED_DEFAULT
  *         @arg @ref LL_MPU_CTRL_HFNMI_PRIVDEF
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Enable(uint32_t Options)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU*/
  WRITE_REG(MPU->CTRL, (MPU_CTRL_ENABLE_Msk | Options));
 80009cc:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <LL_MPU_Enable+0x2c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009d6:	f3bf 8f4f 	dsb	sy
}
 80009da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009dc:	f3bf 8f6f 	isb	sy
}
 80009e0:	bf00      	nop
  /* Ensure MPU settings take effects */
  __DSB();
  /* Sequence instruction fetches using update settings */
  __ISB();
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed90 	.word	0xe000ed90

080009f4 <LL_MPU_Disable>:
  * @brief  Disable MPU
  * @rmtoll MPU_CTRL     ENABLE        LL_MPU_Disable
  * @retval None
  */
__STATIC_INLINE void LL_MPU_Disable(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80009f8:	f3bf 8f5f 	dmb	sy
}
 80009fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();
  /* Disable MPU*/
  WRITE_REG(MPU->CTRL, 0U);
 80009fe:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <LL_MPU_Disable+0x1c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed90 	.word	0xe000ed90

08000a14 <LL_MPU_ConfigRegion>:
  *         @arg @ref LL_MPU_ACCESS_BUFFERABLE or @ref LL_MPU_ACCESS_NOT_BUFFERABLE
  * @note   For cortex-M4 only 8 regions are available i.e only values from LL_MPU_REGION_NUMBER0 to LL_MPU_REGION_NUMBER7 are possible.
  * @retval None
  */
__STATIC_INLINE void LL_MPU_ConfigRegion(uint32_t Region, uint32_t SubRegionDisable, uint32_t Address, uint32_t Attributes)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	603b      	str	r3, [r7, #0]
  /* Set Region number */
  WRITE_REG(MPU->RNR, Region);
 8000a22:	4a0b      	ldr	r2, [pc, #44]	@ (8000a50 <LL_MPU_ConfigRegion+0x3c>)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	6093      	str	r3, [r2, #8]
  /* Set base address */
  WRITE_REG(MPU->RBAR, (Address & 0xFFFFFFE0U));
 8000a28:	4a09      	ldr	r2, [pc, #36]	@ (8000a50 <LL_MPU_ConfigRegion+0x3c>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f023 031f 	bic.w	r3, r3, #31
 8000a30:	60d3      	str	r3, [r2, #12]
  /* Configure MPU */
  WRITE_REG(MPU->RASR, (MPU_RASR_ENABLE_Msk | Attributes | (SubRegionDisable << MPU_RASR_SRD_Pos)));
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	021a      	lsls	r2, r3, #8
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <LL_MPU_ConfigRegion+0x3c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6113      	str	r3, [r2, #16]
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000ed90 	.word	0xe000ed90

08000a54 <LL_PWR_ConfigSupply>:
  *         @arg @ref LL_PWR_SMPS_2V5_SUPPLIES_EXT
  *         @arg @ref LL_PWR_EXTERNAL_SOURCE_SUPPLY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <LL_PWR_ConfigSupply+0x24>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8000a64:	4904      	ldr	r1, [pc, #16]	@ (8000a78 <LL_PWR_ConfigSupply+0x24>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	60cb      	str	r3, [r1, #12]
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024800 	.word	0x58024800

08000a7c <LL_PWR_SetRegulVoltageScaling>:
  * @note   For all H7 lines except STM32H7Axxx and STM32H7Bxxx lines, VOS0
  *         is applied when PWR_D3CR_VOS[1:0] = 0b11 and  SYSCFG_PWRCR_ODEN = 0b1.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000a8c:	4904      	ldr	r1, [pc, #16]	@ (8000aa0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8000a94:	bf00      	nop
 8000a96:	370c      	adds	r7, #12
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	58024800 	.word	0x58024800

08000aa4 <LL_PWR_IsActiveFlag_VOS>:
  *         or if its output voltage is still changing to the required voltage level
  * @rmtoll D3CR   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ab4:	d101      	bne.n	8000aba <LL_PWR_IsActiveFlag_VOS+0x16>
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e000      	b.n	8000abc <LL_PWR_IsActiveFlag_VOS+0x18>
 8000aba:	2300      	movs	r3, #0
#else
  return ((READ_BIT(PWR->SRDCR, PWR_SRDCR_VOSRDY) == (PWR_SRDCR_VOSRDY)) ? 1UL : 0UL);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	58024800 	.word	0x58024800

08000acc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f043 0201 	orr.w	r2, r3, #1
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	601a      	str	r2, [r3, #0]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	@ 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3308      	adds	r3, #8
 8000b1a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	e853 3f00 	ldrex	r3, [r3]
 8000b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	075b      	lsls	r3, r3, #29
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3308      	adds	r3, #8
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	61ba      	str	r2, [r7, #24]
 8000b3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b3c:	6979      	ldr	r1, [r7, #20]
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	e841 2300 	strex	r3, r2, [r1]
 8000b44:	613b      	str	r3, [r7, #16]
   return(result);
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d1e4      	bne.n	8000b16 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3724      	adds	r7, #36	@ 0x24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b089      	sub	sp, #36	@ 0x24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3308      	adds	r3, #8
 8000b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	e853 3f00 	ldrex	r3, [r3]
 8000b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	065b      	lsls	r3, r3, #25
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3308      	adds	r3, #8
 8000b84:	69fa      	ldr	r2, [r7, #28]
 8000b86:	61ba      	str	r2, [r7, #24]
 8000b88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b8a:	6979      	ldr	r1, [r7, #20]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	e841 2300 	strex	r3, r2, [r1]
 8000b92:	613b      	str	r3, [r7, #16]
   return(result);
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1e4      	bne.n	8000b64 <LL_USART_SetRXFIFOThreshold+0xa>
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3724      	adds	r7, #36	@ 0x24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_USART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_USART_IsActiveFlag_TEACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(const USART_TypeDef *USARTx)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	69db      	ldr	r3, [r3, #28]
 8000be0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8000be8:	d101      	bne.n	8000bee <LL_USART_IsActiveFlag_TEACK+0x1a>
 8000bea:	2301      	movs	r3, #1
 8000bec:	e000      	b.n	8000bf0 <LL_USART_IsActiveFlag_TEACK+0x1c>
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_USART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_USART_IsActiveFlag_REACK
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(const USART_TypeDef *USARTx)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000c10:	d101      	bne.n	8000c16 <LL_USART_IsActiveFlag_REACK+0x1a>
 8000c12:	2301      	movs	r3, #1
 8000c14:	e000      	b.n	8000c18 <LL_USART_IsActiveFlag_REACK+0x1c>
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	619a      	str	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	041a      	lsls	r2, r3, #16
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	619a      	str	r2, [r3, #24]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a13      	ldr	r2, [pc, #76]	@ (8000cc0 <csp_conf_get_defaults+0x60>)
 8000c72:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a13      	ldr	r2, [pc, #76]	@ (8000cc4 <csp_conf_get_defaults+0x64>)
 8000c78:	609a      	str	r2, [r3, #8]
	conf->revision = "resvision";
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a12      	ldr	r2, [pc, #72]	@ (8000cc8 <csp_conf_get_defaults+0x68>)
 8000c7e:	60da      	str	r2, [r3, #12]
	conf->conn_max = 10;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	220a      	movs	r2, #10
 8000c84:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 10;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	220a      	movs	r2, #10
 8000c8a:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2219      	movs	r2, #25
 8000c90:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2218      	movs	r2, #24
 8000c96:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2214      	movs	r2, #20
 8000c9c:	751a      	strb	r2, [r3, #20]
	conf->buffers = 10;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	220a      	movs	r2, #10
 8000ca2:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000caa:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	0800b474 	.word	0x0800b474
 8000cc4:	0800b480 	.word	0x0800b480
 8000cc8:	0800b488 	.word	0x0800b488

08000ccc <csp_tx_task>:

FDCAN_TxHeaderTypeDef txHeader;
uint8_t txData[8];
uint32_t txBufferIndex = 0;

void csp_tx_task(void *argument) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]

	const char *msg = "H\n";
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <csp_tx_task+0x98>)
 8000cd6:	617b      	str	r3, [r7, #20]
//	const char *msg = "Hello world\n";
	for(;;)
	{
		csp_conn_t *conn = csp_connect(CSP_PRIO_NORM, dest, 8, 1000, CSP_O_NONE);
 8000cd8:	4b23      	ldr	r3, [pc, #140]	@ (8000d68 <csp_tx_task+0x9c>)
 8000cda:	7819      	ldrb	r1, [r3, #0]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f001 fa1a 	bl	8002120 <csp_connect>
 8000cec:	6138      	str	r0, [r7, #16]
		if (conn == NULL) {
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d104      	bne.n	8000cfe <csp_tx_task+0x32>
			vTaskDelay(1000);
 8000cf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf8:	f004 fa2c 	bl	8005154 <vTaskDelay>
			continue;
 8000cfc:	e030      	b.n	8000d60 <csp_tx_task+0x94>
		}

		/* Cấp packet và copy payload */
		size_t len = strlen(msg);
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff faee 	bl	80002e0 <strlen>
 8000d04:	60f8      	str	r0, [r7, #12]
		csp_packet_t *pkt = csp_buffer_get(len);
 8000d06:	68f8      	ldr	r0, [r7, #12]
 8000d08:	f000 fe66 	bl	80019d8 <csp_buffer_get>
 8000d0c:	60b8      	str	r0, [r7, #8]
		if (pkt == NULL) {
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d107      	bne.n	8000d24 <csp_tx_task+0x58>
			csp_close(conn);
 8000d14:	6938      	ldr	r0, [r7, #16]
 8000d16:	f001 f99e 	bl	8002056 <csp_close>
			vTaskDelay(1000);
 8000d1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d1e:	f004 fa19 	bl	8005154 <vTaskDelay>
			continue;
 8000d22:	e01d      	b.n	8000d60 <csp_tx_task+0x94>
		}

		memcpy(pkt->data, msg, len);
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	3310      	adds	r3, #16
 8000d28:	68fa      	ldr	r2, [r7, #12]
 8000d2a:	6979      	ldr	r1, [r7, #20]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f009 fdfc 	bl	800a92a <memcpy>
		pkt->length = len;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	815a      	strh	r2, [r3, #10]

		/* Gửi packet, nếu lỗi thì phải free buffer */
		if (csp_send(conn, pkt, 1000 /*ms*/) != CSP_ERR_NONE) {
 8000d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d3e:	68b9      	ldr	r1, [r7, #8]
 8000d40:	6938      	ldr	r0, [r7, #16]
 8000d42:	f001 fdf9 	bl	8002938 <csp_send>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <csp_tx_task+0x86>
			csp_buffer_free(pkt);
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f000 fedf 	bl	8001b10 <csp_buffer_free>
		}

		/* Đóng kết nối */
		csp_close(conn);
 8000d52:	6938      	ldr	r0, [r7, #16]
 8000d54:	f001 f97f 	bl	8002056 <csp_close>

		vTaskDelay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d5c:	f004 f9fa 	bl	8005154 <vTaskDelay>
	{
 8000d60:	e7ba      	b.n	8000cd8 <csp_tx_task+0xc>
 8000d62:	bf00      	nop
 8000d64:	0800b494 	.word	0x0800b494
 8000d68:	24000008 	.word	0x24000008

08000d6c <csp_rx_task>:
	}
}

void csp_rx_task(void *argument) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, XTEA, etc. if enabled during compilation */
	csp_socket_t *sock = csp_socket(CSP_SO_NONE);
 8000d74:	2000      	movs	r0, #0
 8000d76:	f001 fc29 	bl	80025cc <csp_socket>
 8000d7a:	6178      	str	r0, [r7, #20]

	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(sock, CSP_ANY);
 8000d7c:	21ff      	movs	r1, #255	@ 0xff
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f001 fe8c 	bl	8002a9c <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(sock, 10);
 8000d84:	210a      	movs	r1, #10
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f001 fe62 	bl	8002a50 <csp_listen>

	/* Wait for connections and then process packets on the connection */
	while (1) {
		/* Wait for a new connection, 1000 mS timeout */
		csp_conn_t *conn;
		if ((conn = csp_accept(sock, 1000)) == NULL) {
 8000d8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000d90:	6978      	ldr	r0, [r7, #20]
 8000d92:	f001 fca5 	bl	80026e0 <csp_accept>
 8000d96:	6138      	str	r0, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d02c      	beq.n	8000df8 <csp_rx_task+0x8c>
			continue;
		}

		/* Read packets on connection, timout is 100 mS */
		csp_packet_t *packet;
		while ((packet = csp_read(conn, 100)) != NULL) {
 8000d9e:	e01c      	b.n	8000dda <csp_rx_task+0x6e>
			switch (csp_conn_dport(conn)) {
 8000da0:	6938      	ldr	r0, [r7, #16]
 8000da2:	f001 fabd 	bl	8002320 <csp_conn_dport>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d001      	beq.n	8000db0 <csp_rx_task+0x44>
 8000dac:	2b0a      	cmp	r3, #10
 8000dae:	d113      	bne.n	8000dd8 <csp_rx_task+0x6c>
			case 8:
			case 10:
				/* Process packet here */
				csp_log_info("Packet received on MY_SERVER_PORT: %s", (char *) packet->data);
 8000db0:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <csp_rx_task+0x90>)
 8000db2:	789b      	ldrb	r3, [r3, #2]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d006      	beq.n	8000dc6 <csp_rx_task+0x5a>
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3310      	adds	r3, #16
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4910      	ldr	r1, [pc, #64]	@ (8000e00 <csp_rx_task+0x94>)
 8000dc0:	2002      	movs	r0, #2
 8000dc2:	f001 fabd 	bl	8002340 <do_csp_debug>
				csp_buffer_free(packet);
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 fea2 	bl	8001b10 <csp_buffer_free>
				++server_received;
 8000dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <csp_rx_task+0x98>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <csp_rx_task+0x98>)
 8000dd4:	6013      	str	r3, [r2, #0]
				break;
 8000dd6:	e000      	b.n	8000dda <csp_rx_task+0x6e>

			default:
				/* Call the default CSP service handler, handle pings, buffer use, etc. */
//				csp_service_handler(conn, packet);
				break;
 8000dd8:	bf00      	nop
		while ((packet = csp_read(conn, 100)) != NULL) {
 8000dda:	2164      	movs	r1, #100	@ 0x64
 8000ddc:	6938      	ldr	r0, [r7, #16]
 8000dde:	f001 fca1 	bl	8002724 <csp_read>
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1da      	bne.n	8000da0 <csp_rx_task+0x34>
			}
		}
		/* Close current connection */
		csp_close(conn);
 8000dea:	6938      	ldr	r0, [r7, #16]
 8000dec:	f001 f933 	bl	8002056 <csp_close>

		vTaskDelay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f004 f9af 	bl	8005154 <vTaskDelay>
 8000df6:	e7c9      	b.n	8000d8c <csp_rx_task+0x20>
			continue;
 8000df8:	bf00      	nop
	while (1) {
 8000dfa:	e7c7      	b.n	8000d8c <csp_rx_task+0x20>
 8000dfc:	2400000c 	.word	0x2400000c
 8000e00:	0800b498 	.word	0x0800b498
 8000e04:	24000178 	.word	0x24000178

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af02      	add	r7, sp, #8
  int32_t timeout;
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000e0e:	f000 f9bf 	bl	8001190 <MPU_Config>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f006 fa93 	bl	800733c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f849 	bl	8000eac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f98d 	bl	8001138 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e1e:	f000 f91d 	bl	800105c <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8000e22:	f000 f8b7 	bl	8000f94 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  LL_GPIO_SetOutputPin(SERIAL_ENA_GPIO_Port, SERIAL_ENA_Pin);
 8000e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2a:	4818      	ldr	r0, [pc, #96]	@ (8000e8c <main+0x84>)
 8000e2c:	f7ff fefa 	bl	8000c24 <LL_GPIO_SetOutputPin>

  /*CSP INIT*/
  csp_conf_get_defaults(&csp_conf);
 8000e30:	4817      	ldr	r0, [pc, #92]	@ (8000e90 <main+0x88>)
 8000e32:	f7ff ff15 	bl	8000c60 <csp_conf_get_defaults>
  csp_init(&csp_conf);
 8000e36:	4816      	ldr	r0, [pc, #88]	@ (8000e90 <main+0x88>)
 8000e38:	f001 fb84 	bl	8002544 <csp_init>

  /*CSP INTERFACE INIT*/
  can_csp_init();
 8000e3c:	f002 f9d6 	bl	80031ec <can_csp_init>
  csp_route_start_task(500, 6);
 8000e40:	2106      	movs	r1, #6
 8000e42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e46:	f002 f977 	bl	8003138 <csp_route_start_task>
  csp_rtable_set(dest, CSP_ID_HOST_SIZE, &can_iface, 1);
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <main+0x8c>)
 8000e4c:	7818      	ldrb	r0, [r3, #0]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	4a11      	ldr	r2, [pc, #68]	@ (8000e98 <main+0x90>)
 8000e52:	2105      	movs	r1, #5
 8000e54:	f002 fd8e 	bl	8003974 <csp_rtable_set>

  xTaskCreate(csp_tx_task, "csp_can_tx", configMINIMAL_STACK_SIZE * 10, NULL, configMAX_PRIORITIES - 3U, NULL);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000e66:	490d      	ldr	r1, [pc, #52]	@ (8000e9c <main+0x94>)
 8000e68:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <main+0x98>)
 8000e6a:	f004 f824 	bl	8004eb6 <xTaskCreate>
  xTaskCreate(csp_rx_task, "csp_can_rx", configMINIMAL_STACK_SIZE * 10, NULL, configMAX_PRIORITIES - 1, NULL);
 8000e6e:	2300      	movs	r3, #0
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	2306      	movs	r3, #6
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2300      	movs	r3, #0
 8000e78:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000e7c:	4909      	ldr	r1, [pc, #36]	@ (8000ea4 <main+0x9c>)
 8000e7e:	480a      	ldr	r0, [pc, #40]	@ (8000ea8 <main+0xa0>)
 8000e80:	f004 f819 	bl	8004eb6 <xTaskCreate>
  vTaskStartScheduler();
 8000e84:	f004 fa06 	bl	8005294 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <main+0x80>
 8000e8c:	58020c00 	.word	0x58020c00
 8000e90:	240001a8 	.word	0x240001a8
 8000e94:	24000008 	.word	0x24000008
 8000e98:	240001d8 	.word	0x240001d8
 8000e9c:	0800b4c0 	.word	0x0800b4c0
 8000ea0:	08000ccd 	.word	0x08000ccd
 8000ea4:	0800b4cc 	.word	0x0800b4cc
 8000ea8:	08000d6d 	.word	0x08000d6d

08000eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fd65 	bl	8000980 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff fd76 	bl	80009a8 <LL_FLASH_GetLatency>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d1fa      	bne.n	8000eb8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_ConfigSupply(LL_PWR_LDO_SUPPLY);
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f7ff fdc6 	bl	8000a54 <LL_PWR_ConfigSupply>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE3);
 8000ec8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000ecc:	f7ff fdd6 	bl	8000a7c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000ed0:	bf00      	nop
 8000ed2:	f7ff fde7 	bl	8000aa4 <LL_PWR_IsActiveFlag_VOS>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d0fa      	beq.n	8000ed2 <SystemClock_Config+0x26>
  {
  }
  LL_RCC_HSE_Enable();
 8000edc:	f7ff fb20 	bl	8000520 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000ee0:	bf00      	nop
 8000ee2:	f7ff fb2d 	bl	8000540 <LL_RCC_HSE_IsReady>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d1fa      	bne.n	8000ee2 <SystemClock_Config+0x36>
  {

  }
  LL_RCC_PLL_SetSource(LL_RCC_PLLSOURCE_HSE);
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff fc0b 	bl	8000708 <LL_RCC_PLL_SetSource>
  LL_RCC_PLL1P_Enable();
 8000ef2:	f7ff fc41 	bl	8000778 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1Q_Enable();
 8000ef6:	f7ff fc4f 	bl	8000798 <LL_RCC_PLL1Q_Enable>
  LL_RCC_PLL1R_Enable();
 8000efa:	f7ff fc5d 	bl	80007b8 <LL_RCC_PLL1R_Enable>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f7ff fc80 	bl	8000804 <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff fc67 	bl	80007d8 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(2);
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff fca8 	bl	8000860 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(16);
 8000f10:	2010      	movs	r0, #16
 8000f12:	f7ff fc8d 	bl	8000830 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 8000f16:	2002      	movs	r0, #2
 8000f18:	f7ff fcb8 	bl	800088c <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(4);
 8000f1c:	2004      	movs	r0, #4
 8000f1e:	f7ff fccb 	bl	80008b8 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 8000f22:	2002      	movs	r0, #2
 8000f24:	f7ff fcde 	bl	80008e4 <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1_Enable();
 8000f28:	f7ff fc02 	bl	8000730 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 8000f2c:	bf00      	nop
 8000f2e:	f7ff fc0f 	bl	8000750 <LL_RCC_PLL1_IsReady>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d1fa      	bne.n	8000f2e <SystemClock_Config+0x82>
  {
  }

   /* Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz */
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8000f38:	2008      	movs	r0, #8
 8000f3a:	f7ff fb4b 	bl	80005d4 <LL_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f7ff fb12 	bl	8000568 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 8000f44:	bf00      	nop
 8000f46:	f7ff fb23 	bl	8000590 <LL_RCC_GetSysClkSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b18      	cmp	r3, #24
 8000f4e:	d1fa      	bne.n	8000f46 <SystemClock_Config+0x9a>
  {

  }
  LL_RCC_SetSysPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fb2b 	bl	80005ac <LL_RCC_SetSysPrescaler>
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_1);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fb3c 	bl	80005d4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fb4d 	bl	80005fc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000f62:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f66:	f7ff fb5d 	bl	8000624 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_1);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fb6e 	bl	800064c <LL_RCC_SetAPB3Prescaler>
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_1);
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fb7f 	bl	8000674 <LL_RCC_SetAPB4Prescaler>
  LL_SetSystemCoreClock(100000000);
 8000f76:	4806      	ldr	r0, [pc, #24]	@ (8000f90 <SystemClock_Config+0xe4>)
 8000f78:	f009 f9ac 	bl	800a2d4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f7c:	200f      	movs	r0, #15
 8000f7e:	f006 fa19 	bl	80073b4 <HAL_InitTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f88:	f000 f914 	bl	80011b4 <Error_Handler>
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	05f5e100 	.word	0x05f5e100

08000f94 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f98:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8001058 <MX_FDCAN1_Init+0xc4>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000faa:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000fb0:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000fb6:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8000fbc:	4b25      	ldr	r3, [pc, #148]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fbe:	220a      	movs	r2, #10
 8000fc0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000fc2:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 8;
 8000fc8:	4b22      	ldr	r3, [pc, #136]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fca:	2208      	movs	r2, #8
 8000fcc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 8;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001000:	2208      	movs	r2, #8
 8001002:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001006:	2204      	movs	r2, #4
 8001008:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001010:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001012:	2204      	movs	r2, #4
 8001014:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800101c:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 800101e:	2204      	movs	r2, #4
 8001020:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001030:	2208      	movs	r2, #8
 8001032:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 800103c:	2204      	movs	r2, #4
 800103e:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001040:	4804      	ldr	r0, [pc, #16]	@ (8001054 <MX_FDCAN1_Init+0xc0>)
 8001042:	f006 fb1d 	bl	8007680 <HAL_FDCAN_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800104c:	f000 f8b2 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	240000d8 	.word	0x240000d8
 8001058:	4000a000 	.word	0x4000a000

0800105c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	@ 0x38
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001062:	f107 0318 	add.w	r3, r7, #24
 8001066:	2220      	movs	r2, #32
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f009 fbc2 	bl	800a7f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART16_CLKSOURCE_PCLK2);
 8001080:	482a      	ldr	r0, [pc, #168]	@ (800112c <MX_USART1_UART_Init+0xd0>)
 8001082:	f7ff fb35 	bl	80006f0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001086:	2010      	movs	r0, #16
 8001088:	f7ff fc5e 	bl	8000948 <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff fc3f 	bl	8000910 <LL_AHB4_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001092:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001096:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001098:	2302      	movs	r3, #2
 800109a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80010a8:	2307      	movs	r3, #7
 80010aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	481f      	ldr	r0, [pc, #124]	@ (8001130 <MX_USART1_UART_Init+0xd4>)
 80010b2:	f008 f8b7 	bl	8009224 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.BaudRate = 115200;
 80010ba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80010be:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010cc:	230c      	movs	r3, #12
 80010ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010d4:	2300      	movs	r3, #0
 80010d6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4619      	mov	r1, r3
 80010de:	4815      	ldr	r0, [pc, #84]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 80010e0:	f009 f84e 	bl	800a180 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80010e4:	2100      	movs	r1, #0
 80010e6:	4813      	ldr	r0, [pc, #76]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 80010e8:	f7ff fd10 	bl	8000b0c <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART1, LL_USART_FIFOTHRESHOLD_1_8);
 80010ec:	2100      	movs	r1, #0
 80010ee:	4811      	ldr	r0, [pc, #68]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 80010f0:	f7ff fd33 	bl	8000b5a <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART1);
 80010f4:	480f      	ldr	r0, [pc, #60]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 80010f6:	f7ff fcf9 	bl	8000aec <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART1);
 80010fa:	480e      	ldr	r0, [pc, #56]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 80010fc:	f7ff fd54 	bl	8000ba8 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART1 */

  /* USER CODE END WKUPType USART1 */

  LL_USART_Enable(USART1);
 8001100:	480c      	ldr	r0, [pc, #48]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 8001102:	f7ff fce3 	bl	8000acc <LL_USART_Enable>

  /* Polling USART1 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART1))) || (!(LL_USART_IsActiveFlag_REACK(USART1))))
 8001106:	bf00      	nop
 8001108:	480a      	ldr	r0, [pc, #40]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 800110a:	f7ff fd63 	bl	8000bd4 <LL_USART_IsActiveFlag_TEACK>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f9      	beq.n	8001108 <MX_USART1_UART_Init+0xac>
 8001114:	4807      	ldr	r0, [pc, #28]	@ (8001134 <MX_USART1_UART_Init+0xd8>)
 8001116:	f7ff fd71 	bl	8000bfc <LL_USART_IsActiveFlag_REACK>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f3      	beq.n	8001108 <MX_USART1_UART_Init+0xac>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3738      	adds	r7, #56	@ 0x38
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	07000308 	.word	0x07000308
 8001130:	58020000 	.word	0x58020000
 8001134:	40011000 	.word	0x40011000

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
 800114c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 800114e:	2008      	movs	r0, #8
 8001150:	f7ff fbde 	bl	8000910 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001154:	2001      	movs	r0, #1
 8001156:	f7ff fbdb 	bl	8000910 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(SERIAL_ENA_GPIO_Port, SERIAL_ENA_Pin);
 800115a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800115e:	480b      	ldr	r0, [pc, #44]	@ (800118c <MX_GPIO_Init+0x54>)
 8001160:	f7ff fd6e 	bl	8000c40 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SERIAL_ENA_Pin;
 8001164:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001168:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SERIAL_ENA_GPIO_Port, &GPIO_InitStruct);
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4803      	ldr	r0, [pc, #12]	@ (800118c <MX_GPIO_Init+0x54>)
 8001180:	f008 f850 	bl	8009224 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	58020c00 	.word	0x58020c00

08001190 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

  /* Disables the MPU */
  LL_MPU_Disable();
 8001194:	f7ff fc2e 	bl	80009f4 <LL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  LL_MPU_ConfigRegion(LL_MPU_REGION_NUMBER0, 0x87, 0x0, LL_MPU_REGION_SIZE_4GB|LL_MPU_TEX_LEVEL0|LL_MPU_REGION_NO_ACCESS|LL_MPU_INSTRUCTION_ACCESS_DISABLE|LL_MPU_ACCESS_SHAREABLE|LL_MPU_ACCESS_NOT_CACHEABLE|LL_MPU_ACCESS_NOT_BUFFERABLE);
 8001198:	4b05      	ldr	r3, [pc, #20]	@ (80011b0 <MPU_Config+0x20>)
 800119a:	2200      	movs	r2, #0
 800119c:	2187      	movs	r1, #135	@ 0x87
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fc38 	bl	8000a14 <LL_MPU_ConfigRegion>
  /* Enables the MPU */
  LL_MPU_Enable(LL_MPU_CTRL_PRIVILEGED_DEFAULT);
 80011a4:	2004      	movs	r0, #4
 80011a6:	f7ff fc0d 	bl	80009c4 <LL_MPU_Enable>

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	1004003e 	.word	0x1004003e

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <LL_RCC_SetFDCANClockSource>:
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D2CCIP1R, RCC_D2CCIP1R_FDCANSEL, ClkSource);
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <LL_RCC_SetFDCANClockSource+0x24>)
 80011ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011cc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80011d0:	4904      	ldr	r1, [pc, #16]	@ (80011e4 <LL_RCC_SetFDCANClockSource+0x24>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	650b      	str	r3, [r1, #80]	@ 0x50
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	58024400 	.word	0x58024400

080011e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HAL_MspInit+0x30>)
 80011f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011f4:	4a08      	ldr	r2, [pc, #32]	@ (8001218 <HAL_MspInit+0x30>)
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_MspInit+0x30>)
 8001200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	58024400 	.word	0x58024400

0800121c <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a20      	ldr	r2, [pc, #128]	@ (80012bc <HAL_FDCAN_MspInit+0xa0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d139      	bne.n	80012b2 <HAL_FDCAN_MspInit+0x96>
  {
    /* USER CODE BEGIN FDCAN1_MspInit 0 */

    /* USER CODE END FDCAN1_MspInit 0 */
    LL_RCC_SetFDCANClockSource(LL_RCC_FDCAN_CLKSOURCE_PLL1Q);
 800123e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001242:	f7ff ffbd 	bl	80011c0 <LL_RCC_SetFDCANClockSource>

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <HAL_FDCAN_MspInit+0xa4>)
 8001248:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800124c:	4a1c      	ldr	r2, [pc, #112]	@ (80012c0 <HAL_FDCAN_MspInit+0xa4>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001252:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_FDCAN_MspInit+0xa4>)
 8001258:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800125c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <HAL_FDCAN_MspInit+0xa4>)
 8001266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126a:	4a15      	ldr	r2, [pc, #84]	@ (80012c0 <HAL_FDCAN_MspInit+0xa4>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001274:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <HAL_FDCAN_MspInit+0xa4>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001282:	2303      	movs	r3, #3
 8001284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001292:	2309      	movs	r3, #9
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <HAL_FDCAN_MspInit+0xa8>)
 800129e:	f007 fbbd 	bl	8008a1c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2105      	movs	r1, #5
 80012a6:	2013      	movs	r0, #19
 80012a8:	f006 f9b5 	bl	8007616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80012ac:	2013      	movs	r0, #19
 80012ae:	f006 f9cc 	bl	800764a <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80012b2:	bf00      	nop
 80012b4:	3728      	adds	r7, #40	@ 0x28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	4000a000 	.word	0x4000a000
 80012c0:	58024400 	.word	0x58024400
 80012c4:	58020c00 	.word	0x58020c00

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f006 f88d 	bl	8007420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
    {
  #endif /* INCLUDE_xTaskGetSchedulerState */
    xPortSysTickHandler();
 8001306:	f005 fcef 	bl	8006ce8 <xPortSysTickHandler>
  #if (INCLUDE_xTaskGetSchedulerState == 1 )
    }
  #endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE END SysTick_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <FDCAN1_IT0_IRQHandler+0x10>)
 8001316:	f006 fe73 	bl	8008000 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240000d8 	.word	0x240000d8

08001324 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return 1;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_kill>:

int _kill(int pid, int sig)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133e:	f009 fac7 	bl	800a8d0 <__errno>
 8001342:	4603      	mov	r3, r0
 8001344:	2216      	movs	r2, #22
 8001346:	601a      	str	r2, [r3, #0]
  return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_exit>:

void _exit (int status)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffe7 	bl	8001334 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001366:	bf00      	nop
 8001368:	e7fd      	b.n	8001366 <_exit+0x12>

0800136a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e00a      	b.n	8001392 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800137c:	f3af 8000 	nop.w
 8001380:	4601      	mov	r1, r0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	60ba      	str	r2, [r7, #8]
 8001388:	b2ca      	uxtb	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	3301      	adds	r3, #1
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	dbf0      	blt.n	800137c <_read+0x12>
  }

  return len;
 800139a:	687b      	ldr	r3, [r7, #4]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e009      	b.n	80013ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbf1      	blt.n	80013b6 <_write+0x12>
  }
  return len;
 80013d2:	687b      	ldr	r3, [r7, #4]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <_close>:

int _close(int file)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001404:	605a      	str	r2, [r3, #4]
  return 0;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_isatty>:

int _isatty(int file)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800142a:	b480      	push	{r7}
 800142c:	b085      	sub	sp, #20
 800142e:	af00      	add	r7, sp, #0
 8001430:	60f8      	str	r0, [r7, #12]
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	@ (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	@ (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	@ (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	@ (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f009 fa2c 	bl	800a8d0 <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	24080000 	.word	0x24080000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	2400017c 	.word	0x2400017c
 80014ac:	24040d20 	.word	0x24040d20

080014b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80014ec <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80014b4:	f7ff f81a 	bl	80004ec <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80014b8:	f7fe ff6a 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	@ (80014f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	@ (80014f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001500 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f009 f9fb 	bl	800a8dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014e6:	f7ff fc8f 	bl	8000e08 <main>
  bx  lr
 80014ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014f0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f4:	240000bc 	.word	0x240000bc
  ldr r2, =_sidata
 80014f8:	0800c51c 	.word	0x0800c51c
  ldr r2, =_sbss
 80014fc:	240000bc 	.word	0x240000bc
  ldr r4, =_ebss
 8001500:	24040d1c 	.word	0x24040d1c

08001504 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC3_IRQHandler>
	...

08001508 <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 800150e:	f000 f9af 	bl	8001870 <csp_get_s>
 8001512:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <csp_get_uptime_s+0x2c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 800151c:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <csp_get_uptime_s+0x2c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <csp_get_uptime_s+0x2c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	1ad3      	subs	r3, r2, r3
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24000180 	.word	0x24000180

08001538 <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f005 fc6b 	bl	8006e1c <pvPortMalloc>
 8001546:	4603      	mov	r3, r0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 8001564:	6838      	ldr	r0, [r7, #0]
 8001566:	f7ff ffe7 	bl	8001538 <csp_malloc>
 800156a:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d004      	beq.n	800157c <csp_calloc+0x2c>
		memset(ptr, 0, size);
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	2100      	movs	r1, #0
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f009 f93c 	bl	800a7f4 <memset>
	}
	return ptr;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <csp_free>:

void csp_free(void *ptr) {
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f005 fd82 	bl	8007098 <vPortFree>
}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fcb2 	bl	8003f16 <xQueueGenericCreate>
 80015b2:	4603      	mov	r3, r0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f003 f99a 	bl	80048fe <vQueueDelete>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b084      	sub	sp, #16
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 80015e4:	2300      	movs	r3, #0
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f002 fd0c 	bl	8004008 <xQueueGenericSend>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b084      	sub	sp, #16
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 8001606:	2300      	movs	r3, #0
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f002 fe05 	bl	800421c <xQueueGenericSendFromISR>
 8001612:	4603      	mov	r3, r0
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f002 feb2 	bl	800439c <xQueueReceive>
 8001638:	4603      	mov	r3, r0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 8001642:	b580      	push	{r7, lr}
 8001644:	b084      	sub	sp, #16
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f003 f890 	bl	8004778 <xQueueReceiveFromISR>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f003 f926 	bl	80048bc <uxQueueMessagesWaiting>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <csp_bin_sem_create>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
	return csp_bin_sem_post(mutex);
}

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 8001682:	2203      	movs	r2, #3
 8001684:	2100      	movs	r1, #0
 8001686:	2001      	movs	r0, #1
 8001688:	f002 fc45 	bl	8003f16 <xQueueGenericCreate>
 800168c:	4602      	mov	r2, r0
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <csp_bin_sem_create+0x2e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6818      	ldr	r0, [r3, #0]
 800169e:	2300      	movs	r3, #0
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	f002 fcb0 	bl	8004008 <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <csp_bin_sem_wait>:
		vSemaphoreDelete(*sem);
	}
	return CSP_SEMAPHORE_OK;
}

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 80016be:	4b0e      	ldr	r3, [pc, #56]	@ (80016f8 <csp_bin_sem_wait+0x44>)
 80016c0:	799b      	ldrb	r3, [r3, #6]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d004      	beq.n	80016d0 <csp_bin_sem_wait+0x1c>
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	490c      	ldr	r1, [pc, #48]	@ (80016fc <csp_bin_sem_wait+0x48>)
 80016ca:	2006      	movs	r0, #6
 80016cc:	f000 fe38 	bl	8002340 <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6839      	ldr	r1, [r7, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f002 ff45 	bl	800456c <xQueueSemaphoreTake>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2400000c 	.word	0x2400000c
 80016fc:	0800b4d8 	.word	0x0800b4d8

08001700 <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <csp_bin_sem_post+0x3c>)
 800170a:	799b      	ldrb	r3, [r3, #6]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d004      	beq.n	800171a <csp_bin_sem_post+0x1a>
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	490b      	ldr	r1, [pc, #44]	@ (8001740 <csp_bin_sem_post+0x40>)
 8001714:	2006      	movs	r0, #6
 8001716:	f000 fe13 	bl	8002340 <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6818      	ldr	r0, [r3, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	f002 fc70 	bl	8004008 <xQueueGenericSend>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2400000c 	.word	0x2400000c
 8001740:	0800b4e4 	.word	0x0800b4e4

08001744 <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	3b01      	subs	r3, #1
 8001756:	2b07      	cmp	r3, #7
 8001758:	d82a      	bhi.n	80017b0 <csp_sys_set_color+0x6c>
 800175a:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <csp_sys_set_color+0x1c>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	08001781 	.word	0x08001781
 8001764:	08001787 	.word	0x08001787
 8001768:	0800178d 	.word	0x0800178d
 800176c:	08001793 	.word	0x08001793
 8001770:	08001799 	.word	0x08001799
 8001774:	0800179f 	.word	0x0800179f
 8001778:	080017a5 	.word	0x080017a5
 800177c:	080017ab 	.word	0x080017ab
		case COLOR_BLACK:
			color_code = 30; break;
 8001780:	231e      	movs	r3, #30
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e017      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 8001786:	231f      	movs	r3, #31
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e014      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 800178c:	2320      	movs	r3, #32
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e011      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 8001792:	2321      	movs	r3, #33	@ 0x21
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e00e      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 8001798:	2322      	movs	r3, #34	@ 0x22
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e00b      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 800179e:	2323      	movs	r3, #35	@ 0x23
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e008      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 80017a4:	2324      	movs	r3, #36	@ 0x24
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e005      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 80017aa:	2325      	movs	r3, #37	@ 0x25
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e002      	b.n	80017b6 <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017bc:	2b40      	cmp	r3, #64	@ 0x40
 80017be:	d013      	beq.n	80017e8 <csp_sys_set_color+0xa4>
 80017c0:	2b40      	cmp	r3, #64	@ 0x40
 80017c2:	dc14      	bgt.n	80017ee <csp_sys_set_color+0xaa>
 80017c4:	2b30      	cmp	r3, #48	@ 0x30
 80017c6:	d00c      	beq.n	80017e2 <csp_sys_set_color+0x9e>
 80017c8:	2b30      	cmp	r3, #48	@ 0x30
 80017ca:	dc10      	bgt.n	80017ee <csp_sys_set_color+0xaa>
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d002      	beq.n	80017d6 <csp_sys_set_color+0x92>
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	d003      	beq.n	80017dc <csp_sys_set_color+0x98>
 80017d4:	e00b      	b.n	80017ee <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 80017d6:	2301      	movs	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	e00b      	b.n	80017f4 <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 80017dc:	2302      	movs	r3, #2
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	e008      	b.n	80017f4 <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 80017e2:	2303      	movs	r3, #3
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	e005      	b.n	80017f4 <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 80017e8:	2304      	movs	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	e002      	b.n	80017f4 <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <csp_sys_set_color+0xc4>)
 80017fa:	f008 fea9 	bl	800a550 <iprintf>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	0800b4f0 	.word	0x0800b4f0

0800180c <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 800181a:	f107 0310 	add.w	r3, r7, #16
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	68b9      	ldr	r1, [r7, #8]
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f003 fb43 	bl	8004eb6 <xTaskCreate>
 8001830:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d002      	beq.n	800183e <csp_thread_create+0x32>
		return CSP_ERR_NOMEM;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	e006      	b.n	800184c <csp_thread_create+0x40>
	}
	if (return_handle) {
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <csp_thread_create+0x3e>
		*return_handle = handle;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8001858:	f003 fe7c 	bl	8005554 <xTaskGetTickCount>
 800185c:	4603      	mov	r3, r0
}
 800185e:	4618      	mov	r0, r3
 8001860:	bd80      	pop	{r7, pc}

08001862 <csp_get_ms_isr>:

uint32_t csp_get_ms_isr(void) {
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
 8001866:	f003 fe85 	bl	8005574 <xTaskGetTickCountFromISR>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}

08001870 <csp_get_s>:

uint32_t csp_get_s(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 8001874:	f003 fe6e 	bl	8005554 <xTaskGetTickCount>
 8001878:	4603      	mov	r3, r0
 800187a:	4a03      	ldr	r2, [pc, #12]	@ (8001888 <csp_get_s+0x18>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	099b      	lsrs	r3, r3, #6
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	10624dd3 	.word	0x10624dd3

0800188c <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 8001892:	f000 f9b5 	bl	8001c00 <csp_buffer_size>
 8001896:	4603      	mov	r3, r0
 8001898:	330b      	adds	r3, #11
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 80018a0:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <csp_buffer_init+0xa4>)
 80018a2:	8adb      	ldrh	r3, [r3, #22]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fe43 	bl	8001538 <csp_malloc>
 80018b2:	4603      	mov	r3, r0
 80018b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001934 <csp_buffer_init+0xa8>)
 80018b6:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <csp_buffer_init+0xa8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d030      	beq.n	8001922 <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <csp_buffer_init+0xa4>)
 80018c2:	8adb      	ldrh	r3, [r3, #22]
 80018c4:	2104      	movs	r1, #4
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fe68 	bl	800159c <csp_queue_create>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001938 <csp_buffer_init+0xac>)
 80018d0:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <csp_buffer_init+0xac>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01f      	beq.n	800191a <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e014      	b.n	800190a <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <csp_buffer_init+0xa8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 80018f6:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <csp_buffer_init+0xac>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	1d39      	adds	r1, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fe67 	bl	80015d2 <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <csp_buffer_init+0xa4>)
 800190c:	8adb      	ldrh	r3, [r3, #22]
 800190e:	461a      	mov	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	4293      	cmp	r3, r2
 8001914:	d3e4      	bcc.n	80018e0 <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 8001916:	2300      	movs	r3, #0
 8001918:	e006      	b.n	8001928 <csp_buffer_init+0x9c>
		goto fail_queue;
 800191a:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 800191c:	f000 f80e 	bl	800193c <csp_buffer_free_resources>
 8001920:	e000      	b.n	8001924 <csp_buffer_init+0x98>
		goto fail_malloc;
 8001922:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 8001924:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	240001a8 	.word	0x240001a8
 8001934:	24000188 	.word	0x24000188
 8001938:	24000184 	.word	0x24000184

0800193c <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 8001940:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <csp_buffer_free_resources+0x30>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <csp_buffer_free_resources+0x30>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe35 	bl	80015bc <csp_queue_remove>
		csp_buffers = NULL;
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <csp_buffer_free_resources+0x30>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <csp_buffer_free_resources+0x34>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe12 	bl	8001586 <csp_free>
	csp_buffer_pool = NULL;
 8001962:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <csp_buffer_free_resources+0x34>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	24000184 	.word	0x24000184
 8001970:	24000188 	.word	0x24000188

08001974 <csp_buffer_get_isr>:

void *csp_buffer_get_isr(size_t _data_size) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size)
 800197c:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <csp_buffer_get_isr+0x5c>)
 800197e:	8b1b      	ldrh	r3, [r3, #24]
 8001980:	461a      	mov	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <csp_buffer_get_isr+0x18>
		return NULL;
 8001988:	2300      	movs	r3, #0
 800198a:	e01d      	b.n	80019c8 <csp_buffer_get_isr+0x54>

	csp_skbf_t * buffer = NULL;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
	CSP_BASE_TYPE task_woken = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
	csp_queue_dequeue_isr(csp_buffers, &buffer, &task_woken);
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <csp_buffer_get_isr+0x60>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f107 0208 	add.w	r2, r7, #8
 800199c:	f107 010c 	add.w	r1, r7, #12
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff fe4e 	bl	8001642 <csp_queue_dequeue_isr>
	if (buffer == NULL)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <csp_buffer_get_isr+0x3c>
		return NULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	e00b      	b.n	80019c8 <csp_buffer_get_isr+0x54>

	if (buffer != buffer->skbf_addr)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <csp_buffer_get_isr+0x4a>
		return NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e004      	b.n	80019c8 <csp_buffer_get_isr+0x54>

	buffer->refcount = 1;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3308      	adds	r3, #8

}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240001a8 	.word	0x240001a8
 80019d4:	24000184 	.word	0x24000184

080019d8 <csp_buffer_get>:

void *csp_buffer_get(size_t _data_size) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 80019e0:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <csp_buffer_get+0xa8>)
 80019e2:	8b1b      	ldrh	r3, [r3, #24]
 80019e4:	461a      	mov	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d90c      	bls.n	8001a06 <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 80019ec:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <csp_buffer_get+0xac>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d006      	beq.n	8001a02 <csp_buffer_get+0x2a>
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <csp_buffer_get+0xa8>)
 80019f6:	8b1b      	ldrh	r3, [r3, #24]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	4923      	ldr	r1, [pc, #140]	@ (8001a88 <csp_buffer_get+0xb0>)
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 fc9f 	bl	8002340 <do_csp_debug>
		return NULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e037      	b.n	8001a76 <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 8001a0a:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <csp_buffer_get+0xb4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f107 010c 	add.w	r1, r7, #12
 8001a12:	2200      	movs	r2, #0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fe01 	bl	800161c <csp_queue_dequeue>
	if (buffer == NULL) {
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 8001a20:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <csp_buffer_get+0xac>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <csp_buffer_get+0x58>
 8001a28:	4919      	ldr	r1, [pc, #100]	@ (8001a90 <csp_buffer_get+0xb8>)
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 fc88 	bl	8002340 <do_csp_debug>
		return NULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e020      	b.n	8001a76 <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d00c      	beq.n	8001a58 <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <csp_buffer_get+0xac>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d006      	beq.n	8001a54 <csp_buffer_get+0x7c>
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4911      	ldr	r1, [pc, #68]	@ (8001a94 <csp_buffer_get+0xbc>)
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 fc76 	bl	8002340 <do_csp_debug>
		return NULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e00e      	b.n	8001a76 <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 8001a58:	4b0a      	ldr	r3, [pc, #40]	@ (8001a84 <csp_buffer_get+0xac>)
 8001a5a:	78db      	ldrb	r3, [r3, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <csp_buffer_get+0x94>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	461a      	mov	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	@ (8001a98 <csp_buffer_get+0xc0>)
 8001a66:	2003      	movs	r0, #3
 8001a68:	f000 fc6a 	bl	8002340 <do_csp_debug>

	buffer->refcount = 1;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3308      	adds	r3, #8
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	240001a8 	.word	0x240001a8
 8001a84:	2400000c 	.word	0x2400000c
 8001a88:	0800b4fc 	.word	0x0800b4fc
 8001a8c:	24000184 	.word	0x24000184
 8001a90:	0800b538 	.word	0x0800b538
 8001a94:	0800b54c 	.word	0x0800b54c
 8001a98:	0800b570 	.word	0x0800b570

08001a9c <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d023      	beq.n	8001af2 <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3b08      	subs	r3, #8
 8001aae:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d11d      	bne.n	8001af6 <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d11a      	bne.n	8001afa <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d018      	beq.n	8001afe <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	3a01      	subs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d113      	bne.n	8001b02 <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <csp_buffer_free_isr+0x70>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f107 0208 	add.w	r2, r7, #8
 8001ae6:	f107 010c 	add.w	r1, r7, #12
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd85 	bl	80015fa <csp_queue_enqueue_isr>
 8001af0:	e008      	b.n	8001b04 <csp_buffer_free_isr+0x68>
		return;
 8001af2:	bf00      	nop
 8001af4:	e006      	b.n	8001b04 <csp_buffer_free_isr+0x68>
		return;
 8001af6:	bf00      	nop
 8001af8:	e004      	b.n	8001b04 <csp_buffer_free_isr+0x68>
		return;
 8001afa:	bf00      	nop
 8001afc:	e002      	b.n	8001b04 <csp_buffer_free_isr+0x68>
		return;
 8001afe:	bf00      	nop
 8001b00:	e000      	b.n	8001b04 <csp_buffer_free_isr+0x68>
		return;
 8001b02:	bf00      	nop

}
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	24000184 	.word	0x24000184

08001b10 <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d055      	beq.n	8001bca <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3b08      	subs	r3, #8
 8001b22:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d009      	beq.n	8001b42 <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001be4 <csp_buffer_free+0xd4>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04b      	beq.n	8001bce <csp_buffer_free+0xbe>
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	492b      	ldr	r1, [pc, #172]	@ (8001be8 <csp_buffer_free+0xd8>)
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f000 fc00 	bl	8002340 <do_csp_debug>
		return;
 8001b40:	e045      	b.n	8001bce <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d009      	beq.n	8001b60 <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 8001b4c:	4b25      	ldr	r3, [pc, #148]	@ (8001be4 <csp_buffer_free+0xd4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03e      	beq.n	8001bd2 <csp_buffer_free+0xc2>
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4925      	ldr	r1, [pc, #148]	@ (8001bec <csp_buffer_free+0xdc>)
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f000 fbf1 	bl	8002340 <do_csp_debug>
		return;
 8001b5e:	e038      	b.n	8001bd2 <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10a      	bne.n	8001b7e <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <csp_buffer_free+0xd4>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d032      	beq.n	8001bd6 <csp_buffer_free+0xc6>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	461a      	mov	r2, r3
 8001b74:	491e      	ldr	r1, [pc, #120]	@ (8001bf0 <csp_buffer_free+0xe0>)
 8001b76:	2000      	movs	r0, #0
 8001b78:	f000 fbe2 	bl	8002340 <do_csp_debug>
		return;
 8001b7c:	e02b      	b.n	8001bd6 <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	3a01      	subs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <csp_buffer_free+0xd4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d022      	beq.n	8001bda <csp_buffer_free+0xca>
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4916      	ldr	r1, [pc, #88]	@ (8001bf4 <csp_buffer_free+0xe4>)
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f000 fbcf 	bl	8002340 <do_csp_debug>
		return;
 8001ba2:	e01a      	b.n	8001bda <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <csp_buffer_free+0xd4>)
 8001ba6:	78db      	ldrb	r3, [r3, #3]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <csp_buffer_free+0xa8>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4911      	ldr	r1, [pc, #68]	@ (8001bf8 <csp_buffer_free+0xe8>)
 8001bb2:	2003      	movs	r0, #3
 8001bb4:	f000 fbc4 	bl	8002340 <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <csp_buffer_free+0xec>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f107 010c 	add.w	r1, r7, #12
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fd05 	bl	80015d2 <csp_queue_enqueue>
 8001bc8:	e008      	b.n	8001bdc <csp_buffer_free+0xcc>
		return;
 8001bca:	bf00      	nop
 8001bcc:	e006      	b.n	8001bdc <csp_buffer_free+0xcc>
		return;
 8001bce:	bf00      	nop
 8001bd0:	e004      	b.n	8001bdc <csp_buffer_free+0xcc>
		return;
 8001bd2:	bf00      	nop
 8001bd4:	e002      	b.n	8001bdc <csp_buffer_free+0xcc>
		return;
 8001bd6:	bf00      	nop
 8001bd8:	e000      	b.n	8001bdc <csp_buffer_free+0xcc>
		return;
 8001bda:	bf00      	nop

}
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	2400000c 	.word	0x2400000c
 8001be8:	0800b578 	.word	0x0800b578
 8001bec:	0800b5a0 	.word	0x0800b5a0
 8001bf0:	0800b5c4 	.word	0x0800b5c4
 8001bf4:	0800b5e4 	.word	0x0800b5e4
 8001bf8:	0800b608 	.word	0x0800b608
 8001bfc:	24000184 	.word	0x24000184

08001c00 <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <csp_buffer_size+0x14>)
 8001c06:	8b1b      	ldrh	r3, [r3, #24]
 8001c08:	3310      	adds	r3, #16
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	240001a8 	.word	0x240001a8

08001c18 <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <csp_buffer_data_size+0x14>)
 8001c1e:	8b1b      	ldrh	r3, [r3, #24]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	240001a8 	.word	0x240001a8

08001c30 <csp_conn_get_rxq>:
		}
	}
#endif
}

int csp_conn_get_rxq(int prio) {
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 8001c38:	2300      	movs	r3, #0
#endif

}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]

	if (!conn)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 8001c58:	f06f 0301 	mvn.w	r3, #1
 8001c5c:	e039      	b.n	8001cd2 <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	7bdb      	ldrb	r3, [r3, #15]
 8001c68:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff ffde 	bl	8001c30 <csp_conn_get_rxq>
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	e001      	b.n	8001c7c <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3302      	adds	r3, #2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4639      	mov	r1, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fca0 	bl	80015d2 <csp_queue_enqueue>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d01b      	beq.n	8001cd0 <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 8001c98:	4b10      	ldr	r3, [pc, #64]	@ (8001cdc <csp_conn_enqueue_packet+0x94>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <csp_conn_enqueue_packet+0x82>
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	685c      	ldr	r4, [r3, #4]
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fcd2 	bl	8001662 <csp_queue_size>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	4907      	ldr	r1, [pc, #28]	@ (8001ce0 <csp_conn_enqueue_packet+0x98>)
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 fb3b 	bl	8002340 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	e000      	b.n	8001cd2 <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2400000c 	.word	0x2400000c
 8001ce0:	0800b614 	.word	0x0800b614

08001ce4 <csp_conn_init>:

int csp_conn_init(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 8001cea:	4b4d      	ldr	r3, [pc, #308]	@ (8001e20 <csp_conn_init+0x13c>)
 8001cec:	7c1b      	ldrb	r3, [r3, #16]
 8001cee:	211c      	movs	r1, #28
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fc2d 	bl	8001550 <csp_calloc>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8001e24 <csp_conn_init+0x140>)
 8001cfa:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 8001cfc:	4b49      	ldr	r3, [pc, #292]	@ (8001e24 <csp_conn_init+0x140>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10d      	bne.n	8001d20 <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 8001d04:	4b48      	ldr	r3, [pc, #288]	@ (8001e28 <csp_conn_init+0x144>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <csp_conn_init+0x36>
 8001d0c:	4b44      	ldr	r3, [pc, #272]	@ (8001e20 <csp_conn_init+0x13c>)
 8001d0e:	7c1b      	ldrb	r3, [r3, #16]
 8001d10:	461a      	mov	r2, r3
 8001d12:	4946      	ldr	r1, [pc, #280]	@ (8001e2c <csp_conn_init+0x148>)
 8001d14:	2000      	movs	r0, #0
 8001d16:	f000 fb13 	bl	8002340 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e07b      	b.n	8001e18 <csp_conn_init+0x134>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 8001d20:	4843      	ldr	r0, [pc, #268]	@ (8001e30 <csp_conn_init+0x14c>)
 8001d22:	f7ff fcaa 	bl	800167a <csp_bin_sem_create>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d00a      	beq.n	8001d42 <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 8001d2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e28 <csp_conn_init+0x144>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <csp_conn_init+0x58>
 8001d34:	493f      	ldr	r1, [pc, #252]	@ (8001e34 <csp_conn_init+0x150>)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 fb02 	bl	8002340 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	e06a      	b.n	8001e18 <csp_conn_init+0x134>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 8001d42:	f7ff fd87 	bl	8001854 <csp_get_ms>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f008 fad3 	bl	800a2f4 <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 8001d4e:	f008 faff 	bl	800a350 <rand>
 8001d52:	4602      	mov	r2, r0
 8001d54:	4b32      	ldr	r3, [pc, #200]	@ (8001e20 <csp_conn_init+0x13c>)
 8001d56:	7cdb      	ldrb	r3, [r3, #19]
 8001d58:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8001d5c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001d60:	fb01 f303 	mul.w	r3, r1, r3
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b2d      	ldr	r3, [pc, #180]	@ (8001e20 <csp_conn_init+0x13c>)
 8001d6a:	7cdb      	ldrb	r3, [r3, #19]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b30      	ldr	r3, [pc, #192]	@ (8001e38 <csp_conn_init+0x154>)
 8001d76:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 8001d78:	4830      	ldr	r0, [pc, #192]	@ (8001e3c <csp_conn_init+0x158>)
 8001d7a:	f7ff fc7e 	bl	800167a <csp_bin_sem_create>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d00a      	beq.n	8001d9a <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 8001d84:	4b28      	ldr	r3, [pc, #160]	@ (8001e28 <csp_conn_init+0x144>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <csp_conn_init+0xb0>
 8001d8c:	492c      	ldr	r1, [pc, #176]	@ (8001e40 <csp_conn_init+0x15c>)
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 fad6 	bl	8002340 <do_csp_debug>
		return CSP_ERR_NOMEM;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	e03e      	b.n	8001e18 <csp_conn_init+0x134>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e034      	b.n	8001e0a <csp_conn_init+0x126>
		csp_conn_t * conn = &arr_conn[i];
 8001da0:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <csp_conn_init+0x140>)
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	e022      	b.n	8001dfe <csp_conn_init+0x11a>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8001db8:	4b19      	ldr	r3, [pc, #100]	@ (8001e20 <csp_conn_init+0x13c>)
 8001dba:	7c5b      	ldrb	r3, [r3, #17]
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fbec 	bl	800159c <csp_queue_create>
 8001dc4:	4601      	mov	r1, r0
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3302      	adds	r3, #2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10a      	bne.n	8001df8 <csp_conn_init+0x114>
				csp_log_error("rx_queue = csp_queue_create() failed");
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <csp_conn_init+0x144>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <csp_conn_init+0x10e>
 8001dea:	4916      	ldr	r1, [pc, #88]	@ (8001e44 <csp_conn_init+0x160>)
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 faa7 	bl	8002340 <do_csp_debug>
				return CSP_ERR_NOMEM;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	e00f      	b.n	8001e18 <csp_conn_init+0x134>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	ddd9      	ble.n	8001db8 <csp_conn_init+0xd4>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3301      	adds	r3, #1
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <csp_conn_init+0x13c>)
 8001e0c:	7c1b      	ldrb	r3, [r3, #16]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4293      	cmp	r3, r2
 8001e14:	dbc4      	blt.n	8001da0 <csp_conn_init+0xbc>
			return CSP_ERR_NOMEM;
		}
#endif
	}

	return CSP_ERR_NONE;
 8001e16:	2300      	movs	r3, #0

}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	240001a8 	.word	0x240001a8
 8001e24:	2400018c 	.word	0x2400018c
 8001e28:	2400000c 	.word	0x2400000c
 8001e2c:	0800b634 	.word	0x0800b634
 8001e30:	24000190 	.word	0x24000190
 8001e34:	0800b65c 	.word	0x0800b65c
 8001e38:	24000194 	.word	0x24000194
 8001e3c:	24000198 	.word	0x24000198
 8001e40:	0800b684 	.word	0x0800b684
 8001e44:	0800b6ac 	.word	0x0800b6ac

08001e48 <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4013      	ands	r3, r2
 8001e58:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	e01c      	b.n	8001e9a <csp_conn_find+0x52>
		csp_conn_t * conn = &arr_conn[i];
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <csp_conn_find+0x6c>)
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	785b      	ldrb	r3, [r3, #1]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d10c      	bne.n	8001e94 <csp_conn_find+0x4c>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d108      	bne.n	8001e94 <csp_conn_find+0x4c>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d101      	bne.n	8001e94 <csp_conn_find+0x4c>
			return conn;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	e009      	b.n	8001ea8 <csp_conn_find+0x60>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <csp_conn_find+0x70>)
 8001e9c:	7c1b      	ldrb	r3, [r3, #16]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	dbdc      	blt.n	8001e60 <csp_conn_find+0x18>
		}
	}
	
	return NULL;
 8001ea6:	2300      	movs	r3, #0

}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	2400018c 	.word	0x2400018c
 8001eb8:	240001a8 	.word	0x240001a8

08001ebc <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e018      	b.n	8001efc <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fe1c 	bl	8001b10 <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3302      	adds	r3, #2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f107 0108 	add.w	r1, r7, #8
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fb96 	bl	800161c <csp_queue_dequeue>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d0e9      	beq.n	8001eca <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	ddea      	ble.n	8001ed8 <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 8001f02:	2300      	movs	r3, #0

}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 8001f16:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1a:	4838      	ldr	r0, [pc, #224]	@ (8001ffc <csp_conn_allocate+0xf0>)
 8001f1c:	f7ff fbca 	bl	80016b4 <csp_bin_sem_wait>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d009      	beq.n	8001f3a <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 8001f26:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <csp_conn_allocate+0xf4>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <csp_conn_allocate+0x2a>
 8001f2e:	4935      	ldr	r1, [pc, #212]	@ (8002004 <csp_conn_allocate+0xf8>)
 8001f30:	2000      	movs	r0, #0
 8001f32:	f000 fa05 	bl	8002340 <do_csp_debug>
		return NULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	e05b      	b.n	8001ff2 <csp_conn_allocate+0xe6>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 8001f3e:	4b32      	ldr	r3, [pc, #200]	@ (8002008 <csp_conn_allocate+0xfc>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e019      	b.n	8001f7e <csp_conn_allocate+0x72>
		i = (i + 1) % csp_conf.conn_max;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800200c <csp_conn_allocate+0x100>)
 8001f50:	7c12      	ldrb	r2, [r2, #16]
 8001f52:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f56:	fb01 f202 	mul.w	r2, r1, r2
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <csp_conn_allocate+0x104>)
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a9b      	subs	r3, r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <csp_conn_allocate+0x80>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b23      	ldr	r3, [pc, #140]	@ (800200c <csp_conn_allocate+0x100>)
 8001f80:	7c1b      	ldrb	r3, [r3, #16]
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	dbdf      	blt.n	8001f4a <csp_conn_allocate+0x3e>
 8001f8a:	e000      	b.n	8001f8e <csp_conn_allocate+0x82>
			break;
 8001f8c:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01a      	beq.n	8001fca <csp_conn_allocate+0xbe>
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	785b      	ldrb	r3, [r3, #1]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d116      	bne.n	8001fca <csp_conn_allocate+0xbe>
		conn->idin.ext = 0;
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
		conn->type = type;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <csp_conn_allocate+0xfc>)
 8001fc6:	701a      	strb	r2, [r3, #0]
 8001fc8:	e001      	b.n	8001fce <csp_conn_allocate+0xc2>
	} else {
		// no free connections
		conn = NULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 8001fce:	480b      	ldr	r0, [pc, #44]	@ (8001ffc <csp_conn_allocate+0xf0>)
 8001fd0:	f7ff fb96 	bl	8001700 <csp_bin_sem_post>

	if (conn == NULL) {
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10a      	bne.n	8001ff0 <csp_conn_allocate+0xe4>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <csp_conn_allocate+0xf4>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <csp_conn_allocate+0xe4>
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <csp_conn_allocate+0x100>)
 8001fe4:	7c1b      	ldrb	r3, [r3, #16]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	490a      	ldr	r1, [pc, #40]	@ (8002014 <csp_conn_allocate+0x108>)
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f9a8 	bl	8002340 <do_csp_debug>
	}

	return conn;
 8001ff0:	697b      	ldr	r3, [r7, #20]

}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	24000190 	.word	0x24000190
 8002000:	2400000c 	.word	0x2400000c
 8002004:	0800b6d4 	.word	0x0800b6d4
 8002008:	2400019c 	.word	0x2400019c
 800200c:	240001a8 	.word	0x240001a8
 8002010:	2400018c 	.word	0x2400018c
 8002014:	0800b6f0 	.word	0x0800b6f0

08002018 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff ff72 	bl	8001f0c <csp_conn_allocate>
 8002028:	60f8      	str	r0, [r7, #12]

	if (conn) {
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 800203c:	f7ff fc0a 	bl	8001854 <csp_get_ms>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff ff38 	bl	8001ebc <csp_conn_flush_rx_queue>
	}

	return conn;
 800204c:	68fb      	ldr	r3, [r7, #12]

}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <csp_close>:

int csp_close(csp_conn_t * conn) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 800205e:	2101      	movs	r1, #1
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f805 	bl	8002070 <csp_conn_close>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 8002082:	2300      	movs	r3, #0
 8002084:	e040      	b.n	8002108 <csp_conn_close+0x98>
	}

	if (conn->state == CONN_CLOSED) {
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 800208e:	4b20      	ldr	r3, [pc, #128]	@ (8002110 <csp_conn_close+0xa0>)
 8002090:	795b      	ldrb	r3, [r3, #5]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <csp_conn_close+0x2e>
 8002096:	491f      	ldr	r1, [pc, #124]	@ (8002114 <csp_conn_close+0xa4>)
 8002098:	2005      	movs	r0, #5
 800209a:	f000 f951 	bl	8002340 <do_csp_debug>
		return CSP_ERR_NONE;
 800209e:	2300      	movs	r3, #0
 80020a0:	e032      	b.n	8002108 <csp_conn_close+0x98>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 80020a2:	f04f 31ff 	mov.w	r1, #4294967295
 80020a6:	481c      	ldr	r0, [pc, #112]	@ (8002118 <csp_conn_close+0xa8>)
 80020a8:	f7ff fb04 	bl	80016b4 <csp_bin_sem_wait>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d00a      	beq.n	80020c8 <csp_conn_close+0x58>
		csp_log_error("Failed to lock conn array");
 80020b2:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <csp_conn_close+0xa0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <csp_conn_close+0x52>
 80020ba:	4918      	ldr	r1, [pc, #96]	@ (800211c <csp_conn_close+0xac>)
 80020bc:	2000      	movs	r0, #0
 80020be:	f000 f93f 	bl	8002340 <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 80020c2:	f06f 0302 	mvn.w	r3, #2
 80020c6:	e01f      	b.n	8002108 <csp_conn_close+0x98>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fef4 	bl	8001ebc <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d011      	beq.n	8002100 <csp_conn_close+0x90>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d10d      	bne.n	8002100 <csp_conn_close+0x90>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 5388 	and.w	r3, r3, #4352	@ 0x1100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <csp_conn_close+0x90>
		csp_queue_remove(conn->socket);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fa61 	bl	80015bc <csp_queue_remove>
		conn->socket = NULL;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	611a      	str	r2, [r3, #16]
		csp_rdp_flush_all(conn);
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 8002100:	4805      	ldr	r0, [pc, #20]	@ (8002118 <csp_conn_close+0xa8>)
 8002102:	f7ff fafd 	bl	8001700 <csp_bin_sem_post>

	return CSP_ERR_NONE;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2400000c 	.word	0x2400000c
 8002114:	0800b70c 	.word	0x0800b70c
 8002118:	24000190 	.word	0x24000190
 800211c:	0800b6d4 	.word	0x0800b6d4

08002120 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint8_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	4603      	mov	r3, r0
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	460b      	mov	r3, r1
 800212e:	71bb      	strb	r3, [r7, #6]
 8002130:	4613      	mov	r3, r2
 8002132:	717b      	strb	r3, [r7, #5]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 8002134:	4b72      	ldr	r3, [pc, #456]	@ (8002300 <csp_connect+0x1e0>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	6a3a      	ldr	r2, [r7, #32]
 800213a:	4313      	orrs	r3, r2
 800213c:	623b      	str	r3, [r7, #32]

	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	b2da      	uxtb	r2, r3
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	f362 1387 	bfi	r3, r2, #6, #2
 800214c:	73fb      	strb	r3, [r7, #15]
	incoming_id.dst = csp_conf.address;
 800214e:	4b6c      	ldr	r3, [pc, #432]	@ (8002300 <csp_connect+0x1e0>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	b2da      	uxtb	r2, r3
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	f362 1308 	bfi	r3, r2, #4, #5
 800215e:	81fb      	strh	r3, [r7, #14]
	incoming_id.src = dest;
 8002160:	79bb      	ldrb	r3, [r7, #6]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	b2da      	uxtb	r2, r3
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	f362 0345 	bfi	r3, r2, #1, #5
 800216e:	73fb      	strb	r3, [r7, #15]
	incoming_id.sport = dport;
 8002170:	797b      	ldrb	r3, [r7, #5]
 8002172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002176:	b2da      	uxtb	r2, r3
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	f362 0305 	bfi	r3, r2, #0, #6
 800217e:	737b      	strb	r3, [r7, #13]
	incoming_id.flags = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	733b      	strb	r3, [r7, #12]
	outgoing_id.pri = prio;
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	b2da      	uxtb	r2, r3
 800218c:	7afb      	ldrb	r3, [r7, #11]
 800218e:	f362 1387 	bfi	r3, r2, #6, #2
 8002192:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dst = dest;
 8002194:	79bb      	ldrb	r3, [r7, #6]
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	b2da      	uxtb	r2, r3
 800219c:	897b      	ldrh	r3, [r7, #10]
 800219e:	f362 1308 	bfi	r3, r2, #4, #5
 80021a2:	817b      	strh	r3, [r7, #10]
	outgoing_id.src = csp_conf.address;
 80021a4:	4b56      	ldr	r3, [pc, #344]	@ (8002300 <csp_connect+0x1e0>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	7afb      	ldrb	r3, [r7, #11]
 80021b0:	f362 0345 	bfi	r3, r2, #1, #5
 80021b4:	72fb      	strb	r3, [r7, #11]
	outgoing_id.dport = dport;
 80021b6:	797b      	ldrb	r3, [r7, #5]
 80021b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f362 3393 	bfi	r3, r2, #14, #6
 80021c4:	60bb      	str	r3, [r7, #8]
	outgoing_id.flags = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	723b      	strb	r3, [r7, #8]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 80021ca:	6a3b      	ldr	r3, [r7, #32]
 80021cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <csp_connect+0xbc>
		opts &= ~CSP_O_CRC32;
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021da:	623b      	str	r3, [r7, #32]
	}

	if (opts & CSP_O_RDP) {
 80021dc:	6a3b      	ldr	r3, [r7, #32]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <csp_connect+0xda>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
		outgoing_id.flags |= CSP_FRDP;
#else
		csp_log_error("Attempt to create RDP connection, but CSP was compiled without RDP support");
 80021e6:	4b47      	ldr	r3, [pc, #284]	@ (8002304 <csp_connect+0x1e4>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <csp_connect+0xd6>
 80021ee:	4946      	ldr	r1, [pc, #280]	@ (8002308 <csp_connect+0x1e8>)
 80021f0:	2000      	movs	r0, #0
 80021f2:	f000 f8a5 	bl	8002340 <do_csp_debug>
		return NULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e07e      	b.n	80022f8 <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_HMAC) {
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <csp_connect+0xf8>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_log_error("Attempt to create HMAC authenticated connection, but CSP was compiled without HMAC support");
 8002204:	4b3f      	ldr	r3, [pc, #252]	@ (8002304 <csp_connect+0x1e4>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <csp_connect+0xf4>
 800220c:	493f      	ldr	r1, [pc, #252]	@ (800230c <csp_connect+0x1ec>)
 800220e:	2000      	movs	r0, #0
 8002210:	f000 f896 	bl	8002340 <do_csp_debug>
		return NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	e06f      	b.n	80022f8 <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_XTEA) {
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <csp_connect+0x116>
#if (CSP_USE_XTEA)
		outgoing_id.flags |= CSP_FXTEA;
		incoming_id.flags |= CSP_FXTEA;
#else
		csp_log_error("Attempt to create XTEA encrypted connection, but CSP was compiled without XTEA support");
 8002222:	4b38      	ldr	r3, [pc, #224]	@ (8002304 <csp_connect+0x1e4>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <csp_connect+0x112>
 800222a:	4939      	ldr	r1, [pc, #228]	@ (8002310 <csp_connect+0x1f0>)
 800222c:	2000      	movs	r0, #0
 800222e:	f000 f887 	bl	8002340 <do_csp_debug>
		return NULL;
 8002232:	2300      	movs	r3, #0
 8002234:	e060      	b.n	80022f8 <csp_connect+0x1d8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <csp_connect+0x134>
#if (CSP_USE_CRC32)
		outgoing_id.flags |= CSP_FCRC32;
		incoming_id.flags |= CSP_FCRC32;
#else
		csp_log_error("Attempt to create CRC32 validated connection, but CSP was compiled without CRC32 support");
 8002240:	4b30      	ldr	r3, [pc, #192]	@ (8002304 <csp_connect+0x1e4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <csp_connect+0x130>
 8002248:	4932      	ldr	r1, [pc, #200]	@ (8002314 <csp_connect+0x1f4>)
 800224a:	2000      	movs	r0, #0
 800224c:	f000 f878 	bl	8002340 <do_csp_debug>
		return NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	e051      	b.n	80022f8 <csp_connect+0x1d8>
#endif
	}

	/* Find an unused ephemeral port */
	csp_conn_t * conn = NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

	/* Wait for sport lock - note that csp_conn_new(..) is called inside the lock! */
	if (csp_bin_sem_wait(&sport_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	482e      	ldr	r0, [pc, #184]	@ (8002318 <csp_connect+0x1f8>)
 800225e:	f7ff fa29 	bl	80016b4 <csp_bin_sem_wait>
 8002262:	4603      	mov	r3, r0
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <csp_connect+0x14c>
		return NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	e045      	b.n	80022f8 <csp_connect+0x1d8>
	}

	const uint8_t start = sport;
 800226c:	4b2b      	ldr	r3, [pc, #172]	@ (800231c <csp_connect+0x1fc>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	74fb      	strb	r3, [r7, #19]
	while (++sport != start) {
 8002272:	e02a      	b.n	80022ca <csp_connect+0x1aa>
		if (sport > CSP_ID_PORT_MAX)
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <csp_connect+0x1fc>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b3f      	cmp	r3, #63	@ 0x3f
 800227a:	d905      	bls.n	8002288 <csp_connect+0x168>
			sport = csp_conf.port_max_bind + 1;
 800227c:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <csp_connect+0x1e0>)
 800227e:	7cdb      	ldrb	r3, [r3, #19]
 8002280:	3301      	adds	r3, #1
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b25      	ldr	r3, [pc, #148]	@ (800231c <csp_connect+0x1fc>)
 8002286:	701a      	strb	r2, [r3, #0]

		outgoing_id.sport = sport;
 8002288:	4b24      	ldr	r3, [pc, #144]	@ (800231c <csp_connect+0x1fc>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002290:	b2da      	uxtb	r2, r3
 8002292:	7a7b      	ldrb	r3, [r7, #9]
 8002294:	f362 0305 	bfi	r3, r2, #0, #6
 8002298:	727b      	strb	r3, [r7, #9]
		incoming_id.dport = sport;
 800229a:	4b20      	ldr	r3, [pc, #128]	@ (800231c <csp_connect+0x1fc>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f362 3393 	bfi	r3, r2, #14, #6
 80022aa:	60fb      	str	r3, [r7, #12]

		/* Match on destination port of _incoming_ identifier */
		if (csp_conn_find(incoming_id.ext, CSP_ID_DPORT_MASK) == NULL) {
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f44f 217c 	mov.w	r1, #1032192	@ 0xfc000
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fdc8 	bl	8001e48 <csp_conn_find>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <csp_connect+0x1aa>
			/* Break - we found an unused ephemeral port
                           allocate connection while locked to mark port in use */
			conn = csp_conn_new(incoming_id, outgoing_id);
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fea9 	bl	8002018 <csp_conn_new>
 80022c6:	6178      	str	r0, [r7, #20]
			break;
 80022c8:	e00a      	b.n	80022e0 <csp_connect+0x1c0>
	while (++sport != start) {
 80022ca:	4b14      	ldr	r3, [pc, #80]	@ (800231c <csp_connect+0x1fc>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <csp_connect+0x1fc>)
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <csp_connect+0x1fc>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	7cfa      	ldrb	r2, [r7, #19]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d1c9      	bne.n	8002274 <csp_connect+0x154>
		}
	}

	/* Post sport lock */
	csp_bin_sem_post(&sport_lock);
 80022e0:	480d      	ldr	r0, [pc, #52]	@ (8002318 <csp_connect+0x1f8>)
 80022e2:	f7ff fa0d 	bl	8001700 <csp_bin_sem_post>

	if (conn == NULL) {
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <csp_connect+0x1d0>
		return NULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e003      	b.n	80022f8 <csp_connect+0x1d8>
	}

	/* Set connection options */
	conn->opts = opts;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	6a3a      	ldr	r2, [r7, #32]
 80022f4:	619a      	str	r2, [r3, #24]
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 80022f6:	697b      	ldr	r3, [r7, #20]

}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	240001a8 	.word	0x240001a8
 8002304:	2400000c 	.word	0x2400000c
 8002308:	0800b720 	.word	0x0800b720
 800230c:	0800b76c 	.word	0x0800b76c
 8002310:	0800b7c8 	.word	0x0800b7c8
 8002314:	0800b820 	.word	0x0800b820
 8002318:	24000198 	.word	0x24000198
 800231c:	24000194 	.word	0x24000194

08002320 <csp_conn_dport>:

int csp_conn_dport(csp_conn_t * conn) {
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8002330:	b2db      	uxtb	r3, r3

}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 8002340:	b40e      	push	{r1, r2, r3}
 8002342:	b580      	push	{r7, lr}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	4603      	mov	r3, r0
 800234a:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 800234c:	23f0      	movs	r3, #240	@ 0xf0
 800234e:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	2b06      	cmp	r3, #6
 8002354:	d84f      	bhi.n	80023f6 <do_csp_debug+0xb6>
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4a2b      	ldr	r2, [pc, #172]	@ (8002408 <do_csp_debug+0xc8>)
 800235a:	5cd3      	ldrb	r3, [r2, r3]
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d147      	bne.n	80023f6 <do_csp_debug+0xb6>
		return;

	switch(level) {
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b06      	cmp	r3, #6
 800236a:	d846      	bhi.n	80023fa <do_csp_debug+0xba>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <do_csp_debug+0x34>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002397 	.word	0x08002397
 8002378:	0800239d 	.word	0x0800239d
 800237c:	08002391 	.word	0x08002391
 8002380:	080023a3 	.word	0x080023a3
 8002384:	080023a9 	.word	0x080023a9
 8002388:	080023af 	.word	0x080023af
 800238c:	080023b5 	.word	0x080023b5
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 8002390:	2313      	movs	r3, #19
 8002392:	60fb      	str	r3, [r7, #12]
		break;
 8002394:	e011      	b.n	80023ba <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 8002396:	2312      	movs	r3, #18
 8002398:	60fb      	str	r3, [r7, #12]
		break;
 800239a:	e00e      	b.n	80023ba <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 800239c:	2314      	movs	r3, #20
 800239e:	60fb      	str	r3, [r7, #12]
		break;
 80023a0:	e00b      	b.n	80023ba <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 80023a2:	2306      	movs	r3, #6
 80023a4:	60fb      	str	r3, [r7, #12]
		break;
 80023a6:	e008      	b.n	80023ba <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 80023a8:	2303      	movs	r3, #3
 80023aa:	60fb      	str	r3, [r7, #12]
		break;
 80023ac:	e005      	b.n	80023ba <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 80023ae:	2305      	movs	r3, #5
 80023b0:	60fb      	str	r3, [r7, #12]
		break;
 80023b2:	e002      	b.n	80023ba <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 80023b4:	2307      	movs	r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]
		break;
 80023b8:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 80023ba:	f107 0320 	add.w	r3, r7, #32
 80023be:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 80023c0:	4b12      	ldr	r3, [pc, #72]	@ (800240c <do_csp_debug+0xcc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 80023c8:	4b10      	ldr	r3, [pc, #64]	@ (800240c <do_csp_debug+0xcc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	79f8      	ldrb	r0, [r7, #7]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	69f9      	ldr	r1, [r7, #28]
 80023d2:	4798      	blx	r3
 80023d4:	e012      	b.n	80023fc <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f9b2 	bl	8001744 <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	69f8      	ldr	r0, [r7, #28]
 80023e4:	f008 f968 	bl	800a6b8 <viprintf>
#endif
		printf("\r\n");
 80023e8:	4809      	ldr	r0, [pc, #36]	@ (8002410 <do_csp_debug+0xd0>)
 80023ea:	f008 f919 	bl	800a620 <puts>
		csp_sys_set_color(COLOR_RESET);
 80023ee:	20f0      	movs	r0, #240	@ 0xf0
 80023f0:	f7ff f9a8 	bl	8001744 <csp_sys_set_color>
 80023f4:	e002      	b.n	80023fc <do_csp_debug+0xbc>
		return;
 80023f6:	bf00      	nop
 80023f8:	e000      	b.n	80023fc <do_csp_debug+0xbc>
		return;
 80023fa:	bf00      	nop
	}

	va_end(args);
}
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002404:	b003      	add	sp, #12
 8002406:	4770      	bx	lr
 8002408:	2400000c 	.word	0x2400000c
 800240c:	240001a0 	.word	0x240001a0
 8002410:	0800b8dc 	.word	0x0800b8dc

08002414 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	b29b      	uxth	r3, r3
 8002424:	b21a      	sxth	r2, r3
 8002426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21b      	sxth	r3, r3
 8002432:	b29b      	uxth	r3, r3
			((h16 & 0x00ff) << 8));
#endif
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 800244a:	88fb      	ldrh	r3, [r7, #6]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ffe1 	bl	8002414 <csp_hton16>
 8002452:	4603      	mov	r3, r0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 800246c:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	021b      	lsls	r3, r3, #8
 8002472:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
			((h32 & 0x000000ff) << 24) |
 8002476:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0a1b      	lsrs	r3, r3, #8
 800247c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8002480:	4313      	orrs	r3, r2
#endif
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ffe0 	bl	800245c <csp_hton32>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <csp_iflist_add+0x70>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 80024be:	4a16      	ldr	r2, [pc, #88]	@ (8002518 <csp_iflist_add+0x70>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	e022      	b.n	800250c <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80024ca:	4b13      	ldr	r3, [pc, #76]	@ (8002518 <csp_iflist_add+0x70>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	60bb      	str	r3, [r7, #8]
 80024d0:	e016      	b.n	8002500 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d00a      	beq.n	80024f0 <csp_iflist_add+0x48>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	220a      	movs	r2, #10
 80024e4:	4619      	mov	r1, r3
 80024e6:	f008 f98d 	bl	800a804 <strncasecmp>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 80024f0:	f06f 0306 	mvn.w	r3, #6
 80024f4:	e00b      	b.n	800250e <csp_iflist_add+0x66>
			}
			last = i;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e5      	bne.n	80024d2 <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	return CSP_ERR_NONE;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	240001a4 	.word	0x240001a4

0800251c <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	6039      	str	r1, [r7, #0]
 8002526:	71fb      	strb	r3, [r7, #7]
 8002528:	4613      	mov	r3, r2
 800252a:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 800252c:	79bb      	ldrb	r3, [r7, #6]
 800252e:	79f8      	ldrb	r0, [r7, #7]
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	2105      	movs	r1, #5
 8002534:	f001 fa1e 	bl	8003974 <csp_rtable_set>
 8002538:	4603      	mov	r3, r0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 800254c:	f7fe ffdc 	bl	8001508 <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 8002550:	2220      	movs	r2, #32
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	481b      	ldr	r0, [pc, #108]	@ (80025c4 <csp_init+0x80>)
 8002556:	f008 f9e8 	bl	800a92a <memcpy>

	int ret = csp_buffer_init();
 800255a:	f7ff f997 	bl	800188c <csp_buffer_init>
 800255e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <csp_init+0x26>
		return ret;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	e027      	b.n	80025ba <csp_init+0x76>
	}

	ret = csp_conn_init();
 800256a:	f7ff fbbb 	bl	8001ce4 <csp_conn_init>
 800256e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <csp_init+0x36>
		return ret;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	e01f      	b.n	80025ba <csp_init+0x76>
	}

	ret = csp_port_init();
 800257a:	f000 fa4f 	bl	8002a1c <csp_port_init>
 800257e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <csp_init+0x46>
		return ret;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	e017      	b.n	80025ba <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 800258a:	f000 faed 	bl	8002b68 <csp_qfifo_init>
 800258e:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <csp_init+0x56>
		return ret;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	e00f      	b.n	80025ba <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 800259a:	480b      	ldr	r0, [pc, #44]	@ (80025c8 <csp_init+0x84>)
 800259c:	f7ff ff84 	bl	80024a8 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <csp_init+0x80>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	22ff      	movs	r2, #255	@ 0xff
 80025a6:	4908      	ldr	r1, [pc, #32]	@ (80025c8 <csp_init+0x84>)
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ffb7 	bl	800251c <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 80025ae:	22ff      	movs	r2, #255	@ 0xff
 80025b0:	4905      	ldr	r1, [pc, #20]	@ (80025c8 <csp_init+0x84>)
 80025b2:	2020      	movs	r0, #32
 80025b4:	f7ff ffb2 	bl	800251c <csp_route_set>

	return CSP_ERR_NONE;
 80025b8:	2300      	movs	r3, #0

}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	240001a8 	.word	0x240001a8
 80025c8:	24000014 	.word	0x24000014

080025cc <csp_socket>:

#if (CSP_USE_PROMISC)
extern csp_queue_handle_t csp_promisc_queue;
#endif

csp_socket_t * csp_socket(uint32_t opts) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	
	/* Validate socket options */
#if (CSP_USE_RDP == 0)
	if (opts & CSP_SO_RDPREQ) {
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d009      	beq.n	80025f2 <csp_socket+0x26>
		csp_log_error("Attempt to create socket that requires RDP, but CSP was compiled without RDP support");
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <csp_socket+0xf4>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <csp_socket+0x22>
 80025e6:	4937      	ldr	r1, [pc, #220]	@ (80026c4 <csp_socket+0xf8>)
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff fea9 	bl	8002340 <do_csp_debug>
		return NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e062      	b.n	80026b8 <csp_socket+0xec>
	}
#endif

#if (CSP_USE_XTEA == 0)
	if (opts & CSP_SO_XTEAREQ) {
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f003 0310 	and.w	r3, r3, #16
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d009      	beq.n	8002610 <csp_socket+0x44>
		csp_log_error("Attempt to create socket that requires XTEA, but CSP was compiled without XTEA support");
 80025fc:	4b30      	ldr	r3, [pc, #192]	@ (80026c0 <csp_socket+0xf4>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <csp_socket+0x40>
 8002604:	4930      	ldr	r1, [pc, #192]	@ (80026c8 <csp_socket+0xfc>)
 8002606:	2000      	movs	r0, #0
 8002608:	f7ff fe9a 	bl	8002340 <do_csp_debug>
		return NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	e053      	b.n	80026b8 <csp_socket+0xec>
	}
#endif

#if (CSP_USE_HMAC == 0)
	if (opts & CSP_SO_HMACREQ) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <csp_socket+0x62>
		csp_log_error("Attempt to create socket that requires HMAC, but CSP was compiled without HMAC support");
 800261a:	4b29      	ldr	r3, [pc, #164]	@ (80026c0 <csp_socket+0xf4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <csp_socket+0x5e>
 8002622:	492a      	ldr	r1, [pc, #168]	@ (80026cc <csp_socket+0x100>)
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fe8b 	bl	8002340 <do_csp_debug>
		return NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	e044      	b.n	80026b8 <csp_socket+0xec>
	} 
#endif

#if (CSP_USE_CRC32 == 0)
	if (opts & CSP_SO_CRC32REQ) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d009      	beq.n	800264c <csp_socket+0x80>
		csp_log_error("Attempt to create socket that requires CRC32, but CSP was compiled without CRC32 support");
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <csp_socket+0xf4>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <csp_socket+0x7c>
 8002640:	4923      	ldr	r1, [pc, #140]	@ (80026d0 <csp_socket+0x104>)
 8002642:	2000      	movs	r0, #0
 8002644:	f7ff fe7c 	bl	8002340 <do_csp_debug>
		return NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	e035      	b.n	80026b8 <csp_socket+0xec>
	} 
#endif
	
	/* Drop packet if reserved flags are set */
	if (opts & ~(CSP_SO_RDPREQ | CSP_SO_XTEAREQ | CSP_SO_HMACREQ | CSP_SO_CRC32REQ | CSP_SO_CONN_LESS)) {
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	4b21      	ldr	r3, [pc, #132]	@ (80026d4 <csp_socket+0x108>)
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <csp_socket+0x9e>
		csp_log_error("Invalid socket option");
 8002656:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <csp_socket+0xf4>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <csp_socket+0x9a>
 800265e:	491e      	ldr	r1, [pc, #120]	@ (80026d8 <csp_socket+0x10c>)
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff fe6d 	bl	8002340 <do_csp_debug>
		return NULL;
 8002666:	2300      	movs	r3, #0
 8002668:	e026      	b.n	80026b8 <csp_socket+0xec>
	}

	/* Use CSP buffers instead? */
	csp_socket_t * sock = csp_conn_allocate(CONN_SERVER);
 800266a:	2001      	movs	r0, #1
 800266c:	f7ff fc4e 	bl	8001f0c <csp_conn_allocate>
 8002670:	60f8      	str	r0, [r7, #12]
	if (sock == NULL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <csp_socket+0xb0>
		return NULL;
 8002678:	2300      	movs	r3, #0
 800267a:	e01d      	b.n	80026b8 <csp_socket+0xec>

	/* If connectionless, init the queue to a pre-defined size
	 * if not, the user must init the queue using csp_listen */
	if (opts & CSP_SO_CONN_LESS) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d011      	beq.n	80026aa <csp_socket+0xde>
		sock->socket = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <csp_socket+0x110>)
 8002688:	7c5b      	ldrb	r3, [r3, #17]
 800268a:	2104      	movs	r1, #4
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe ff85 	bl	800159c <csp_queue_create>
 8002692:	4602      	mov	r2, r0
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	611a      	str	r2, [r3, #16]
		if (sock->socket == NULL) {
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d107      	bne.n	80026b0 <csp_socket+0xe4>
			csp_close(sock);
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f7ff fcd8 	bl	8002056 <csp_close>
			return NULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e006      	b.n	80026b8 <csp_socket+0xec>
                }
	} else {
		sock->socket = NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
	}
	sock->opts = opts;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]

	return sock;
 80026b6:	68fb      	ldr	r3, [r7, #12]

}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	2400000c 	.word	0x2400000c
 80026c4:	0800b8e0 	.word	0x0800b8e0
 80026c8:	0800b938 	.word	0x0800b938
 80026cc:	0800b990 	.word	0x0800b990
 80026d0:	0800b9e8 	.word	0x0800b9e8
 80026d4:	fffffeaa 	.word	0xfffffeaa
 80026d8:	0800ba44 	.word	0x0800ba44
 80026dc:	240001a8 	.word	0x240001a8

080026e0 <csp_accept>:

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]

	if (sock == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <csp_accept+0x14>
		return NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e013      	b.n	800271c <csp_accept+0x3c>

	if (sock->socket == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <csp_accept+0x20>
		return NULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	e00d      	b.n	800271c <csp_accept+0x3c>

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->socket, &conn, timeout) == CSP_QUEUE_OK)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f107 010c 	add.w	r1, r7, #12
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe ff86 	bl	800161c <csp_queue_dequeue>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <csp_accept+0x3a>
		return conn;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	e000      	b.n	800271c <csp_accept+0x3c>

	return NULL;
 800271a:	2300      	movs	r3, #0

}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <csp_read+0x1c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d001      	beq.n	8002744 <csp_read+0x20>
		return NULL;
 8002740:	2300      	movs	r3, #0
 8002742:	e00d      	b.n	8002760 <csp_read+0x3c>
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f107 010c 	add.w	r1, r7, #12
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fe ff64 	bl	800161c <csp_queue_dequeue>
 8002754:	4603      	mov	r3, r0
 8002756:	2b01      	cmp	r3, #1
 8002758:	d001      	beq.n	800275e <csp_read+0x3a>
		return NULL;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <csp_read+0x3c>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 800275e:	68fb      	ldr	r3, [r7, #12]

}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 8002768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276a:	b08f      	sub	sp, #60	@ 0x3c
 800276c:	af08      	add	r7, sp, #32
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 800277c:	4b66      	ldr	r3, [pc, #408]	@ (8002918 <csp_send_direct+0x1b0>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80c0 	beq.w	8002906 <csp_send_direct+0x19e>
 8002786:	4965      	ldr	r1, [pc, #404]	@ (800291c <csp_send_direct+0x1b4>)
 8002788:	2000      	movs	r0, #0
 800278a:	f7ff fdd9 	bl	8002340 <do_csp_debug>
		goto err;
 800278e:	e0ba      	b.n	8002906 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 8002796:	4b60      	ldr	r3, [pc, #384]	@ (8002918 <csp_send_direct+0x1b0>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80b5 	beq.w	800290a <csp_send_direct+0x1a2>
 80027a0:	89fb      	ldrh	r3, [r7, #14]
 80027a2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	495c      	ldr	r1, [pc, #368]	@ (8002920 <csp_send_direct+0x1b8>)
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7ff fdc6 	bl	8002340 <do_csp_debug>
		goto err;
 80027b4:	e0a9      	b.n	800290a <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 80027bc:	4b56      	ldr	r3, [pc, #344]	@ (8002918 <csp_send_direct+0x1b0>)
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d037      	beq.n	8002834 <csp_send_direct+0xcc>
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	469c      	mov	ip, r3
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	469e      	mov	lr, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f3c3 3385 	ubfx	r3, r3, #14, #6
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	4619      	mov	r1, r3
 80027e2:	7b7b      	ldrb	r3, [r7, #13]
 80027e4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461c      	mov	r4, r3
 80027f6:	7b3b      	ldrb	r3, [r7, #12]
 80027f8:	461d      	mov	r5, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	895b      	ldrh	r3, [r3, #10]
 80027fe:	461e      	mov	r6, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	7912      	ldrb	r2, [r2, #4]
 8002808:	2aff      	cmp	r2, #255	@ 0xff
 800280a:	d002      	beq.n	8002812 <csp_send_direct+0xaa>
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	7912      	ldrb	r2, [r2, #4]
 8002810:	e003      	b.n	800281a <csp_send_direct+0xb2>
 8002812:	89fa      	ldrh	r2, [r7, #14]
 8002814:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	9206      	str	r2, [sp, #24]
 800281c:	9305      	str	r3, [sp, #20]
 800281e:	9604      	str	r6, [sp, #16]
 8002820:	9503      	str	r5, [sp, #12]
 8002822:	9402      	str	r4, [sp, #8]
 8002824:	9001      	str	r0, [sp, #4]
 8002826:	9100      	str	r1, [sp, #0]
 8002828:	4673      	mov	r3, lr
 800282a:	4662      	mov	r2, ip
 800282c:	493d      	ldr	r1, [pc, #244]	@ (8002924 <csp_send_direct+0x1bc>)
 800282e:	2004      	movs	r0, #4
 8002830:	f7ff fd86 	bl	8002340 <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	4b38      	ldr	r3, [pc, #224]	@ (8002928 <csp_send_direct+0x1c0>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d12d      	bne.n	80028a8 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8002856:	4b30      	ldr	r3, [pc, #192]	@ (8002918 <csp_send_direct+0x1b0>)
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d046      	beq.n	80028ec <csp_send_direct+0x184>
 800285e:	4933      	ldr	r1, [pc, #204]	@ (800292c <csp_send_direct+0x1c4>)
 8002860:	2001      	movs	r0, #1
 8002862:	f7ff fd6d 	bl	8002340 <do_csp_debug>
			goto tx_err;
 8002866:	e041      	b.n	80028ec <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 8002868:	7b3b      	ldrb	r3, [r7, #12]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 8002872:	4b29      	ldr	r3, [pc, #164]	@ (8002918 <csp_send_direct+0x1b0>)
 8002874:	785b      	ldrb	r3, [r3, #1]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <csp_send_direct+0x11a>
 800287a:	492d      	ldr	r1, [pc, #180]	@ (8002930 <csp_send_direct+0x1c8>)
 800287c:	2001      	movs	r0, #1
 800287e:	f7ff fd5f 	bl	8002340 <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 8002882:	7b3b      	ldrb	r3, [r7, #12]
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 800288c:	7b3b      	ldrb	r3, [r7, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8002896:	4b20      	ldr	r3, [pc, #128]	@ (8002918 <csp_send_direct+0x1b0>)
 8002898:	785b      	ldrb	r3, [r3, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d028      	beq.n	80028f0 <csp_send_direct+0x188>
 800289e:	4925      	ldr	r1, [pc, #148]	@ (8002934 <csp_send_direct+0x1cc>)
 80028a0:	2001      	movs	r0, #1
 80028a2:	f7ff fd4d 	bl	8002340 <do_csp_debug>
			goto tx_err;
 80028a6:	e023      	b.n	80028f0 <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	895b      	ldrh	r3, [r3, #10]
 80028ac:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	8a1b      	ldrh	r3, [r3, #16]
 80028b2:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 80028b4:	8a3b      	ldrh	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <csp_send_direct+0x15a>
 80028ba:	8a7a      	ldrh	r2, [r7, #18]
 80028bc:	8a3b      	ldrh	r3, [r7, #16]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d818      	bhi.n	80028f4 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d112      	bne.n	80028f8 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028e0:	8a7b      	ldrh	r3, [r7, #18]
 80028e2:	441a      	add	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	631a      	str	r2, [r3, #48]	@ 0x30
	return CSP_ERR_NONE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	e011      	b.n	8002910 <csp_send_direct+0x1a8>
			goto tx_err;
 80028ec:	bf00      	nop
 80028ee:	e004      	b.n	80028fa <csp_send_direct+0x192>
			goto tx_err;
 80028f0:	bf00      	nop
 80028f2:	e002      	b.n	80028fa <csp_send_direct+0x192>
		goto tx_err;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <csp_send_direct+0x192>
		goto tx_err;
 80028f8:	bf00      	nop

tx_err:
	ifout->tx_error++;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	1c5a      	adds	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	61da      	str	r2, [r3, #28]
 8002904:	e002      	b.n	800290c <csp_send_direct+0x1a4>
		goto err;
 8002906:	bf00      	nop
 8002908:	e000      	b.n	800290c <csp_send_direct+0x1a4>
		goto err;
 800290a:	bf00      	nop
err:
	return CSP_ERR_TX;
 800290c:	f06f 0309 	mvn.w	r3, #9

}
 8002910:	4618      	mov	r0, r3
 8002912:	371c      	adds	r7, #28
 8002914:	46bd      	mov	sp, r7
 8002916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002918:	2400000c 	.word	0x2400000c
 800291c:	0800ba5c 	.word	0x0800ba5c
 8002920:	0800ba84 	.word	0x0800ba84
 8002924:	0800baa4 	.word	0x0800baa4
 8002928:	240001a8 	.word	0x240001a8
 800292c:	0800bae8 	.word	0x0800bae8
 8002930:	0800bb48 	.word	0x0800bb48
 8002934:	0800bbb0 	.word	0x0800bbb0

08002938 <csp_send>:

int csp_send(csp_conn_t * conn, csp_packet_t * packet, uint32_t timeout) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]

	if ((conn == NULL) || (packet == NULL) || (conn->state != CONN_OPEN)) {
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d006      	beq.n	8002958 <csp_send+0x20>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <csp_send+0x20>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d009      	beq.n	800296c <csp_send+0x34>
		csp_log_error("Invalid call to csp_send");
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <csp_send+0x68>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <csp_send+0x30>
 8002960:	4910      	ldr	r1, [pc, #64]	@ (80029a4 <csp_send+0x6c>)
 8002962:	2000      	movs	r0, #0
 8002964:	f7ff fcec 	bl	8002340 <do_csp_debug>
		return 0;
 8002968:	2300      	movs	r3, #0
 800296a:	e015      	b.n	8002998 <csp_send+0x60>
			return 0;
		}
	}
#endif

	int ret = csp_send_direct(conn->idout, packet, csp_rtable_find_route(conn->idout.dst), timeout);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	895b      	ldrh	r3, [r3, #10]
 8002970:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f001 f89e 	bl	8003ab8 <csp_rtable_find_route>
 800297c:	4602      	mov	r2, r0
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	6880      	ldr	r0, [r0, #8]
 8002986:	f7ff feef 	bl	8002768 <csp_send_direct>
 800298a:	6178      	str	r0, [r7, #20]

	return (ret == CSP_ERR_NONE) ? 1 : 0;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	bf0c      	ite	eq
 8002992:	2301      	moveq	r3, #1
 8002994:	2300      	movne	r3, #0
 8002996:	b2db      	uxtb	r3, r3

}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	2400000c 	.word	0x2400000c
 80029a4:	0800bc14 	.word	0x0800bc14

080029a8 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 80029b0:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <csp_port_get_socket+0x6c>)
 80029b2:	7cdb      	ldrb	r3, [r3, #19]
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <csp_port_get_socket+0x18>
		return NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	e022      	b.n	8002a06 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 80029c0:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <csp_port_get_socket+0x70>)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	4413      	add	r3, r2
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d106      	bne.n	80029de <csp_port_get_socket+0x36>
		return ports[port].socket;
 80029d0:	4b11      	ldr	r3, [pc, #68]	@ (8002a18 <csp_port_get_socket+0x70>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	e013      	b.n	8002a06 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 80029de:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <csp_port_get_socket+0x70>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <csp_port_get_socket+0x6c>)
 80029e4:	7cdb      	ldrb	r3, [r3, #19]
 80029e6:	3301      	adds	r3, #1
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d108      	bne.n	8002a04 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 80029f2:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <csp_port_get_socket+0x70>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <csp_port_get_socket+0x6c>)
 80029f8:	7cdb      	ldrb	r3, [r3, #19]
 80029fa:	3301      	adds	r3, #1
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	4413      	add	r3, r2
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	e000      	b.n	8002a06 <csp_port_get_socket+0x5e>
	}

	return NULL;
 8002a04:	2300      	movs	r3, #0

}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	240001a8 	.word	0x240001a8
 8002a18:	240001c8 	.word	0x240001c8

08002a1c <csp_port_init>:

int csp_port_init(void) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <csp_port_init+0x2c>)
 8002a22:	7cdb      	ldrb	r3, [r3, #19]
 8002a24:	3302      	adds	r3, #2
 8002a26:	2108      	movs	r1, #8
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fd91 	bl	8001550 <csp_calloc>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4a06      	ldr	r2, [pc, #24]	@ (8002a4c <csp_port_init+0x30>)
 8002a32:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <csp_port_init+0x30>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d102      	bne.n	8002a42 <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a40:	e000      	b.n	8002a44 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 8002a42:	2300      	movs	r3, #0

}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	240001a8 	.word	0x240001a8
 8002a4c:	240001c8 	.word	0x240001c8

08002a50 <csp_listen>:

	csp_free(ports);
	ports = NULL;
}

int csp_listen(csp_socket_t * socket, size_t backlog) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	
	if (socket == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <csp_listen+0x16>
		return CSP_ERR_INVAL;
 8002a60:	f06f 0301 	mvn.w	r3, #1
 8002a64:	e015      	b.n	8002a92 <csp_listen+0x42>

	socket->socket = csp_queue_create(backlog, sizeof(csp_conn_t *));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2104      	movs	r1, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd96 	bl	800159c <csp_queue_create>
 8002a70:	4602      	mov	r2, r0
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
	if (socket->socket == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <csp_listen+0x34>
		return CSP_ERR_NOMEM;
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	e006      	b.n	8002a92 <csp_listen+0x42>

        socket->opts |= CSP_SO_INTERNAL_LISTEN;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]

	return CSP_ERR_NONE;
 8002a90:	2300      	movs	r3, #0

}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
	...

08002a9c <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
	
	if (socket == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <csp_bind+0x18>
		return CSP_ERR_INVAL;
 8002aae:	f06f 0301 	mvn.w	r3, #1
 8002ab2:	e048      	b.n	8002b46 <csp_bind+0xaa>

	if (port == CSP_ANY) {
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	2bff      	cmp	r3, #255	@ 0xff
 8002ab8:	d104      	bne.n	8002ac4 <csp_bind+0x28>
		port = csp_conf.port_max_bind + 1;
 8002aba:	4b25      	ldr	r3, [pc, #148]	@ (8002b50 <csp_bind+0xb4>)
 8002abc:	7cdb      	ldrb	r3, [r3, #19]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	70fb      	strb	r3, [r7, #3]
 8002ac2:	e012      	b.n	8002aea <csp_bind+0x4e>
	} else if (port > csp_conf.port_max_bind) {
 8002ac4:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <csp_bind+0xb4>)
 8002ac6:	7cdb      	ldrb	r3, [r3, #19]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d90d      	bls.n	8002aea <csp_bind+0x4e>
		csp_log_error("csp_bind: invalid port %u, only ports from 0-%u (+ CSP_ANY for default) are available for incoming ports", port, csp_conf.port_max_bind);
 8002ace:	4b21      	ldr	r3, [pc, #132]	@ (8002b54 <csp_bind+0xb8>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d006      	beq.n	8002ae4 <csp_bind+0x48>
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b50 <csp_bind+0xb4>)
 8002ada:	7cdb      	ldrb	r3, [r3, #19]
 8002adc:	491e      	ldr	r1, [pc, #120]	@ (8002b58 <csp_bind+0xbc>)
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7ff fc2e 	bl	8002340 <do_csp_debug>
		return CSP_ERR_INVAL;
 8002ae4:	f06f 0301 	mvn.w	r3, #1
 8002ae8:	e02d      	b.n	8002b46 <csp_bind+0xaa>
	}

	if (ports[port].state != PORT_CLOSED) {
 8002aea:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <csp_bind+0xc0>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00c      	beq.n	8002b14 <csp_bind+0x78>
		csp_log_error("Port %d is already in use", port);
 8002afa:	4b16      	ldr	r3, [pc, #88]	@ (8002b54 <csp_bind+0xb8>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <csp_bind+0x72>
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4916      	ldr	r1, [pc, #88]	@ (8002b60 <csp_bind+0xc4>)
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f7ff fc19 	bl	8002340 <do_csp_debug>
		return CSP_ERR_USED;
 8002b0e:	f06f 0303 	mvn.w	r3, #3
 8002b12:	e018      	b.n	8002b46 <csp_bind+0xaa>
	}

	csp_log_info("Binding socket %p to port %u", socket, port);
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <csp_bind+0xb8>)
 8002b16:	789b      	ldrb	r3, [r3, #2]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <csp_bind+0x8c>
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4910      	ldr	r1, [pc, #64]	@ (8002b64 <csp_bind+0xc8>)
 8002b22:	2002      	movs	r0, #2
 8002b24:	f7ff fc0c 	bl	8002340 <do_csp_debug>

	/* Save listener */
	ports[port].socket = socket;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <csp_bind+0xc0>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 8002b36:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <csp_bind+0xc0>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]

	return CSP_ERR_NONE;
 8002b44:	2300      	movs	r3, #0

}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	240001a8 	.word	0x240001a8
 8002b54:	2400000c 	.word	0x2400000c
 8002b58:	0800bd88 	.word	0x0800bd88
 8002b5c:	240001c8 	.word	0x240001c8
 8002b60:	0800bdf4 	.word	0x0800bdf4
 8002b64:	0800be10 	.word	0x0800be10

08002b68 <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	e01c      	b.n	8002bae <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 8002b74:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <csp_qfifo_init+0x58>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d113      	bne.n	8002ba8 <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 8002b80:	4b10      	ldr	r3, [pc, #64]	@ (8002bc4 <csp_qfifo_init+0x5c>)
 8002b82:	7c9b      	ldrb	r3, [r3, #18]
 8002b84:	2108      	movs	r1, #8
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fd08 	bl	800159c <csp_queue_create>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <csp_qfifo_init+0x58>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <csp_qfifo_init+0x58>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d102      	bne.n	8002ba8 <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	e006      	b.n	8002bb6 <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dddf      	ble.n	8002b74 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8002bb4:	2300      	movs	r3, #0

}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	240001cc 	.word	0x240001cc
 8002bc4:	240001a8 	.word	0x240001a8

08002bc8 <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 8002bd0:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <csp_qfifo_read+0x30>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe fd1e 	bl	800161c <csp_queue_dequeue>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d002      	beq.n	8002bec <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 8002be6:	f06f 0302 	mvn.w	r3, #2
 8002bea:	e000      	b.n	8002bee <csp_qfifo_read+0x26>
#endif

	return CSP_ERR_NONE;
 8002bec:	2300      	movs	r3, #0

}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	240001cc 	.word	0x240001cc

08002bfc <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b088      	sub	sp, #32
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d15f      	bne.n	8002cd4 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 8002c14:	4b31      	ldr	r3, [pc, #196]	@ (8002cdc <csp_qfifo_write+0xe0>)
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05b      	beq.n	8002cd4 <csp_qfifo_write+0xd8>
 8002c1c:	4930      	ldr	r1, [pc, #192]	@ (8002ce0 <csp_qfifo_write+0xe4>)
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff fb8e 	bl	8002340 <do_csp_debug>
		}
		return;
 8002c24:	e056      	b.n	8002cd4 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 8002c32:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <csp_qfifo_write+0xe0>)
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <csp_qfifo_write+0x46>
 8002c3a:	492a      	ldr	r1, [pc, #168]	@ (8002ce4 <csp_qfifo_write+0xe8>)
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff fb7f 	bl	8002340 <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7fe ff61 	bl	8001b10 <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 8002c4e:	e042      	b.n	8002cd6 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f7fe ff23 	bl	8001a9c <csp_buffer_free_isr>
		return;
 8002c56:	e03e      	b.n	8002cd6 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10b      	bne.n	8002c82 <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 8002c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ce8 <csp_qfifo_write+0xec>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	f107 0110 	add.w	r1, r7, #16
 8002c76:	2200      	movs	r2, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fcaa 	bl	80015d2 <csp_queue_enqueue>
 8002c7e:	61f8      	str	r0, [r7, #28]
 8002c80:	e00a      	b.n	8002c98 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 8002c82:	4a19      	ldr	r2, [pc, #100]	@ (8002ce8 <csp_qfifo_write+0xec>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c8a:	f107 0110 	add.w	r1, r7, #16
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fcb2 	bl	80015fa <csp_queue_enqueue_isr>
 8002c96:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d01b      	beq.n	8002cd6 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 8002ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <csp_qfifo_write+0xe0>)
 8002ca6:	785b      	ldrb	r3, [r3, #1]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <csp_qfifo_write+0xb8>
 8002cac:	490f      	ldr	r1, [pc, #60]	@ (8002cec <csp_qfifo_write+0xf0>)
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7ff fb46 	bl	8002340 <do_csp_debug>
		}
		iface->drop++;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	1c5a      	adds	r2, r3, #1
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
		if (pxTaskWoken == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7fe ff23 	bl	8001b10 <csp_buffer_free>
 8002cca:	e004      	b.n	8002cd6 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7fe fee5 	bl	8001a9c <csp_buffer_free_isr>
 8002cd2:	e000      	b.n	8002cd6 <csp_qfifo_write+0xda>
		return;
 8002cd4:	bf00      	nop
	}

}
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2400000c 	.word	0x2400000c
 8002ce0:	0800be30 	.word	0x0800be30
 8002ce4:	0800be58 	.word	0x0800be58
 8002ce8:	240001cc 	.word	0x240001cc
 8002cec:	0800be84 	.word	0x0800be84

08002cf0 <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	7b1b      	ldrb	r3, [r3, #12]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00f      	beq.n	8002d26 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 8002d06:	4b20      	ldr	r3, [pc, #128]	@ (8002d88 <csp_route_check_options+0x98>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <csp_route_check_options+0x26>
 8002d0e:	491f      	ldr	r1, [pc, #124]	@ (8002d8c <csp_route_check_options+0x9c>)
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7ff fb15 	bl	8002340 <do_csp_debug>
		iface->autherr++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 8002d20:	f06f 0304 	mvn.w	r3, #4
 8002d24:	e02c      	b.n	8002d80 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	7b1b      	ldrb	r3, [r3, #12]
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00f      	beq.n	8002d52 <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <csp_route_check_options+0x98>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <csp_route_check_options+0x52>
 8002d3a:	4915      	ldr	r1, [pc, #84]	@ (8002d90 <csp_route_check_options+0xa0>)
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7ff faff 	bl	8002340 <do_csp_debug>
		iface->autherr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 8002d4c:	f06f 0304 	mvn.w	r3, #4
 8002d50:	e016      	b.n	8002d80 <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	7b1b      	ldrb	r3, [r3, #12]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00f      	beq.n	8002d7e <csp_route_check_options+0x8e>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d88 <csp_route_check_options+0x98>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <csp_route_check_options+0x7e>
 8002d66:	490b      	ldr	r1, [pc, #44]	@ (8002d94 <csp_route_check_options+0xa4>)
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7ff fae9 	bl	8002340 <do_csp_debug>
		iface->rx_error++;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	621a      	str	r2, [r3, #32]
		return CSP_ERR_NOTSUP;
 8002d78:	f06f 0304 	mvn.w	r3, #4
 8002d7c:	e000      	b.n	8002d80 <csp_route_check_options+0x90>
	}
#endif
	return CSP_ERR_NONE;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	2400000c 	.word	0x2400000c
 8002d8c:	0800beb8 	.word	0x0800beb8
 8002d90:	0800bf18 	.word	0x0800bf18
 8002d94:	0800bf70 	.word	0x0800bf70

08002d98 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7b1b      	ldrb	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01a      	beq.n	8002de6 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	895b      	ldrh	r3, [r3, #10]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d80f      	bhi.n	8002dd8 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <csp_route_security_check+0x74>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <csp_route_security_check+0x30>
 8002dc0:	4913      	ldr	r1, [pc, #76]	@ (8002e10 <csp_route_security_check+0x78>)
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff fabc 	bl	8002340 <do_csp_debug>
			iface->rx_error++;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 8002dd2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002dd6:	e014      	b.n	8002e02 <csp_route_security_check+0x6a>
		}
		packet->length -= sizeof(uint32_t);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	895b      	ldrh	r3, [r3, #10]
 8002ddc:	3b04      	subs	r3, #4
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	815a      	strh	r2, [r3, #10]
 8002de4:	e00c      	b.n	8002e00 <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d007      	beq.n	8002e00 <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <csp_route_security_check+0x74>)
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <csp_route_security_check+0x68>
 8002df8:	4906      	ldr	r1, [pc, #24]	@ (8002e14 <csp_route_security_check+0x7c>)
 8002dfa:	2001      	movs	r0, #1
 8002dfc:	f7ff faa0 	bl	8002340 <do_csp_debug>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 8002e00:	2300      	movs	r3, #0

}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	2400000c 	.word	0x2400000c
 8002e10:	0800bfc4 	.word	0x0800bfc4
 8002e14:	0800bff0 	.word	0x0800bff0

08002e18 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 8002e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1a:	b091      	sub	sp, #68	@ 0x44
 8002e1c:	af06      	add	r7, sp, #24
 8002e1e:	6078      	str	r0, [r7, #4]
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fecf 	bl	8002bc8 <csp_qfifo_read>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <csp_route_work+0x1e>
		return CSP_ERR_TIMEDOUT;
 8002e30:	f06f 0302 	mvn.w	r3, #2
 8002e34:	e172      	b.n	800311c <csp_route_work+0x304>
	}

	packet = input.packet;
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	613b      	str	r3, [r7, #16]
	if (packet == NULL) {
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <csp_route_work+0x2e>
		return CSP_ERR_TIMEDOUT;
 8002e40:	f06f 0302 	mvn.w	r3, #2
 8002e44:	e16a      	b.n	800311c <csp_route_work+0x304>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 8002e46:	4ba3      	ldr	r3, [pc, #652]	@ (80030d4 <csp_route_work+0x2bc>)
 8002e48:	791b      	ldrb	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d031      	beq.n	8002eb2 <csp_route_work+0x9a>
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	7bdb      	ldrb	r3, [r3, #15]
 8002e52:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461e      	mov	r6, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	89db      	ldrh	r3, [r3, #14]
 8002e5e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	469c      	mov	ip, r3
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	7b5b      	ldrb	r3, [r3, #13]
 8002e76:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	7bdb      	ldrb	r3, [r3, #15]
 8002e82:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	4618      	mov	r0, r3
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	7b1b      	ldrb	r3, [r3, #12]
 8002e8e:	461c      	mov	r4, r3
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	895b      	ldrh	r3, [r3, #10]
 8002e94:	461d      	mov	r5, r3
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	9305      	str	r3, [sp, #20]
 8002e9c:	9504      	str	r5, [sp, #16]
 8002e9e:	9403      	str	r4, [sp, #12]
 8002ea0:	9002      	str	r0, [sp, #8]
 8002ea2:	9101      	str	r1, [sp, #4]
 8002ea4:	9200      	str	r2, [sp, #0]
 8002ea6:	4663      	mov	r3, ip
 8002ea8:	4632      	mov	r2, r6
 8002eaa:	498b      	ldr	r1, [pc, #556]	@ (80030d8 <csp_route_work+0x2c0>)
 8002eac:	2004      	movs	r0, #4
 8002eae:	f7ff fa47 	bl	8002340 <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	3201      	adds	r2, #1
 8002eb8:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	895b      	ldrh	r3, [r3, #10]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	440a      	add	r2, r1
 8002ec8:	635a      	str	r2, [r3, #52]	@ 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	89db      	ldrh	r3, [r3, #14]
 8002ece:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b81      	ldr	r3, [pc, #516]	@ (80030dc <csp_route_work+0x2c4>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d03a      	beq.n	8002f54 <csp_route_work+0x13c>
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	89db      	ldrh	r3, [r3, #14]
 8002ee2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 8002eec:	d032      	beq.n	8002f54 <csp_route_work+0x13c>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	89db      	ldrh	r3, [r3, #14]
 8002ef2:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fddd 	bl	8003ab8 <csp_rtable_find_route>
 8002efe:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d008      	beq.n	8002f18 <csp_route_work+0x100>
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d109      	bne.n	8002f24 <csp_route_work+0x10c>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	7c9b      	ldrb	r3, [r3, #18]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <csp_route_work+0x10c>
			csp_buffer_free(packet);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fdf8 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e0fb      	b.n	800311c <csp_route_work+0x304>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	6939      	ldr	r1, [r7, #16]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6a3a      	ldr	r2, [r7, #32]
 8002f2c:	68c0      	ldr	r0, [r0, #12]
 8002f2e:	f7ff fc1b 	bl	8002768 <csp_send_direct>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <csp_route_work+0x138>
			csp_log_warn("Router failed to send");
 8002f38:	4b66      	ldr	r3, [pc, #408]	@ (80030d4 <csp_route_work+0x2bc>)
 8002f3a:	785b      	ldrb	r3, [r3, #1]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <csp_route_work+0x130>
 8002f40:	4967      	ldr	r1, [pc, #412]	@ (80030e0 <csp_route_work+0x2c8>)
 8002f42:	2001      	movs	r0, #1
 8002f44:	f7ff f9fc 	bl	8002340 <do_csp_debug>
			csp_buffer_free(packet);
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fde0 	bl	8001b10 <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e0e3      	b.n	800311c <csp_route_work+0x304>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fec8 	bl	8002cf0 <csp_route_check_options>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <csp_route_work+0x15a>
		csp_buffer_free(packet);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fdd1 	bl	8001b10 <csp_buffer_free>
		return CSP_ERR_NONE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e0d4      	b.n	800311c <csp_route_work+0x304>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fd13 	bl	80029a8 <csp_port_get_socket>
 8002f82:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d030      	beq.n	8002fec <csp_route_work+0x1d4>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d02a      	beq.n	8002fec <csp_route_work+0x1d4>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	6979      	ldr	r1, [r7, #20]
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fefa 	bl	8002d98 <csp_route_security_check>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	da05      	bge.n	8002fb6 <csp_route_work+0x19e>
			csp_buffer_free(packet);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe fdaf 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e0b2      	b.n	800311c <csp_route_work+0x304>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f107 0110 	add.w	r1, r7, #16
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fb06 	bl	80015d2 <csp_queue_enqueue>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d00d      	beq.n	8002fe8 <csp_route_work+0x1d0>
			csp_log_error("Conn-less socket queue full");
 8002fcc:	4b41      	ldr	r3, [pc, #260]	@ (80030d4 <csp_route_work+0x2bc>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <csp_route_work+0x1c4>
 8002fd4:	4943      	ldr	r1, [pc, #268]	@ (80030e4 <csp_route_work+0x2cc>)
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff f9b2 	bl	8002340 <do_csp_debug>
			csp_buffer_free(packet);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe fd96 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	e099      	b.n	800311c <csp_route_work+0x304>
		}
		return CSP_ERR_NONE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e097      	b.n	800311c <csp_route_work+0x304>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	493d      	ldr	r1, [pc, #244]	@ (80030e8 <csp_route_work+0x2d0>)
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe ff28 	bl	8001e48 <csp_conn_find>
 8002ff8:	6278      	str	r0, [r7, #36]	@ 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d177      	bne.n	80030f0 <csp_route_work+0x2d8>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <csp_route_work+0x1fa>
			csp_buffer_free(packet);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fd81 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 800300e:	2300      	movs	r3, #0
 8003010:	e084      	b.n	800311c <csp_route_work+0x304>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	6979      	ldr	r1, [r7, #20]
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff febc 	bl	8002d98 <csp_route_security_check>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	da05      	bge.n	8003032 <csp_route_work+0x21a>
			csp_buffer_free(packet);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fe fd71 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 800302e:	2300      	movs	r3, #0
 8003030:	e074      	b.n	800311c <csp_route_work+0x304>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	7bdb      	ldrb	r3, [r3, #15]
 8003036:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800303a:	b2da      	uxtb	r2, r3
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	f362 1387 	bfi	r3, r2, #6, #2
 8003042:	73fb      	strb	r3, [r7, #15]
		idout.src   = csp_conf.address;
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <csp_route_work+0x2c4>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f003 031f 	and.w	r3, r3, #31
 800304c:	b2da      	uxtb	r2, r3
 800304e:	7bfb      	ldrb	r3, [r7, #15]
 8003050:	f362 0345 	bfi	r3, r2, #1, #5
 8003054:	73fb      	strb	r3, [r7, #15]

		idout.dst   = packet->id.src;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	7bdb      	ldrb	r3, [r3, #15]
 800305a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800305e:	b2da      	uxtb	r2, r3
 8003060:	89fb      	ldrh	r3, [r7, #14]
 8003062:	f362 1308 	bfi	r3, r2, #4, #5
 8003066:	81fb      	strh	r3, [r7, #14]
		idout.dport = packet->id.sport;
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	7b5b      	ldrb	r3, [r3, #13]
 800306c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f362 3393 	bfi	r3, r2, #14, #6
 8003078:	60fb      	str	r3, [r7, #12]
		idout.sport = packet->id.dport;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8003082:	b2da      	uxtb	r2, r3
 8003084:	7b7b      	ldrb	r3, [r7, #13]
 8003086:	f362 0305 	bfi	r3, r2, #0, #6
 800308a:	737b      	strb	r3, [r7, #13]
		idout.flags = packet->id.flags;
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	7b1b      	ldrb	r3, [r3, #12]
 8003090:	733b      	strb	r3, [r7, #12]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	68f9      	ldr	r1, [r7, #12]
 8003096:	68d8      	ldr	r0, [r3, #12]
 8003098:	f7fe ffbe 	bl	8002018 <csp_conn_new>
 800309c:	6278      	str	r0, [r7, #36]	@ 0x24

		if (!conn) {
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10d      	bne.n	80030c0 <csp_route_work+0x2a8>
			csp_log_error("No more connections available");
 80030a4:	4b0b      	ldr	r3, [pc, #44]	@ (80030d4 <csp_route_work+0x2bc>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <csp_route_work+0x29c>
 80030ac:	490f      	ldr	r1, [pc, #60]	@ (80030ec <csp_route_work+0x2d4>)
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7ff f946 	bl	8002340 <do_csp_debug>
			csp_buffer_free(packet);
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fd2a 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 80030bc:	2300      	movs	r3, #0
 80030be:	e02d      	b.n	800311c <csp_route_work+0x304>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	699a      	ldr	r2, [r3, #24]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	619a      	str	r2, [r3, #24]
 80030d0:	e01e      	b.n	8003110 <csp_route_work+0x2f8>
 80030d2:	bf00      	nop
 80030d4:	2400000c 	.word	0x2400000c
 80030d8:	0800c04c 	.word	0x0800c04c
 80030dc:	240001a8 	.word	0x240001a8
 80030e0:	0800c08c 	.word	0x0800c08c
 80030e4:	0800c0a4 	.word	0x0800c0a4
 80030e8:	3fffff00 	.word	0x3fffff00
 80030ec:	0800c0c0 	.word	0x0800c0c0

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	6979      	ldr	r1, [r7, #20]
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff fe4d 	bl	8002d98 <csp_route_security_check>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	da05      	bge.n	8003110 <csp_route_work+0x2f8>
			csp_buffer_free(packet);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe fd02 	bl	8001b10 <csp_buffer_free>
			return CSP_ERR_NONE;
 800310c:	2300      	movs	r3, #0
 800310e:	e005      	b.n	800311c <csp_route_work+0x304>
		return CSP_ERR_NONE;
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	4619      	mov	r1, r3
 8003114:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003116:	f000 fd31 	bl	8003b7c <csp_udp_new_packet>
	return CSP_ERR_NONE;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	372c      	adds	r7, #44	@ 0x2c
 8003120:	46bd      	mov	sp, r7
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003124 <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 800312c:	f04f 30ff 	mov.w	r0, #4294967295
 8003130:	f7ff fe72 	bl	8002e18 <csp_route_work>
 8003134:	e7fa      	b.n	800312c <csp_task_router+0x8>
	...

08003138 <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af02      	add	r7, sp, #8
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	2300      	movs	r3, #0
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	490c      	ldr	r1, [pc, #48]	@ (8003180 <csp_route_start_task+0x48>)
 8003150:	480c      	ldr	r0, [pc, #48]	@ (8003184 <csp_route_start_task+0x4c>)
 8003152:	f7fe fb5b 	bl	800180c <csp_thread_create>
 8003156:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 800315e:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <csp_route_start_task+0x50>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <csp_route_start_task+0x38>
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4908      	ldr	r1, [pc, #32]	@ (800318c <csp_route_start_task+0x54>)
 800316a:	2000      	movs	r0, #0
 800316c:	f7ff f8e8 	bl	8002340 <do_csp_debug>
		return ret;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	e000      	b.n	8003176 <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 8003174:	2300      	movs	r3, #0

}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	0800c0e0 	.word	0x0800c0e0
 8003184:	08003125 	.word	0x08003125
 8003188:	2400000c 	.word	0x2400000c
 800318c:	0800c0e4 	.word	0x0800c0e4

08003190 <csp_can_tx_frame>:
extern FDCAN_HandleTypeDef hfdcan1;

csp_can_interface_data_t can_ifdata;
csp_iface_t can_iface;

static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b08e      	sub	sp, #56	@ 0x38
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	70fb      	strb	r3, [r7, #3]

    FDCAN_TxHeaderTypeDef txHeader;
    txHeader.Identifier          = (uint32_t)id;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	617b      	str	r3, [r7, #20]
    txHeader.IdType              = FDCAN_EXTENDED_ID;
 80031a2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80031a6:	61bb      	str	r3, [r7, #24]
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
    txHeader.DataLength          = FDCAN_DLC_BYTES_8;
 80031ac:	2308      	movs	r3, #8
 80031ae:	623b      	str	r3, [r7, #32]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.BitRateSwitch       = FDCAN_BRS_OFF;
 80031b4:	2300      	movs	r3, #0
 80031b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 80031b8:	2300      	movs	r3, #0
 80031ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    txHeader.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 80031bc:	2300      	movs	r3, #0
 80031be:	633b      	str	r3, [r7, #48]	@ 0x30
    txHeader.MessageMarker       = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34

    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, data) != HAL_OK) {
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4806      	ldr	r0, [pc, #24]	@ (80031e8 <csp_can_tx_frame+0x58>)
 80031ce:	f004 fcd6 	bl	8007b7e <HAL_FDCAN_AddMessageToTxFifoQ>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <csp_can_tx_frame+0x4e>
        return CSP_ERR_DRIVER;
 80031d8:	f06f 030a 	mvn.w	r3, #10
 80031dc:	e000      	b.n	80031e0 <csp_can_tx_frame+0x50>
    }

	return CSP_ERR_NONE;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3738      	adds	r7, #56	@ 0x38
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	240000d8 	.word	0x240000d8

080031ec <can_csp_init>:

void can_csp_init(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
	FDCAN_FilterTypeDef sFilterConfig = {
 80031f2:	463b      	mov	r3, r7
 80031f4:	2220      	movs	r2, #32
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f007 fafb 	bl	800a7f4 <memset>
 80031fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	2303      	movs	r3, #3
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	2301      	movs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003210:	617b      	str	r3, [r7, #20]
		.FilterType = FDCAN_FILTER_RANGE_NO_EIDM,
		.FilterConfig = FDCAN_FILTER_TO_RXFIFO0,
		.FilterID1 = 0x00000000,
		.FilterID2 = 0x1FFFFFFF
	};
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8003212:	463b      	mov	r3, r7
 8003214:	4619      	mov	r1, r3
 8003216:	480f      	ldr	r0, [pc, #60]	@ (8003254 <can_csp_init+0x68>)
 8003218:	f004 fc10 	bl	8007a3c <HAL_FDCAN_ConfigFilter>

	HAL_FDCAN_Start(&hfdcan1);
 800321c:	480d      	ldr	r0, [pc, #52]	@ (8003254 <can_csp_init+0x68>)
 800321e:	f004 fc83 	bl	8007b28 <HAL_FDCAN_Start>

	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	2101      	movs	r1, #1
 8003226:	480b      	ldr	r0, [pc, #44]	@ (8003254 <can_csp_init+0x68>)
 8003228:	f004 fe70 	bl	8007f0c <HAL_FDCAN_ActivateNotification>

	can_ifdata.tx_func			= csp_can_tx_frame;
 800322c:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <can_csp_init+0x6c>)
 800322e:	4a0b      	ldr	r2, [pc, #44]	@ (800325c <can_csp_init+0x70>)
 8003230:	605a      	str	r2, [r3, #4]
	can_iface.name				= "can";
 8003232:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <can_csp_init+0x74>)
 8003234:	4a0b      	ldr	r2, [pc, #44]	@ (8003264 <can_csp_init+0x78>)
 8003236:	601a      	str	r2, [r3, #0]
	can_iface.driver_data		= &hfdcan1;
 8003238:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <can_csp_init+0x74>)
 800323a:	4a06      	ldr	r2, [pc, #24]	@ (8003254 <can_csp_init+0x68>)
 800323c:	609a      	str	r2, [r3, #8]
	can_iface.interface_data	= &can_ifdata;
 800323e:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <can_csp_init+0x74>)
 8003240:	4a05      	ldr	r2, [pc, #20]	@ (8003258 <can_csp_init+0x6c>)
 8003242:	605a      	str	r2, [r3, #4]
//	can_iface.mtu 				= 8;
	csp_can_add_interface(&can_iface);
 8003244:	4806      	ldr	r0, [pc, #24]	@ (8003260 <can_csp_init+0x74>)
 8003246:	f000 fa3f 	bl	80036c8 <csp_can_add_interface>
}
 800324a:	bf00      	nop
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	240000d8 	.word	0x240000d8
 8003258:	240001d0 	.word	0x240001d0
 800325c:	08003191 	.word	0x08003191
 8003260:	240001d8 	.word	0x240001d8
 8003264:	0800c10c 	.word	0x0800c10c

08003268 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b092      	sub	sp, #72	@ 0x48
 800326c:	af02      	add	r7, sp, #8
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    FDCAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];
    CSP_BASE_TYPE xCspTaskWoken = pdFALSE;
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]

    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8003276:	f107 0310 	add.w	r3, r7, #16
 800327a:	f107 0218 	add.w	r2, r7, #24
 800327e:	2140      	movs	r1, #64	@ 0x40
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f004 fcd7 	bl	8007c34 <HAL_FDCAN_GetRxMessage>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d119      	bne.n	80032c0 <HAL_FDCAN_RxFifo0Callback+0x58>
    	csp_can_rx(&can_iface, rxHeader.Identifier, rxData, rxHeader.DataLength, &xCspTaskWoken);
 800328c:	69b9      	ldr	r1, [r7, #24]
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	b2d8      	uxtb	r0, r3
 8003292:	f107 0210 	add.w	r2, r7, #16
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	4603      	mov	r3, r0
 800329e:	480a      	ldr	r0, [pc, #40]	@ (80032c8 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80032a0:	f000 f816 	bl	80032d0 <csp_can_rx>

    	if(xCspTaskWoken) {
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_FDCAN_RxFifo0Callback+0x58>
    		portYIELD_FROM_ISR(xCspTaskWoken);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_FDCAN_RxFifo0Callback+0x58>
 80032b0:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_FDCAN_RxFifo0Callback+0x64>)
 80032b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	f3bf 8f6f 	isb	sy
    	}
	}
}
 80032c0:	bf00      	nop
 80032c2:	3740      	adds	r7, #64	@ 0x40
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	240001d8 	.word	0x240001d8
 80032cc:	e000ed04 	.word	0xe000ed04

080032d0 <csp_can_rx>:
	/* Remaining CFP fragment(s) of a CSP packet */
	CFP_MORE = 1
};

int csp_can_rx(csp_iface_t *iface, uint32_t id, const uint8_t *data, uint8_t dlc, CSP_BASE_TYPE *task_woken)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	70fb      	strb	r3, [r7, #3]
			return CSP_ERR_DRIVER;
		}
	}

	/* Bind incoming frame to a packet buffer */
	csp_can_pbuf_element_t * buf = csp_can_pbuf_find(id, CFP_ID_CONN_MASK, task_woken);
 80032de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032e0:	4989      	ldr	r1, [pc, #548]	@ (8003508 <csp_can_rx+0x238>)
 80032e2:	68b8      	ldr	r0, [r7, #8]
 80032e4:	f000 fad8 	bl	8003898 <csp_can_pbuf_find>
 80032e8:	6178      	str	r0, [r7, #20]
	if (buf == NULL) {
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11d      	bne.n	800332c <csp_can_rx+0x5c>
		if (CFP_TYPE(id) == CFP_BEGIN) {
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	0c9b      	lsrs	r3, r3, #18
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10f      	bne.n	800331c <csp_can_rx+0x4c>
			buf = csp_can_pbuf_new(id, task_woken);
 80032fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032fe:	68b8      	ldr	r0, [r7, #8]
 8003300:	f000 fa4a 	bl	8003798 <csp_can_pbuf_new>
 8003304:	6178      	str	r0, [r7, #20]
			if (buf == NULL) {
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10f      	bne.n	800332c <csp_can_rx+0x5c>
				//csp_log_warn("No available packet buffer for CAN");
				iface->rx_error++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
				return CSP_ERR_NOMEM;
 8003316:	f04f 33ff 	mov.w	r3, #4294967295
 800331a:	e0f1      	b.n	8003500 <csp_can_rx+0x230>
			}
		} else {
			//csp_log_warn("Out of order id 0x%X remain %u", CFP_ID(id), CFP_REMAIN(id));
			iface->frame++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	62da      	str	r2, [r3, #44]	@ 0x2c
			return CSP_ERR_INVAL;
 8003326:	f06f 0301 	mvn.w	r3, #1
 800332a:	e0e9      	b.n	8003500 <csp_can_rx+0x230>
		}
	}

	/* Reset frame data offset */
	uint8_t offset = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	74fb      	strb	r3, [r7, #19]

	switch (CFP_TYPE(id)) {
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <csp_can_rx+0x72>
 800333c:	2b01      	cmp	r3, #1
 800333e:	d07a      	beq.n	8003436 <csp_can_rx+0x166>
 8003340:	e0d7      	b.n	80034f2 <csp_can_rx+0x222>

	case CFP_BEGIN:

		/* Discard packet if DLC is less than CSP id + CSP length fields */
		if (dlc < (sizeof(csp_id_t) + sizeof(uint16_t))) {
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	2b05      	cmp	r3, #5
 8003346:	d809      	bhi.n	800335c <csp_can_rx+0x8c>
			//csp_log_warn("Short BEGIN frame received");
			iface->frame++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8003352:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003354:	6978      	ldr	r0, [r7, #20]
 8003356:	f000 f9f1 	bl	800373c <csp_can_pbuf_free>
			break;
 800335a:	e0d0      	b.n	80034fe <csp_can_rx+0x22e>
		}

		/* Check for incomplete frame */
		if (buf->packet != NULL) {
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <csp_can_rx+0xa0>
			/* Reuse the buffer */
			//csp_log_warn("Incomplete frame");
			iface->frame++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800336e:	e01b      	b.n	80033a8 <csp_can_rx+0xd8>
		} else {
			/* Get free buffer for frame */
			buf->packet = task_woken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <csp_can_rx+0xb0>
 8003376:	2000      	movs	r0, #0
 8003378:	f7fe fafc 	bl	8001974 <csp_buffer_get_isr>
 800337c:	4603      	mov	r3, r0
 800337e:	e003      	b.n	8003388 <csp_can_rx+0xb8>
 8003380:	2000      	movs	r0, #0
 8003382:	f7fe fb29 	bl	80019d8 <csp_buffer_get>
 8003386:	4603      	mov	r3, r0
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	60d3      	str	r3, [r2, #12]
			if (buf->packet == NULL) {
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <csp_can_rx+0xd8>
				//csp_log_error("Failed to get buffer for CSP_BEGIN packet");
				iface->frame++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	62da      	str	r2, [r3, #44]	@ 0x2c
				csp_can_pbuf_free(buf, task_woken);
 800339e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033a0:	6978      	ldr	r0, [r7, #20]
 80033a2:	f000 f9cb 	bl	800373c <csp_can_pbuf_free>
				break;
 80033a6:	e0aa      	b.n	80034fe <csp_can_rx+0x22e>
			}
		}

		/* Copy CSP identifier (header) */
		memcpy(&(buf->packet->id), data, sizeof(buf->packet->id));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	330c      	adds	r3, #12
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6812      	ldr	r2, [r2, #0]
 80033b2:	601a      	str	r2, [r3, #0]
		buf->packet->id.ext = csp_ntoh32(buf->packet->id.ext);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	68dc      	ldr	r4, [r3, #12]
 80033be:	4610      	mov	r0, r2
 80033c0:	f7ff f865 	bl	800248e <csp_ntoh32>
 80033c4:	4603      	mov	r3, r0
 80033c6:	60e3      	str	r3, [r4, #12]

		/* Copy CSP length (of data) */
		memcpy(&(buf->packet->length), data + sizeof(csp_id_t), sizeof(buf->packet->length));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	330a      	adds	r3, #10
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	3204      	adds	r2, #4
 80033d2:	8812      	ldrh	r2, [r2, #0]
 80033d4:	b292      	uxth	r2, r2
 80033d6:	801a      	strh	r2, [r3, #0]
		buf->packet->length = csp_ntoh16(buf->packet->length);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	895a      	ldrh	r2, [r3, #10]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	68dc      	ldr	r4, [r3, #12]
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7ff f82c 	bl	8002440 <csp_ntoh16>
 80033e8:	4603      	mov	r3, r0
 80033ea:	8163      	strh	r3, [r4, #10]

		/* Check length against max */
		if ((buf->packet->length > MAX_CAN_DATA_SIZE) || (buf->packet->length > csp_buffer_data_size())) {
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	895b      	ldrh	r3, [r3, #10]
 80033f2:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d808      	bhi.n	800340c <csp_can_rx+0x13c>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	895b      	ldrh	r3, [r3, #10]
 8003400:	461c      	mov	r4, r3
 8003402:	f7fe fc09 	bl	8001c18 <csp_buffer_data_size>
 8003406:	4603      	mov	r3, r0
 8003408:	429c      	cmp	r4, r3
 800340a:	d909      	bls.n	8003420 <csp_can_rx+0x150>
			iface->rx_error++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	621a      	str	r2, [r3, #32]
			csp_can_pbuf_free(buf, task_woken);
 8003416:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003418:	6978      	ldr	r0, [r7, #20]
 800341a:	f000 f98f 	bl	800373c <csp_can_pbuf_free>
			break;
 800341e:	e06e      	b.n	80034fe <csp_can_rx+0x22e>
		}

		/* Reset RX count */
		buf->rx_count = 0;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	2200      	movs	r2, #0
 8003424:	801a      	strh	r2, [r3, #0]

		/* Set offset to prevent CSP header from being copied to CSP data */
		offset = sizeof(csp_id_t) + sizeof(uint16_t);
 8003426:	2306      	movs	r3, #6
 8003428:	74fb      	strb	r3, [r7, #19]

		/* Set remain field - increment to include begin packet */
		buf->remain = CFP_REMAIN(id) + 1;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	0a9b      	lsrs	r3, r3, #10
 800342e:	b2db      	uxtb	r3, r3
 8003430:	1c5a      	adds	r2, r3, #1
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	605a      	str	r2, [r3, #4]
		/* FALLTHROUGH */

	case CFP_MORE:

		/* Check 'remain' field match */
		if (CFP_REMAIN(id) != buf->remain - 1) {
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0a9b      	lsrs	r3, r3, #10
 800343a:	b2da      	uxtb	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	3b01      	subs	r3, #1
 8003442:	429a      	cmp	r2, r3
 8003444:	d009      	beq.n	800345a <csp_can_rx+0x18a>
			//csp_log_error("CAN frame lost in CSP packet");
			csp_can_pbuf_free(buf, task_woken);
 8003446:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003448:	6978      	ldr	r0, [r7, #20]
 800344a:	f000 f977 	bl	800373c <csp_can_pbuf_free>
			iface->frame++;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	62da      	str	r2, [r3, #44]	@ 0x2c
			break;
 8003458:	e051      	b.n	80034fe <csp_can_rx+0x22e>
		}

		/* Decrement remaining frames */
		buf->remain--;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	605a      	str	r2, [r3, #4]

		/* Check for overflow */
		if ((buf->rx_count + dlc - offset) > buf->packet->length) {
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	441a      	add	r2, r3
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	68d2      	ldr	r2, [r2, #12]
 8003476:	8952      	ldrh	r2, [r2, #10]
 8003478:	4293      	cmp	r3, r2
 800347a:	dd09      	ble.n	8003490 <csp_can_rx+0x1c0>
			//csp_log_error("RX buffer overflow");
			iface->frame++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8003486:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003488:	6978      	ldr	r0, [r7, #20]
 800348a:	f000 f957 	bl	800373c <csp_can_pbuf_free>
			break;
 800348e:	e036      	b.n	80034fe <csp_can_rx+0x22e>
		}

		/* Copy dlc bytes into buffer */
		memcpy(&buf->packet->data[buf->rx_count], data + offset, dlc - offset);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	3310      	adds	r3, #16
 800349a:	18d0      	adds	r0, r2, r3
 800349c:	7cfb      	ldrb	r3, [r7, #19]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	18d1      	adds	r1, r2, r3
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	f007 fa3e 	bl	800a92a <memcpy>
		buf->rx_count += dlc - offset;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	881a      	ldrh	r2, [r3, #0]
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	b299      	uxth	r1, r3
 80034b6:	7cfb      	ldrb	r3, [r7, #19]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1acb      	subs	r3, r1, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	4413      	add	r3, r2
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	801a      	strh	r2, [r3, #0]

		/* Check if more data is expected */
		if (buf->rx_count != buf->packet->length)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	881a      	ldrh	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	895b      	ldrh	r3, [r3, #10]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d113      	bne.n	80034fc <csp_can_rx+0x22c>
			break;

		/* Data is available */
		csp_qfifo_write(buf->packet, iface, task_woken);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fb8d 	bl	8002bfc <csp_qfifo_write>

		/* Drop packet buffer reference */
		buf->packet = NULL;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]

		/* Free packet buffer */
		csp_can_pbuf_free(buf, task_woken);
 80034e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ea:	6978      	ldr	r0, [r7, #20]
 80034ec:	f000 f926 	bl	800373c <csp_can_pbuf_free>

		break;
 80034f0:	e005      	b.n	80034fe <csp_can_rx+0x22e>

	default:
		//csp_log_warn("Received unknown CFP message type");
		csp_can_pbuf_free(buf, task_woken);
 80034f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034f4:	6978      	ldr	r0, [r7, #20]
 80034f6:	f000 f921 	bl	800373c <csp_can_pbuf_free>
		break;
 80034fa:	e000      	b.n	80034fe <csp_can_rx+0x22e>
			break;
 80034fc:	bf00      	nop
	}

	return CSP_ERR_NONE;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bd90      	pop	{r4, r7, pc}
 8003508:	1ff803ff 	.word	0x1ff803ff

0800350c <csp_can_tx>:

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b08f      	sub	sp, #60	@ 0x3c
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
        csp_iface_t * iface = ifroute->iface;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
        csp_can_interface_data_t * ifdata = iface->interface_data;
 800351c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 8003522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800352a:	6011      	str	r1, [r2, #0]
 800352c:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
        if (packet->length > MAX_CAN_DATA_SIZE) {
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	895b      	ldrh	r3, [r3, #10]
 8003532:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8003536:	4293      	cmp	r3, r2
 8003538:	d902      	bls.n	8003540 <csp_can_tx+0x34>
		return CSP_ERR_TX;
 800353a:	f06f 0309 	mvn.w	r3, #9
 800353e:	e0bf      	b.n	80036c0 <csp_can_tx+0x1b4>
        }

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	791b      	ldrb	r3, [r3, #4]
 8003544:	2bff      	cmp	r3, #255	@ 0xff
 8003546:	d002      	beq.n	800354e <csp_can_tx+0x42>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	e004      	b.n	8003558 <csp_can_tx+0x4c>
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	89db      	ldrh	r3, [r3, #14]
 8003552:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	7bdb      	ldrb	r3, [r3, #15]
 8003560:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003564:	b2db      	uxtb	r3, r3
 8003566:	061a      	lsls	r2, r3, #24
                       CFP_MAKE_DST(dest) |
 8003568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800356c:	04db      	lsls	r3, r3, #19
 800356e:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8003572:	431a      	orrs	r2, r3
                       CFP_MAKE_ID(ident) |
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357a:	431a      	orrs	r2, r3
                       CFP_MAKE_TYPE(CFP_BEGIN) |
                       CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	895b      	ldrh	r3, [r3, #10]
 8003580:	3305      	adds	r3, #5
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	029b      	lsls	r3, r3, #10
 8003586:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 800358a:	4313      	orrs	r3, r2
 800358c:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 800358e:	2302      	movs	r3, #2
 8003590:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	895a      	ldrh	r2, [r3, #10]
 8003596:	7ffb      	ldrb	r3, [r7, #31]
 8003598:	b29b      	uxth	r3, r3
 800359a:	429a      	cmp	r2, r3
 800359c:	d803      	bhi.n	80035a6 <csp_can_tx+0x9a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	895b      	ldrh	r3, [r3, #10]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	e000      	b.n	80035a8 <csp_can_tx+0x9c>
 80035a6:	7ffb      	ldrb	r3, [r7, #31]
 80035a8:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe ff54 	bl	800245c <csp_hton32>
 80035b4:	4603      	mov	r3, r0
 80035b6:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	895b      	ldrh	r3, [r3, #10]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fe ff29 	bl	8002414 <csp_hton16>
 80035c2:	4603      	mov	r3, r0
 80035c4:	827b      	strh	r3, [r7, #18]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	3304      	adds	r3, #4
 80035d0:	8a7a      	ldrh	r2, [r7, #18]
 80035d2:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 80035d4:	f107 0308 	add.w	r3, r7, #8
 80035d8:	3306      	adds	r3, #6
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	f102 0110 	add.w	r1, r2, #16
 80035e0:	7fba      	ldrb	r2, [r7, #30]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f007 f9a1 	bl	800a92a <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 80035e8:	7fbb      	ldrb	r3, [r7, #30]
 80035ea:	86fb      	strh	r3, [r7, #54]	@ 0x36

        const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 80035ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	6898      	ldr	r0, [r3, #8]
 80035f6:	7fbb      	ldrb	r3, [r7, #30]
 80035f8:	3306      	adds	r3, #6
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f107 0208 	add.w	r2, r7, #8
 8003600:	69bc      	ldr	r4, [r7, #24]
 8003602:	6a39      	ldr	r1, [r7, #32]
 8003604:	47a0      	blx	r4
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d050      	beq.n	80036ae <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 8003616:	f06f 030a 	mvn.w	r3, #10
 800361a:	e051      	b.n	80036c0 <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	895b      	ldrh	r3, [r3, #10]
 8003620:	461a      	mov	r2, r3
 8003622:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b08      	cmp	r3, #8
 8003628:	bfa8      	it	ge
 800362a:	2308      	movge	r3, #8
 800362c:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	7bdb      	ldrb	r3, [r3, #15]
 8003632:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003636:	b2db      	uxtb	r3, r3
 8003638:	061a      	lsls	r2, r3, #24
                      CFP_MAKE_DST(dest) |
 800363a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800363e:	04db      	lsls	r3, r3, #19
 8003640:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 8003644:	431a      	orrs	r2, r3
                      CFP_MAKE_ID(ident) |
 8003646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003648:	f3c3 0309 	ubfx	r3, r3, #0, #10
                      CFP_MAKE_DST(dest) |
 800364c:	431a      	orrs	r2, r3
                      CFP_MAKE_TYPE(CFP_MORE) |
                      CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	895b      	ldrh	r3, [r3, #10]
 8003652:	4619      	mov	r1, r3
 8003654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003656:	1ac9      	subs	r1, r1, r3
 8003658:	7fbb      	ldrb	r3, [r7, #30]
 800365a:	1acb      	subs	r3, r1, r3
 800365c:	3307      	adds	r3, #7
 800365e:	2b00      	cmp	r3, #0
 8003660:	da00      	bge.n	8003664 <csp_can_tx+0x158>
 8003662:	3307      	adds	r3, #7
 8003664:	10db      	asrs	r3, r3, #3
 8003666:	029b      	lsls	r3, r3, #10
 8003668:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
                      CFP_MAKE_TYPE(CFP_MORE) |
 800366c:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 800366e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003672:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 8003674:	7fbb      	ldrb	r3, [r7, #30]
 8003676:	b29a      	uxth	r2, r3
 8003678:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800367a:	4413      	add	r3, r2
 800367c:	86fb      	strh	r3, [r7, #54]	@ 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 800367e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003680:	6898      	ldr	r0, [r3, #8]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f103 0210 	add.w	r2, r3, #16
 8003688:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 800368a:	7fbb      	ldrb	r3, [r7, #30]
 800368c:	1acb      	subs	r3, r1, r3
 800368e:	441a      	add	r2, r3
 8003690:	7fbb      	ldrb	r3, [r7, #30]
 8003692:	69bc      	ldr	r4, [r7, #24]
 8003694:	6a39      	ldr	r1, [r7, #32]
 8003696:	47a0      	blx	r4
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 800369e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 80036a8:	f06f 030a 	mvn.w	r3, #10
 80036ac:	e008      	b.n	80036c0 <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	895b      	ldrh	r3, [r3, #10]
 80036b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3b1      	bcc.n	800361c <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 80036b8:	6838      	ldr	r0, [r7, #0]
 80036ba:	f7fe fa29 	bl	8001b10 <csp_buffer_free>

	return CSP_ERR_NONE;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	373c      	adds	r7, #60	@ 0x3c
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd90      	pop	{r4, r7, pc}

080036c8 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <csp_can_add_interface+0x1e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <csp_can_add_interface+0x1e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d102      	bne.n	80036ec <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 80036e6:	f06f 0301 	mvn.w	r3, #1
 80036ea:	e021      	b.n	8003730 <csp_can_add_interface+0x68>
	}

        csp_can_interface_data_t * ifdata = iface->interface_data;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 80036fa:	f06f 0301 	mvn.w	r3, #1
 80036fe:	e017      	b.n	8003730 <csp_can_add_interface+0x68>
	}

        if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	8a1b      	ldrh	r3, [r3, #16]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <csp_can_add_interface+0x4c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8a1b      	ldrh	r3, [r3, #16]
 800370c:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8003710:	4293      	cmp	r3, r2
 8003712:	d903      	bls.n	800371c <csp_can_add_interface+0x54>
            iface->mtu = MAX_CAN_DATA_SIZE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 800371a:	821a      	strh	r2, [r3, #16]
        }

        ifdata->cfp_frame_id = 0;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a04      	ldr	r2, [pc, #16]	@ (8003738 <csp_can_add_interface+0x70>)
 8003726:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7fe febd 	bl	80024a8 <csp_iflist_add>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	0800350d 	.word	0x0800350d

0800373c <csp_can_pbuf_free>:
#define PBUF_TIMEOUT_MS		1000

static csp_can_pbuf_element_t csp_can_pbuf[PBUF_ELEMENTS] = {};

int csp_can_pbuf_free(csp_can_pbuf_element_t *buf, CSP_BASE_TYPE *task_woken)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	/* Free CSP packet */
	if (buf->packet != NULL) {
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <csp_can_pbuf_free+0x2e>
		if (task_woken == NULL) {
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <csp_can_pbuf_free+0x24>
			csp_buffer_free(buf->packet);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f7fe f9d9 	bl	8001b10 <csp_buffer_free>
 800375e:	e004      	b.n	800376a <csp_can_pbuf_free+0x2e>
		} else {
			csp_buffer_free_isr(buf->packet);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe f999 	bl	8001a9c <csp_buffer_free_isr>
		}
	}

	/* Mark buffer element free */
	buf->packet = NULL;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]
	buf->rx_count = 0;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	801a      	strh	r2, [r3, #0]
	buf->cfpid = 0;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
	buf->last_used = 0;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	615a      	str	r2, [r3, #20]
	buf->remain = 0;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	605a      	str	r2, [r3, #4]
	buf->state = BUF_FREE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	741a      	strb	r2, [r3, #16]

	return CSP_ERR_NONE;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <csp_can_pbuf_new>:

csp_can_pbuf_element_t *csp_can_pbuf_new(uint32_t id, CSP_BASE_TYPE *task_woken)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	uint32_t now = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <csp_can_pbuf_new+0x18>
 80037a8:	f7fe f85b 	bl	8001862 <csp_get_ms_isr>
 80037ac:	4603      	mov	r3, r0
 80037ae:	e002      	b.n	80037b6 <csp_can_pbuf_new+0x1e>
 80037b0:	f7fe f850 	bl	8001854 <csp_get_ms>
 80037b4:	4603      	mov	r3, r0
 80037b6:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	e061      	b.n	8003882 <csp_can_pbuf_new+0xea>

		/* Perform cleanup in used pbufs */
		if (csp_can_pbuf[i].state == BUF_USED) {
 80037be:	4935      	ldr	r1, [pc, #212]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	440b      	add	r3, r1
 80037cc:	3310      	adds	r3, #16
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d118      	bne.n	8003806 <csp_can_pbuf_new+0x6e>
			if (now - csp_can_pbuf[i].last_used > PBUF_TIMEOUT_MS)
 80037d4:	492f      	ldr	r1, [pc, #188]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4613      	mov	r3, r2
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4413      	add	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	440b      	add	r3, r1
 80037e2:	3314      	adds	r3, #20
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037ee:	d90a      	bls.n	8003806 <csp_can_pbuf_new+0x6e>
				csp_can_pbuf_free(&csp_can_pbuf[i], task_woken);
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4a26      	ldr	r2, [pc, #152]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 80037fc:	4413      	add	r3, r2
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff9b 	bl	800373c <csp_can_pbuf_free>
		}

		if (csp_can_pbuf[i].state == BUF_FREE) {
 8003806:	4923      	ldr	r1, [pc, #140]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4613      	mov	r3, r2
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	3310      	adds	r3, #16
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d12f      	bne.n	800387c <csp_can_pbuf_new+0xe4>
			csp_can_pbuf[i].state = BUF_USED;
 800381c:	491d      	ldr	r1, [pc, #116]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	3310      	adds	r3, #16
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
			csp_can_pbuf[i].cfpid = id;
 8003830:	4918      	ldr	r1, [pc, #96]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	3308      	adds	r3, #8
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].remain = 0;
 8003844:	4913      	ldr	r1, [pc, #76]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4413      	add	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	3304      	adds	r3, #4
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].last_used = now;
 8003858:	490e      	ldr	r1, [pc, #56]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	440b      	add	r3, r1
 8003866:	3314      	adds	r3, #20
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4a07      	ldr	r2, [pc, #28]	@ (8003894 <csp_can_pbuf_new+0xfc>)
 8003878:	4413      	add	r3, r2
 800387a:	e006      	b.n	800388a <csp_can_pbuf_new+0xf2>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	3301      	adds	r3, #1
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b04      	cmp	r3, #4
 8003886:	dd9a      	ble.n	80037be <csp_can_pbuf_new+0x26>
		}

	}

	return NULL;
 8003888:	2300      	movs	r3, #0

}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	24000218 	.word	0x24000218

08003898 <csp_can_pbuf_find>:

csp_can_pbuf_element_t *csp_can_pbuf_find(uint32_t id, uint32_t mask, CSP_BASE_TYPE *task_woken)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 80038a4:	2300      	movs	r3, #0
 80038a6:	617b      	str	r3, [r7, #20]
 80038a8:	e037      	b.n	800391a <csp_can_pbuf_find+0x82>
		if ((csp_can_pbuf[i].state == BUF_USED) && ((csp_can_pbuf[i].cfpid & mask) == (id & mask))) {
 80038aa:	4920      	ldr	r1, [pc, #128]	@ (800392c <csp_can_pbuf_find+0x94>)
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	440b      	add	r3, r1
 80038b8:	3310      	adds	r3, #16
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d129      	bne.n	8003914 <csp_can_pbuf_find+0x7c>
 80038c0:	491a      	ldr	r1, [pc, #104]	@ (800392c <csp_can_pbuf_find+0x94>)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	440b      	add	r3, r1
 80038ce:	3308      	adds	r3, #8
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	405a      	eors	r2, r3
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d11a      	bne.n	8003914 <csp_can_pbuf_find+0x7c>
			csp_can_pbuf[i].last_used = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <csp_can_pbuf_find+0x54>
 80038e4:	f7fd ffbd 	bl	8001862 <csp_get_ms_isr>
 80038e8:	4602      	mov	r2, r0
 80038ea:	e002      	b.n	80038f2 <csp_can_pbuf_find+0x5a>
 80038ec:	f7fd ffb2 	bl	8001854 <csp_get_ms>
 80038f0:	4602      	mov	r2, r0
 80038f2:	480e      	ldr	r0, [pc, #56]	@ (800392c <csp_can_pbuf_find+0x94>)
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	460b      	mov	r3, r1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	440b      	add	r3, r1
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4403      	add	r3, r0
 8003900:	3314      	adds	r3, #20
 8003902:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4613      	mov	r3, r2
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	4413      	add	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4a07      	ldr	r2, [pc, #28]	@ (800392c <csp_can_pbuf_find+0x94>)
 8003910:	4413      	add	r3, r2
 8003912:	e006      	b.n	8003922 <csp_can_pbuf_find+0x8a>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3301      	adds	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b04      	cmp	r3, #4
 800391e:	ddc4      	ble.n	80038aa <csp_can_pbuf_find+0x12>
		}
	}
	return NULL;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	24000218 	.word	0x24000218

08003930 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	89db      	ldrh	r3, [r3, #14]
 800393e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003942:	b2db      	uxtb	r3, r3
 8003944:	461a      	mov	r2, r3
 8003946:	4b09      	ldr	r3, [pc, #36]	@ (800396c <csp_lo_tx+0x3c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d004      	beq.n	8003958 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 800394e:	6838      	ldr	r0, [r7, #0]
 8003950:	f7fe f8de 	bl	8001b10 <csp_buffer_free>
		return CSP_ERR_NONE;
 8003954:	2300      	movs	r3, #0
 8003956:	e005      	b.n	8003964 <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8003958:	2200      	movs	r2, #0
 800395a:	4905      	ldr	r1, [pc, #20]	@ (8003970 <csp_lo_tx+0x40>)
 800395c:	6838      	ldr	r0, [r7, #0]
 800395e:	f7ff f94d 	bl	8002bfc <csp_qfifo_write>

	return CSP_ERR_NONE;
 8003962:	2300      	movs	r3, #0

}
 8003964:	4618      	mov	r0, r3
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	240001a8 	.word	0x240001a8
 8003970:	24000014 	.word	0x24000014

08003974 <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af04      	add	r7, sp, #16
 800397a:	603a      	str	r2, [r7, #0]
 800397c:	461a      	mov	r2, r3
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
 8003982:	460b      	mov	r3, r1
 8003984:	71bb      	strb	r3, [r7, #6]
 8003986:	4613      	mov	r3, r2
 8003988:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b20      	cmp	r3, #32
 800398e:	d103      	bne.n	8003998 <csp_rtable_set+0x24>
		netmask = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	71bb      	strb	r3, [r7, #6]
		address = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	2b1f      	cmp	r3, #31
 800399c:	d902      	bls.n	80039a4 <csp_rtable_set+0x30>
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2bff      	cmp	r3, #255	@ 0xff
 80039a2:	d105      	bne.n	80039b0 <csp_rtable_set+0x3c>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <csp_rtable_set+0x3c>
 80039aa:	79bb      	ldrb	r3, [r7, #6]
 80039ac:	2b05      	cmp	r3, #5
 80039ae:	d91b      	bls.n	80039e8 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 80039b0:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <csp_rtable_set+0x8c>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d014      	beq.n	80039e2 <csp_rtable_set+0x6e>
 80039b8:	79f8      	ldrb	r0, [r7, #7]
 80039ba:	79ba      	ldrb	r2, [r7, #6]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <csp_rtable_set+0x54>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	e000      	b.n	80039ca <csp_rtable_set+0x56>
 80039c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003a04 <csp_rtable_set+0x90>)
 80039ca:	7979      	ldrb	r1, [r7, #5]
 80039cc:	9103      	str	r1, [sp, #12]
 80039ce:	9302      	str	r3, [sp, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	9200      	str	r2, [sp, #0]
 80039d6:	4603      	mov	r3, r0
 80039d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003a08 <csp_rtable_set+0x94>)
 80039da:	490c      	ldr	r1, [pc, #48]	@ (8003a0c <csp_rtable_set+0x98>)
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fe fcaf 	bl	8002340 <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 80039e2:	f06f 0301 	mvn.w	r3, #1
 80039e6:	e006      	b.n	80039f6 <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 80039e8:	797b      	ldrb	r3, [r7, #5]
 80039ea:	79b9      	ldrb	r1, [r7, #6]
 80039ec:	79f8      	ldrb	r0, [r7, #7]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	f000 f878 	bl	8003ae4 <csp_rtable_set_internal>
 80039f4:	4603      	mov	r3, r0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	2400000c 	.word	0x2400000c
 8003a04:	0800c188 	.word	0x0800c188
 8003a08:	0800c2c8 	.word	0x0800c2c8
 8003a0c:	0800c18c 	.word	0x0800c18c

08003a10 <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	71fb      	strb	r3, [r7, #7]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	71bb      	strb	r3, [r7, #6]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 8003a2a:	4b22      	ldr	r3, [pc, #136]	@ (8003ab4 <csp_rtable_find+0xa4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60fb      	str	r3, [r7, #12]
	while(i) {
 8003a30:	e036      	b.n	8003aa0 <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	7a1b      	ldrb	r3, [r3, #8]
 8003a36:	79fa      	ldrb	r2, [r7, #7]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <csp_rtable_find+0x3c>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	7a5b      	ldrb	r3, [r3, #9]
 8003a40:	79ba      	ldrb	r2, [r7, #6]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d102      	bne.n	8003a4c <csp_rtable_find+0x3c>
			best_result = i;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	617b      	str	r3, [r7, #20]
			break;
 8003a4a:	e02c      	b.n	8003aa6 <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 8003a4c:	797b      	ldrb	r3, [r7, #5]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d123      	bne.n	8003a9a <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	7a5b      	ldrb	r3, [r3, #9]
 8003a56:	f1c3 0305 	rsb	r3, r3, #5
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	7a1a      	ldrb	r2, [r3, #8]
 8003a70:	7abb      	ldrb	r3, [r7, #10]
 8003a72:	4013      	ands	r3, r2
 8003a74:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 8003a76:	79fa      	ldrb	r2, [r7, #7]
 8003a78:	7abb      	ldrb	r3, [r7, #10]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 8003a7e:	7a7a      	ldrb	r2, [r7, #9]
 8003a80:	7a3b      	ldrb	r3, [r7, #8]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d109      	bne.n	8003a9a <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	7a5b      	ldrb	r3, [r3, #9]
 8003a8a:	7cfa      	ldrb	r2, [r7, #19]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d804      	bhi.n	8003a9a <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	7a5b      	ldrb	r3, [r3, #9]
 8003a98:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	60fb      	str	r3, [r7, #12]
	while(i) {
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1c5      	bne.n	8003a32 <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 8003aa6:	697b      	ldr	r3, [r7, #20]

}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	24000290 	.word	0x24000290

08003ab8 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 8003ac2:	79fb      	ldrb	r3, [r7, #7]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2105      	movs	r1, #5
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ffa1 	bl	8003a10 <csp_rtable_find>
 8003ace:	60f8      	str	r0, [r7, #12]
    if (entry) {
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <csp_rtable_find_route+0x22>
	return &entry->route;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	e000      	b.n	8003adc <csp_rtable_find_route+0x24>
    }
    return NULL;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	603a      	str	r2, [r7, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	460b      	mov	r3, r1
 8003af4:	71bb      	strb	r3, [r7, #6]
 8003af6:	4613      	mov	r3, r2
 8003af8:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 8003afa:	79b9      	ldrb	r1, [r7, #6]
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2201      	movs	r2, #1
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff85 	bl	8003a10 <csp_rtable_find>
 8003b06:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d122      	bne.n	8003b54 <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 8003b0e:	2010      	movs	r0, #16
 8003b10:	f7fd fd12 	bl	8001538 <csp_malloc>
 8003b14:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d102      	bne.n	8003b22 <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 8003b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b20:	e025      	b.n	8003b6e <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 8003b28:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <csp_rtable_set_internal+0x94>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 8003b30:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <csp_rtable_set_internal+0x94>)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00d      	b.n	8003b54 <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <csp_rtable_set_internal+0x94>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8003b3e:	e002      	b.n	8003b46 <csp_rtable_set_internal+0x62>
				i = i->next;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f8      	bne.n	8003b40 <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	79fa      	ldrb	r2, [r7, #7]
 8003b58:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	79ba      	ldrb	r2, [r7, #6]
 8003b5e:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	797a      	ldrb	r2, [r7, #5]
 8003b6a:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	24000290 	.word	0x24000290

08003b7c <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe f85c 	bl	8001c48 <csp_conn_enqueue_packet>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da0b      	bge.n	8003bae <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 8003b96:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <csp_udp_new_packet+0x74>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <csp_udp_new_packet+0x2a>
 8003b9e:	4915      	ldr	r1, [pc, #84]	@ (8003bf4 <csp_udp_new_packet+0x78>)
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7fe fbcd 	bl	8002340 <do_csp_debug>
		csp_buffer_free(packet);
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f7fd ffb2 	bl	8001b10 <csp_buffer_free>
		return;
 8003bac:	e01d      	b.n	8003bea <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d019      	beq.n	8003bea <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	1d39      	adds	r1, r7, #4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd fd07 	bl	80015d2 <csp_queue_enqueue>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d00c      	beq.n	8003be4 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <csp_udp_new_packet+0x74>)
 8003bcc:	785b      	ldrb	r3, [r3, #1]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <csp_udp_new_packet+0x5e>
 8003bd2:	4909      	ldr	r1, [pc, #36]	@ (8003bf8 <csp_udp_new_packet+0x7c>)
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	f7fe fbb3 	bl	8002340 <do_csp_debug>
			csp_close(conn);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fa3a 	bl	8002056 <csp_close>
			return;
 8003be2:	e002      	b.n	8003bea <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
	}

}
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	2400000c 	.word	0x2400000c
 8003bf4:	0800c20c 	.word	0x0800c20c
 8003bf8:	0800c22c 	.word	0x0800c22c

08003bfc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f103 0208 	add.w	r2, r3, #8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f04f 32ff 	mov.w	r2, #4294967295
 8003c14:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f103 0208 	add.w	r2, r3, #8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f103 0208 	add.w	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d103      	bne.n	8003c76 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	e00c      	b.n	8003c90 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3308      	adds	r3, #8
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e002      	b.n	8003c84 <vListInsert+0x2e>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d2f6      	bcs.n	8003c7e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6852      	ldr	r2, [r2, #4]
 8003ce8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d103      	bne.n	8003cfc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	1e5a      	subs	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003d26:	2301      	movs	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10d      	bne.n	8003d50 <xQueueGenericReset+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d38:	b672      	cpsid	i
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	b662      	cpsie	i
 8003d48:	60fb      	str	r3, [r7, #12]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003d4a:	bf00      	nop
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <xQueueGenericReset+0x30>

    if( ( pxQueue != NULL ) &&
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d05d      	beq.n	8003e12 <xQueueGenericReset+0xf6>
        ( pxQueue->uxLength >= 1U ) &&
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d059      	beq.n	8003e12 <xQueueGenericReset+0xf6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d66:	2100      	movs	r1, #0
 8003d68:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d000      	beq.n	8003d72 <xQueueGenericReset+0x56>
 8003d70:	2101      	movs	r1, #1
 8003d72:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d14c      	bne.n	8003e12 <xQueueGenericReset+0xf6>
    {
        taskENTER_CRITICAL();
 8003d78:	f002 ff1c 	bl	8006bb4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d84:	6939      	ldr	r1, [r7, #16]
 8003d86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	441a      	add	r2, r3
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	2200      	movs	r2, #0
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da8:	3b01      	subs	r3, #1
 8003daa:	6939      	ldr	r1, [r7, #16]
 8003dac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	441a      	add	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	22ff      	movs	r2, #255	@ 0xff
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	22ff      	movs	r2, #255	@ 0xff
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d114      	bne.n	8003df8 <xQueueGenericReset+0xdc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <xQueueGenericReset+0xf0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3310      	adds	r3, #16
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 fdd4 	bl	8005988 <xTaskRemoveFromEventList>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <xQueueGenericReset+0xf0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003de6:	4b17      	ldr	r3, [pc, #92]	@ (8003e44 <xQueueGenericReset+0x128>)
 8003de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	e009      	b.n	8003e0c <xQueueGenericReset+0xf0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fefd 	bl	8003bfc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	3324      	adds	r3, #36	@ 0x24
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fef8 	bl	8003bfc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003e0c:	f002 ff08 	bl	8006c20 <vPortExitCritical>
 8003e10:	e001      	b.n	8003e16 <xQueueGenericReset+0xfa>
    }
    else
    {
        xReturn = pdFAIL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10d      	bne.n	8003e38 <xQueueGenericReset+0x11c>
    __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	b672      	cpsid	i
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	b662      	cpsie	i
 8003e30:	60bb      	str	r3, [r7, #8]
}
 8003e32:	bf00      	nop
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <xQueueGenericReset+0x118>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8003e38:	697b      	ldr	r3, [r7, #20]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <xQueueGenericCreateStatic+0x34>
    __asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e64:	b672      	cpsid	i
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	b662      	cpsie	i
 8003e74:	623b      	str	r3, [r7, #32]
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <xQueueGenericCreateStatic+0x30>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d033      	beq.n	8003eea <xQueueGenericCreateStatic+0xa2>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d030      	beq.n	8003eea <xQueueGenericCreateStatic+0xa2>
            ( pxStaticQueue != NULL ) &&
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <xQueueGenericCreateStatic+0x4c>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02a      	beq.n	8003eea <xQueueGenericCreateStatic+0xa2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <xQueueGenericCreateStatic+0x58>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d124      	bne.n	8003eea <xQueueGenericCreateStatic+0xa2>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8003ea0:	2350      	movs	r3, #80	@ 0x50
 8003ea2:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2b50      	cmp	r3, #80	@ 0x50
 8003ea8:	d00d      	beq.n	8003ec6 <xQueueGenericCreateStatic+0x7e>
    __asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	b672      	cpsid	i
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	b662      	cpsie	i
 8003ebe:	61fb      	str	r3, [r7, #28]
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	e7fd      	b.n	8003ec2 <xQueueGenericCreateStatic+0x7a>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8003ec6:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ed4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f86c 	bl	8003fc0 <prvInitialiseNewQueue>
 8003ee8:	e010      	b.n	8003f0c <xQueueGenericCreateStatic+0xc4>
        }
        else
        {
            configASSERT( pxNewQueue );
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10d      	bne.n	8003f0c <xQueueGenericCreateStatic+0xc4>
    __asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef4:	b672      	cpsid	i
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	b662      	cpsie	i
 8003f04:	61bb      	str	r3, [r7, #24]
}
 8003f06:	bf00      	nop
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <xQueueGenericCreateStatic+0xc0>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );

        return pxNewQueue;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3728      	adds	r7, #40	@ 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b08a      	sub	sp, #40	@ 0x28
 8003f1a:	af02      	add	r7, sp, #8
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d032      	beq.n	8003f94 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003f2e:	2100      	movs	r1, #0
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	fba3 2302 	umull	r2, r3, r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d000      	beq.n	8003f3e <xQueueGenericCreate+0x28>
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d127      	bne.n	8003f94 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003f4c:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003f50:	d820      	bhi.n	8003f94 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	3350      	adds	r3, #80	@ 0x50
 8003f60:	4618      	mov	r0, r3
 8003f62:	f002 ff5b 	bl	8006e1c <pvPortMalloc>
 8003f66:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d023      	beq.n	8003fb6 <xQueueGenericCreate+0xa0>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	3350      	adds	r3, #80	@ 0x50
 8003f76:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f80:	79fa      	ldrb	r2, [r7, #7]
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f817 	bl	8003fc0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003f92:	e010      	b.n	8003fb6 <xQueueGenericCreate+0xa0>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10d      	bne.n	8003fb6 <xQueueGenericCreate+0xa0>
    __asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	b672      	cpsid	i
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	b662      	cpsie	i
 8003fae:	613b      	str	r3, [r7, #16]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <xQueueGenericCreate+0x9c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
    }
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	e002      	b.n	8003fe2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fee:	2101      	movs	r1, #1
 8003ff0:	69b8      	ldr	r0, [r7, #24]
 8003ff2:	f7ff fe93 	bl	8003d1c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08e      	sub	sp, #56	@ 0x38
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004016:	2300      	movs	r3, #0
 8004018:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800401e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004020:	2b00      	cmp	r3, #0
 8004022:	d10d      	bne.n	8004040 <xQueueGenericSend+0x38>
    __asm volatile
 8004024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004028:	b672      	cpsid	i
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	b662      	cpsie	i
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <xQueueGenericSend+0x34>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d103      	bne.n	800404e <xQueueGenericSend+0x46>
 8004046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <xQueueGenericSend+0x4a>
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <xQueueGenericSend+0x4c>
 8004052:	2300      	movs	r3, #0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10d      	bne.n	8004074 <xQueueGenericSend+0x6c>
    __asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405c:	b672      	cpsid	i
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	b662      	cpsie	i
 800406c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800406e:	bf00      	nop
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <xQueueGenericSend+0x68>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d103      	bne.n	8004082 <xQueueGenericSend+0x7a>
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407e:	2b01      	cmp	r3, #1
 8004080:	d101      	bne.n	8004086 <xQueueGenericSend+0x7e>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <xQueueGenericSend+0x80>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d10d      	bne.n	80040a8 <xQueueGenericSend+0xa0>
    __asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004090:	b672      	cpsid	i
 8004092:	f383 8811 	msr	BASEPRI, r3
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	f3bf 8f4f 	dsb	sy
 800409e:	b662      	cpsie	i
 80040a0:	623b      	str	r3, [r7, #32]
}
 80040a2:	bf00      	nop
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <xQueueGenericSend+0x9c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040a8:	f001 fe9e 	bl	8005de8 <xTaskGetSchedulerState>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <xQueueGenericSend+0xb0>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <xQueueGenericSend+0xb4>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <xQueueGenericSend+0xb6>
 80040bc:	2300      	movs	r3, #0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10d      	bne.n	80040de <xQueueGenericSend+0xd6>
    __asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	b672      	cpsid	i
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	b662      	cpsie	i
 80040d6:	61fb      	str	r3, [r7, #28]
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	e7fd      	b.n	80040da <xQueueGenericSend+0xd2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80040de:	f002 fd69 	bl	8006bb4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <xQueueGenericSend+0xec>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d129      	bne.n	8004148 <xQueueGenericSend+0x140>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fa:	f000 fc3e 	bl	800497a <prvCopyDataToQueue>
 80040fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004104:	2b00      	cmp	r3, #0
 8004106:	d010      	beq.n	800412a <xQueueGenericSend+0x122>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	3324      	adds	r3, #36	@ 0x24
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fc3b 	bl	8005988 <xTaskRemoveFromEventList>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d013      	beq.n	8004140 <xQueueGenericSend+0x138>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004118:	4b3f      	ldr	r3, [pc, #252]	@ (8004218 <xQueueGenericSend+0x210>)
 800411a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	e00a      	b.n	8004140 <xQueueGenericSend+0x138>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800412a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <xQueueGenericSend+0x138>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004130:	4b39      	ldr	r3, [pc, #228]	@ (8004218 <xQueueGenericSend+0x210>)
 8004132:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004140:	f002 fd6e 	bl	8006c20 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	e063      	b.n	8004210 <xQueueGenericSend+0x208>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800414e:	f002 fd67 	bl	8006c20 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8004152:	2300      	movs	r3, #0
 8004154:	e05c      	b.n	8004210 <xQueueGenericSend+0x208>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fced 	bl	8005b40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004166:	2301      	movs	r3, #1
 8004168:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800416a:	f002 fd59 	bl	8006c20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800416e:	f001 f8d9 	bl	8005324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004172:	f002 fd1f 	bl	8006bb4 <vPortEnterCritical>
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800417c:	b25b      	sxtb	r3, r3
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d103      	bne.n	800418c <xQueueGenericSend+0x184>
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004192:	b25b      	sxtb	r3, r3
 8004194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x19a>
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a2:	f002 fd3d 	bl	8006c20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041a6:	1d3a      	adds	r2, r7, #4
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f001 fcdc 	bl	8005b6c <xTaskCheckForTimeOut>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d124      	bne.n	8004204 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041bc:	f000 fcd5 	bl	8004b6a <prvIsQueueFull>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d018      	beq.n	80041f8 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	3310      	adds	r3, #16
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fb6a 	bl	80058a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80041d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041d6:	f000 fc60 	bl	8004a9a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80041da:	f001 f8b1 	bl	8005340 <xTaskResumeAll>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f47f af7c 	bne.w	80040de <xQueueGenericSend+0xd6>
                {
                    taskYIELD_WITHIN_API();
 80041e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <xQueueGenericSend+0x210>)
 80041e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041ec:	601a      	str	r2, [r3, #0]
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	e772      	b.n	80040de <xQueueGenericSend+0xd6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80041f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041fa:	f000 fc4e 	bl	8004a9a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80041fe:	f001 f89f 	bl	8005340 <xTaskResumeAll>
 8004202:	e76c      	b.n	80040de <xQueueGenericSend+0xd6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004206:	f000 fc48 	bl	8004a9a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800420a:	f001 f899 	bl	8005340 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800420e:	2300      	movs	r3, #0
        }
    }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3738      	adds	r7, #56	@ 0x38
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	e000ed04 	.word	0xe000ed04

0800421c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b092      	sub	sp, #72	@ 0x48
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 800422e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <xQueueGenericSendFromISR+0x34>
    __asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	b672      	cpsid	i
 800423a:	f383 8811 	msr	BASEPRI, r3
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	f3bf 8f4f 	dsb	sy
 8004246:	b662      	cpsie	i
 8004248:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <xQueueGenericSendFromISR+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d103      	bne.n	800425e <xQueueGenericSendFromISR+0x42>
 8004256:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <xQueueGenericSendFromISR+0x46>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSendFromISR+0x48>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <xQueueGenericSendFromISR+0x68>
    __asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	b672      	cpsid	i
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	b662      	cpsie	i
 800427c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800427e:	bf00      	nop
 8004280:	bf00      	nop
 8004282:	e7fd      	b.n	8004280 <xQueueGenericSendFromISR+0x64>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d103      	bne.n	8004292 <xQueueGenericSendFromISR+0x76>
 800428a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <xQueueGenericSendFromISR+0x7a>
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <xQueueGenericSendFromISR+0x7c>
 8004296:	2300      	movs	r3, #0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10d      	bne.n	80042b8 <xQueueGenericSendFromISR+0x9c>
    __asm volatile
 800429c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a0:	b672      	cpsid	i
 80042a2:	f383 8811 	msr	BASEPRI, r3
 80042a6:	f3bf 8f6f 	isb	sy
 80042aa:	f3bf 8f4f 	dsb	sy
 80042ae:	b662      	cpsie	i
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xQueueGenericSendFromISR+0x98>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042b8:	f002 fd6a 	bl	8006d90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80042bc:	f3ef 8211 	mrs	r2, BASEPRI
 80042c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c4:	b672      	cpsid	i
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	b662      	cpsie	i
 80042d4:	623a      	str	r2, [r7, #32]
 80042d6:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80042da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d302      	bcc.n	80042ee <xQueueGenericSendFromISR+0xd2>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d149      	bne.n	8004382 <xQueueGenericSendFromISR+0x166>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80042ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042f4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fc:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004304:	f000 fb39 	bl	800497a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004308:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800430c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004310:	d112      	bne.n	8004338 <xQueueGenericSendFromISR+0x11c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d030      	beq.n	800437c <xQueueGenericSendFromISR+0x160>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800431a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800431c:	3324      	adds	r3, #36	@ 0x24
 800431e:	4618      	mov	r0, r3
 8004320:	f001 fb32 	bl	8005988 <xTaskRemoveFromEventList>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d028      	beq.n	800437c <xQueueGenericSendFromISR+0x160>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d025      	beq.n	800437c <xQueueGenericSendFromISR+0x160>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e021      	b.n	800437c <xQueueGenericSendFromISR+0x160>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004338:	f001 f92e 	bl	8005598 <uxTaskGetNumberOfTasks>
 800433c:	6338      	str	r0, [r7, #48]	@ 0x30
 800433e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004344:	429a      	cmp	r2, r3
 8004346:	d919      	bls.n	800437c <xQueueGenericSendFromISR+0x160>
 8004348:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800434c:	2b7f      	cmp	r3, #127	@ 0x7f
 800434e:	d10d      	bne.n	800436c <xQueueGenericSendFromISR+0x150>
    __asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004354:	b672      	cpsid	i
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	b662      	cpsie	i
 8004364:	61bb      	str	r3, [r7, #24]
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	e7fd      	b.n	8004368 <xQueueGenericSendFromISR+0x14c>
 800436c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004370:	3301      	adds	r3, #1
 8004372:	b2db      	uxtb	r3, r3
 8004374:	b25a      	sxtb	r2, r3
 8004376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800437c:	2301      	movs	r3, #1
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8004380:	e001      	b.n	8004386 <xQueueGenericSendFromISR+0x16a>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004382:	2300      	movs	r3, #0
 8004384:	647b      	str	r3, [r7, #68]	@ 0x44
 8004386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004388:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004390:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8004392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004394:	4618      	mov	r0, r3
 8004396:	3748      	adds	r7, #72	@ 0x48
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	@ 0x30
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80043a8:	2300      	movs	r3, #0
 80043aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10d      	bne.n	80043d2 <xQueueReceive+0x36>
    __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	b672      	cpsid	i
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	b662      	cpsie	i
 80043ca:	623b      	str	r3, [r7, #32]
}
 80043cc:	bf00      	nop
 80043ce:	bf00      	nop
 80043d0:	e7fd      	b.n	80043ce <xQueueReceive+0x32>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <xQueueReceive+0x44>
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <xQueueReceive+0x48>
 80043e0:	2301      	movs	r3, #1
 80043e2:	e000      	b.n	80043e6 <xQueueReceive+0x4a>
 80043e4:	2300      	movs	r3, #0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10d      	bne.n	8004406 <xQueueReceive+0x6a>
    __asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	b672      	cpsid	i
 80043f0:	f383 8811 	msr	BASEPRI, r3
 80043f4:	f3bf 8f6f 	isb	sy
 80043f8:	f3bf 8f4f 	dsb	sy
 80043fc:	b662      	cpsie	i
 80043fe:	61fb      	str	r3, [r7, #28]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xQueueReceive+0x66>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004406:	f001 fcef 	bl	8005de8 <xTaskGetSchedulerState>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xQueueReceive+0x7a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <xQueueReceive+0x7e>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueReceive+0x80>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <xQueueReceive+0xa0>
    __asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	b672      	cpsid	i
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	b662      	cpsie	i
 8004434:	61bb      	str	r3, [r7, #24]
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <xQueueReceive+0x9c>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800443c:	f002 fbba 	bl	8006bb4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01f      	beq.n	800448c <xQueueReceive+0xf0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004450:	f000 fafd 	bl	8004a4e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004456:	1e5a      	subs	r2, r3, #1
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00f      	beq.n	8004484 <xQueueReceive+0xe8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004466:	3310      	adds	r3, #16
 8004468:	4618      	mov	r0, r3
 800446a:	f001 fa8d 	bl	8005988 <xTaskRemoveFromEventList>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <xQueueReceive+0xe8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004474:	4b3c      	ldr	r3, [pc, #240]	@ (8004568 <xQueueReceive+0x1cc>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004484:	f002 fbcc 	bl	8006c20 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8004488:	2301      	movs	r3, #1
 800448a:	e069      	b.n	8004560 <xQueueReceive+0x1c4>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <xQueueReceive+0xfe>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004492:	f002 fbc5 	bl	8006c20 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004496:	2300      	movs	r3, #0
 8004498:	e062      	b.n	8004560 <xQueueReceive+0x1c4>
                }
                else if( xEntryTimeSet == pdFALSE )
 800449a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <xQueueReceive+0x112>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80044a0:	f107 0310 	add.w	r3, r7, #16
 80044a4:	4618      	mov	r0, r3
 80044a6:	f001 fb4b 	bl	8005b40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80044aa:	2301      	movs	r3, #1
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80044ae:	f002 fbb7 	bl	8006c20 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80044b2:	f000 ff37 	bl	8005324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80044b6:	f002 fb7d 	bl	8006bb4 <vPortEnterCritical>
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	d103      	bne.n	80044d0 <xQueueReceive+0x134>
 80044c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d6:	b25b      	sxtb	r3, r3
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044dc:	d103      	bne.n	80044e6 <xQueueReceive+0x14a>
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e6:	f002 fb9b 	bl	8006c20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ea:	1d3a      	adds	r2, r7, #4
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fb3a 	bl	8005b6c <xTaskCheckForTimeOut>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d123      	bne.n	8004546 <xQueueReceive+0x1aa>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004500:	f000 fb1d 	bl	8004b3e <prvIsQueueEmpty>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <xQueueReceive+0x19e>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	3324      	adds	r3, #36	@ 0x24
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f001 f9c8 	bl	80058a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004518:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800451a:	f000 fabe 	bl	8004a9a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800451e:	f000 ff0f 	bl	8005340 <xTaskResumeAll>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d189      	bne.n	800443c <xQueueReceive+0xa0>
                {
                    taskYIELD_WITHIN_API();
 8004528:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <xQueueReceive+0x1cc>)
 800452a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	e780      	b.n	800443c <xQueueReceive+0xa0>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800453a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800453c:	f000 faad 	bl	8004a9a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004540:	f000 fefe 	bl	8005340 <xTaskResumeAll>
 8004544:	e77a      	b.n	800443c <xQueueReceive+0xa0>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004548:	f000 faa7 	bl	8004a9a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800454c:	f000 fef8 	bl	8005340 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004552:	f000 faf4 	bl	8004b3e <prvIsQueueEmpty>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	f43f af6f 	beq.w	800443c <xQueueReceive+0xa0>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800455e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3730      	adds	r7, #48	@ 0x30
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08c      	sub	sp, #48	@ 0x30
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004576:	2300      	movs	r3, #0
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800457e:	2300      	movs	r3, #0
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10d      	bne.n	80045a4 <xQueueSemaphoreTake+0x38>
    __asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458c:	b672      	cpsid	i
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	b662      	cpsie	i
 800459c:	61bb      	str	r3, [r7, #24]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <xQueueSemaphoreTake+0x34>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <xQueueSemaphoreTake+0x5c>
    __asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b0:	b672      	cpsid	i
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	b662      	cpsie	i
 80045c0:	617b      	str	r3, [r7, #20]
}
 80045c2:	bf00      	nop
 80045c4:	bf00      	nop
 80045c6:	e7fd      	b.n	80045c4 <xQueueSemaphoreTake+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045c8:	f001 fc0e 	bl	8005de8 <xTaskGetSchedulerState>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <xQueueSemaphoreTake+0x6c>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <xQueueSemaphoreTake+0x70>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <xQueueSemaphoreTake+0x72>
 80045dc:	2300      	movs	r3, #0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10d      	bne.n	80045fe <xQueueSemaphoreTake+0x92>
    __asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	b672      	cpsid	i
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	b662      	cpsie	i
 80045f6:	613b      	str	r3, [r7, #16]
}
 80045f8:	bf00      	nop
 80045fa:	bf00      	nop
 80045fc:	e7fd      	b.n	80045fa <xQueueSemaphoreTake+0x8e>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80045fe:	f002 fad9 	bl	8006bb4 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d024      	beq.n	8004658 <xQueueSemaphoreTake+0xec>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004614:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <xQueueSemaphoreTake+0xbc>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800461e:	f001 fe0f 	bl	8006240 <pvTaskIncrementMutexHeldCount>
 8004622:	4602      	mov	r2, r0
 8004624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004626:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00f      	beq.n	8004650 <xQueueSemaphoreTake+0xe4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	3310      	adds	r3, #16
 8004634:	4618      	mov	r0, r3
 8004636:	f001 f9a7 	bl	8005988 <xTaskRemoveFromEventList>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <xQueueSemaphoreTake+0xe4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004640:	4b4c      	ldr	r3, [pc, #304]	@ (8004774 <xQueueSemaphoreTake+0x208>)
 8004642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004650:	f002 fae6 	bl	8006c20 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	e089      	b.n	800476c <xQueueSemaphoreTake+0x200>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d103      	bne.n	8004666 <xQueueSemaphoreTake+0xfa>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800465e:	f002 fadf 	bl	8006c20 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004662:	2300      	movs	r3, #0
 8004664:	e082      	b.n	800476c <xQueueSemaphoreTake+0x200>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <xQueueSemaphoreTake+0x10e>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fa65 	bl	8005b40 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004676:	2301      	movs	r3, #1
 8004678:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800467a:	f002 fad1 	bl	8006c20 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800467e:	f000 fe51 	bl	8005324 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004682:	f002 fa97 	bl	8006bb4 <vPortEnterCritical>
 8004686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004688:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800468c:	b25b      	sxtb	r3, r3
 800468e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004692:	d103      	bne.n	800469c <xQueueSemaphoreTake+0x130>
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800469c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d103      	bne.n	80046b2 <xQueueSemaphoreTake+0x146>
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046b2:	f002 fab5 	bl	8006c20 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046b6:	463a      	mov	r2, r7
 80046b8:	f107 0308 	add.w	r3, r7, #8
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fa54 	bl	8005b6c <xTaskCheckForTimeOut>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d132      	bne.n	8004730 <xQueueSemaphoreTake+0x1c4>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046cc:	f000 fa37 	bl	8004b3e <prvIsQueueEmpty>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d026      	beq.n	8004724 <xQueueSemaphoreTake+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <xQueueSemaphoreTake+0x186>
                    {
                        taskENTER_CRITICAL();
 80046de:	f002 fa69 	bl	8006bb4 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 fb9c 	bl	8005e24 <xTaskPriorityInherit>
 80046ec:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80046ee:	f002 fa97 	bl	8006c20 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	3324      	adds	r3, #36	@ 0x24
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f8d4 	bl	80058a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004700:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004702:	f000 f9ca 	bl	8004a9a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004706:	f000 fe1b 	bl	8005340 <xTaskResumeAll>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	f47f af76 	bne.w	80045fe <xQueueSemaphoreTake+0x92>
                {
                    taskYIELD_WITHIN_API();
 8004712:	4b18      	ldr	r3, [pc, #96]	@ (8004774 <xQueueSemaphoreTake+0x208>)
 8004714:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	e76c      	b.n	80045fe <xQueueSemaphoreTake+0x92>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004726:	f000 f9b8 	bl	8004a9a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800472a:	f000 fe09 	bl	8005340 <xTaskResumeAll>
 800472e:	e766      	b.n	80045fe <xQueueSemaphoreTake+0x92>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004730:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004732:	f000 f9b2 	bl	8004a9a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004736:	f000 fe03 	bl	8005340 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800473a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800473c:	f000 f9ff 	bl	8004b3e <prvIsQueueEmpty>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	f43f af5b 	beq.w	80045fe <xQueueSemaphoreTake+0x92>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00d      	beq.n	800476a <xQueueSemaphoreTake+0x1fe>
                    {
                        taskENTER_CRITICAL();
 800474e:	f002 fa31 	bl	8006bb4 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004754:	f000 f8f9 	bl	800494a <prvGetDisinheritPriorityAfterTimeout>
 8004758:	61f8      	str	r0, [r7, #28]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	69f9      	ldr	r1, [r7, #28]
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fcab 	bl	80060bc <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8004766:	f002 fa5b 	bl	8006c20 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 800476a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 800476c:	4618      	mov	r0, r3
 800476e:	3730      	adds	r7, #48	@ 0x30
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b090      	sub	sp, #64	@ 0x40
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10d      	bne.n	80047aa <xQueueReceiveFromISR+0x32>
    __asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	b672      	cpsid	i
 8004794:	f383 8811 	msr	BASEPRI, r3
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	f3bf 8f4f 	dsb	sy
 80047a0:	b662      	cpsie	i
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <xQueueReceiveFromISR+0x2e>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d103      	bne.n	80047b8 <xQueueReceiveFromISR+0x40>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d101      	bne.n	80047bc <xQueueReceiveFromISR+0x44>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e000      	b.n	80047be <xQueueReceiveFromISR+0x46>
 80047bc:	2300      	movs	r3, #0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10d      	bne.n	80047de <xQueueReceiveFromISR+0x66>
    __asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c6:	b672      	cpsid	i
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	b662      	cpsie	i
 80047d6:	623b      	str	r3, [r7, #32]
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	e7fd      	b.n	80047da <xQueueReceiveFromISR+0x62>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047de:	f002 fad7 	bl	8006d90 <vPortValidateInterruptPriority>
    __asm volatile
 80047e2:	f3ef 8211 	mrs	r2, BASEPRI
 80047e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ea:	b672      	cpsid	i
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	b662      	cpsie	i
 80047fa:	61fa      	str	r2, [r7, #28]
 80047fc:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 80047fe:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004800:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004806:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	2b00      	cmp	r3, #0
 800480c:	d049      	beq.n	80048a2 <xQueueReceiveFromISR+0x12a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800480e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004814:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800481c:	f000 f917 	bl	8004a4e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	1e5a      	subs	r2, r3, #1
 8004824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004826:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004828:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d112      	bne.n	8004858 <xQueueReceiveFromISR+0xe0>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d030      	beq.n	800489c <xQueueReceiveFromISR+0x124>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	3310      	adds	r3, #16
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f8a2 	bl	8005988 <xTaskRemoveFromEventList>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d028      	beq.n	800489c <xQueueReceiveFromISR+0x124>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d025      	beq.n	800489c <xQueueReceiveFromISR+0x124>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e021      	b.n	800489c <xQueueReceiveFromISR+0x124>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004858:	f000 fe9e 	bl	8005598 <uxTaskGetNumberOfTasks>
 800485c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800485e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004864:	429a      	cmp	r2, r3
 8004866:	d919      	bls.n	800489c <xQueueReceiveFromISR+0x124>
 8004868:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800486c:	2b7f      	cmp	r3, #127	@ 0x7f
 800486e:	d10d      	bne.n	800488c <xQueueReceiveFromISR+0x114>
    __asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	b672      	cpsid	i
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	b662      	cpsie	i
 8004884:	617b      	str	r3, [r7, #20]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <xQueueReceiveFromISR+0x110>
 800488c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004890:	3301      	adds	r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	b25a      	sxtb	r2, r3
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800489c:	2301      	movs	r3, #1
 800489e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a0:	e001      	b.n	80048a6 <xQueueReceiveFromISR+0x12e>
        }
        else
        {
            xReturn = pdFAIL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a8:	613b      	str	r3, [r7, #16]
    __asm volatile
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f383 8811 	msr	BASEPRI, r3
}
 80048b0:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 80048b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3740      	adds	r7, #64	@ 0x40
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10d      	bne.n	80048e6 <uxQueueMessagesWaiting+0x2a>
    __asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ce:	b672      	cpsid	i
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	b662      	cpsie	i
 80048de:	60bb      	str	r3, [r7, #8]
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <uxQueueMessagesWaiting+0x26>

    taskENTER_CRITICAL();
 80048e6:	f002 f965 	bl	8006bb4 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80048f0:	f002 f996 	bl	8006c20 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10d      	bne.n	800492c <vQueueDelete+0x2e>
    __asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	b672      	cpsid	i
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	b662      	cpsie	i
 8004924:	60bb      	str	r3, [r7, #8]
}
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <vQueueDelete+0x2a>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f987 	bl	8004c40 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <vQueueDelete+0x44>
        {
            vPortFree( pxQueue );
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f002 fbab 	bl	8007098 <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f1c3 0307 	rsb	r3, r3, #7
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e001      	b.n	800496c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800496c:	68fb      	ldr	r3, [r7, #12]
    }
 800496e:	4618      	mov	r0, r3
 8004970:	3714      	adds	r7, #20
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10d      	bne.n	80049b4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d14d      	bne.n	8004a3c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fadd 	bl	8005f64 <xTaskPriorityDisinherit>
 80049aa:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
 80049b2:	e043      	b.n	8004a3c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d119      	bne.n	80049ee <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6858      	ldr	r0, [r3, #4]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	461a      	mov	r2, r3
 80049c4:	68b9      	ldr	r1, [r7, #8]
 80049c6:	f005 ffb0 	bl	800a92a <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d32b      	bcc.n	8004a3c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	e026      	b.n	8004a3c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68d8      	ldr	r0, [r3, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	461a      	mov	r2, r3
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	f005 ff96 	bl	800a92a <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a06:	425b      	negs	r3, r3
 8004a08:	441a      	add	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d207      	bcs.n	8004a2a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	425b      	negs	r3, r3
 8004a24:	441a      	add	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d105      	bne.n	8004a3c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d002      	beq.n	8004a3c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004a44:	697b      	ldr	r3, [r7, #20]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d018      	beq.n	8004a92 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d303      	bcc.n	8004a82 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68d9      	ldr	r1, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6838      	ldr	r0, [r7, #0]
 8004a8e:	f005 ff4c 	bl	800a92a <memcpy>
    }
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004aa2:	f002 f887 	bl	8006bb4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aac:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004aae:	e011      	b.n	8004ad4 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d012      	beq.n	8004ade <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3324      	adds	r3, #36	@ 0x24
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 ff63 	bl	8005988 <xTaskRemoveFromEventList>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004ac8:	f001 f8b4 	bl	8005c34 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	dce9      	bgt.n	8004ab0 <prvUnlockQueue+0x16>
 8004adc:	e000      	b.n	8004ae0 <prvUnlockQueue+0x46>
                    break;
 8004ade:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	22ff      	movs	r2, #255	@ 0xff
 8004ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004ae8:	f002 f89a 	bl	8006c20 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004aec:	f002 f862 	bl	8006bb4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004af6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004af8:	e011      	b.n	8004b1e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3310      	adds	r3, #16
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 ff3e 	bl	8005988 <xTaskRemoveFromEventList>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004b12:	f001 f88f 	bl	8005c34 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004b16:	7bbb      	ldrb	r3, [r7, #14]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dce9      	bgt.n	8004afa <prvUnlockQueue+0x60>
 8004b26:	e000      	b.n	8004b2a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004b28:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	22ff      	movs	r2, #255	@ 0xff
 8004b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004b32:	f002 f875 	bl	8006c20 <vPortExitCritical>
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b46:	f002 f835 	bl	8006bb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d102      	bne.n	8004b58 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	e001      	b.n	8004b5c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b5c:	f002 f860 	bl	8006c20 <vPortExitCritical>

    return xReturn;
 8004b60:	68fb      	ldr	r3, [r7, #12]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b72:	f002 f81f 	bl	8006bb4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d102      	bne.n	8004b88 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e001      	b.n	8004b8c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b8c:	f002 f848 	bl	8006c20 <vPortExitCritical>

    return xReturn;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <vQueueAddToRegistry+0x30>
    __asm volatile
 8004bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb4:	b672      	cpsid	i
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	b662      	cpsie	i
 8004bc4:	60fb      	str	r3, [r7, #12]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <vQueueAddToRegistry+0x2c>

        if( pcQueueName != NULL )
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d024      	beq.n	8004c1c <vQueueAddToRegistry+0x80>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e01e      	b.n	8004c16 <vQueueAddToRegistry+0x7a>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004bd8:	4a18      	ldr	r2, [pc, #96]	@ (8004c3c <vQueueAddToRegistry+0xa0>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d105      	bne.n	8004bf4 <vQueueAddToRegistry+0x58>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4a13      	ldr	r2, [pc, #76]	@ (8004c3c <vQueueAddToRegistry+0xa0>)
 8004bee:	4413      	add	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
                    break;
 8004bf2:	e013      	b.n	8004c1c <vQueueAddToRegistry+0x80>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <vQueueAddToRegistry+0x74>
 8004bfa:	4a10      	ldr	r2, [pc, #64]	@ (8004c3c <vQueueAddToRegistry+0xa0>)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <vQueueAddToRegistry+0x74>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c3c <vQueueAddToRegistry+0xa0>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	3301      	adds	r3, #1
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b07      	cmp	r3, #7
 8004c1a:	d9dd      	bls.n	8004bd8 <vQueueAddToRegistry+0x3c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <vQueueAddToRegistry+0x92>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	24000294 	.word	0x24000294

08004c40 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10d      	bne.n	8004c6a <vQueueUnregisterQueue+0x2a>
    __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c52:	b672      	cpsid	i
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	b662      	cpsie	i
 8004c62:	60bb      	str	r3, [r7, #8]
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	e7fd      	b.n	8004c66 <vQueueUnregisterQueue+0x26>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e016      	b.n	8004c9e <vQueueUnregisterQueue+0x5e>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004c70:	4a10      	ldr	r2, [pc, #64]	@ (8004cb4 <vQueueUnregisterQueue+0x74>)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	4413      	add	r3, r2
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d10b      	bne.n	8004c98 <vQueueUnregisterQueue+0x58>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8004c80:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb4 <vQueueUnregisterQueue+0x74>)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2100      	movs	r1, #0
 8004c86:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb4 <vQueueUnregisterQueue+0x74>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	4413      	add	r3, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	605a      	str	r2, [r3, #4]
                break;
 8004c96:	e006      	b.n	8004ca6 <vQueueUnregisterQueue+0x66>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b07      	cmp	r3, #7
 8004ca2:	d9e5      	bls.n	8004c70 <vQueueUnregisterQueue+0x30>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	24000294 	.word	0x24000294

08004cb8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004cc8:	f001 ff74 	bl	8006bb4 <vPortEnterCritical>
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cd2:	b25b      	sxtb	r3, r3
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d103      	bne.n	8004ce2 <vQueueWaitForMessageRestricted+0x2a>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d103      	bne.n	8004cf8 <vQueueWaitForMessageRestricted+0x40>
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cf8:	f001 ff92 	bl	8006c20 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3324      	adds	r3, #36	@ 0x24
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fdf3 	bl	80058f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004d12:	6978      	ldr	r0, [r7, #20]
 8004d14:	f7ff fec1 	bl	8004a9a <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8004d18:	bf00      	nop
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08e      	sub	sp, #56	@ 0x38
 8004d24:	af04      	add	r7, sp, #16
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8004d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10d      	bne.n	8004d50 <prvCreateStaticTask+0x30>
    __asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	b672      	cpsid	i
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	b662      	cpsie	i
 8004d48:	623b      	str	r3, [r7, #32]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <prvCreateStaticTask+0x2c>
        configASSERT( pxTaskBuffer != NULL );
 8004d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d10d      	bne.n	8004d72 <prvCreateStaticTask+0x52>
    __asm volatile
 8004d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5a:	b672      	cpsid	i
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	b662      	cpsie	i
 8004d6a:	61fb      	str	r3, [r7, #28]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <prvCreateStaticTask+0x4e>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8004d72:	235c      	movs	r3, #92	@ 0x5c
 8004d74:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b5c      	cmp	r3, #92	@ 0x5c
 8004d7a:	d00d      	beq.n	8004d98 <prvCreateStaticTask+0x78>
    __asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	b672      	cpsid	i
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	b662      	cpsie	i
 8004d90:	61bb      	str	r3, [r7, #24]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <prvCreateStaticTask+0x74>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8004d98:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01f      	beq.n	8004de0 <prvCreateStaticTask+0xc0>
 8004da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01c      	beq.n	8004de0 <prvCreateStaticTask+0xc0>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8004da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004daa:	225c      	movs	r2, #92	@ 0x5c
 8004dac:	2100      	movs	r1, #0
 8004dae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004db0:	f005 fd20 	bl	800a7f4 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	9303      	str	r3, [sp, #12]
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f88f 	bl	8004efc <prvInitialiseNewTask>
 8004dde:	e001      	b.n	8004de4 <prvCreateStaticTask+0xc4>
        }
        else
        {
            pxNewTCB = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004de6:	4618      	mov	r0, r3
 8004de8:	3728      	adds	r7, #40	@ 0x28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b08a      	sub	sp, #40	@ 0x28
 8004df2:	af04      	add	r7, sp, #16
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8004e00:	f107 0310 	add.w	r3, r7, #16
 8004e04:	9303      	str	r3, [sp, #12]
 8004e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e08:	9302      	str	r3, [sp, #8]
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ff81 	bl	8004d20 <prvCreateStaticTask>
 8004e1e:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d002      	beq.n	8004e2c <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004e26:	6978      	ldr	r0, [r7, #20]
 8004e28:	f000 f8fc 	bl	8005024 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 8004e2c:	693b      	ldr	r3, [r7, #16]
    }
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b08a      	sub	sp, #40	@ 0x28
 8004e3a:	af04      	add	r7, sp, #16
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f001 ffe7 	bl	8006e1c <pvPortMalloc>
 8004e4e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d013      	beq.n	8004e7e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8004e56:	205c      	movs	r0, #92	@ 0x5c
 8004e58:	f001 ffe0 	bl	8006e1c <pvPortMalloc>
 8004e5c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004e64:	225c      	movs	r2, #92	@ 0x5c
 8004e66:	2100      	movs	r1, #0
 8004e68:	6978      	ldr	r0, [r7, #20]
 8004e6a:	f005 fcc3 	bl	800a7f4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e74:	e005      	b.n	8004e82 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004e76:	6938      	ldr	r0, [r7, #16]
 8004e78:	f002 f90e 	bl	8007098 <vPortFree>
 8004e7c:	e001      	b.n	8004e82 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d011      	beq.n	8004eac <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e90:	2300      	movs	r3, #0
 8004e92:	9303      	str	r3, [sp, #12]
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	9302      	str	r3, [sp, #8]
 8004e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 f828 	bl	8004efc <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004eac:	697b      	ldr	r3, [r7, #20]
    }
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b088      	sub	sp, #32
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff ffaf 	bl	8004e36 <prvCreateTask>
 8004ed8:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d005      	beq.n	8004eec <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004ee0:	6938      	ldr	r0, [r7, #16]
 8004ee2:	f000 f89f 	bl	8005024 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e002      	b.n	8004ef2 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004ef2:	697b      	ldr	r3, [r7, #20]
    }
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3718      	adds	r7, #24
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	461a      	mov	r2, r3
 8004f14:	21a5      	movs	r1, #165	@ 0xa5
 8004f16:	f005 fc6d 	bl	800a7f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004f24:	440b      	add	r3, r1
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f023 0307 	bic.w	r3, r3, #7
 8004f32:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00d      	beq.n	8004f5a <prvInitialiseNewTask+0x5e>
    __asm volatile
 8004f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f42:	b672      	cpsid	i
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	b662      	cpsie	i
 8004f52:	617b      	str	r3, [r7, #20]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <prvInitialiseNewTask+0x5a>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01e      	beq.n	8004f9e <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
 8004f64:	e012      	b.n	8004f8c <prvInitialiseNewTask+0x90>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	7819      	ldrb	r1, [r3, #0]
 8004f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	3334      	adds	r3, #52	@ 0x34
 8004f76:	460a      	mov	r2, r1
 8004f78:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d006      	beq.n	8004f94 <prvInitialiseNewTask+0x98>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	2b0f      	cmp	r3, #15
 8004f90:	d9e9      	bls.n	8004f66 <prvInitialiseNewTask+0x6a>
 8004f92:	e000      	b.n	8004f96 <prvInitialiseNewTask+0x9a>
            {
                break;
 8004f94:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	2b06      	cmp	r3, #6
 8004fa2:	d90d      	bls.n	8004fc0 <prvInitialiseNewTask+0xc4>
    __asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa8:	b672      	cpsid	i
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	b662      	cpsie	i
 8004fb8:	613b      	str	r3, [r7, #16]
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	2b06      	cmp	r3, #6
 8004fc4:	d901      	bls.n	8004fca <prvInitialiseNewTask+0xce>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fc6:	2306      	movs	r3, #6
 8004fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fce:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fe2e 	bl	8003c3c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe2:	3318      	adds	r3, #24
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe fe29 	bl	8003c3c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff2:	f1c3 0207 	rsb	r2, r3, #7
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68f9      	ldr	r1, [r7, #12]
 8005004:	69b8      	ldr	r0, [r7, #24]
 8005006:	f001 fc73 	bl	80068f0 <pxPortInitialiseStack>
 800500a:	4602      	mov	r2, r0
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <prvInitialiseNewTask+0x120>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800501c:	bf00      	nop
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800502c:	f001 fdc2 	bl	8006bb4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8005030:	4b41      	ldr	r3, [pc, #260]	@ (8005138 <prvAddNewTaskToReadyList+0x114>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	4a40      	ldr	r2, [pc, #256]	@ (8005138 <prvAddNewTaskToReadyList+0x114>)
 8005038:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800503a:	4b40      	ldr	r3, [pc, #256]	@ (800513c <prvAddNewTaskToReadyList+0x118>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8005042:	4a3e      	ldr	r2, [pc, #248]	@ (800513c <prvAddNewTaskToReadyList+0x118>)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005048:	4b3b      	ldr	r3, [pc, #236]	@ (8005138 <prvAddNewTaskToReadyList+0x114>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d110      	bne.n	8005072 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8005050:	f000 fe14 	bl	8005c7c <prvInitialiseTaskLists>
 8005054:	e00d      	b.n	8005072 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8005056:	4b3a      	ldr	r3, [pc, #232]	@ (8005140 <prvAddNewTaskToReadyList+0x11c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800505e:	4b37      	ldr	r3, [pc, #220]	@ (800513c <prvAddNewTaskToReadyList+0x118>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	429a      	cmp	r2, r3
 800506a:	d802      	bhi.n	8005072 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 800506c:	4a33      	ldr	r2, [pc, #204]	@ (800513c <prvAddNewTaskToReadyList+0x118>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8005072:	4b34      	ldr	r3, [pc, #208]	@ (8005144 <prvAddNewTaskToReadyList+0x120>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3301      	adds	r3, #1
 8005078:	4a32      	ldr	r2, [pc, #200]	@ (8005144 <prvAddNewTaskToReadyList+0x120>)
 800507a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800507c:	4b31      	ldr	r3, [pc, #196]	@ (8005144 <prvAddNewTaskToReadyList+0x120>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005088:	2201      	movs	r2, #1
 800508a:	409a      	lsls	r2, r3
 800508c:	4b2e      	ldr	r3, [pc, #184]	@ (8005148 <prvAddNewTaskToReadyList+0x124>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4313      	orrs	r3, r2
 8005092:	4a2d      	ldr	r2, [pc, #180]	@ (8005148 <prvAddNewTaskToReadyList+0x124>)
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800509a:	492c      	ldr	r1, [pc, #176]	@ (800514c <prvAddNewTaskToReadyList+0x128>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3304      	adds	r3, #4
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	3204      	adds	r2, #4
 80050c2:	605a      	str	r2, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	1d1a      	adds	r2, r3, #4
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4a1c      	ldr	r2, [pc, #112]	@ (800514c <prvAddNewTaskToReadyList+0x128>)
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	615a      	str	r2, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e4:	4919      	ldr	r1, [pc, #100]	@ (800514c <prvAddNewTaskToReadyList+0x128>)
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80050f6:	1c59      	adds	r1, r3, #1
 80050f8:	4814      	ldr	r0, [pc, #80]	@ (800514c <prvAddNewTaskToReadyList+0x128>)
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4403      	add	r3, r0
 8005104:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8005106:	f001 fd8b 	bl	8006c20 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <prvAddNewTaskToReadyList+0x11c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00e      	beq.n	8005130 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8005112:	4b0a      	ldr	r3, [pc, #40]	@ (800513c <prvAddNewTaskToReadyList+0x118>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	429a      	cmp	r2, r3
 800511e:	d207      	bcs.n	8005130 <prvAddNewTaskToReadyList+0x10c>
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <prvAddNewTaskToReadyList+0x12c>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005130:	bf00      	nop
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	240003c0 	.word	0x240003c0
 800513c:	240002d4 	.word	0x240002d4
 8005140:	240003cc 	.word	0x240003cc
 8005144:	240003dc 	.word	0x240003dc
 8005148:	240003c8 	.word	0x240003c8
 800514c:	240002d8 	.word	0x240002d8
 8005150:	e000ed04 	.word	0xe000ed04

08005154 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01a      	beq.n	800519c <vTaskDelay+0x48>
        {
            vTaskSuspendAll();
 8005166:	f000 f8dd 	bl	8005324 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800516a:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <vTaskDelay+0x68>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d00d      	beq.n	800518e <vTaskDelay+0x3a>
    __asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005176:	b672      	cpsid	i
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	b662      	cpsie	i
 8005186:	60bb      	str	r3, [r7, #8]
}
 8005188:	bf00      	nop
 800518a:	bf00      	nop
 800518c:	e7fd      	b.n	800518a <vTaskDelay+0x36>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800518e:	2100      	movs	r1, #0
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f001 f86d 	bl	8006270 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005196:	f000 f8d3 	bl	8005340 <xTaskResumeAll>
 800519a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <vTaskDelay+0x5e>
        {
            taskYIELD_WITHIN_API();
 80051a2:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <vTaskDelay+0x6c>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	240003e8 	.word	0x240003e8
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b090      	sub	sp, #64	@ 0x40
 80051c8:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80051ca:	2301      	movs	r3, #1
 80051cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d6:	e013      	b.n	8005200 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80051d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005288 <prvCreateIdleTasks+0xc4>)
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	4413      	add	r3, r2
 80051de:	7819      	ldrb	r1, [r3, #0]
 80051e0:	f107 0210 	add.w	r2, r7, #16
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	4413      	add	r3, r2
 80051e8:	460a      	mov	r2, r1
 80051ea:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80051ec:	f107 0210 	add.w	r2, r7, #16
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	4413      	add	r3, r2
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d006      	beq.n	8005208 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	3301      	adds	r3, #1
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	2b0f      	cmp	r3, #15
 8005204:	dde8      	ble.n	80051d8 <prvCreateIdleTasks+0x14>
 8005206:	e000      	b.n	800520a <prvCreateIdleTasks+0x46>
        {
            break;
 8005208:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800520a:	2300      	movs	r3, #0
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520e:	e031      	b.n	8005274 <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8005210:	4b1e      	ldr	r3, [pc, #120]	@ (800528c <prvCreateIdleTasks+0xc8>)
 8005212:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 800521c:	1d3a      	adds	r2, r7, #4
 800521e:	f107 0108 	add.w	r1, r7, #8
 8005222:	f107 030c 	add.w	r3, r7, #12
 8005226:	4618      	mov	r0, r3
 8005228:	f001 f878 	bl	800631c <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	f107 0110 	add.w	r1, r7, #16
 8005236:	9202      	str	r2, [sp, #8]
 8005238:	9301      	str	r3, [sp, #4]
 800523a:	2300      	movs	r3, #0
 800523c:	9300      	str	r3, [sp, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	4602      	mov	r2, r0
 8005242:	6a38      	ldr	r0, [r7, #32]
 8005244:	f7ff fdd3 	bl	8004dee <xTaskCreateStatic>
 8005248:	4602      	mov	r2, r0
 800524a:	4911      	ldr	r1, [pc, #68]	@ (8005290 <prvCreateIdleTasks+0xcc>)
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8005252:	4a0f      	ldr	r2, [pc, #60]	@ (8005290 <prvCreateIdleTasks+0xcc>)
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 800525e:	2301      	movs	r3, #1
 8005260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005262:	e001      	b.n	8005268 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 8005264:	2300      	movs	r3, #0
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8005268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d006      	beq.n	800527c <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800526e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005270:	3301      	adds	r3, #1
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	ddca      	ble.n	8005210 <prvCreateIdleTasks+0x4c>
 800527a:	e000      	b.n	800527e <prvCreateIdleTasks+0xba>
        {
            break;
 800527c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005280:	4618      	mov	r0, r3
 8005282:	3730      	adds	r7, #48	@ 0x30
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	0800c254 	.word	0x0800c254
 800528c:	08005c4d 	.word	0x08005c4d
 8005290:	240003e4 	.word	0x240003e4

08005294 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800529a:	f7ff ff93 	bl	80051c4 <prvCreateIdleTasks>
 800529e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d102      	bne.n	80052ac <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80052a6:	f001 f86d 	bl	8006384 <xTimerCreateTimerTask>
 80052aa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d118      	bne.n	80052e4 <vTaskStartScheduler+0x50>
    __asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	b672      	cpsid	i
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	b662      	cpsie	i
 80052c6:	60bb      	str	r3, [r7, #8]
}
 80052c8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80052ca:	4b12      	ldr	r3, [pc, #72]	@ (8005314 <vTaskStartScheduler+0x80>)
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80052d2:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <vTaskStartScheduler+0x84>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052d8:	4b10      	ldr	r3, [pc, #64]	@ (800531c <vTaskStartScheduler+0x88>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80052de:	f001 fb99 	bl	8006a14 <xPortStartScheduler>
 80052e2:	e011      	b.n	8005308 <vTaskStartScheduler+0x74>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d10d      	bne.n	8005308 <vTaskStartScheduler+0x74>
    __asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f0:	b672      	cpsid	i
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	b662      	cpsie	i
 8005300:	607b      	str	r3, [r7, #4]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <vTaskStartScheduler+0x70>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005308:	4b05      	ldr	r3, [pc, #20]	@ (8005320 <vTaskStartScheduler+0x8c>)
 800530a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	240003e0 	.word	0x240003e0
 8005318:	240003cc 	.word	0x240003cc
 800531c:	240003c4 	.word	0x240003c4
 8005320:	0800c2d8 	.word	0x0800c2d8

08005324 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8005328:	4b04      	ldr	r3, [pc, #16]	@ (800533c <vTaskSuspendAll+0x18>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3301      	adds	r3, #1
 800532e:	4a03      	ldr	r2, [pc, #12]	@ (800533c <vTaskSuspendAll+0x18>)
 8005330:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8005332:	bf00      	nop
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	240003e8 	.word	0x240003e8

08005340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800534a:	2300      	movs	r3, #0
 800534c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800534e:	f001 fc31 	bl	8006bb4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8005352:	2300      	movs	r3, #0
 8005354:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8005356:	4b76      	ldr	r3, [pc, #472]	@ (8005530 <xTaskResumeAll+0x1f0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10d      	bne.n	800537a <xTaskResumeAll+0x3a>
    __asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	b672      	cpsid	i
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	b662      	cpsie	i
 8005372:	603b      	str	r3, [r7, #0]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xTaskResumeAll+0x36>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800537a:	4b6d      	ldr	r3, [pc, #436]	@ (8005530 <xTaskResumeAll+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	4a6b      	ldr	r2, [pc, #428]	@ (8005530 <xTaskResumeAll+0x1f0>)
 8005382:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005384:	4b6a      	ldr	r3, [pc, #424]	@ (8005530 <xTaskResumeAll+0x1f0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 80ca 	bne.w	8005522 <xTaskResumeAll+0x1e2>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800538e:	4b69      	ldr	r3, [pc, #420]	@ (8005534 <xTaskResumeAll+0x1f4>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80c5 	beq.w	8005522 <xTaskResumeAll+0x1e2>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005398:	e08e      	b.n	80054b8 <xTaskResumeAll+0x178>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800539a:	4b67      	ldr	r3, [pc, #412]	@ (8005538 <xTaskResumeAll+0x1f8>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	6a12      	ldr	r2, [r2, #32]
 80053b0:	609a      	str	r2, [r3, #8]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	69d2      	ldr	r2, [r2, #28]
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	3318      	adds	r3, #24
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d103      	bne.n	80053d0 <xTaskResumeAll+0x90>
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	6a1a      	ldr	r2, [r3, #32]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2200      	movs	r2, #0
 80053d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	1e5a      	subs	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	68d2      	ldr	r2, [r2, #12]
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	69fa      	ldr	r2, [r7, #28]
 80053f6:	6892      	ldr	r2, [r2, #8]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3304      	adds	r3, #4
 8005402:	429a      	cmp	r2, r3
 8005404:	d103      	bne.n	800540e <xTaskResumeAll+0xce>
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	2200      	movs	r2, #0
 8005412:	615a      	str	r2, [r3, #20]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	1e5a      	subs	r2, r3, #1
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	2201      	movs	r2, #1
 8005424:	409a      	lsls	r2, r3
 8005426:	4b45      	ldr	r3, [pc, #276]	@ (800553c <xTaskResumeAll+0x1fc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4313      	orrs	r3, r2
 800542c:	4a43      	ldr	r2, [pc, #268]	@ (800553c <xTaskResumeAll+0x1fc>)
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005434:	4942      	ldr	r1, [pc, #264]	@ (8005540 <xTaskResumeAll+0x200>)
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	3304      	adds	r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	607b      	str	r3, [r7, #4]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	60da      	str	r2, [r3, #12]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	3204      	adds	r2, #4
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	1d1a      	adds	r2, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800546a:	4613      	mov	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4a33      	ldr	r2, [pc, #204]	@ (8005540 <xTaskResumeAll+0x200>)
 8005474:	441a      	add	r2, r3
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	615a      	str	r2, [r3, #20]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547e:	4930      	ldr	r1, [pc, #192]	@ (8005540 <xTaskResumeAll+0x200>)
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	482b      	ldr	r0, [pc, #172]	@ (8005540 <xTaskResumeAll+0x200>)
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4403      	add	r3, r0
 800549e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a4:	4b27      	ldr	r3, [pc, #156]	@ (8005544 <xTaskResumeAll+0x204>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d904      	bls.n	80054b8 <xTaskResumeAll+0x178>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80054ae:	4a26      	ldr	r2, [pc, #152]	@ (8005548 <xTaskResumeAll+0x208>)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	2101      	movs	r1, #1
 80054b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005538 <xTaskResumeAll+0x1f8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f47f af6c 	bne.w	800539a <xTaskResumeAll+0x5a>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <xTaskResumeAll+0x18c>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80054c8:	f000 fc72 	bl	8005db0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054cc:	4b1f      	ldr	r3, [pc, #124]	@ (800554c <xTaskResumeAll+0x20c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d012      	beq.n	80054fe <xTaskResumeAll+0x1be>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80054d8:	f000 f86a 	bl	80055b0 <xTaskIncrementTick>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <xTaskResumeAll+0x1ac>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80054e2:	4a19      	ldr	r2, [pc, #100]	@ (8005548 <xTaskResumeAll+0x208>)
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2101      	movs	r1, #1
 80054e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1ef      	bne.n	80054d8 <xTaskResumeAll+0x198>

                            xPendedTicks = 0;
 80054f8:	4b14      	ldr	r3, [pc, #80]	@ (800554c <xTaskResumeAll+0x20c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80054fe:	4a12      	ldr	r2, [pc, #72]	@ (8005548 <xTaskResumeAll+0x208>)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <xTaskResumeAll+0x1e2>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800550a:	2301      	movs	r3, #1
 800550c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <xTaskResumeAll+0x204>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4b0f      	ldr	r3, [pc, #60]	@ (8005550 <xTaskResumeAll+0x210>)
 8005514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005518:	601a      	str	r2, [r3, #0]
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005522:	f001 fb7d 	bl	8006c20 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8005526:	69bb      	ldr	r3, [r7, #24]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3720      	adds	r7, #32
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	240003e8 	.word	0x240003e8
 8005534:	240003c0 	.word	0x240003c0
 8005538:	24000394 	.word	0x24000394
 800553c:	240003c8 	.word	0x240003c8
 8005540:	240002d8 	.word	0x240002d8
 8005544:	240002d4 	.word	0x240002d4
 8005548:	240003d4 	.word	0x240003d4
 800554c:	240003d0 	.word	0x240003d0
 8005550:	e000ed04 	.word	0xe000ed04

08005554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800555a:	4b05      	ldr	r3, [pc, #20]	@ (8005570 <xTaskGetTickCount+0x1c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8005560:	687b      	ldr	r3, [r7, #4]
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	240003c4 	.word	0x240003c4

08005574 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800557a:	f001 fc09 	bl	8006d90 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8005582:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <xTaskGetTickCountFromISR+0x20>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 8005588:	683b      	ldr	r3, [r7, #0]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	240003c4 	.word	0x240003c4

08005598 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 800559c:	4b03      	ldr	r3, [pc, #12]	@ (80055ac <uxTaskGetNumberOfTasks+0x14>)
 800559e:	681b      	ldr	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	240003c0 	.word	0x240003c0

080055b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	@ 0x28
 80055b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80055b6:	2300      	movs	r3, #0
 80055b8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80055ba:	4b80      	ldr	r3, [pc, #512]	@ (80057bc <xTaskIncrementTick+0x20c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f040 80f1 	bne.w	80057a6 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055c4:	4b7e      	ldr	r3, [pc, #504]	@ (80057c0 <xTaskIncrementTick+0x210>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80055cc:	4a7c      	ldr	r2, [pc, #496]	@ (80057c0 <xTaskIncrementTick+0x210>)
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d123      	bne.n	8005620 <xTaskIncrementTick+0x70>
        {
            taskSWITCH_DELAYED_LISTS();
 80055d8:	4b7a      	ldr	r3, [pc, #488]	@ (80057c4 <xTaskIncrementTick+0x214>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00d      	beq.n	80055fe <xTaskIncrementTick+0x4e>
    __asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e6:	b672      	cpsid	i
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	b662      	cpsie	i
 80055f6:	607b      	str	r3, [r7, #4]
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	e7fd      	b.n	80055fa <xTaskIncrementTick+0x4a>
 80055fe:	4b71      	ldr	r3, [pc, #452]	@ (80057c4 <xTaskIncrementTick+0x214>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	4b70      	ldr	r3, [pc, #448]	@ (80057c8 <xTaskIncrementTick+0x218>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6e      	ldr	r2, [pc, #440]	@ (80057c4 <xTaskIncrementTick+0x214>)
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	4a6e      	ldr	r2, [pc, #440]	@ (80057c8 <xTaskIncrementTick+0x218>)
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	4b6e      	ldr	r3, [pc, #440]	@ (80057cc <xTaskIncrementTick+0x21c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3301      	adds	r3, #1
 8005618:	4a6c      	ldr	r2, [pc, #432]	@ (80057cc <xTaskIncrementTick+0x21c>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	f000 fbc8 	bl	8005db0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005620:	4b6b      	ldr	r3, [pc, #428]	@ (80057d0 <xTaskIncrementTick+0x220>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6a3a      	ldr	r2, [r7, #32]
 8005626:	429a      	cmp	r2, r3
 8005628:	f0c0 80a8 	bcc.w	800577c <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800562c:	4b65      	ldr	r3, [pc, #404]	@ (80057c4 <xTaskIncrementTick+0x214>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <xTaskIncrementTick+0x90>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005636:	4b66      	ldr	r3, [pc, #408]	@ (80057d0 <xTaskIncrementTick+0x220>)
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	601a      	str	r2, [r3, #0]
                    break;
 800563e:	e09d      	b.n	800577c <xTaskIncrementTick+0x1cc>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005640:	4b60      	ldr	r3, [pc, #384]	@ (80057c4 <xTaskIncrementTick+0x214>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	429a      	cmp	r2, r3
 8005656:	d203      	bcs.n	8005660 <xTaskIncrementTick+0xb0>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005658:	4a5d      	ldr	r2, [pc, #372]	@ (80057d0 <xTaskIncrementTick+0x220>)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6013      	str	r3, [r2, #0]
                        break;
 800565e:	e08d      	b.n	800577c <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	613b      	str	r3, [r7, #16]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	68d2      	ldr	r2, [r2, #12]
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	6892      	ldr	r2, [r2, #8]
 8005678:	605a      	str	r2, [r3, #4]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	3304      	adds	r3, #4
 8005682:	429a      	cmp	r2, r3
 8005684:	d103      	bne.n	800568e <xTaskIncrementTick+0xde>
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01e      	beq.n	80056e4 <xTaskIncrementTick+0x134>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	6a12      	ldr	r2, [r2, #32]
 80056b4:	609a      	str	r2, [r3, #8]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	69d2      	ldr	r2, [r2, #28]
 80056be:	605a      	str	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	3318      	adds	r3, #24
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d103      	bne.n	80056d4 <xTaskIncrementTick+0x124>
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	605a      	str	r2, [r3, #4]
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	2200      	movs	r2, #0
 80056d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e8:	2201      	movs	r2, #1
 80056ea:	409a      	lsls	r2, r3
 80056ec:	4b39      	ldr	r3, [pc, #228]	@ (80057d4 <xTaskIncrementTick+0x224>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	4a38      	ldr	r2, [pc, #224]	@ (80057d4 <xTaskIncrementTick+0x224>)
 80056f4:	6013      	str	r3, [r2, #0]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056fa:	4937      	ldr	r1, [pc, #220]	@ (80057d8 <xTaskIncrementTick+0x228>)
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	3304      	adds	r3, #4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	609a      	str	r2, [r3, #8]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	3204      	adds	r2, #4
 8005722:	605a      	str	r2, [r3, #4]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1d1a      	adds	r2, r3, #4
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4a27      	ldr	r2, [pc, #156]	@ (80057d8 <xTaskIncrementTick+0x228>)
 800573a:	441a      	add	r2, r3
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	615a      	str	r2, [r3, #20]
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005744:	4924      	ldr	r1, [pc, #144]	@ (80057d8 <xTaskIncrementTick+0x228>)
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	440b      	add	r3, r1
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	481f      	ldr	r0, [pc, #124]	@ (80057d8 <xTaskIncrementTick+0x228>)
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4403      	add	r3, r0
 8005764:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800576a:	4b1c      	ldr	r3, [pc, #112]	@ (80057dc <xTaskIncrementTick+0x22c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005770:	429a      	cmp	r2, r3
 8005772:	f67f af5b 	bls.w	800562c <xTaskIncrementTick+0x7c>
                            {
                                xSwitchRequired = pdTRUE;
 8005776:	2301      	movs	r3, #1
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800577a:	e757      	b.n	800562c <xTaskIncrementTick+0x7c>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800577c:	4b17      	ldr	r3, [pc, #92]	@ (80057dc <xTaskIncrementTick+0x22c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	4915      	ldr	r1, [pc, #84]	@ (80057d8 <xTaskIncrementTick+0x228>)
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d901      	bls.n	8005798 <xTaskIncrementTick+0x1e8>
                {
                    xSwitchRequired = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005798:	4b11      	ldr	r3, [pc, #68]	@ (80057e0 <xTaskIncrementTick+0x230>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <xTaskIncrementTick+0x200>
                {
                    xSwitchRequired = pdTRUE;
 80057a0:	2301      	movs	r3, #1
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057a4:	e004      	b.n	80057b0 <xTaskIncrementTick+0x200>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80057a6:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <xTaskIncrementTick+0x234>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	4a0d      	ldr	r2, [pc, #52]	@ (80057e4 <xTaskIncrementTick+0x234>)
 80057ae:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3728      	adds	r7, #40	@ 0x28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	240003e8 	.word	0x240003e8
 80057c0:	240003c4 	.word	0x240003c4
 80057c4:	2400038c 	.word	0x2400038c
 80057c8:	24000390 	.word	0x24000390
 80057cc:	240003d8 	.word	0x240003d8
 80057d0:	240003e0 	.word	0x240003e0
 80057d4:	240003c8 	.word	0x240003c8
 80057d8:	240002d8 	.word	0x240002d8
 80057dc:	240002d4 	.word	0x240002d4
 80057e0:	240003d4 	.word	0x240003d4
 80057e4:	240003d0 	.word	0x240003d0

080057e8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80057ee:	4b29      	ldr	r3, [pc, #164]	@ (8005894 <vTaskSwitchContext+0xac>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80057f6:	4b28      	ldr	r3, [pc, #160]	@ (8005898 <vTaskSwitchContext+0xb0>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80057fc:	e043      	b.n	8005886 <vTaskSwitchContext+0x9e>
            xYieldPendings[ 0 ] = pdFALSE;
 80057fe:	4b26      	ldr	r3, [pc, #152]	@ (8005898 <vTaskSwitchContext+0xb0>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005804:	4b25      	ldr	r3, [pc, #148]	@ (800589c <vTaskSwitchContext+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	fab3 f383 	clz	r3, r3
 8005810:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8005812:	7afb      	ldrb	r3, [r7, #11]
 8005814:	f1c3 031f 	rsb	r3, r3, #31
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	4921      	ldr	r1, [pc, #132]	@ (80058a0 <vTaskSwitchContext+0xb8>)
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4613      	mov	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10d      	bne.n	800584a <vTaskSwitchContext+0x62>
    __asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005832:	b672      	cpsid	i
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	b662      	cpsie	i
 8005842:	607b      	str	r3, [r7, #4]
}
 8005844:	bf00      	nop
 8005846:	bf00      	nop
 8005848:	e7fd      	b.n	8005846 <vTaskSwitchContext+0x5e>
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4a12      	ldr	r2, [pc, #72]	@ (80058a0 <vTaskSwitchContext+0xb8>)
 8005856:	4413      	add	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	685a      	ldr	r2, [r3, #4]
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	3308      	adds	r3, #8
 800586c:	429a      	cmp	r2, r3
 800586e:	d103      	bne.n	8005878 <vTaskSwitchContext+0x90>
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	4a09      	ldr	r2, [pc, #36]	@ (80058a4 <vTaskSwitchContext+0xbc>)
 8005880:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005882:	4b08      	ldr	r3, [pc, #32]	@ (80058a4 <vTaskSwitchContext+0xbc>)
 8005884:	681b      	ldr	r3, [r3, #0]
    }
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	240003e8 	.word	0x240003e8
 8005898:	240003d4 	.word	0x240003d4
 800589c:	240003c8 	.word	0x240003c8
 80058a0:	240002d8 	.word	0x240002d8
 80058a4:	240002d4 	.word	0x240002d4

080058a8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <vTaskPlaceOnEventList+0x2c>
    __asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	b672      	cpsid	i
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	b662      	cpsie	i
 80058cc:	60fb      	str	r3, [r7, #12]
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <vTaskPlaceOnEventList+0x28>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058d4:	4b07      	ldr	r3, [pc, #28]	@ (80058f4 <vTaskPlaceOnEventList+0x4c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3318      	adds	r3, #24
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7fe f9ba 	bl	8003c56 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058e2:	2101      	movs	r1, #1
 80058e4:	6838      	ldr	r0, [r7, #0]
 80058e6:	f000 fcc3 	bl	8006270 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80058ea:	bf00      	nop
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	240002d4 	.word	0x240002d4

080058f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10d      	bne.n	8005926 <vTaskPlaceOnEventListRestricted+0x2e>
    __asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	b672      	cpsid	i
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	b662      	cpsie	i
 800591e:	613b      	str	r3, [r7, #16]
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	e7fd      	b.n	8005922 <vTaskPlaceOnEventListRestricted+0x2a>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	4b15      	ldr	r3, [pc, #84]	@ (8005984 <vTaskPlaceOnEventListRestricted+0x8c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	61da      	str	r2, [r3, #28]
 8005934:	4b13      	ldr	r3, [pc, #76]	@ (8005984 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	6892      	ldr	r2, [r2, #8]
 800593c:	621a      	str	r2, [r3, #32]
 800593e:	4b11      	ldr	r3, [pc, #68]	@ (8005984 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	3218      	adds	r2, #24
 8005948:	605a      	str	r2, [r3, #4]
 800594a:	4b0e      	ldr	r3, [pc, #56]	@ (8005984 <vTaskPlaceOnEventListRestricted+0x8c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f103 0218 	add.w	r2, r3, #24
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	4b0b      	ldr	r3, [pc, #44]	@ (8005984 <vTaskPlaceOnEventListRestricted+0x8c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	629a      	str	r2, [r3, #40]	@ 0x28
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <vTaskPlaceOnEventListRestricted+0x7c>
        {
            xTicksToWait = portMAX_DELAY;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	68b8      	ldr	r0, [r7, #8]
 8005978:	f000 fc7a 	bl	8006270 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 800597c:	bf00      	nop
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	240002d4 	.word	0x240002d4

08005988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005988:	b480      	push	{r7}
 800598a:	b08b      	sub	sp, #44	@ 0x2c
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <xTaskRemoveFromEventList+0x32>
    __asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	b672      	cpsid	i
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	b662      	cpsie	i
 80059b2:	60fb      	str	r3, [r7, #12]
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskRemoveFromEventList+0x2e>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	6a3a      	ldr	r2, [r7, #32]
 80059c6:	6a12      	ldr	r2, [r2, #32]
 80059c8:	609a      	str	r2, [r3, #8]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	69d2      	ldr	r2, [r2, #28]
 80059d2:	605a      	str	r2, [r3, #4]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	3318      	adds	r3, #24
 80059dc:	429a      	cmp	r2, r3
 80059de:	d103      	bne.n	80059e8 <xTaskRemoveFromEventList+0x60>
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	605a      	str	r2, [r3, #4]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2200      	movs	r2, #0
 80059ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	1e5a      	subs	r2, r3, #1
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80059f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005b28 <xTaskRemoveFromEventList+0x1a0>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d160      	bne.n	8005ac2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	6a3a      	ldr	r2, [r7, #32]
 8005a0c:	68d2      	ldr	r2, [r2, #12]
 8005a0e:	609a      	str	r2, [r3, #8]
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	6a3a      	ldr	r2, [r7, #32]
 8005a16:	6892      	ldr	r2, [r2, #8]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	3304      	adds	r3, #4
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d103      	bne.n	8005a2e <xTaskRemoveFromEventList+0xa6>
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	605a      	str	r2, [r3, #4]
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2200      	movs	r2, #0
 8005a32:	615a      	str	r2, [r3, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	1e5a      	subs	r2, r3, #1
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a42:	2201      	movs	r2, #1
 8005a44:	409a      	lsls	r2, r3
 8005a46:	4b39      	ldr	r3, [pc, #228]	@ (8005b2c <xTaskRemoveFromEventList+0x1a4>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	4a37      	ldr	r2, [pc, #220]	@ (8005b2c <xTaskRemoveFromEventList+0x1a4>)
 8005a4e:	6013      	str	r3, [r2, #0]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a54:	4936      	ldr	r1, [pc, #216]	@ (8005b30 <xTaskRemoveFromEventList+0x1a8>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	3304      	adds	r3, #4
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	609a      	str	r2, [r3, #8]
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	60da      	str	r2, [r3, #12]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	3204      	adds	r2, #4
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	1d1a      	adds	r2, r3, #4
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4a27      	ldr	r2, [pc, #156]	@ (8005b30 <xTaskRemoveFromEventList+0x1a8>)
 8005a94:	441a      	add	r2, r3
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	615a      	str	r2, [r3, #20]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a9e:	4924      	ldr	r1, [pc, #144]	@ (8005b30 <xTaskRemoveFromEventList+0x1a8>)
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	440b      	add	r3, r1
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6a3a      	ldr	r2, [r7, #32]
 8005aae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ab0:	1c59      	adds	r1, r3, #1
 8005ab2:	481f      	ldr	r0, [pc, #124]	@ (8005b30 <xTaskRemoveFromEventList+0x1a8>)
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4403      	add	r3, r0
 8005abe:	6019      	str	r1, [r3, #0]
 8005ac0:	e01b      	b.n	8005afa <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <xTaskRemoveFromEventList+0x1ac>)
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	61da      	str	r2, [r3, #28]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	621a      	str	r2, [r3, #32]
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	6a3a      	ldr	r2, [r7, #32]
 8005adc:	3218      	adds	r2, #24
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f103 0218 	add.w	r2, r3, #24
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	609a      	str	r2, [r3, #8]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	4a11      	ldr	r2, [pc, #68]	@ (8005b34 <xTaskRemoveFromEventList+0x1ac>)
 8005aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8005af0:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <xTaskRemoveFromEventList+0x1ac>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3301      	adds	r3, #1
 8005af6:	4a0f      	ldr	r2, [pc, #60]	@ (8005b34 <xTaskRemoveFromEventList+0x1ac>)
 8005af8:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afe:	4b0e      	ldr	r3, [pc, #56]	@ (8005b38 <xTaskRemoveFromEventList+0x1b0>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d905      	bls.n	8005b14 <xTaskRemoveFromEventList+0x18c>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <xTaskRemoveFromEventList+0x1b4>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e001      	b.n	8005b18 <xTaskRemoveFromEventList+0x190>
        }
        else
        {
            xReturn = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	372c      	adds	r7, #44	@ 0x2c
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	240003e8 	.word	0x240003e8
 8005b2c:	240003c8 	.word	0x240003c8
 8005b30:	240002d8 	.word	0x240002d8
 8005b34:	24000394 	.word	0x24000394
 8005b38:	240002d4 	.word	0x240002d4
 8005b3c:	240003d4 	.word	0x240003d4

08005b40 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b48:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <vTaskInternalSetTimeOutState+0x24>)
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <vTaskInternalSetTimeOutState+0x28>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	240003d8 	.word	0x240003d8
 8005b68:	240003c4 	.word	0x240003c4

08005b6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10d      	bne.n	8005b98 <xTaskCheckForTimeOut+0x2c>
    __asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	b672      	cpsid	i
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	b662      	cpsie	i
 8005b90:	613b      	str	r3, [r7, #16]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xTaskCheckForTimeOut+0x28>
    configASSERT( pxTicksToWait );
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <xTaskCheckForTimeOut+0x4e>
    __asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	b672      	cpsid	i
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	b662      	cpsie	i
 8005bb2:	60fb      	str	r3, [r7, #12]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <xTaskCheckForTimeOut+0x4a>

    taskENTER_CRITICAL();
 8005bba:	f000 fffb 	bl	8006bb4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <xTaskCheckForTimeOut+0xc0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b17      	ldr	r3, [pc, #92]	@ (8005c30 <xTaskCheckForTimeOut+0xc4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d00a      	beq.n	8005bf0 <xTaskCheckForTimeOut+0x84>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d305      	bcc.n	8005bf0 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005be4:	2301      	movs	r3, #1
 8005be6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e015      	b.n	8005c1c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d20b      	bcs.n	8005c12 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	1ad2      	subs	r2, r2, r3
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff ff9a 	bl	8005b40 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61fb      	str	r3, [r7, #28]
 8005c10:	e004      	b.n	8005c1c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005c1c:	f001 f800 	bl	8006c20 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005c20:	69fb      	ldr	r3, [r7, #28]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	240003c4 	.word	0x240003c4
 8005c30:	240003d8 	.word	0x240003d8

08005c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005c38:	4b03      	ldr	r3, [pc, #12]	@ (8005c48 <vTaskMissedYield+0x14>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8005c3e:	bf00      	nop
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	240003d4 	.word	0x240003d4

08005c4c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005c54:	f000 f84c 	bl	8005cf0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005c58:	4b06      	ldr	r3, [pc, #24]	@ (8005c74 <prvIdleTask+0x28>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d9f9      	bls.n	8005c54 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005c60:	4b05      	ldr	r3, [pc, #20]	@ (8005c78 <prvIdleTask+0x2c>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005c70:	e7f0      	b.n	8005c54 <prvIdleTask+0x8>
 8005c72:	bf00      	nop
 8005c74:	240002d8 	.word	0x240002d8
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c82:	2300      	movs	r3, #0
 8005c84:	607b      	str	r3, [r7, #4]
 8005c86:	e00c      	b.n	8005ca2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4a10      	ldr	r2, [pc, #64]	@ (8005cd4 <prvInitialiseTaskLists+0x58>)
 8005c94:	4413      	add	r3, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fd ffb0 	bl	8003bfc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	607b      	str	r3, [r7, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b06      	cmp	r3, #6
 8005ca6:	d9ef      	bls.n	8005c88 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005ca8:	480b      	ldr	r0, [pc, #44]	@ (8005cd8 <prvInitialiseTaskLists+0x5c>)
 8005caa:	f7fd ffa7 	bl	8003bfc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005cae:	480b      	ldr	r0, [pc, #44]	@ (8005cdc <prvInitialiseTaskLists+0x60>)
 8005cb0:	f7fd ffa4 	bl	8003bfc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005cb4:	480a      	ldr	r0, [pc, #40]	@ (8005ce0 <prvInitialiseTaskLists+0x64>)
 8005cb6:	f7fd ffa1 	bl	8003bfc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005cba:	480a      	ldr	r0, [pc, #40]	@ (8005ce4 <prvInitialiseTaskLists+0x68>)
 8005cbc:	f7fd ff9e 	bl	8003bfc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005cc0:	4b09      	ldr	r3, [pc, #36]	@ (8005ce8 <prvInitialiseTaskLists+0x6c>)
 8005cc2:	4a05      	ldr	r2, [pc, #20]	@ (8005cd8 <prvInitialiseTaskLists+0x5c>)
 8005cc4:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cc6:	4b09      	ldr	r3, [pc, #36]	@ (8005cec <prvInitialiseTaskLists+0x70>)
 8005cc8:	4a04      	ldr	r2, [pc, #16]	@ (8005cdc <prvInitialiseTaskLists+0x60>)
 8005cca:	601a      	str	r2, [r3, #0]
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	240002d8 	.word	0x240002d8
 8005cd8:	24000364 	.word	0x24000364
 8005cdc:	24000378 	.word	0x24000378
 8005ce0:	24000394 	.word	0x24000394
 8005ce4:	240003a8 	.word	0x240003a8
 8005ce8:	2400038c 	.word	0x2400038c
 8005cec:	24000390 	.word	0x24000390

08005cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cf6:	e019      	b.n	8005d2c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005cf8:	f000 ff5c 	bl	8006bb4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005cfc:	4b10      	ldr	r3, [pc, #64]	@ (8005d40 <prvCheckTasksWaitingTermination+0x50>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fd ffdd 	bl	8003cc8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <prvCheckTasksWaitingTermination+0x54>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	4a0b      	ldr	r2, [pc, #44]	@ (8005d44 <prvCheckTasksWaitingTermination+0x54>)
 8005d16:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <prvCheckTasksWaitingTermination+0x58>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d48 <prvCheckTasksWaitingTermination+0x58>)
 8005d20:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8005d22:	f000 ff7d 	bl	8006c20 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f810 	bl	8005d4c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d2c:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <prvCheckTasksWaitingTermination+0x58>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e1      	bne.n	8005cf8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	240003a8 	.word	0x240003a8
 8005d44:	240003c0 	.word	0x240003c0
 8005d48:	240003bc 	.word	0x240003bc

08005d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d108      	bne.n	8005d70 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 f998 	bl	8007098 <vPortFree>
                vPortFree( pxTCB );
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f995 	bl	8007098 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005d6e:	e01b      	b.n	8005da8 <prvDeleteTCB+0x5c>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d103      	bne.n	8005d82 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 f98c 	bl	8007098 <vPortFree>
    }
 8005d80:	e012      	b.n	8005da8 <prvDeleteTCB+0x5c>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d00d      	beq.n	8005da8 <prvDeleteTCB+0x5c>
    __asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	b672      	cpsid	i
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	b662      	cpsie	i
 8005da0:	60fb      	str	r3, [r7, #12]
}
 8005da2:	bf00      	nop
 8005da4:	bf00      	nop
 8005da6:	e7fd      	b.n	8005da4 <prvDeleteTCB+0x58>
    }
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005db4:	4b0a      	ldr	r3, [pc, #40]	@ (8005de0 <prvResetNextTaskUnblockTime+0x30>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d104      	bne.n	8005dc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <prvResetNextTaskUnblockTime+0x34>)
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005dc6:	e005      	b.n	8005dd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005dc8:	4b05      	ldr	r3, [pc, #20]	@ (8005de0 <prvResetNextTaskUnblockTime+0x30>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <prvResetNextTaskUnblockTime+0x34>)
 8005dd2:	6013      	str	r3, [r2, #0]
}
 8005dd4:	bf00      	nop
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	2400038c 	.word	0x2400038c
 8005de4:	240003e0 	.word	0x240003e0

08005de8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8005dee:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <xTaskGetSchedulerState+0x34>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d102      	bne.n	8005dfc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005df6:	2301      	movs	r3, #1
 8005df8:	607b      	str	r3, [r7, #4]
 8005dfa:	e008      	b.n	8005e0e <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005dfc:	4b08      	ldr	r3, [pc, #32]	@ (8005e20 <xTaskGetSchedulerState+0x38>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d102      	bne.n	8005e0a <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8005e04:	2302      	movs	r3, #2
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	e001      	b.n	8005e0e <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8005e0e:	687b      	ldr	r3, [r7, #4]
    }
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	240003cc 	.word	0x240003cc
 8005e20:	240003e8 	.word	0x240003e8

08005e24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005e30:	2300      	movs	r3, #0
 8005e32:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8089 	beq.w	8005f4e <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e40:	4b45      	ldr	r3, [pc, #276]	@ (8005f58 <xTaskPriorityInherit+0x134>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d278      	bcs.n	8005f3c <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	db06      	blt.n	8005e60 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 8005e52:	4b41      	ldr	r3, [pc, #260]	@ (8005f58 <xTaskPriorityInherit+0x134>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e58:	f1c3 0207 	rsb	r2, r3, #7
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6959      	ldr	r1, [r3, #20]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4a3a      	ldr	r2, [pc, #232]	@ (8005f5c <xTaskPriorityInherit+0x138>)
 8005e72:	4413      	add	r3, r2
 8005e74:	4299      	cmp	r1, r3
 8005e76:	d159      	bne.n	8005f2c <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fd ff23 	bl	8003cc8 <uxListRemove>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	43da      	mvns	r2, r3
 8005e94:	4b32      	ldr	r3, [pc, #200]	@ (8005f60 <xTaskPriorityInherit+0x13c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	4a31      	ldr	r2, [pc, #196]	@ (8005f60 <xTaskPriorityInherit+0x13c>)
 8005e9c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005f58 <xTaskPriorityInherit+0x134>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f60 <xTaskPriorityInherit+0x13c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f60 <xTaskPriorityInherit+0x13c>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	4927      	ldr	r1, [pc, #156]	@ (8005f5c <xTaskPriorityInherit+0x138>)
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3304      	adds	r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	609a      	str	r2, [r3, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	60da      	str	r2, [r3, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	3204      	adds	r2, #4
 8005ee6:	605a      	str	r2, [r3, #4]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1d1a      	adds	r2, r3, #4
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	609a      	str	r2, [r3, #8]
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4a17      	ldr	r2, [pc, #92]	@ (8005f5c <xTaskPriorityInherit+0x138>)
 8005efe:	441a      	add	r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	615a      	str	r2, [r3, #20]
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f08:	4914      	ldr	r1, [pc, #80]	@ (8005f5c <xTaskPriorityInherit+0x138>)
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	480f      	ldr	r0, [pc, #60]	@ (8005f5c <xTaskPriorityInherit+0x138>)
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4403      	add	r3, r0
 8005f28:	6019      	str	r1, [r3, #0]
 8005f2a:	e004      	b.n	8005f36 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <xTaskPriorityInherit+0x134>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8005f36:	2301      	movs	r3, #1
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e008      	b.n	8005f4e <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f40:	4b05      	ldr	r3, [pc, #20]	@ (8005f58 <xTaskPriorityInherit+0x134>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d201      	bcs.n	8005f4e <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 8005f4e:	697b      	ldr	r3, [r7, #20]
    }
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	240002d4 	.word	0x240002d4
 8005f5c:	240002d8 	.word	0x240002d8
 8005f60:	240003c8 	.word	0x240003c8

08005f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8094 	beq.w	80060a4 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005f7c:	4b4c      	ldr	r3, [pc, #304]	@ (80060b0 <xTaskPriorityDisinherit+0x14c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d00d      	beq.n	8005fa2 <xTaskPriorityDisinherit+0x3e>
    __asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	b672      	cpsid	i
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	b662      	cpsie	i
 8005f9a:	613b      	str	r3, [r7, #16]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xTaskPriorityDisinherit+0x3a>
            configASSERT( pxTCB->uxMutexesHeld );
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10d      	bne.n	8005fc6 <xTaskPriorityDisinherit+0x62>
    __asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	b672      	cpsid	i
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	b662      	cpsie	i
 8005fbe:	60fb      	str	r3, [r7, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <xTaskPriorityDisinherit+0x5e>
            ( pxTCB->uxMutexesHeld )--;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fca:	1e5a      	subs	r2, r3, #1
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d063      	beq.n	80060a4 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d15f      	bne.n	80060a4 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7fd fe6d 	bl	8003cc8 <uxListRemove>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10a      	bne.n	800600a <xTaskPriorityDisinherit+0xa6>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43da      	mvns	r2, r3
 8006000:	4b2c      	ldr	r3, [pc, #176]	@ (80060b4 <xTaskPriorityDisinherit+0x150>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4013      	ands	r3, r2
 8006006:	4a2b      	ldr	r2, [pc, #172]	@ (80060b4 <xTaskPriorityDisinherit+0x150>)
 8006008:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	f1c3 0207 	rsb	r2, r3, #7
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006022:	2201      	movs	r2, #1
 8006024:	409a      	lsls	r2, r3
 8006026:	4b23      	ldr	r3, [pc, #140]	@ (80060b4 <xTaskPriorityDisinherit+0x150>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4313      	orrs	r3, r2
 800602c:	4a21      	ldr	r2, [pc, #132]	@ (80060b4 <xTaskPriorityDisinherit+0x150>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006034:	4920      	ldr	r1, [pc, #128]	@ (80060b8 <xTaskPriorityDisinherit+0x154>)
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	3304      	adds	r3, #4
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	617b      	str	r3, [r7, #20]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	60da      	str	r2, [r3, #12]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	3204      	adds	r2, #4
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	1d1a      	adds	r2, r3, #4
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	609a      	str	r2, [r3, #8]
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4a11      	ldr	r2, [pc, #68]	@ (80060b8 <xTaskPriorityDisinherit+0x154>)
 8006074:	441a      	add	r2, r3
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	615a      	str	r2, [r3, #20]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607e:	490e      	ldr	r1, [pc, #56]	@ (80060b8 <xTaskPriorityDisinherit+0x154>)
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	4809      	ldr	r0, [pc, #36]	@ (80060b8 <xTaskPriorityDisinherit+0x154>)
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4403      	add	r3, r0
 800609e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 80060a4:	69fb      	ldr	r3, [r7, #28]
    }
 80060a6:	4618      	mov	r0, r3
 80060a8:	3720      	adds	r7, #32
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	240002d4 	.word	0x240002d4
 80060b4:	240003c8 	.word	0x240003c8
 80060b8:	240002d8 	.word	0x240002d8

080060bc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	@ 0x28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80060ca:	2301      	movs	r3, #1
 80060cc:	61fb      	str	r3, [r7, #28]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 80aa 	beq.w	800622a <vTaskPriorityDisinheritAfterTimeout+0x16e>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10d      	bne.n	80060fa <vTaskPriorityDisinheritAfterTimeout+0x3e>
    __asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e2:	b672      	cpsid	i
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	b662      	cpsie	i
 80060f2:	613b      	str	r3, [r7, #16]
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	e7fd      	b.n	80060f6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d902      	bls.n	800610a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
 8006108:	e002      	b.n	8006110 <vTaskPriorityDisinheritAfterTimeout+0x54>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006116:	429a      	cmp	r2, r3
 8006118:	f000 8087 	beq.w	800622a <vTaskPriorityDisinheritAfterTimeout+0x16e>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	429a      	cmp	r2, r3
 8006124:	f040 8081 	bne.w	800622a <vTaskPriorityDisinheritAfterTimeout+0x16e>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006128:	4b42      	ldr	r3, [pc, #264]	@ (8006234 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	429a      	cmp	r2, r3
 8006130:	d10d      	bne.n	800614e <vTaskPriorityDisinheritAfterTimeout+0x92>
    __asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006136:	b672      	cpsid	i
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	b662      	cpsie	i
 8006146:	60fb      	str	r3, [r7, #12]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vTaskPriorityDisinheritAfterTimeout+0x8e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006158:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	db04      	blt.n	800616c <vTaskPriorityDisinheritAfterTimeout+0xb0>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	f1c3 0207 	rsb	r2, r3, #7
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	6959      	ldr	r1, [r3, #20]
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4613      	mov	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4a2f      	ldr	r2, [pc, #188]	@ (8006238 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800617c:	4413      	add	r3, r2
 800617e:	4299      	cmp	r1, r3
 8006180:	d153      	bne.n	800622a <vTaskPriorityDisinheritAfterTimeout+0x16e>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	3304      	adds	r3, #4
 8006186:	4618      	mov	r0, r3
 8006188:	f7fd fd9e 	bl	8003cc8 <uxListRemove>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <vTaskPriorityDisinheritAfterTimeout+0xec>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	2201      	movs	r2, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43da      	mvns	r2, r3
 800619e:	4b27      	ldr	r3, [pc, #156]	@ (800623c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4013      	ands	r3, r2
 80061a4:	4a25      	ldr	r2, [pc, #148]	@ (800623c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80061a6:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	4b22      	ldr	r3, [pc, #136]	@ (800623c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	4a21      	ldr	r2, [pc, #132]	@ (800623c <vTaskPriorityDisinheritAfterTimeout+0x180>)
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061be:	491e      	ldr	r1, [pc, #120]	@ (8006238 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	3304      	adds	r3, #4
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	609a      	str	r2, [r3, #8]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	60da      	str	r2, [r3, #12]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	6a3a      	ldr	r2, [r7, #32]
 80061e4:	3204      	adds	r2, #4
 80061e6:	605a      	str	r2, [r3, #4]
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	1d1a      	adds	r2, r3, #4
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	609a      	str	r2, [r3, #8]
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f4:	4613      	mov	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4a0e      	ldr	r2, [pc, #56]	@ (8006238 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 80061fe:	441a      	add	r2, r3
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	615a      	str	r2, [r3, #20]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006208:	490b      	ldr	r1, [pc, #44]	@ (8006238 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	440b      	add	r3, r1
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	4806      	ldr	r0, [pc, #24]	@ (8006238 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4403      	add	r3, r0
 8006228:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800622a:	bf00      	nop
 800622c:	3728      	adds	r7, #40	@ 0x28
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	240002d4 	.word	0x240002d4
 8006238:	240002d8 	.word	0x240002d8
 800623c:	240003c8 	.word	0x240003c8

08006240 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8006246:	4b09      	ldr	r3, [pc, #36]	@ (800626c <pvTaskIncrementMutexHeldCount+0x2c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 800625c:	687b      	ldr	r3, [r7, #4]
    }
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	240002d4 	.word	0x240002d4

08006270 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800627a:	4b22      	ldr	r3, [pc, #136]	@ (8006304 <prvAddCurrentTaskToDelayedList+0x94>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	617b      	str	r3, [r7, #20]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006280:	4b21      	ldr	r3, [pc, #132]	@ (8006308 <prvAddCurrentTaskToDelayedList+0x98>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	613b      	str	r3, [r7, #16]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8006286:	4b21      	ldr	r3, [pc, #132]	@ (800630c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800628c:	4b20      	ldr	r3, [pc, #128]	@ (8006310 <prvAddCurrentTaskToDelayedList+0xa0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3304      	adds	r3, #4
 8006292:	4618      	mov	r0, r3
 8006294:	f7fd fd18 	bl	8003cc8 <uxListRemove>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10b      	bne.n	80062b6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800629e:	4b1c      	ldr	r3, [pc, #112]	@ (8006310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	2201      	movs	r2, #1
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	43da      	mvns	r2, r3
 80062ac:	4b19      	ldr	r3, [pc, #100]	@ (8006314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4013      	ands	r3, r2
 80062b2:	4a18      	ldr	r2, [pc, #96]	@ (8006314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80062b4:	6013      	str	r3, [r2, #0]
    #else /* INCLUDE_vTaskSuspend */
    {
        /* Calculate the time at which the task should be woken if the event
         * does not occur.  This may overflow but this doesn't matter, the kernel
         * will manage it correctly. */
        xTimeToWake = xConstTickCount + xTicksToWait;
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	60bb      	str	r3, [r7, #8]

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062be:	4b14      	ldr	r3, [pc, #80]	@ (8006310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	605a      	str	r2, [r3, #4]

        if( xTimeToWake < xConstTickCount )
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d207      	bcs.n	80062de <prvAddCurrentTaskToDelayedList+0x6e>
        {
            traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
            /* Wake time has overflowed.  Place this item in the overflow list. */
            vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80062ce:	4b10      	ldr	r3, [pc, #64]	@ (8006310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f7fd fcbd 	bl	8003c56 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80062dc:	e00e      	b.n	80062fc <prvAddCurrentTaskToDelayedList+0x8c>
            vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80062de:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4619      	mov	r1, r3
 80062e6:	6938      	ldr	r0, [r7, #16]
 80062e8:	f7fd fcb5 	bl	8003c56 <vListInsert>
            if( xTimeToWake < xNextTaskUnblockTime )
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <prvAddCurrentTaskToDelayedList+0xa8>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d202      	bcs.n	80062fc <prvAddCurrentTaskToDelayedList+0x8c>
                xNextTaskUnblockTime = xTimeToWake;
 80062f6:	4a08      	ldr	r2, [pc, #32]	@ (8006318 <prvAddCurrentTaskToDelayedList+0xa8>)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6013      	str	r3, [r2, #0]
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	240003c4 	.word	0x240003c4
 8006308:	2400038c 	.word	0x2400038c
 800630c:	24000390 	.word	0x24000390
 8006310:	240002d4 	.word	0x240002d4
 8006314:	240003c8 	.word	0x240003c8
 8006318:	240003e0 	.word	0x240003e0

0800631c <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a07      	ldr	r2, [pc, #28]	@ (8006348 <vApplicationGetIdleTaskMemory+0x2c>)
 800632c:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4a06      	ldr	r2, [pc, #24]	@ (800634c <vApplicationGetIdleTaskMemory+0x30>)
 8006332:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2280      	movs	r2, #128	@ 0x80
 8006338:	601a      	str	r2, [r3, #0]
    }
 800633a:	bf00      	nop
 800633c:	3714      	adds	r7, #20
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	240003ec 	.word	0x240003ec
 800634c:	24000448 	.word	0x24000448

08006350 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a07      	ldr	r2, [pc, #28]	@ (800637c <vApplicationGetTimerTaskMemory+0x2c>)
 8006360:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	4a06      	ldr	r2, [pc, #24]	@ (8006380 <vApplicationGetTimerTaskMemory+0x30>)
 8006366:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800636e:	601a      	str	r2, [r3, #0]
    }
 8006370:	bf00      	nop
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	24000648 	.word	0x24000648
 8006380:	240006a4 	.word	0x240006a4

08006384 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006384:	b580      	push	{r7, lr}
 8006386:	b08a      	sub	sp, #40	@ 0x28
 8006388:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800638e:	f000 fa6f 	bl	8006870 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006392:	4b1e      	ldr	r3, [pc, #120]	@ (800640c <xTimerCreateTimerTask+0x88>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d021      	beq.n	80063de <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80063a2:	1d3a      	adds	r2, r7, #4
 80063a4:	f107 0108 	add.w	r1, r7, #8
 80063a8:	f107 030c 	add.w	r3, r7, #12
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff ffcf 	bl	8006350 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	9202      	str	r2, [sp, #8]
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	2302      	movs	r3, #2
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	2300      	movs	r3, #0
 80063c2:	460a      	mov	r2, r1
 80063c4:	4912      	ldr	r1, [pc, #72]	@ (8006410 <xTimerCreateTimerTask+0x8c>)
 80063c6:	4813      	ldr	r0, [pc, #76]	@ (8006414 <xTimerCreateTimerTask+0x90>)
 80063c8:	f7fe fd11 	bl	8004dee <xTaskCreateStatic>
 80063cc:	4603      	mov	r3, r0
 80063ce:	4a12      	ldr	r2, [pc, #72]	@ (8006418 <xTimerCreateTimerTask+0x94>)
 80063d0:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80063d2:	4b11      	ldr	r3, [pc, #68]	@ (8006418 <xTimerCreateTimerTask+0x94>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 80063da:	2301      	movs	r3, #1
 80063dc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <xTimerCreateTimerTask+0x7c>
    __asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	b672      	cpsid	i
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	b662      	cpsie	i
 80063f8:	613b      	str	r3, [r7, #16]
}
 80063fa:	bf00      	nop
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <xTimerCreateTimerTask+0x78>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8006400:	697b      	ldr	r3, [r7, #20]
    }
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	24000ad4 	.word	0x24000ad4
 8006410:	0800c25c 	.word	0x0800c25c
 8006414:	080064c1 	.word	0x080064c1
 8006418:	24000ad8 	.word	0x24000ad8

0800641c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006428:	e008      	b.n	800643c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4413      	add	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	18d1      	adds	r1, r2, r3
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f8df 	bl	800660c <prvInsertTimerInActiveList>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1ea      	bne.n	800642a <prvReloadTimer+0xe>
        }
    }
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800646a:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <prvProcessExpiredTimer+0x5c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3304      	adds	r3, #4
 8006478:	4618      	mov	r0, r3
 800647a:	f7fd fc25 	bl	8003cc8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f7ff ffc3 	bl	800641c <prvReloadTimer>
 8006496:	e008      	b.n	80064aa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	4798      	blx	r3
    }
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	24000acc 	.word	0x24000acc

080064c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064c8:	f107 0308 	add.w	r3, r7, #8
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 f859 	bl	8006584 <prvGetNextExpireTime>
 80064d2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4619      	mov	r1, r3
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 f805 	bl	80064e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80064de:	f000 f8d7 	bl	8006690 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064e2:	bf00      	nop
 80064e4:	e7f0      	b.n	80064c8 <prvTimerTask+0x8>
	...

080064e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80064f2:	f7fe ff17 	bl	8005324 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 f866 	bl	80065cc <prvSampleTimeNow>
 8006500:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d130      	bne.n	800656a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10a      	bne.n	8006524 <prvProcessTimerOrBlockTask+0x3c>
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	429a      	cmp	r2, r3
 8006514:	d806      	bhi.n	8006524 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006516:	f7fe ff13 	bl	8005340 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ff9f 	bl	8006460 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006522:	e024      	b.n	800656e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d008      	beq.n	800653c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800652a:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <prvProcessTimerOrBlockTask+0x90>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <prvProcessTimerOrBlockTask+0x50>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <prvProcessTimerOrBlockTask+0x52>
 8006538:	2300      	movs	r3, #0
 800653a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800653c:	4b0f      	ldr	r3, [pc, #60]	@ (800657c <prvProcessTimerOrBlockTask+0x94>)
 800653e:	6818      	ldr	r0, [r3, #0]
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	4619      	mov	r1, r3
 800654a:	f7fe fbb5 	bl	8004cb8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800654e:	f7fe fef7 	bl	8005340 <xTaskResumeAll>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8006558:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <prvProcessTimerOrBlockTask+0x98>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
    }
 8006568:	e001      	b.n	800656e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800656a:	f7fe fee9 	bl	8005340 <xTaskResumeAll>
    }
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	24000ad0 	.word	0x24000ad0
 800657c:	24000ad4 	.word	0x24000ad4
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800658c:	4b0e      	ldr	r3, [pc, #56]	@ (80065c8 <prvGetNextExpireTime+0x44>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <prvGetNextExpireTime+0x16>
 8006596:	2201      	movs	r2, #1
 8006598:	e000      	b.n	800659c <prvGetNextExpireTime+0x18>
 800659a:	2200      	movs	r2, #0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065a8:	4b07      	ldr	r3, [pc, #28]	@ (80065c8 <prvGetNextExpireTime+0x44>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
 80065b2:	e001      	b.n	80065b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80065b8:	68fb      	ldr	r3, [r7, #12]
    }
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	24000acc 	.word	0x24000acc

080065cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80065d4:	f7fe ffbe 	bl	8005554 <xTaskGetTickCount>
 80065d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80065da:	4b0b      	ldr	r3, [pc, #44]	@ (8006608 <prvSampleTimeNow+0x3c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d205      	bcs.n	80065f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80065e4:	f000 f91e 	bl	8006824 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e002      	b.n	80065f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80065f6:	4a04      	ldr	r2, [pc, #16]	@ (8006608 <prvSampleTimeNow+0x3c>)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80065fc:	68fb      	ldr	r3, [r7, #12]
    }
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	24000adc 	.word	0x24000adc

0800660c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800661a:	2300      	movs	r3, #0
 800661c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d812      	bhi.n	8006658 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	1ad2      	subs	r2, r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006640:	2301      	movs	r3, #1
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e01b      	b.n	800667e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006646:	4b10      	ldr	r3, [pc, #64]	@ (8006688 <prvInsertTimerInActiveList+0x7c>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	3304      	adds	r3, #4
 800664e:	4619      	mov	r1, r3
 8006650:	4610      	mov	r0, r2
 8006652:	f7fd fb00 	bl	8003c56 <vListInsert>
 8006656:	e012      	b.n	800667e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d206      	bcs.n	800666e <prvInsertTimerInActiveList+0x62>
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d302      	bcc.n	800666e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e007      	b.n	800667e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800666e:	4b07      	ldr	r3, [pc, #28]	@ (800668c <prvInsertTimerInActiveList+0x80>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fd faec 	bl	8003c56 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800667e:	697b      	ldr	r3, [r7, #20]
    }
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	24000ad0 	.word	0x24000ad0
 800668c:	24000acc 	.word	0x24000acc

08006690 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8006696:	f107 0308 	add.w	r3, r7, #8
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80066a2:	e0ab      	b.n	80067fc <prvProcessReceivedCommands+0x16c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f2c0 80a8 	blt.w	80067fc <prvProcessReceivedCommands+0x16c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d004      	beq.n	80066c2 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	3304      	adds	r3, #4
 80066bc:	4618      	mov	r0, r3
 80066be:	f7fd fb03 	bl	8003cc8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066c2:	1d3b      	adds	r3, r7, #4
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff ff81 	bl	80065cc <prvSampleTimeNow>
 80066ca:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	3b01      	subs	r3, #1
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	f200 8090 	bhi.w	80067f6 <prvProcessReceivedCommands+0x166>
 80066d6:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <prvProcessReceivedCommands+0x4c>)
 80066d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006769 	.word	0x08006769
 80066e8:	0800677d 	.word	0x0800677d
 80066ec:	080067cd 	.word	0x080067cd
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006701 	.word	0x08006701
 80066f8:	08006769 	.word	0x08006769
 80066fc:	0800677d 	.word	0x0800677d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	18d1      	adds	r1, r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	69f8      	ldr	r0, [r7, #28]
 8006720:	f7ff ff74 	bl	800660c <prvInsertTimerInActiveList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d067      	beq.n	80067fa <prvProcessReceivedCommands+0x16a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006730:	f003 0304 	and.w	r3, r3, #4
 8006734:	2b00      	cmp	r3, #0
 8006736:	d009      	beq.n	800674c <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	4413      	add	r3, r2
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	4619      	mov	r1, r3
 8006744:	69f8      	ldr	r0, [r7, #28]
 8006746:	f7ff fe69 	bl	800641c <prvReloadTimer>
 800674a:	e008      	b.n	800675e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006752:	f023 0301 	bic.w	r3, r3, #1
 8006756:	b2da      	uxtb	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	69f8      	ldr	r0, [r7, #28]
 8006764:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006766:	e048      	b.n	80067fa <prvProcessReceivedCommands+0x16a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800676e:	f023 0301 	bic.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800677a:	e03f      	b.n	80067fc <prvProcessReceivedCommands+0x16c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006782:	f043 0301 	orr.w	r3, r3, #1
 8006786:	b2da      	uxtb	r2, r3
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10d      	bne.n	80067b8 <prvProcessReceivedCommands+0x128>
    __asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	b672      	cpsid	i
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	b662      	cpsie	i
 80067b0:	617b      	str	r3, [r7, #20]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	699a      	ldr	r2, [r3, #24]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	18d1      	adds	r1, r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	69f8      	ldr	r0, [r7, #28]
 80067c6:	f7ff ff21 	bl	800660c <prvInsertTimerInActiveList>
                        break;
 80067ca:	e017      	b.n	80067fc <prvProcessReceivedCommands+0x16c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <prvProcessReceivedCommands+0x152>
                            {
                                vPortFree( pxTimer );
 80067da:	69f8      	ldr	r0, [r7, #28]
 80067dc:	f000 fc5c 	bl	8007098 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80067e0:	e00c      	b.n	80067fc <prvProcessReceivedCommands+0x16c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067e8:	f023 0301 	bic.w	r3, r3, #1
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80067f4:	e002      	b.n	80067fc <prvProcessReceivedCommands+0x16c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <prvProcessReceivedCommands+0x16c>
                        break;
 80067fa:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80067fc:	4b08      	ldr	r3, [pc, #32]	@ (8006820 <prvProcessReceivedCommands+0x190>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f107 0108 	add.w	r1, r7, #8
 8006804:	2200      	movs	r2, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f7fd fdc8 	bl	800439c <xQueueReceive>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	f47f af48 	bne.w	80066a4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8006814:	bf00      	nop
 8006816:	bf00      	nop
 8006818:	3720      	adds	r7, #32
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	24000ad4 	.word	0x24000ad4

08006824 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800682a:	e009      	b.n	8006840 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800682c:	4b0e      	ldr	r3, [pc, #56]	@ (8006868 <prvSwitchTimerLists+0x44>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006836:	f04f 31ff 	mov.w	r1, #4294967295
 800683a:	6838      	ldr	r0, [r7, #0]
 800683c:	f7ff fe10 	bl	8006460 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006840:	4b09      	ldr	r3, [pc, #36]	@ (8006868 <prvSwitchTimerLists+0x44>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800684a:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <prvSwitchTimerLists+0x44>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006850:	4b06      	ldr	r3, [pc, #24]	@ (800686c <prvSwitchTimerLists+0x48>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a04      	ldr	r2, [pc, #16]	@ (8006868 <prvSwitchTimerLists+0x44>)
 8006856:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006858:	4a04      	ldr	r2, [pc, #16]	@ (800686c <prvSwitchTimerLists+0x48>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6013      	str	r3, [r2, #0]
    }
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	24000acc 	.word	0x24000acc
 800686c:	24000ad0 	.word	0x24000ad0

08006870 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006876:	f000 f99d 	bl	8006bb4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800687a:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <prvCheckForValidListAndQueue+0x60>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d120      	bne.n	80068c4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8006882:	4814      	ldr	r0, [pc, #80]	@ (80068d4 <prvCheckForValidListAndQueue+0x64>)
 8006884:	f7fd f9ba 	bl	8003bfc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006888:	4813      	ldr	r0, [pc, #76]	@ (80068d8 <prvCheckForValidListAndQueue+0x68>)
 800688a:	f7fd f9b7 	bl	8003bfc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800688e:	4b13      	ldr	r3, [pc, #76]	@ (80068dc <prvCheckForValidListAndQueue+0x6c>)
 8006890:	4a10      	ldr	r2, [pc, #64]	@ (80068d4 <prvCheckForValidListAndQueue+0x64>)
 8006892:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006894:	4b12      	ldr	r3, [pc, #72]	@ (80068e0 <prvCheckForValidListAndQueue+0x70>)
 8006896:	4a10      	ldr	r2, [pc, #64]	@ (80068d8 <prvCheckForValidListAndQueue+0x68>)
 8006898:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800689a:	2300      	movs	r3, #0
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4b11      	ldr	r3, [pc, #68]	@ (80068e4 <prvCheckForValidListAndQueue+0x74>)
 80068a0:	4a11      	ldr	r2, [pc, #68]	@ (80068e8 <prvCheckForValidListAndQueue+0x78>)
 80068a2:	210c      	movs	r1, #12
 80068a4:	200a      	movs	r0, #10
 80068a6:	f7fd facf 	bl	8003e48 <xQueueGenericCreateStatic>
 80068aa:	4603      	mov	r3, r0
 80068ac:	4a08      	ldr	r2, [pc, #32]	@ (80068d0 <prvCheckForValidListAndQueue+0x60>)
 80068ae:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80068b0:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <prvCheckForValidListAndQueue+0x60>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068b8:	4b05      	ldr	r3, [pc, #20]	@ (80068d0 <prvCheckForValidListAndQueue+0x60>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	490b      	ldr	r1, [pc, #44]	@ (80068ec <prvCheckForValidListAndQueue+0x7c>)
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe f96c 	bl	8004b9c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068c4:	f000 f9ac 	bl	8006c20 <vPortExitCritical>
    }
 80068c8:	bf00      	nop
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	24000ad4 	.word	0x24000ad4
 80068d4:	24000aa4 	.word	0x24000aa4
 80068d8:	24000ab8 	.word	0x24000ab8
 80068dc:	24000acc 	.word	0x24000acc
 80068e0:	24000ad0 	.word	0x24000ad0
 80068e4:	24000b58 	.word	0x24000b58
 80068e8:	24000ae0 	.word	0x24000ae0
 80068ec:	0800c264 	.word	0x0800c264

080068f0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3b04      	subs	r3, #4
 8006900:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006908:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3b04      	subs	r3, #4
 800690e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f023 0201 	bic.w	r2, r3, #1
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3b04      	subs	r3, #4
 800691e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006920:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <pxPortInitialiseStack+0x64>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3b14      	subs	r3, #20
 800692a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3b04      	subs	r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f06f 0202 	mvn.w	r2, #2
 800693e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3b20      	subs	r3, #32
 8006944:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006946:	68fb      	ldr	r3, [r7, #12]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	08006959 	.word	0x08006959

08006958 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800695e:	2300      	movs	r3, #0
 8006960:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006962:	4b15      	ldr	r3, [pc, #84]	@ (80069b8 <prvTaskExitError+0x60>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696a:	d00d      	beq.n	8006988 <prvTaskExitError+0x30>
    __asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	b672      	cpsid	i
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	b662      	cpsie	i
 8006980:	60fb      	str	r3, [r7, #12]
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <prvTaskExitError+0x2c>
    __asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	b672      	cpsid	i
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	b662      	cpsie	i
 800699c:	60bb      	str	r3, [r7, #8]
}
 800699e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80069a0:	bf00      	nop
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0fc      	beq.n	80069a2 <prvTaskExitError+0x4a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	24000054 	.word	0x24000054
 80069bc:	00000000 	.word	0x00000000

080069c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80069c0:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <pxCurrentTCBConst2>)
 80069c2:	6819      	ldr	r1, [r3, #0]
 80069c4:	6808      	ldr	r0, [r1, #0]
 80069c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ca:	f380 8809 	msr	PSP, r0
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8811 	msr	BASEPRI, r0
 80069da:	4770      	bx	lr
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst2>:
 80069e0:	240002d4 	.word	0x240002d4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80069e8:	4808      	ldr	r0, [pc, #32]	@ (8006a0c <prvPortStartFirstTask+0x24>)
 80069ea:	6800      	ldr	r0, [r0, #0]
 80069ec:	6800      	ldr	r0, [r0, #0]
 80069ee:	f380 8808 	msr	MSP, r0
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8814 	msr	CONTROL, r0
 80069fa:	b662      	cpsie	i
 80069fc:	b661      	cpsie	f
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	df00      	svc	0
 8006a08:	bf00      	nop
 8006a0a:	0000      	.short	0x0000
 8006a0c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006a10:	bf00      	nop
 8006a12:	bf00      	nop

08006a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	@ 0x28
 8006a18:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8006a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b8c <xPortStartScheduler+0x178>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a22:	332c      	adds	r3, #44	@ 0x2c
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a5a      	ldr	r2, [pc, #360]	@ (8006b90 <xPortStartScheduler+0x17c>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00d      	beq.n	8006a48 <xPortStartScheduler+0x34>
    __asm volatile
 8006a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a30:	b672      	cpsid	i
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	b662      	cpsie	i
 8006a40:	61bb      	str	r3, [r7, #24]
}
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	e7fd      	b.n	8006a44 <xPortStartScheduler+0x30>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	3338      	adds	r3, #56	@ 0x38
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a51      	ldr	r2, [pc, #324]	@ (8006b94 <xPortStartScheduler+0x180>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00d      	beq.n	8006a70 <xPortStartScheduler+0x5c>
    __asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	b672      	cpsid	i
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	b662      	cpsie	i
 8006a68:	61fb      	str	r3, [r7, #28]
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <xPortStartScheduler+0x58>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8006a70:	2300      	movs	r3, #0
 8006a72:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a74:	4b48      	ldr	r3, [pc, #288]	@ (8006b98 <xPortStartScheduler+0x184>)
 8006a76:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	22ff      	movs	r2, #255	@ 0xff
 8006a84:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	4b40      	ldr	r3, [pc, #256]	@ (8006b9c <xPortStartScheduler+0x188>)
 8006a9a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8006b9c <xPortStartScheduler+0x188>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10d      	bne.n	8006ac0 <xPortStartScheduler+0xac>
    __asm volatile
 8006aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa8:	b672      	cpsid	i
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	b662      	cpsie	i
 8006ab8:	617b      	str	r3, [r7, #20]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xPortStartScheduler+0xa8>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d015      	beq.n	8006afa <xPortStartScheduler+0xe6>
    __asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	b672      	cpsid	i
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	b662      	cpsie	i
 8006ae2:	613b      	str	r3, [r7, #16]
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop
 8006ae8:	e7fd      	b.n	8006ae6 <xPortStartScheduler+0xd2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b02:	2b80      	cmp	r3, #128	@ 0x80
 8006b04:	d0f1      	beq.n	8006aea <xPortStartScheduler+0xd6>
        }

        if( ulImplementedPrioBits == 8 )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d103      	bne.n	8006b14 <xPortStartScheduler+0x100>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006b0c:	4b24      	ldr	r3, [pc, #144]	@ (8006ba0 <xPortStartScheduler+0x18c>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e004      	b.n	8006b1e <xPortStartScheduler+0x10a>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f1c3 0307 	rsb	r3, r3, #7
 8006b1a:	4a21      	ldr	r2, [pc, #132]	@ (8006ba0 <xPortStartScheduler+0x18c>)
 8006b1c:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ba0 <xPortStartScheduler+0x18c>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	021b      	lsls	r3, r3, #8
 8006b24:	4a1e      	ldr	r2, [pc, #120]	@ (8006ba0 <xPortStartScheduler+0x18c>)
 8006b26:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba0 <xPortStartScheduler+0x18c>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba0 <xPortStartScheduler+0x18c>)
 8006b32:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ba4 <xPortStartScheduler+0x190>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a18      	ldr	r2, [pc, #96]	@ (8006ba4 <xPortStartScheduler+0x190>)
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b46:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006b48:	4b16      	ldr	r3, [pc, #88]	@ (8006ba4 <xPortStartScheduler+0x190>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	@ (8006ba4 <xPortStartScheduler+0x190>)
 8006b4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b52:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8006b54:	4b14      	ldr	r3, [pc, #80]	@ (8006ba8 <xPortStartScheduler+0x194>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006b5a:	f000 f8e9 	bl	8006d30 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006b5e:	4b13      	ldr	r3, [pc, #76]	@ (8006bac <xPortStartScheduler+0x198>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006b64:	f000 f908 	bl	8006d78 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b68:	4b11      	ldr	r3, [pc, #68]	@ (8006bb0 <xPortStartScheduler+0x19c>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a10      	ldr	r2, [pc, #64]	@ (8006bb0 <xPortStartScheduler+0x19c>)
 8006b6e:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b72:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006b74:	f7ff ff38 	bl	80069e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006b78:	f7fe fe36 	bl	80057e8 <vTaskSwitchContext>
    prvTaskExitError();
 8006b7c:	f7ff feec 	bl	8006958 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3728      	adds	r7, #40	@ 0x28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	e000ed08 	.word	0xe000ed08
 8006b90:	080069c1 	.word	0x080069c1
 8006b94:	08006c81 	.word	0x08006c81
 8006b98:	e000e400 	.word	0xe000e400
 8006b9c:	24000ba8 	.word	0x24000ba8
 8006ba0:	24000bac 	.word	0x24000bac
 8006ba4:	e000ed20 	.word	0xe000ed20
 8006ba8:	e000ed1c 	.word	0xe000ed1c
 8006bac:	24000054 	.word	0x24000054
 8006bb0:	e000ef34 	.word	0xe000ef34

08006bb4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
    __asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bbe:	b672      	cpsid	i
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	b662      	cpsie	i
 8006bce:	607b      	str	r3, [r7, #4]
}
 8006bd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006bd2:	4b11      	ldr	r3, [pc, #68]	@ (8006c18 <vPortEnterCritical+0x64>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8006c18 <vPortEnterCritical+0x64>)
 8006bda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8006c18 <vPortEnterCritical+0x64>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d112      	bne.n	8006c0a <vPortEnterCritical+0x56>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006be4:	4b0d      	ldr	r3, [pc, #52]	@ (8006c1c <vPortEnterCritical+0x68>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00d      	beq.n	8006c0a <vPortEnterCritical+0x56>
    __asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	b672      	cpsid	i
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	b662      	cpsie	i
 8006c02:	603b      	str	r3, [r7, #0]
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop
 8006c08:	e7fd      	b.n	8006c06 <vPortEnterCritical+0x52>
    }
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	24000054 	.word	0x24000054
 8006c1c:	e000ed04 	.word	0xe000ed04

08006c20 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006c26:	4b13      	ldr	r3, [pc, #76]	@ (8006c74 <vPortExitCritical+0x54>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10d      	bne.n	8006c4a <vPortExitCritical+0x2a>
    __asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c32:	b672      	cpsid	i
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	b662      	cpsie	i
 8006c42:	607b      	str	r3, [r7, #4]
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop
 8006c48:	e7fd      	b.n	8006c46 <vPortExitCritical+0x26>
    uxCriticalNesting--;
 8006c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c74 <vPortExitCritical+0x54>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	4a08      	ldr	r2, [pc, #32]	@ (8006c74 <vPortExitCritical+0x54>)
 8006c52:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006c54:	4b07      	ldr	r3, [pc, #28]	@ (8006c74 <vPortExitCritical+0x54>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d105      	bne.n	8006c68 <vPortExitCritical+0x48>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	f383 8811 	msr	BASEPRI, r3
}
 8006c66:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	24000054 	.word	0x24000054
	...

08006c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006c80:	f3ef 8009 	mrs	r0, PSP
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4b15      	ldr	r3, [pc, #84]	@ (8006ce0 <pxCurrentTCBConst>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	f01e 0f10 	tst.w	lr, #16
 8006c90:	bf08      	it	eq
 8006c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9a:	6010      	str	r0, [r2, #0]
 8006c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ca0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ca4:	b672      	cpsid	i
 8006ca6:	f380 8811 	msr	BASEPRI, r0
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	b662      	cpsie	i
 8006cb4:	f7fe fd98 	bl	80057e8 <vTaskSwitchContext>
 8006cb8:	f04f 0000 	mov.w	r0, #0
 8006cbc:	f380 8811 	msr	BASEPRI, r0
 8006cc0:	bc09      	pop	{r0, r3}
 8006cc2:	6819      	ldr	r1, [r3, #0]
 8006cc4:	6808      	ldr	r0, [r1, #0]
 8006cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cca:	f01e 0f10 	tst.w	lr, #16
 8006cce:	bf08      	it	eq
 8006cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cd4:	f380 8809 	msr	PSP, r0
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop

08006ce0 <pxCurrentTCBConst>:
 8006ce0:	240002d4 	.word	0x240002d4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006ce4:	bf00      	nop
 8006ce6:	bf00      	nop

08006ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
    __asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	b672      	cpsid	i
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	b662      	cpsie	i
 8006d02:	607b      	str	r3, [r7, #4]
}
 8006d04:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d06:	f7fe fc53 	bl	80055b0 <xTaskIncrementTick>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d10:	4b06      	ldr	r3, [pc, #24]	@ (8006d2c <xPortSysTickHandler+0x44>)
 8006d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	2300      	movs	r3, #0
 8006d1a:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	f383 8811 	msr	BASEPRI, r3
}
 8006d22:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006d24:	bf00      	nop
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d34:	4b0b      	ldr	r3, [pc, #44]	@ (8006d64 <vPortSetupTimerInterrupt+0x34>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <vPortSetupTimerInterrupt+0x38>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d40:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <vPortSetupTimerInterrupt+0x3c>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a0a      	ldr	r2, [pc, #40]	@ (8006d70 <vPortSetupTimerInterrupt+0x40>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	099b      	lsrs	r3, r3, #6
 8006d4c:	4a09      	ldr	r2, [pc, #36]	@ (8006d74 <vPortSetupTimerInterrupt+0x44>)
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d52:	4b04      	ldr	r3, [pc, #16]	@ (8006d64 <vPortSetupTimerInterrupt+0x34>)
 8006d54:	2207      	movs	r2, #7
 8006d56:	601a      	str	r2, [r3, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	e000e010 	.word	0xe000e010
 8006d68:	e000e018 	.word	0xe000e018
 8006d6c:	24000000 	.word	0x24000000
 8006d70:	10624dd3 	.word	0x10624dd3
 8006d74:	e000e014 	.word	0xe000e014

08006d78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006d78:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d88 <vPortEnableVFP+0x10>
 8006d7c:	6801      	ldr	r1, [r0, #0]
 8006d7e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d82:	6001      	str	r1, [r0, #0]
 8006d84:	4770      	bx	lr
 8006d86:	0000      	.short	0x0000
 8006d88:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006d8c:	bf00      	nop
 8006d8e:	bf00      	nop

08006d90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006d96:	f3ef 8305 	mrs	r3, IPSR
 8006d9a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d917      	bls.n	8006dd2 <vPortValidateInterruptPriority+0x42>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006da2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e0c <vPortValidateInterruptPriority+0x7c>)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dac:	4b18      	ldr	r3, [pc, #96]	@ (8006e10 <vPortValidateInterruptPriority+0x80>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	7afa      	ldrb	r2, [r7, #11]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d20d      	bcs.n	8006dd2 <vPortValidateInterruptPriority+0x42>
    __asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	b672      	cpsid	i
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	b662      	cpsie	i
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006dd2:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <vPortValidateInterruptPriority+0x84>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006dda:	4b0f      	ldr	r3, [pc, #60]	@ (8006e18 <vPortValidateInterruptPriority+0x88>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d90d      	bls.n	8006dfe <vPortValidateInterruptPriority+0x6e>
    __asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	b672      	cpsid	i
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	b662      	cpsie	i
 8006df6:	603b      	str	r3, [r7, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <vPortValidateInterruptPriority+0x6a>
    }
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	e000e3f0 	.word	0xe000e3f0
 8006e10:	24000ba8 	.word	0x24000ba8
 8006e14:	e000ed0c 	.word	0xe000ed0c
 8006e18:	24000bac 	.word	0x24000bac

08006e1c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b08e      	sub	sp, #56	@ 0x38
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d022      	beq.n	8006e74 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006e2e:	2308      	movs	r3, #8
 8006e30:	43db      	mvns	r3, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d81b      	bhi.n	8006e70 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8006e38:	2208      	movs	r2, #8
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d014      	beq.n	8006e74 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	f1c3 0308 	rsb	r3, r3, #8
 8006e54:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d804      	bhi.n	8006e6a <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e64:	4413      	add	r3, r2
 8006e66:	607b      	str	r3, [r7, #4]
 8006e68:	e004      	b.n	8006e74 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	607b      	str	r3, [r7, #4]
 8006e6e:	e001      	b.n	8006e74 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006e74:	f7fe fa56 	bl	8005324 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006e78:	4b80      	ldr	r3, [pc, #512]	@ (800707c <pvPortMalloc+0x260>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8006e80:	f000 f986 	bl	8007190 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f2c0 80de 	blt.w	8007048 <pvPortMalloc+0x22c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 80da 	beq.w	8007048 <pvPortMalloc+0x22c>
 8006e94:	4b7a      	ldr	r3, [pc, #488]	@ (8007080 <pvPortMalloc+0x264>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	f200 80d4 	bhi.w	8007048 <pvPortMalloc+0x22c>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006ea0:	4b78      	ldr	r3, [pc, #480]	@ (8007084 <pvPortMalloc+0x268>)
 8006ea2:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006ea4:	4b77      	ldr	r3, [pc, #476]	@ (8007084 <pvPortMalloc+0x268>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	4a76      	ldr	r2, [pc, #472]	@ (8007088 <pvPortMalloc+0x26c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d305      	bcc.n	8006ebe <pvPortMalloc+0xa2>
 8006eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb4:	4a75      	ldr	r2, [pc, #468]	@ (800708c <pvPortMalloc+0x270>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d801      	bhi.n	8006ebe <pvPortMalloc+0xa2>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <pvPortMalloc+0xa4>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d12d      	bne.n	8006f20 <pvPortMalloc+0x104>
    __asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec8:	b672      	cpsid	i
 8006eca:	f383 8811 	msr	BASEPRI, r3
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	b662      	cpsie	i
 8006ed8:	623b      	str	r3, [r7, #32]
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	e7fd      	b.n	8006edc <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8006eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eec:	4a66      	ldr	r2, [pc, #408]	@ (8007088 <pvPortMalloc+0x26c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d305      	bcc.n	8006efe <pvPortMalloc+0xe2>
 8006ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef4:	4a65      	ldr	r2, [pc, #404]	@ (800708c <pvPortMalloc+0x270>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d801      	bhi.n	8006efe <pvPortMalloc+0xe2>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <pvPortMalloc+0xe4>
 8006efe:	2300      	movs	r3, #0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10d      	bne.n	8006f20 <pvPortMalloc+0x104>
    __asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f08:	b672      	cpsid	i
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	b662      	cpsie	i
 8006f18:	61fb      	str	r3, [r7, #28]
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	e7fd      	b.n	8006f1c <pvPortMalloc+0x100>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d903      	bls.n	8006f32 <pvPortMalloc+0x116>
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1d6      	bne.n	8006ee0 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f32:	4b52      	ldr	r3, [pc, #328]	@ (800707c <pvPortMalloc+0x260>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	f000 8085 	beq.w	8007048 <pvPortMalloc+0x22c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2208      	movs	r2, #8
 8006f44:	4413      	add	r3, r2
 8006f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	4a4f      	ldr	r2, [pc, #316]	@ (8007088 <pvPortMalloc+0x26c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d305      	bcc.n	8006f5c <pvPortMalloc+0x140>
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	4a4e      	ldr	r2, [pc, #312]	@ (800708c <pvPortMalloc+0x270>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d801      	bhi.n	8006f5c <pvPortMalloc+0x140>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <pvPortMalloc+0x142>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <pvPortMalloc+0x162>
    __asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	b672      	cpsid	i
 8006f68:	f383 8811 	msr	BASEPRI, r3
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f3bf 8f4f 	dsb	sy
 8006f74:	b662      	cpsie	i
 8006f76:	61bb      	str	r3, [r7, #24]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <pvPortMalloc+0x15e>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d90d      	bls.n	8006fac <pvPortMalloc+0x190>
    __asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f94:	b672      	cpsid	i
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	b662      	cpsie	i
 8006fa4:	617b      	str	r3, [r7, #20]
}
 8006fa6:	bf00      	nop
 8006fa8:	bf00      	nop
 8006faa:	e7fd      	b.n	8006fa8 <pvPortMalloc+0x18c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	2308      	movs	r3, #8
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d926      	bls.n	800700a <pvPortMalloc+0x1ee>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <pvPortMalloc+0x1ce>
    __asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd2:	b672      	cpsid	i
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	b662      	cpsie	i
 8006fe2:	613b      	str	r3, [r7, #16]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <pvPortMalloc+0x1ca>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fec:	685a      	ldr	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	1ad2      	subs	r2, r2, r3
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007008:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800700a:	4b1d      	ldr	r3, [pc, #116]	@ (8007080 <pvPortMalloc+0x264>)
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	4a1a      	ldr	r2, [pc, #104]	@ (8007080 <pvPortMalloc+0x264>)
 8007016:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007018:	4b19      	ldr	r3, [pc, #100]	@ (8007080 <pvPortMalloc+0x264>)
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	4b1c      	ldr	r3, [pc, #112]	@ (8007090 <pvPortMalloc+0x274>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	429a      	cmp	r2, r3
 8007022:	d203      	bcs.n	800702c <pvPortMalloc+0x210>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007024:	4b16      	ldr	r3, [pc, #88]	@ (8007080 <pvPortMalloc+0x264>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a19      	ldr	r2, [pc, #100]	@ (8007090 <pvPortMalloc+0x274>)
 800702a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800702c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007036:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703a:	2200      	movs	r2, #0
 800703c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800703e:	4b15      	ldr	r3, [pc, #84]	@ (8007094 <pvPortMalloc+0x278>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3301      	adds	r3, #1
 8007044:	4a13      	ldr	r2, [pc, #76]	@ (8007094 <pvPortMalloc+0x278>)
 8007046:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007048:	f7fe f97a 	bl	8005340 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800704c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <pvPortMalloc+0x256>
    __asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	b672      	cpsid	i
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	b662      	cpsie	i
 800706a:	60fb      	str	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <pvPortMalloc+0x252>
    return pvReturn;
 8007072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007074:	4618      	mov	r0, r3
 8007076:	3738      	adds	r7, #56	@ 0x38
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	24040bb8 	.word	0x24040bb8
 8007080:	24040bbc 	.word	0x24040bbc
 8007084:	24040bb0 	.word	0x24040bb0
 8007088:	24000bb0 	.word	0x24000bb0
 800708c:	24040baf 	.word	0x24040baf
 8007090:	24040bc0 	.word	0x24040bc0
 8007094:	24040bc4 	.word	0x24040bc4

08007098 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d066      	beq.n	8007178 <vPortFree+0xe0>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80070aa:	2308      	movs	r3, #8
 80070ac:	425b      	negs	r3, r3
 80070ae:	69fa      	ldr	r2, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	4a31      	ldr	r2, [pc, #196]	@ (8007180 <vPortFree+0xe8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d305      	bcc.n	80070cc <vPortFree+0x34>
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	4a30      	ldr	r2, [pc, #192]	@ (8007184 <vPortFree+0xec>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d801      	bhi.n	80070cc <vPortFree+0x34>
 80070c8:	2301      	movs	r3, #1
 80070ca:	e000      	b.n	80070ce <vPortFree+0x36>
 80070cc:	2300      	movs	r3, #0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10d      	bne.n	80070ee <vPortFree+0x56>
    __asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	b672      	cpsid	i
 80070d8:	f383 8811 	msr	BASEPRI, r3
 80070dc:	f3bf 8f6f 	isb	sy
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	b662      	cpsie	i
 80070e6:	617b      	str	r3, [r7, #20]
}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	e7fd      	b.n	80070ea <vPortFree+0x52>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	db0d      	blt.n	8007112 <vPortFree+0x7a>
    __asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	b672      	cpsid	i
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	b662      	cpsie	i
 800710a:	613b      	str	r3, [r7, #16]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <vPortFree+0x76>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00d      	beq.n	8007136 <vPortFree+0x9e>
    __asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711e:	b672      	cpsid	i
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	b662      	cpsie	i
 800712e:	60fb      	str	r3, [r7, #12]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <vPortFree+0x9a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	da1c      	bge.n	8007178 <vPortFree+0xe0>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d118      	bne.n	8007178 <vPortFree+0xe0>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8007152:	f7fe f8e7 	bl	8005324 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	4b0b      	ldr	r3, [pc, #44]	@ (8007188 <vPortFree+0xf0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4413      	add	r3, r2
 8007160:	4a09      	ldr	r2, [pc, #36]	@ (8007188 <vPortFree+0xf0>)
 8007162:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007164:	69b8      	ldr	r0, [r7, #24]
 8007166:	f000 f86d 	bl	8007244 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800716a:	4b08      	ldr	r3, [pc, #32]	@ (800718c <vPortFree+0xf4>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3301      	adds	r3, #1
 8007170:	4a06      	ldr	r2, [pc, #24]	@ (800718c <vPortFree+0xf4>)
 8007172:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007174:	f7fe f8e4 	bl	8005340 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007178:	bf00      	nop
 800717a:	3720      	adds	r7, #32
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	24000bb0 	.word	0x24000bb0
 8007184:	24040baf 	.word	0x24040baf
 8007188:	24040bbc 	.word	0x24040bbc
 800718c:	24040bc8 	.word	0x24040bc8

08007190 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007196:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800719a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800719c:	4b24      	ldr	r3, [pc, #144]	@ (8007230 <prvHeapInit+0xa0>)
 800719e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0307 	and.w	r3, r3, #7
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00c      	beq.n	80071c4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3307      	adds	r3, #7
 80071ae:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f023 0307 	bic.w	r3, r3, #7
 80071b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	4a1c      	ldr	r2, [pc, #112]	@ (8007230 <prvHeapInit+0xa0>)
 80071c0:	4413      	add	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007234 <prvHeapInit+0xa4>)
 80071c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80071ca:	4b1a      	ldr	r3, [pc, #104]	@ (8007234 <prvHeapInit+0xa4>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	4413      	add	r3, r2
 80071d6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80071d8:	2208      	movs	r2, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f023 0307 	bic.w	r3, r3, #7
 80071e6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a13      	ldr	r2, [pc, #76]	@ (8007238 <prvHeapInit+0xa8>)
 80071ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80071ee:	4b12      	ldr	r3, [pc, #72]	@ (8007238 <prvHeapInit+0xa8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80071f6:	4b10      	ldr	r3, [pc, #64]	@ (8007238 <prvHeapInit+0xa8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	1ad2      	subs	r2, r2, r3
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <prvHeapInit+0xa8>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a08      	ldr	r2, [pc, #32]	@ (800723c <prvHeapInit+0xac>)
 800721a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	4a07      	ldr	r2, [pc, #28]	@ (8007240 <prvHeapInit+0xb0>)
 8007222:	6013      	str	r3, [r2, #0]
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr
 8007230:	24000bb0 	.word	0x24000bb0
 8007234:	24040bb0 	.word	0x24040bb0
 8007238:	24040bb8 	.word	0x24040bb8
 800723c:	24040bc0 	.word	0x24040bc0
 8007240:	24040bbc 	.word	0x24040bbc

08007244 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800724c:	4b37      	ldr	r3, [pc, #220]	@ (800732c <prvInsertBlockIntoFreeList+0xe8>)
 800724e:	617b      	str	r3, [r7, #20]
 8007250:	e002      	b.n	8007258 <prvInsertBlockIntoFreeList+0x14>
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	429a      	cmp	r2, r3
 8007260:	d8f7      	bhi.n	8007252 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	4a31      	ldr	r2, [pc, #196]	@ (800732c <prvInsertBlockIntoFreeList+0xe8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d01a      	beq.n	80072a0 <prvInsertBlockIntoFreeList+0x5c>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	4a30      	ldr	r2, [pc, #192]	@ (8007330 <prvInsertBlockIntoFreeList+0xec>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d305      	bcc.n	800727e <prvInsertBlockIntoFreeList+0x3a>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4a2f      	ldr	r2, [pc, #188]	@ (8007334 <prvInsertBlockIntoFreeList+0xf0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d801      	bhi.n	800727e <prvInsertBlockIntoFreeList+0x3a>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <prvInsertBlockIntoFreeList+0x3c>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10d      	bne.n	80072a0 <prvInsertBlockIntoFreeList+0x5c>
    __asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	b672      	cpsid	i
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	b662      	cpsie	i
 8007298:	60fb      	str	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	bf00      	nop
 800729e:	e7fd      	b.n	800729c <prvInsertBlockIntoFreeList+0x58>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4413      	add	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d108      	bne.n	80072c4 <prvInsertBlockIntoFreeList+0x80>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	441a      	add	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	441a      	add	r2, r3
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d118      	bne.n	800730a <prvInsertBlockIntoFreeList+0xc6>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	4b16      	ldr	r3, [pc, #88]	@ (8007338 <prvInsertBlockIntoFreeList+0xf4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d00d      	beq.n	8007300 <prvInsertBlockIntoFreeList+0xbc>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685a      	ldr	r2, [r3, #4]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	441a      	add	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e008      	b.n	8007312 <prvInsertBlockIntoFreeList+0xce>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8007300:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <prvInsertBlockIntoFreeList+0xf4>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e003      	b.n	8007312 <prvInsertBlockIntoFreeList+0xce>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	429a      	cmp	r2, r3
 8007318:	d002      	beq.n	8007320 <prvInsertBlockIntoFreeList+0xdc>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	24040bb0 	.word	0x24040bb0
 8007330:	24000bb0 	.word	0x24000bb0
 8007334:	24040baf 	.word	0x24040baf
 8007338:	24040bb8 	.word	0x24040bb8

0800733c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007342:	2003      	movs	r0, #3
 8007344:	f000 f95c 	bl	8007600 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007348:	f001 fd18 	bl	8008d7c <HAL_RCC_GetSysClockFreq>
 800734c:	4602      	mov	r2, r0
 800734e:	4b15      	ldr	r3, [pc, #84]	@ (80073a4 <HAL_Init+0x68>)
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	0a1b      	lsrs	r3, r3, #8
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	4913      	ldr	r1, [pc, #76]	@ (80073a8 <HAL_Init+0x6c>)
 800735a:	5ccb      	ldrb	r3, [r1, r3]
 800735c:	f003 031f 	and.w	r3, r3, #31
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
 8007364:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007366:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <HAL_Init+0x68>)
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	4a0e      	ldr	r2, [pc, #56]	@ (80073a8 <HAL_Init+0x6c>)
 8007370:	5cd3      	ldrb	r3, [r2, r3]
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
 800737c:	4a0b      	ldr	r2, [pc, #44]	@ (80073ac <HAL_Init+0x70>)
 800737e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007380:	4a0b      	ldr	r2, [pc, #44]	@ (80073b0 <HAL_Init+0x74>)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007386:	200f      	movs	r0, #15
 8007388:	f000 f814 	bl	80073b4 <HAL_InitTick>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e002      	b.n	800739c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007396:	f7f9 ff27 	bl	80011e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	58024400 	.word	0x58024400
 80073a8:	0800c2b8 	.word	0x0800c2b8
 80073ac:	24000004 	.word	0x24000004
 80073b0:	24000000 	.word	0x24000000

080073b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80073bc:	4b15      	ldr	r3, [pc, #84]	@ (8007414 <HAL_InitTick+0x60>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	e021      	b.n	800740c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80073c8:	4b13      	ldr	r3, [pc, #76]	@ (8007418 <HAL_InitTick+0x64>)
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	4b11      	ldr	r3, [pc, #68]	@ (8007414 <HAL_InitTick+0x60>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	4619      	mov	r1, r3
 80073d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80073da:	fbb2 f3f3 	udiv	r3, r2, r3
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f941 	bl	8007666 <HAL_SYSTICK_Config>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e00e      	b.n	800740c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b0f      	cmp	r3, #15
 80073f2:	d80a      	bhi.n	800740a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073f4:	2200      	movs	r2, #0
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	f000 f90b 	bl	8007616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007400:	4a06      	ldr	r2, [pc, #24]	@ (800741c <HAL_InitTick+0x68>)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	e000      	b.n	800740c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
}
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	2400005c 	.word	0x2400005c
 8007418:	24000000 	.word	0x24000000
 800741c:	24000058 	.word	0x24000058

08007420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007424:	4b06      	ldr	r3, [pc, #24]	@ (8007440 <HAL_IncTick+0x20>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	461a      	mov	r2, r3
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <HAL_IncTick+0x24>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4413      	add	r3, r2
 8007430:	4a04      	ldr	r2, [pc, #16]	@ (8007444 <HAL_IncTick+0x24>)
 8007432:	6013      	str	r3, [r2, #0]
}
 8007434:	bf00      	nop
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	2400005c 	.word	0x2400005c
 8007444:	24040bcc 	.word	0x24040bcc

08007448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  return uwTick;
 800744c:	4b03      	ldr	r3, [pc, #12]	@ (800745c <HAL_GetTick+0x14>)
 800744e:	681b      	ldr	r3, [r3, #0]
}
 8007450:	4618      	mov	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	24040bcc 	.word	0x24040bcc

08007460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007470:	4b0b      	ldr	r3, [pc, #44]	@ (80074a0 <__NVIC_SetPriorityGrouping+0x40>)
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800747c:	4013      	ands	r3, r2
 800747e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007488:	4b06      	ldr	r3, [pc, #24]	@ (80074a4 <__NVIC_SetPriorityGrouping+0x44>)
 800748a:	4313      	orrs	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800748e:	4a04      	ldr	r2, [pc, #16]	@ (80074a0 <__NVIC_SetPriorityGrouping+0x40>)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	60d3      	str	r3, [r2, #12]
}
 8007494:	bf00      	nop
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	e000ed00 	.word	0xe000ed00
 80074a4:	05fa0000 	.word	0x05fa0000

080074a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074ac:	4b04      	ldr	r3, [pc, #16]	@ (80074c0 <__NVIC_GetPriorityGrouping+0x18>)
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	f003 0307 	and.w	r3, r3, #7
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	e000ed00 	.word	0xe000ed00

080074c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80074ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	db0b      	blt.n	80074ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	f003 021f 	and.w	r2, r3, #31
 80074dc:	4907      	ldr	r1, [pc, #28]	@ (80074fc <__NVIC_EnableIRQ+0x38>)
 80074de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074e2:	095b      	lsrs	r3, r3, #5
 80074e4:	2001      	movs	r0, #1
 80074e6:	fa00 f202 	lsl.w	r2, r0, r2
 80074ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	e000e100 	.word	0xe000e100

08007500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	6039      	str	r1, [r7, #0]
 800750a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800750c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007510:	2b00      	cmp	r3, #0
 8007512:	db0a      	blt.n	800752a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	b2da      	uxtb	r2, r3
 8007518:	490c      	ldr	r1, [pc, #48]	@ (800754c <__NVIC_SetPriority+0x4c>)
 800751a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800751e:	0112      	lsls	r2, r2, #4
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	440b      	add	r3, r1
 8007524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007528:	e00a      	b.n	8007540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	b2da      	uxtb	r2, r3
 800752e:	4908      	ldr	r1, [pc, #32]	@ (8007550 <__NVIC_SetPriority+0x50>)
 8007530:	88fb      	ldrh	r3, [r7, #6]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	3b04      	subs	r3, #4
 8007538:	0112      	lsls	r2, r2, #4
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	440b      	add	r3, r1
 800753e:	761a      	strb	r2, [r3, #24]
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	e000e100 	.word	0xe000e100
 8007550:	e000ed00 	.word	0xe000ed00

08007554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007554:	b480      	push	{r7}
 8007556:	b089      	sub	sp, #36	@ 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f1c3 0307 	rsb	r3, r3, #7
 800756e:	2b04      	cmp	r3, #4
 8007570:	bf28      	it	cs
 8007572:	2304      	movcs	r3, #4
 8007574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	3304      	adds	r3, #4
 800757a:	2b06      	cmp	r3, #6
 800757c:	d902      	bls.n	8007584 <NVIC_EncodePriority+0x30>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3b03      	subs	r3, #3
 8007582:	e000      	b.n	8007586 <NVIC_EncodePriority+0x32>
 8007584:	2300      	movs	r3, #0
 8007586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007588:	f04f 32ff 	mov.w	r2, #4294967295
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	fa02 f303 	lsl.w	r3, r2, r3
 8007592:	43da      	mvns	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	401a      	ands	r2, r3
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800759c:	f04f 31ff 	mov.w	r1, #4294967295
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	43d9      	mvns	r1, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075ac:	4313      	orrs	r3, r2
         );
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3724      	adds	r7, #36	@ 0x24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
	...

080075bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075cc:	d301      	bcc.n	80075d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075ce:	2301      	movs	r3, #1
 80075d0:	e00f      	b.n	80075f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075d2:	4a0a      	ldr	r2, [pc, #40]	@ (80075fc <SysTick_Config+0x40>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075da:	210f      	movs	r1, #15
 80075dc:	f04f 30ff 	mov.w	r0, #4294967295
 80075e0:	f7ff ff8e 	bl	8007500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075e4:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <SysTick_Config+0x40>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075ea:	4b04      	ldr	r3, [pc, #16]	@ (80075fc <SysTick_Config+0x40>)
 80075ec:	2207      	movs	r2, #7
 80075ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	e000e010 	.word	0xe000e010

08007600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff ff29 	bl	8007460 <__NVIC_SetPriorityGrouping>
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b086      	sub	sp, #24
 800761a:	af00      	add	r7, sp, #0
 800761c:	4603      	mov	r3, r0
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
 8007622:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007624:	f7ff ff40 	bl	80074a8 <__NVIC_GetPriorityGrouping>
 8007628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	68b9      	ldr	r1, [r7, #8]
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	f7ff ff90 	bl	8007554 <NVIC_EncodePriority>
 8007634:	4602      	mov	r2, r0
 8007636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800763a:	4611      	mov	r1, r2
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff ff5f 	bl	8007500 <__NVIC_SetPriority>
}
 8007642:	bf00      	nop
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	4603      	mov	r3, r0
 8007652:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007654:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff ff33 	bl	80074c4 <__NVIC_EnableIRQ>
}
 800765e:	bf00      	nop
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b082      	sub	sp, #8
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff ffa4 	bl	80075bc <SysTick_Config>
 8007674:	4603      	mov	r3, r0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
	...

08007680 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b098      	sub	sp, #96	@ 0x60
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007688:	4a84      	ldr	r2, [pc, #528]	@ (800789c <HAL_FDCAN_Init+0x21c>)
 800768a:	f107 030c 	add.w	r3, r7, #12
 800768e:	4611      	mov	r1, r2
 8007690:	224c      	movs	r2, #76	@ 0x4c
 8007692:	4618      	mov	r0, r3
 8007694:	f003 f949 	bl	800a92a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e1c6      	b.n	8007a30 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a7e      	ldr	r2, [pc, #504]	@ (80078a0 <HAL_FDCAN_Init+0x220>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d106      	bne.n	80076ba <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7f9 fda4 	bl	800121c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0210 	bic.w	r2, r2, #16
 80076e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076e4:	f7ff feb0 	bl	8007448 <HAL_GetTick>
 80076e8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80076ea:	e014      	b.n	8007716 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076ec:	f7ff feac 	bl	8007448 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b0a      	cmp	r3, #10
 80076f8:	d90d      	bls.n	8007716 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007700:	f043 0201 	orr.w	r2, r3, #1
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2203      	movs	r2, #3
 800770e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e18c      	b.n	8007a30 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d0e3      	beq.n	80076ec <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699a      	ldr	r2, [r3, #24]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007734:	f7ff fe88 	bl	8007448 <HAL_GetTick>
 8007738:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800773a:	e014      	b.n	8007766 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800773c:	f7ff fe84 	bl	8007448 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b0a      	cmp	r3, #10
 8007748:	d90d      	bls.n	8007766 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007750:	f043 0201 	orr.w	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2203      	movs	r2, #3
 800775e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e164      	b.n	8007a30 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d0e3      	beq.n	800773c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f042 0202 	orr.w	r2, r2, #2
 8007782:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	7c1b      	ldrb	r3, [r3, #16]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d108      	bne.n	800779e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699a      	ldr	r2, [r3, #24]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800779a:	619a      	str	r2, [r3, #24]
 800779c:	e007      	b.n	80077ae <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077ac:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7c5b      	ldrb	r3, [r3, #17]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d108      	bne.n	80077c8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077c4:	619a      	str	r2, [r3, #24]
 80077c6:	e007      	b.n	80077d8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077d6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7c9b      	ldrb	r3, [r3, #18]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d108      	bne.n	80077f2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077ee:	619a      	str	r2, [r3, #24]
 80077f0:	e007      	b.n	8007802 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007800:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007826:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0210 	bic.w	r2, r2, #16
 8007836:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d108      	bne.n	8007852 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0204 	orr.w	r2, r2, #4
 800784e:	619a      	str	r2, [r3, #24]
 8007850:	e030      	b.n	80078b4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02c      	beq.n	80078b4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	2b02      	cmp	r3, #2
 8007860:	d020      	beq.n	80078a4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	699a      	ldr	r2, [r3, #24]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007870:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0210 	orr.w	r2, r2, #16
 8007880:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b03      	cmp	r3, #3
 8007888:	d114      	bne.n	80078b4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	699a      	ldr	r2, [r3, #24]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f042 0220 	orr.w	r2, r2, #32
 8007898:	619a      	str	r2, [r3, #24]
 800789a:	e00b      	b.n	80078b4 <HAL_FDCAN_Init+0x234>
 800789c:	0800c26c 	.word	0x0800c26c
 80078a0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0220 	orr.w	r2, r2, #32
 80078b2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078c4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80078cc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	3b01      	subs	r3, #1
 80078d6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80078dc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078de:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078e8:	d115      	bne.n	8007916 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ee:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f4:	3b01      	subs	r3, #1
 80078f6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078f8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078fe:	3b01      	subs	r3, #1
 8007900:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007902:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790a:	3b01      	subs	r3, #1
 800790c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007912:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007914:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800793c:	4413      	add	r3, r2
 800793e:	2b00      	cmp	r3, #0
 8007940:	d011      	beq.n	8007966 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800794a:	f023 0107 	bic.w	r1, r3, #7
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	3360      	adds	r3, #96	@ 0x60
 8007956:	443b      	add	r3, r7
 8007958:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d011      	beq.n	8007992 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007976:	f023 0107 	bic.w	r1, r3, #7
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	3360      	adds	r3, #96	@ 0x60
 8007982:	443b      	add	r3, r7
 8007984:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007996:	2b00      	cmp	r3, #0
 8007998:	d012      	beq.n	80079c0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079a2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	3360      	adds	r3, #96	@ 0x60
 80079ae:	443b      	add	r3, r7
 80079b0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80079b4:	011a      	lsls	r2, r3, #4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d012      	beq.n	80079ee <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80079d0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	3360      	adds	r3, #96	@ 0x60
 80079dc:	443b      	add	r3, r7
 80079de:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80079e2:	021a      	lsls	r2, r3, #8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a11      	ldr	r2, [pc, #68]	@ (8007a38 <HAL_FDCAN_Init+0x3b8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d107      	bne.n	8007a08 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f022 0203 	bic.w	r2, r2, #3
 8007a06:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fdf7 	bl	8008614 <FDCAN_CalcultateRamBlockAddresses>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007a2c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3760      	adds	r7, #96	@ 0x60
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	4000a000 	.word	0x4000a000

08007a3c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007a4c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d002      	beq.n	8007a5a <HAL_FDCAN_ConfigFilter+0x1e>
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d157      	bne.n	8007b0a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d12b      	bne.n	8007aba <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	2b07      	cmp	r3, #7
 8007a68:	d10d      	bne.n	8007a86 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007a76:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007a7c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007a7e:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e00e      	b.n	8007aa4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007a92:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007a9a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e025      	b.n	8007b06 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	075a      	lsls	r2, r3, #29
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b07      	cmp	r3, #7
 8007ace:	d103      	bne.n	8007ad8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	613b      	str	r3, [r7, #16]
 8007ad6:	e006      	b.n	8007ae6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	079a      	lsls	r2, r3, #30
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	4413      	add	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	697a      	ldr	r2, [r7, #20]
 8007af8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	3304      	adds	r3, #4
 8007afe:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e008      	b.n	8007b1c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b10:	f043 0202 	orr.w	r2, r3, #2
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
  }
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d111      	bne.n	8007b60 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699a      	ldr	r2, [r3, #24]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f022 0201 	bic.w	r2, r2, #1
 8007b52:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e008      	b.n	8007b72 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b66:	f043 0204 	orr.w	r2, r3, #4
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
  }
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b086      	sub	sp, #24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d141      	bne.n	8007c1a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b9e:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bac:	f043 0220 	orr.w	r2, r3, #32
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e038      	b.n	8007c2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d009      	beq.n	8007bde <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bd0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e026      	b.n	8007c2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	f003 031f 	and.w	r3, r3, #31
 8007bec:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 fe93 	bl	8008920 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2101      	movs	r1, #1
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	fa01 f202 	lsl.w	r2, r1, r2
 8007c06:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	409a      	lsls	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e008      	b.n	8007c2c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c20:	f043 0208 	orr.w	r2, r3, #8
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
  }
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3718      	adds	r7, #24
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b08b      	sub	sp, #44	@ 0x2c
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
 8007c40:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c4c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007c4e:	7efb      	ldrb	r3, [r7, #27]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	f040 8149 	bne.w	8007ee8 <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	2b40      	cmp	r3, #64	@ 0x40
 8007c5a:	d14c      	bne.n	8007cf6 <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d109      	bne.n	8007c80 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c72:	f043 0220 	orr.w	r2, r3, #32
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e13c      	b.n	8007efa <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e12a      	b.n	8007efa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cb4:	d10a      	bne.n	8007ccc <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007cbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cc6:	d101      	bne.n	8007ccc <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cd4:	0a1b      	lsrs	r3, r3, #8
 8007cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	4413      	add	r3, r2
 8007cde:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce8:	69f9      	ldr	r1, [r7, #28]
 8007cea:	fb01 f303 	mul.w	r3, r1, r3
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cf4:	e068      	b.n	8007dc8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b41      	cmp	r3, #65	@ 0x41
 8007cfa:	d14c      	bne.n	8007d96 <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d04:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d109      	bne.n	8007d20 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e0ec      	b.n	8007efa <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d109      	bne.n	8007d44 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e0da      	b.n	8007efa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d54:	d10a      	bne.n	8007d6c <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d66:	d101      	bne.n	8007d6c <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007d74:	0a1b      	lsrs	r3, r3, #8
 8007d76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	fb01 f303 	mul.w	r3, r1, r3
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d94:	e018      	b.n	8007dc8 <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d309      	bcc.n	8007db4 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007da6:	f043 0220 	orr.w	r2, r3, #32
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0a2      	b.n	8007efa <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	fb01 f303 	mul.w	r3, r1, r3
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d107      	bne.n	8007dec <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	0c9b      	lsrs	r3, r3, #18
 8007de2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e005      	b.n	8007df8 <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e12:	3304      	adds	r3, #4
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	0c1b      	lsrs	r3, r3, #16
 8007e26:	f003 020f 	and.w	r2, r3, #15
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	0e1b      	lsrs	r3, r3, #24
 8007e4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	0fda      	lsrs	r2, r3, #31
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	3304      	adds	r3, #4
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007e68:	2300      	movs	r3, #0
 8007e6a:	623b      	str	r3, [r7, #32]
 8007e6c:	e00a      	b.n	8007e84 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	441a      	add	r2, r3
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6a3b      	ldr	r3, [r7, #32]
 8007e78:	440b      	add	r3, r1
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	3301      	adds	r3, #1
 8007e82:	623b      	str	r3, [r7, #32]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	4a1f      	ldr	r2, [pc, #124]	@ (8007f08 <HAL_FDCAN_GetRxMessage+0x2d4>)
 8007e8a:	5cd3      	ldrb	r3, [r2, r3]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	6a3b      	ldr	r3, [r7, #32]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d3ec      	bcc.n	8007e6e <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b40      	cmp	r3, #64	@ 0x40
 8007e98:	d105      	bne.n	8007ea6 <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	69fa      	ldr	r2, [r7, #28]
 8007ea0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8007ea4:	e01e      	b.n	8007ee4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b41      	cmp	r3, #65	@ 0x41
 8007eaa:	d105      	bne.n	8007eb8 <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	69fa      	ldr	r2, [r7, #28]
 8007eb2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8007eb6:	e015      	b.n	8007ee4 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b1f      	cmp	r3, #31
 8007ebc:	d808      	bhi.n	8007ed0 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8007ece:	e009      	b.n	8007ee4 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 021f 	and.w	r2, r3, #31
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2101      	movs	r1, #1
 8007edc:	fa01 f202 	lsl.w	r2, r1, r2
 8007ee0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	e008      	b.n	8007efa <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eee:	f043 0208 	orr.w	r2, r3, #8
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
  }
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	372c      	adds	r7, #44	@ 0x2c
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	0800c2dc 	.word	0x0800c2dc

08007f0c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007f1e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d002      	beq.n	8007f2c <HAL_FDCAN_ActivateNotification+0x20>
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d155      	bne.n	8007fd8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	4013      	ands	r3, r2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d108      	bne.n	8007f4c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f4a:	e014      	b.n	8007f76 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	4013      	ands	r3, r2
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d108      	bne.n	8007f6e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0202 	orr.w	r2, r2, #2
 8007f6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f6c:	e003      	b.n	8007f76 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2203      	movs	r2, #3
 8007f74:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d009      	beq.n	8007f94 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff8 <HAL_FDCAN_ActivateNotification+0xec>)
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	6812      	ldr	r2, [r2, #0]
 8007fc2:	430b      	orrs	r3, r1
 8007fc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <HAL_FDCAN_ActivateNotification+0xf0>)
 8007fc8:	695a      	ldr	r2, [r3, #20]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0f9b      	lsrs	r3, r3, #30
 8007fce:	490b      	ldr	r1, [pc, #44]	@ (8007ffc <HAL_FDCAN_ActivateNotification+0xf0>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	e008      	b.n	8007fea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007fde:	f043 0202 	orr.w	r2, r3, #2
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
  }
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	371c      	adds	r7, #28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	3fcfffff 	.word	0x3fcfffff
 8007ffc:	4000a800 	.word	0x4000a800

08008000 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b096      	sub	sp, #88	@ 0x58
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8008008:	4b9a      	ldr	r3, [pc, #616]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	079b      	lsls	r3, r3, #30
 800800e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8008010:	4b98      	ldr	r3, [pc, #608]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	079b      	lsls	r3, r3, #30
 8008016:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008018:	4013      	ands	r3, r2
 800801a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008022:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008026:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008030:	4013      	ands	r3, r2
 8008032:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008046:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008048:	4013      	ands	r3, r2
 800804a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008052:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800805e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008060:	4013      	ands	r3, r2
 8008062:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800806a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800806e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008078:	4013      	ands	r3, r2
 800807a:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008082:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8008086:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008090:	4013      	ands	r3, r2
 8008092:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800809a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80080a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d010      	beq.n	80080d2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80080b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080b2:	0a1b      	lsrs	r3, r3, #8
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80080c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80080c6:	4b6b      	ldr	r3, [pc, #428]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 fa54 	bl	800857a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80080d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080d4:	0a9b      	lsrs	r3, r3, #10
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d01d      	beq.n	800811a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80080de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e0:	0a9b      	lsrs	r3, r3, #10
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d017      	beq.n	800811a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80080f2:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80080fe:	4013      	ands	r3, r2
 8008100:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800810a:	651a      	str	r2, [r3, #80]	@ 0x50
 800810c:	4b59      	ldr	r3, [pc, #356]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 800810e:	2200      	movs	r2, #0
 8008110:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8008112:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa07 	bl	8008528 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800811a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00d      	beq.n	800813c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008126:	4b54      	ldr	r3, [pc, #336]	@ (8008278 <HAL_FDCAN_IRQHandler+0x278>)
 8008128:	400b      	ands	r3, r1
 800812a:	6513      	str	r3, [r2, #80]	@ 0x50
 800812c:	4a51      	ldr	r2, [pc, #324]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 800812e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008130:	0f9b      	lsrs	r3, r3, #30
 8008132:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8008134:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f9c0 	bl	80084bc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800813c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00d      	beq.n	800815e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008148:	4b4b      	ldr	r3, [pc, #300]	@ (8008278 <HAL_FDCAN_IRQHandler+0x278>)
 800814a:	400b      	ands	r3, r1
 800814c:	6513      	str	r3, [r2, #80]	@ 0x50
 800814e:	4a49      	ldr	r2, [pc, #292]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 8008150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008152:	0f9b      	lsrs	r3, r3, #30
 8008154:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 f9ba 	bl	80084d2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800815e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00d      	beq.n	8008180 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800816a:	4b43      	ldr	r3, [pc, #268]	@ (8008278 <HAL_FDCAN_IRQHandler+0x278>)
 800816c:	400b      	ands	r3, r1
 800816e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008170:	4a40      	ldr	r2, [pc, #256]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 8008172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008174:	0f9b      	lsrs	r3, r3, #30
 8008176:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008178:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fb f874 	bl	8003268 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00d      	beq.n	80081a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800818c:	4b3a      	ldr	r3, [pc, #232]	@ (8008278 <HAL_FDCAN_IRQHandler+0x278>)
 800818e:	400b      	ands	r3, r1
 8008190:	6513      	str	r3, [r2, #80]	@ 0x50
 8008192:	4a38      	ldr	r2, [pc, #224]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 8008194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008196:	0f9b      	lsrs	r3, r3, #30
 8008198:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800819a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f9a3 	bl	80084e8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80081a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a4:	0adb      	lsrs	r3, r3, #11
 80081a6:	f003 0301 	and.w	r3, r3, #1
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d010      	beq.n	80081d0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80081ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081b0:	0adb      	lsrs	r3, r3, #11
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80081c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80081c4:	4b2b      	ldr	r3, [pc, #172]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f997 	bl	80084fe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80081d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d2:	0a5b      	lsrs	r3, r3, #9
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d01d      	beq.n	8008218 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	0a5b      	lsrs	r3, r3, #9
 80081e0:	f003 0301 	and.w	r3, r3, #1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d017      	beq.n	8008218 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081f0:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80081fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081fc:	4013      	ands	r3, r2
 80081fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008208:	651a      	str	r2, [r3, #80]	@ 0x50
 800820a:	4b1a      	ldr	r3, [pc, #104]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 800820c:	2200      	movs	r2, #0
 800820e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8008210:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f97d 	bl	8008512 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800821a:	0cdb      	lsrs	r3, r3, #19
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d010      	beq.n	8008246 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8008224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008226:	0cdb      	lsrs	r3, r3, #19
 8008228:	f003 0301 	and.w	r3, r3, #1
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00a      	beq.n	8008246 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8008238:	651a      	str	r2, [r3, #80]	@ 0x50
 800823a:	4b0e      	ldr	r3, [pc, #56]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 800823c:	2200      	movs	r2, #0
 800823e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f97c 	bl	800853e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008248:	0c1b      	lsrs	r3, r3, #16
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d016      	beq.n	8008280 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	0c1b      	lsrs	r3, r3, #16
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008266:	651a      	str	r2, [r3, #80]	@ 0x50
 8008268:	4b02      	ldr	r3, [pc, #8]	@ (8008274 <HAL_FDCAN_IRQHandler+0x274>)
 800826a:	2200      	movs	r2, #0
 800826c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	e004      	b.n	800827c <HAL_FDCAN_IRQHandler+0x27c>
 8008272:	bf00      	nop
 8008274:	4000a800 	.word	0x4000a800
 8008278:	3fcfffff 	.word	0x3fcfffff
 800827c:	f000 f969 	bl	8008552 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008282:	0c9b      	lsrs	r3, r3, #18
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d010      	beq.n	80082ae <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800828c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800828e:	0c9b      	lsrs	r3, r3, #18
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80082a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80082a2:	4b83      	ldr	r3, [pc, #524]	@ (80084b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f95c 	bl	8008566 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80082ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082b0:	0c5b      	lsrs	r3, r3, #17
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d015      	beq.n	80082e6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80082ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082bc:	0c5b      	lsrs	r3, r3, #17
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00f      	beq.n	80082e6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80082ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80082d0:	4b77      	ldr	r3, [pc, #476]	@ (80084b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80082dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80082e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00d      	beq.n	8008308 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082f2:	4b70      	ldr	r3, [pc, #448]	@ (80084b4 <HAL_FDCAN_IRQHandler+0x4b4>)
 80082f4:	400b      	ands	r3, r1
 80082f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80082f8:	4a6d      	ldr	r2, [pc, #436]	@ (80084b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80082fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082fc:	0f9b      	lsrs	r3, r3, #30
 80082fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f94d 	bl	80085a2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8008308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800830a:	2b00      	cmp	r3, #0
 800830c:	d011      	beq.n	8008332 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008314:	4b67      	ldr	r3, [pc, #412]	@ (80084b4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8008316:	400b      	ands	r3, r1
 8008318:	6513      	str	r3, [r2, #80]	@ 0x50
 800831a:	4a65      	ldr	r2, [pc, #404]	@ (80084b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800831c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800831e:	0f9b      	lsrs	r3, r3, #30
 8008320:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a60      	ldr	r2, [pc, #384]	@ (80084b8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8008338:	4293      	cmp	r3, r2
 800833a:	f040 80ac 	bne.w	8008496 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0303 	and.w	r3, r3, #3
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 80a4 	beq.w	8008496 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008362:	4013      	ands	r3, r2
 8008364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008370:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008378:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800837a:	4013      	ands	r3, r2
 800837c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8008388:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008392:	4013      	ands	r3, r2
 8008394:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80083a0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	6a3a      	ldr	r2, [r7, #32]
 80083aa:	4013      	ands	r3, r2
 80083ac:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80083b8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c0:	69fa      	ldr	r2, [r7, #28]
 80083c2:	4013      	ands	r3, r2
 80083c4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083cc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80083d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80083e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f8e6 	bl	80085b8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80083ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d007      	beq.n	8008402 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083f8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80083fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f8e6 	bl	80085ce <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	099b      	lsrs	r3, r3, #6
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	d01a      	beq.n	8008444 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	099b      	lsrs	r3, r3, #6
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d014      	beq.n	8008444 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008420:	0c1b      	lsrs	r3, r3, #16
 8008422:	b29b      	uxth	r3, r3
 8008424:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008430:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2240      	movs	r2, #64	@ 0x40
 8008438:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	6939      	ldr	r1, [r7, #16]
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 f8d0 	bl	80085e4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8008444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008450:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008452:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f8d1 	bl	80085fc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00b      	beq.n	8008478 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6a3a      	ldr	r2, [r7, #32]
 8008466:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	431a      	orrs	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	69fa      	ldr	r2, [r7, #28]
 8008484:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 f874 	bl	800858e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80084a6:	bf00      	nop
 80084a8:	3758      	adds	r7, #88	@ 0x58
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	4000a800 	.word	0x4000a800
 80084b4:	3fcfffff 	.word	0x3fcfffff
 80084b8:	4000a000 	.word	0x4000a000

080084bc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80084c6:	bf00      	nop
 80084c8:	370c      	adds	r7, #12
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b083      	sub	sp, #12
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084fe:	b480      	push	{r7}
 8008500:	b083      	sub	sp, #12
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008506:	bf00      	nop
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800851c:	bf00      	nop
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008566:	b480      	push	{r7}
 8008568:	b083      	sub	sp, #12
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008582:	bf00      	nop
 8008584:	370c      	adds	r7, #12
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b083      	sub	sp, #12
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
	...

08008614 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008620:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800862a:	4ba7      	ldr	r3, [pc, #668]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800862c:	4013      	ands	r3, r2
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	0091      	lsls	r1, r2, #2
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	430b      	orrs	r3, r1
 8008638:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008644:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864c:	041a      	lsls	r2, r3, #16
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	430a      	orrs	r2, r1
 8008654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	4413      	add	r3, r2
 8008660:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800866a:	4b97      	ldr	r3, [pc, #604]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800866c:	4013      	ands	r3, r2
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	0091      	lsls	r1, r2, #2
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	430b      	orrs	r3, r1
 8008678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008684:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868c:	041a      	lsls	r2, r3, #16
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80086ac:	4b86      	ldr	r3, [pc, #536]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086ae:	4013      	ands	r3, r2
 80086b0:	68ba      	ldr	r2, [r7, #8]
 80086b2:	0091      	lsls	r1, r2, #2
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6812      	ldr	r2, [r2, #0]
 80086b8:	430b      	orrs	r3, r1
 80086ba:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086c6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	041a      	lsls	r2, r3, #16
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	430a      	orrs	r2, r1
 80086d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	4413      	add	r3, r2
 80086ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80086f4:	4b74      	ldr	r3, [pc, #464]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80086f6:	4013      	ands	r3, r2
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	0091      	lsls	r1, r2, #2
 80086fc:	687a      	ldr	r2, [r7, #4]
 80086fe:	6812      	ldr	r2, [r2, #0]
 8008700:	430b      	orrs	r3, r1
 8008702:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800870e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008716:	041a      	lsls	r2, r3, #16
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800872a:	fb02 f303 	mul.w	r3, r2, r3
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	4413      	add	r3, r2
 8008732:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800873c:	4b62      	ldr	r3, [pc, #392]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800873e:	4013      	ands	r3, r2
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	0091      	lsls	r1, r2, #2
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	6812      	ldr	r2, [r2, #0]
 8008748:	430b      	orrs	r3, r1
 800874a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008768:	4b57      	ldr	r3, [pc, #348]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800876a:	4013      	ands	r3, r2
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	0091      	lsls	r1, r2, #2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6812      	ldr	r2, [r2, #0]
 8008774:	430b      	orrs	r3, r1
 8008776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008782:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800878a:	041a      	lsls	r2, r3, #16
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	430a      	orrs	r2, r1
 8008792:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800879a:	005b      	lsls	r3, r3, #1
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	4413      	add	r3, r2
 80087a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80087aa:	4b47      	ldr	r3, [pc, #284]	@ (80088c8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087ac:	4013      	ands	r3, r2
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	0091      	lsls	r1, r2, #2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6812      	ldr	r2, [r2, #0]
 80087b6:	430b      	orrs	r3, r1
 80087b8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80087c4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087cc:	041a      	lsls	r2, r3, #16
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80087e0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e8:	061a      	lsls	r2, r3, #24
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087f8:	4b34      	ldr	r3, [pc, #208]	@ (80088cc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80087fa:	4413      	add	r3, r2
 80087fc:	009a      	lsls	r2, r3, #2
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	441a      	add	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	441a      	add	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800882a:	6879      	ldr	r1, [r7, #4]
 800882c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800882e:	fb01 f303 	mul.w	r3, r1, r3
 8008832:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8008834:	441a      	add	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8008846:	fb01 f303 	mul.w	r3, r1, r3
 800884a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800884c:	441a      	add	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800885a:	6879      	ldr	r1, [r7, #4]
 800885c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800885e:	fb01 f303 	mul.w	r3, r1, r3
 8008862:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008864:	441a      	add	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	441a      	add	r2, r3
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800888e:	fb01 f303 	mul.w	r3, r1, r3
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	441a      	add	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088a6:	6879      	ldr	r1, [r7, #4]
 80088a8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 80088aa:	fb01 f303 	mul.w	r3, r1, r3
 80088ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80088b0:	441a      	add	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088be:	4a04      	ldr	r2, [pc, #16]	@ (80088d0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d915      	bls.n	80088f0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80088c4:	e006      	b.n	80088d4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80088c6:	bf00      	nop
 80088c8:	ffff0003 	.word	0xffff0003
 80088cc:	10002b00 	.word	0x10002b00
 80088d0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088da:	f043 0220 	orr.w	r2, r3, #32
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2203      	movs	r2, #3
 80088e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e010      	b.n	8008912 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e005      	b.n	8008904 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	3304      	adds	r3, #4
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	429a      	cmp	r2, r3
 800890e:	d3f3      	bcc.n	80088f8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008920:	b480      	push	{r7}
 8008922:	b089      	sub	sp, #36	@ 0x24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10a      	bne.n	800894c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800893e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008946:	4313      	orrs	r3, r2
 8008948:	61fb      	str	r3, [r7, #28]
 800894a:	e00a      	b.n	8008962 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008954:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800895a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800895c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008960:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800896c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008972:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008978:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	69fa      	ldr	r2, [r7, #28]
 800899e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	3304      	adds	r3, #4
 80089a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	3304      	adds	r3, #4
 80089b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]
 80089b6:	e020      	b.n	80089fa <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	3303      	adds	r3, #3
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	4413      	add	r3, r2
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	3302      	adds	r3, #2
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	440b      	add	r3, r1
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	3301      	adds	r3, #1
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	440b      	add	r3, r1
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80089de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	440a      	add	r2, r1
 80089e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80089e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	3304      	adds	r3, #4
 80089f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	3304      	adds	r3, #4
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	4a06      	ldr	r2, [pc, #24]	@ (8008a18 <FDCAN_CopyMessageToRAM+0xf8>)
 8008a00:	5cd3      	ldrb	r3, [r2, r3]
 8008a02:	461a      	mov	r2, r3
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d3d6      	bcc.n	80089b8 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	3724      	adds	r7, #36	@ 0x24
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	0800c2dc 	.word	0x0800c2dc

08008a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	@ 0x24
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a26:	2300      	movs	r3, #0
 8008a28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a2a:	4b89      	ldr	r3, [pc, #548]	@ (8008c50 <HAL_GPIO_Init+0x234>)
 8008a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a2e:	e194      	b.n	8008d5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	2101      	movs	r1, #1
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8186 	beq.w	8008d54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f003 0303 	and.w	r3, r3, #3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d005      	beq.n	8008a60 <HAL_GPIO_Init+0x44>
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d130      	bne.n	8008ac2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	43db      	mvns	r3, r3
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	4013      	ands	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	fa02 f303 	lsl.w	r3, r2, r3
 8008a84:	69ba      	ldr	r2, [r7, #24]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a96:	2201      	movs	r2, #1
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	091b      	lsrs	r3, r3, #4
 8008aac:	f003 0201 	and.w	r2, r3, #1
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	69ba      	ldr	r2, [r7, #24]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d017      	beq.n	8008afe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	2203      	movs	r2, #3
 8008ada:	fa02 f303 	lsl.w	r3, r2, r3
 8008ade:	43db      	mvns	r3, r3
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d123      	bne.n	8008b52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	08da      	lsrs	r2, r3, #3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3208      	adds	r2, #8
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	220f      	movs	r2, #15
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	43db      	mvns	r3, r3
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	08da      	lsrs	r2, r3, #3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3208      	adds	r2, #8
 8008b4c:	69b9      	ldr	r1, [r7, #24]
 8008b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b62:	43db      	mvns	r3, r3
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	4013      	ands	r3, r2
 8008b68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f003 0203 	and.w	r2, r3, #3
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80e0 	beq.w	8008d54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b94:	4b2f      	ldr	r3, [pc, #188]	@ (8008c54 <HAL_GPIO_Init+0x238>)
 8008b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8008c54 <HAL_GPIO_Init+0x238>)
 8008b9c:	f043 0302 	orr.w	r3, r3, #2
 8008ba0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8008c54 <HAL_GPIO_Init+0x238>)
 8008ba6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	60fb      	str	r3, [r7, #12]
 8008bb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bb2:	4a29      	ldr	r2, [pc, #164]	@ (8008c58 <HAL_GPIO_Init+0x23c>)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	089b      	lsrs	r3, r3, #2
 8008bb8:	3302      	adds	r3, #2
 8008bba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f003 0303 	and.w	r3, r3, #3
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	220f      	movs	r2, #15
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	43db      	mvns	r3, r3
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	4013      	ands	r3, r2
 8008bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a20      	ldr	r2, [pc, #128]	@ (8008c5c <HAL_GPIO_Init+0x240>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d052      	beq.n	8008c84 <HAL_GPIO_Init+0x268>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a1f      	ldr	r2, [pc, #124]	@ (8008c60 <HAL_GPIO_Init+0x244>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d031      	beq.n	8008c4a <HAL_GPIO_Init+0x22e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a1e      	ldr	r2, [pc, #120]	@ (8008c64 <HAL_GPIO_Init+0x248>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d02b      	beq.n	8008c46 <HAL_GPIO_Init+0x22a>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c68 <HAL_GPIO_Init+0x24c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d025      	beq.n	8008c42 <HAL_GPIO_Init+0x226>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8008c6c <HAL_GPIO_Init+0x250>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d01f      	beq.n	8008c3e <HAL_GPIO_Init+0x222>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a1b      	ldr	r2, [pc, #108]	@ (8008c70 <HAL_GPIO_Init+0x254>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d019      	beq.n	8008c3a <HAL_GPIO_Init+0x21e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1a      	ldr	r2, [pc, #104]	@ (8008c74 <HAL_GPIO_Init+0x258>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d013      	beq.n	8008c36 <HAL_GPIO_Init+0x21a>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a19      	ldr	r2, [pc, #100]	@ (8008c78 <HAL_GPIO_Init+0x25c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00d      	beq.n	8008c32 <HAL_GPIO_Init+0x216>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a18      	ldr	r2, [pc, #96]	@ (8008c7c <HAL_GPIO_Init+0x260>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d007      	beq.n	8008c2e <HAL_GPIO_Init+0x212>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a17      	ldr	r2, [pc, #92]	@ (8008c80 <HAL_GPIO_Init+0x264>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d101      	bne.n	8008c2a <HAL_GPIO_Init+0x20e>
 8008c26:	2309      	movs	r3, #9
 8008c28:	e02d      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e02b      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c2e:	2308      	movs	r3, #8
 8008c30:	e029      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c32:	2307      	movs	r3, #7
 8008c34:	e027      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c36:	2306      	movs	r3, #6
 8008c38:	e025      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c3a:	2305      	movs	r3, #5
 8008c3c:	e023      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c3e:	2304      	movs	r3, #4
 8008c40:	e021      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c42:	2303      	movs	r3, #3
 8008c44:	e01f      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e01d      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e01b      	b.n	8008c86 <HAL_GPIO_Init+0x26a>
 8008c4e:	bf00      	nop
 8008c50:	58000080 	.word	0x58000080
 8008c54:	58024400 	.word	0x58024400
 8008c58:	58000400 	.word	0x58000400
 8008c5c:	58020000 	.word	0x58020000
 8008c60:	58020400 	.word	0x58020400
 8008c64:	58020800 	.word	0x58020800
 8008c68:	58020c00 	.word	0x58020c00
 8008c6c:	58021000 	.word	0x58021000
 8008c70:	58021400 	.word	0x58021400
 8008c74:	58021800 	.word	0x58021800
 8008c78:	58021c00 	.word	0x58021c00
 8008c7c:	58022000 	.word	0x58022000
 8008c80:	58022400 	.word	0x58022400
 8008c84:	2300      	movs	r3, #0
 8008c86:	69fa      	ldr	r2, [r7, #28]
 8008c88:	f002 0203 	and.w	r2, r2, #3
 8008c8c:	0092      	lsls	r2, r2, #2
 8008c8e:	4093      	lsls	r3, r2
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c96:	4938      	ldr	r1, [pc, #224]	@ (8008d78 <HAL_GPIO_Init+0x35c>)
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	089b      	lsrs	r3, r3, #2
 8008c9c:	3302      	adds	r3, #2
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	43db      	mvns	r3, r3
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008cf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	43db      	mvns	r3, r3
 8008d0a:	69ba      	ldr	r2, [r7, #24]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d003      	beq.n	8008d24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	69ba      	ldr	r2, [r7, #24]
 8008d28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	43db      	mvns	r3, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	fa22 f303 	lsr.w	r3, r2, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f47f ae63 	bne.w	8008a30 <HAL_GPIO_Init+0x14>
  }
}
 8008d6a:	bf00      	nop
 8008d6c:	bf00      	nop
 8008d6e:	3724      	adds	r7, #36	@ 0x24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	58000400 	.word	0x58000400

08008d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b089      	sub	sp, #36	@ 0x24
 8008d80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d82:	4bb3      	ldr	r3, [pc, #716]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d8a:	2b18      	cmp	r3, #24
 8008d8c:	f200 8155 	bhi.w	800903a <HAL_RCC_GetSysClockFreq+0x2be>
 8008d90:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008dfd 	.word	0x08008dfd
 8008d9c:	0800903b 	.word	0x0800903b
 8008da0:	0800903b 	.word	0x0800903b
 8008da4:	0800903b 	.word	0x0800903b
 8008da8:	0800903b 	.word	0x0800903b
 8008dac:	0800903b 	.word	0x0800903b
 8008db0:	0800903b 	.word	0x0800903b
 8008db4:	0800903b 	.word	0x0800903b
 8008db8:	08008e23 	.word	0x08008e23
 8008dbc:	0800903b 	.word	0x0800903b
 8008dc0:	0800903b 	.word	0x0800903b
 8008dc4:	0800903b 	.word	0x0800903b
 8008dc8:	0800903b 	.word	0x0800903b
 8008dcc:	0800903b 	.word	0x0800903b
 8008dd0:	0800903b 	.word	0x0800903b
 8008dd4:	0800903b 	.word	0x0800903b
 8008dd8:	08008e29 	.word	0x08008e29
 8008ddc:	0800903b 	.word	0x0800903b
 8008de0:	0800903b 	.word	0x0800903b
 8008de4:	0800903b 	.word	0x0800903b
 8008de8:	0800903b 	.word	0x0800903b
 8008dec:	0800903b 	.word	0x0800903b
 8008df0:	0800903b 	.word	0x0800903b
 8008df4:	0800903b 	.word	0x0800903b
 8008df8:	08008e2f 	.word	0x08008e2f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008dfc:	4b94      	ldr	r3, [pc, #592]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d009      	beq.n	8008e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e08:	4b91      	ldr	r3, [pc, #580]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	08db      	lsrs	r3, r3, #3
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	4a90      	ldr	r2, [pc, #576]	@ (8009054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e14:	fa22 f303 	lsr.w	r3, r2, r3
 8008e18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008e1a:	e111      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008e1c:	4b8d      	ldr	r3, [pc, #564]	@ (8009054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008e1e:	61bb      	str	r3, [r7, #24]
      break;
 8008e20:	e10e      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008e22:	4b8d      	ldr	r3, [pc, #564]	@ (8009058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e24:	61bb      	str	r3, [r7, #24]
      break;
 8008e26:	e10b      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008e28:	4b8c      	ldr	r3, [pc, #560]	@ (800905c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008e2a:	61bb      	str	r3, [r7, #24]
      break;
 8008e2c:	e108      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e2e:	4b88      	ldr	r3, [pc, #544]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008e38:	4b85      	ldr	r3, [pc, #532]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e3c:	091b      	lsrs	r3, r3, #4
 8008e3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e42:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008e44:	4b82      	ldr	r3, [pc, #520]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e4e:	4b80      	ldr	r3, [pc, #512]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	fb02 f303 	mul.w	r3, r2, r3
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e66:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 80e1 	beq.w	8009034 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	f000 8083 	beq.w	8008f80 <HAL_RCC_GetSysClockFreq+0x204>
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	2b02      	cmp	r3, #2
 8008e7e:	f200 80a1 	bhi.w	8008fc4 <HAL_RCC_GetSysClockFreq+0x248>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <HAL_RCC_GetSysClockFreq+0x114>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d056      	beq.n	8008f3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8008e8e:	e099      	b.n	8008fc4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e90:	4b6f      	ldr	r3, [pc, #444]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d02d      	beq.n	8008ef8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e9c:	4b6c      	ldr	r3, [pc, #432]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	4a6b      	ldr	r2, [pc, #428]	@ (8009054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	ee07 3a90 	vmov	s15, r3
 8008eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	ee07 3a90 	vmov	s15, r3
 8008ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b62      	ldr	r3, [pc, #392]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008eda:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008ef6:	e087      	b.n	8009008 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	ee07 3a90 	vmov	s15, r3
 8008efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f02:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009064 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f0a:	4b51      	ldr	r3, [pc, #324]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f1e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f3a:	e065      	b.n	8009008 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	ee07 3a90 	vmov	s15, r3
 8008f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f46:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f4e:	4b40      	ldr	r3, [pc, #256]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f56:	ee07 3a90 	vmov	s15, r3
 8008f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008f62:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008f7e:	e043      	b.n	8009008 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	ee07 3a90 	vmov	s15, r3
 8008f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f8a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800906c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f92:	4b2f      	ldr	r3, [pc, #188]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fa6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008fc2:	e021      	b.n	8009008 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	ee07 3a90 	vmov	s15, r3
 8008fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fde:	ee07 3a90 	vmov	s15, r3
 8008fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008fea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009002:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009006:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009008:	4b11      	ldr	r3, [pc, #68]	@ (8009050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800900a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800900c:	0a5b      	lsrs	r3, r3, #9
 800900e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009012:	3301      	adds	r3, #1
 8009014:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	ee07 3a90 	vmov	s15, r3
 800901c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009020:	edd7 6a07 	vldr	s13, [r7, #28]
 8009024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800902c:	ee17 3a90 	vmov	r3, s15
 8009030:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009032:	e005      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	61bb      	str	r3, [r7, #24]
      break;
 8009038:	e002      	b.n	8009040 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800903a:	4b07      	ldr	r3, [pc, #28]	@ (8009058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800903c:	61bb      	str	r3, [r7, #24]
      break;
 800903e:	bf00      	nop
  }

  return sysclockfreq;
 8009040:	69bb      	ldr	r3, [r7, #24]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3724      	adds	r7, #36	@ 0x24
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	58024400 	.word	0x58024400
 8009054:	03d09000 	.word	0x03d09000
 8009058:	003d0900 	.word	0x003d0900
 800905c:	017d7840 	.word	0x017d7840
 8009060:	46000000 	.word	0x46000000
 8009064:	4c742400 	.word	0x4c742400
 8009068:	4a742400 	.word	0x4a742400
 800906c:	4bbebc20 	.word	0x4bbebc20

08009070 <LL_GPIO_SetPinMode>:
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6819      	ldr	r1, [r3, #0]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	fb03 f203 	mul.w	r2, r3, r3
 8009086:	4613      	mov	r3, r2
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	4413      	add	r3, r2
 800908c:	43db      	mvns	r3, r3
 800908e:	ea01 0203 	and.w	r2, r1, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	fb03 f303 	mul.w	r3, r3, r3
 8009098:	6879      	ldr	r1, [r7, #4]
 800909a:	fb01 f303 	mul.w	r3, r1, r3
 800909e:	431a      	orrs	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <LL_GPIO_SetPinOutputType>:
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	685a      	ldr	r2, [r3, #4]
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	43db      	mvns	r3, r3
 80090c4:	401a      	ands	r2, r3
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6879      	ldr	r1, [r7, #4]
 80090ca:	fb01 f303 	mul.w	r3, r1, r3
 80090ce:	431a      	orrs	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	605a      	str	r2, [r3, #4]
}
 80090d4:	bf00      	nop
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <LL_GPIO_SetPinSpeed>:
{
 80090e0:	b480      	push	{r7}
 80090e2:	b085      	sub	sp, #20
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6899      	ldr	r1, [r3, #8]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	fb03 f203 	mul.w	r2, r3, r3
 80090f6:	4613      	mov	r3, r2
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	4413      	add	r3, r2
 80090fc:	43db      	mvns	r3, r3
 80090fe:	ea01 0203 	and.w	r2, r1, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	fb03 f303 	mul.w	r3, r3, r3
 8009108:	6879      	ldr	r1, [r7, #4]
 800910a:	fb01 f303 	mul.w	r3, r1, r3
 800910e:	431a      	orrs	r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	609a      	str	r2, [r3, #8]
}
 8009114:	bf00      	nop
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <LL_GPIO_SetPinPull>:
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	68d9      	ldr	r1, [r3, #12]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	fb03 f203 	mul.w	r2, r3, r3
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	43db      	mvns	r3, r3
 800913e:	ea01 0203 	and.w	r2, r1, r3
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	fb03 f303 	mul.w	r3, r3, r3
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	fb01 f303 	mul.w	r3, r1, r3
 800914e:	431a      	orrs	r2, r3
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	60da      	str	r2, [r3, #12]
}
 8009154:	bf00      	nop
 8009156:	3714      	adds	r7, #20
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <LL_GPIO_SetAFPin_0_7>:
{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	60b9      	str	r1, [r7, #8]
 800916a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6a19      	ldr	r1, [r3, #32]
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	fb03 f303 	mul.w	r3, r3, r3
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	fb02 f303 	mul.w	r3, r2, r3
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	fb03 f202 	mul.w	r2, r3, r2
 8009182:	4613      	mov	r3, r2
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	43db      	mvns	r3, r3
 800918a:	ea01 0203 	and.w	r2, r1, r3
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	fb03 f303 	mul.w	r3, r3, r3
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	fb01 f303 	mul.w	r3, r1, r3
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	fb01 f303 	mul.w	r3, r1, r3
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	fb01 f303 	mul.w	r3, r1, r3
 80091a6:	431a      	orrs	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	621a      	str	r2, [r3, #32]
}
 80091ac:	bf00      	nop
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <LL_GPIO_SetAFPin_8_15>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	0a1b      	lsrs	r3, r3, #8
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	0a12      	lsrs	r2, r2, #8
 80091d0:	fb02 f303 	mul.w	r3, r2, r3
 80091d4:	68ba      	ldr	r2, [r7, #8]
 80091d6:	0a12      	lsrs	r2, r2, #8
 80091d8:	fb02 f303 	mul.w	r3, r2, r3
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	0a12      	lsrs	r2, r2, #8
 80091e0:	fb03 f202 	mul.w	r2, r3, r2
 80091e4:	4613      	mov	r3, r2
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	43db      	mvns	r3, r3
 80091ec:	ea01 0203 	and.w	r2, r1, r3
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	0a1b      	lsrs	r3, r3, #8
 80091f4:	68b9      	ldr	r1, [r7, #8]
 80091f6:	0a09      	lsrs	r1, r1, #8
 80091f8:	fb01 f303 	mul.w	r3, r1, r3
 80091fc:	68b9      	ldr	r1, [r7, #8]
 80091fe:	0a09      	lsrs	r1, r1, #8
 8009200:	fb01 f303 	mul.w	r3, r1, r3
 8009204:	68b9      	ldr	r1, [r7, #8]
 8009206:	0a09      	lsrs	r1, r1, #8
 8009208:	fb01 f303 	mul.w	r3, r1, r3
 800920c:	6879      	ldr	r1, [r7, #4]
 800920e:	fb01 f303 	mul.w	r3, r1, r3
 8009212:	431a      	orrs	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	fa93 f3a3 	rbit	r3, r3
 800923a:	60fb      	str	r3, [r7, #12]
  return result;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <LL_GPIO_Init+0x26>
    return 32U;
 8009246:	2320      	movs	r3, #32
 8009248:	e003      	b.n	8009252 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	fab3 f383 	clz	r3, r3
 8009250:	b2db      	uxtb	r3, r3
 8009252:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009254:	e048      	b.n	80092e8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	2101      	movs	r1, #1
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	fa01 f303 	lsl.w	r3, r1, r3
 8009262:	4013      	ands	r3, r2
 8009264:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d03a      	beq.n	80092e2 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d003      	beq.n	800927c <LL_GPIO_Init+0x58>
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d10e      	bne.n	800929a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	461a      	mov	r2, r3
 8009282:	69b9      	ldr	r1, [r7, #24]
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7ff ff2b 	bl	80090e0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	461a      	mov	r2, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ff0b 	bl	80090b0 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	461a      	mov	r2, r3
 80092a0:	69b9      	ldr	r1, [r7, #24]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7ff ff3c 	bl	8009120 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d111      	bne.n	80092d4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2bff      	cmp	r3, #255	@ 0xff
 80092b4:	d807      	bhi.n	80092c6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	461a      	mov	r2, r3
 80092bc:	69b9      	ldr	r1, [r7, #24]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff ff4e 	bl	8009160 <LL_GPIO_SetAFPin_0_7>
 80092c4:	e006      	b.n	80092d4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	461a      	mov	r2, r3
 80092cc:	69b9      	ldr	r1, [r7, #24]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff ff72 	bl	80091b8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	461a      	mov	r2, r3
 80092da:	69b9      	ldr	r1, [r7, #24]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fec7 	bl	8009070 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	3301      	adds	r3, #1
 80092e6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	fa22 f303 	lsr.w	r3, r2, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1af      	bne.n	8009256 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3720      	adds	r7, #32
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <LL_RCC_HSE_IsReady>:
{
 8009300:	b480      	push	{r7}
 8009302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009304:	4b07      	ldr	r3, [pc, #28]	@ (8009324 <LL_RCC_HSE_IsReady+0x24>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800930c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009310:	d101      	bne.n	8009316 <LL_RCC_HSE_IsReady+0x16>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <LL_RCC_HSE_IsReady+0x18>
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	58024400 	.word	0x58024400

08009328 <LL_RCC_HSI_IsReady>:
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800932c:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <LL_RCC_HSI_IsReady+0x20>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 0304 	and.w	r3, r3, #4
 8009334:	2b04      	cmp	r3, #4
 8009336:	d101      	bne.n	800933c <LL_RCC_HSI_IsReady+0x14>
 8009338:	2301      	movs	r3, #1
 800933a:	e000      	b.n	800933e <LL_RCC_HSI_IsReady+0x16>
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	58024400 	.word	0x58024400

0800934c <LL_RCC_HSI_GetDivider>:
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8009350:	4b04      	ldr	r3, [pc, #16]	@ (8009364 <LL_RCC_HSI_GetDivider+0x18>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0318 	and.w	r3, r3, #24
}
 8009358:	4618      	mov	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	58024400 	.word	0x58024400

08009368 <LL_RCC_CSI_IsReady>:
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 800936c:	4b07      	ldr	r3, [pc, #28]	@ (800938c <LL_RCC_CSI_IsReady+0x24>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009374:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009378:	d101      	bne.n	800937e <LL_RCC_CSI_IsReady+0x16>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <LL_RCC_CSI_IsReady+0x18>
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	58024400 	.word	0x58024400

08009390 <LL_RCC_LSE_IsReady>:
{
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009394:	4b06      	ldr	r3, [pc, #24]	@ (80093b0 <LL_RCC_LSE_IsReady+0x20>)
 8009396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b02      	cmp	r3, #2
 800939e:	d101      	bne.n	80093a4 <LL_RCC_LSE_IsReady+0x14>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <LL_RCC_LSE_IsReady+0x16>
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr
 80093b0:	58024400 	.word	0x58024400

080093b4 <LL_RCC_GetSysClkSource>:
{
 80093b4:	b480      	push	{r7}
 80093b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80093b8:	4b04      	ldr	r3, [pc, #16]	@ (80093cc <LL_RCC_GetSysClkSource+0x18>)
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	58024400 	.word	0x58024400

080093d0 <LL_RCC_GetSysPrescaler>:
{
 80093d0:	b480      	push	{r7}
 80093d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 80093d4:	4b04      	ldr	r3, [pc, #16]	@ (80093e8 <LL_RCC_GetSysPrescaler+0x18>)
 80093d6:	699b      	ldr	r3, [r3, #24]
 80093d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80093dc:	4618      	mov	r0, r3
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	58024400 	.word	0x58024400

080093ec <LL_RCC_GetAHBPrescaler>:
{
 80093ec:	b480      	push	{r7}
 80093ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 80093f0:	4b04      	ldr	r3, [pc, #16]	@ (8009404 <LL_RCC_GetAHBPrescaler+0x18>)
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	f003 030f 	and.w	r3, r3, #15
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	58024400 	.word	0x58024400

08009408 <LL_RCC_GetAPB1Prescaler>:
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 800940c:	4b04      	ldr	r3, [pc, #16]	@ (8009420 <LL_RCC_GetAPB1Prescaler+0x18>)
 800940e:	69db      	ldr	r3, [r3, #28]
 8009410:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8009414:	4618      	mov	r0, r3
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400

08009424 <LL_RCC_GetAPB2Prescaler>:
{
 8009424:	b480      	push	{r7}
 8009426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8009428:	4b04      	ldr	r3, [pc, #16]	@ (800943c <LL_RCC_GetAPB2Prescaler+0x18>)
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8009430:	4618      	mov	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	58024400 	.word	0x58024400

08009440 <LL_RCC_GetClockSource>:
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	b2da      	uxtb	r2, r3
 800944c:	4b0e      	ldr	r3, [pc, #56]	@ (8009488 <LL_RCC_GetClockSource+0x48>)
 800944e:	4413      	add	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681a      	ldr	r2, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	0e19      	lsrs	r1, r3, #24
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	0a1b      	lsrs	r3, r3, #8
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	fa01 f303 	lsl.w	r3, r1, r3
 8009466:	401a      	ands	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	0a1b      	lsrs	r3, r3, #8
 800946c:	f003 031f 	and.w	r3, r3, #31
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	041a      	lsls	r2, r3, #16
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4313      	orrs	r3, r2
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	5802444c 	.word	0x5802444c

0800948c <LL_RCC_GetUSARTClockSource>:
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7ff ffd3 	bl	8009440 <LL_RCC_GetClockSource>
 800949a:	4603      	mov	r3, r0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <LL_RCC_PLL_GetSource>:
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 80094a8:	4b04      	ldr	r3, [pc, #16]	@ (80094bc <LL_RCC_PLL_GetSource+0x18>)
 80094aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ac:	f003 0303 	and.w	r3, r3, #3
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	58024400 	.word	0x58024400

080094c0 <LL_RCC_PLL1P_IsEnabled>:
{
 80094c0:	b480      	push	{r7}
 80094c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 80094c4:	4b07      	ldr	r3, [pc, #28]	@ (80094e4 <LL_RCC_PLL1P_IsEnabled+0x24>)
 80094c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094d0:	d101      	bne.n	80094d6 <LL_RCC_PLL1P_IsEnabled+0x16>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e000      	b.n	80094d8 <LL_RCC_PLL1P_IsEnabled+0x18>
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	58024400 	.word	0x58024400

080094e8 <LL_RCC_PLL1Q_IsEnabled>:
{
 80094e8:	b480      	push	{r7}
 80094ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 80094ec:	4b07      	ldr	r3, [pc, #28]	@ (800950c <LL_RCC_PLL1Q_IsEnabled+0x24>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f8:	d101      	bne.n	80094fe <LL_RCC_PLL1Q_IsEnabled+0x16>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <LL_RCC_PLL1Q_IsEnabled+0x18>
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	58024400 	.word	0x58024400

08009510 <LL_RCC_PLL1R_IsEnabled>:
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8009514:	4b07      	ldr	r3, [pc, #28]	@ (8009534 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8009516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009518:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800951c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009520:	d101      	bne.n	8009526 <LL_RCC_PLL1R_IsEnabled+0x16>
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <LL_RCC_PLL1R_IsEnabled+0x18>
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	58024400 	.word	0x58024400

08009538 <LL_RCC_PLL1FRACN_IsEnabled>:
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 800953c:	4b06      	ldr	r3, [pc, #24]	@ (8009558 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 800953e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 8009548:	2301      	movs	r3, #1
 800954a:	e000      	b.n	800954e <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	58024400 	.word	0x58024400

0800955c <LL_RCC_PLL1_GetN>:
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 8009560:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <LL_RCC_PLL1_GetN+0x18>)
 8009562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009568:	3301      	adds	r3, #1
}
 800956a:	4618      	mov	r0, r3
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	58024400 	.word	0x58024400

08009578 <LL_RCC_PLL1_GetM>:
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 800957c:	4b04      	ldr	r3, [pc, #16]	@ (8009590 <LL_RCC_PLL1_GetM+0x18>)
 800957e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009580:	091b      	lsrs	r3, r3, #4
 8009582:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8009586:	4618      	mov	r0, r3
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	58024400 	.word	0x58024400

08009594 <LL_RCC_PLL1_GetP>:
{
 8009594:	b480      	push	{r7}
 8009596:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8009598:	4b05      	ldr	r3, [pc, #20]	@ (80095b0 <LL_RCC_PLL1_GetP+0x1c>)
 800959a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800959c:	0a5b      	lsrs	r3, r3, #9
 800959e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095a2:	3301      	adds	r3, #1
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	58024400 	.word	0x58024400

080095b4 <LL_RCC_PLL1_GetQ>:
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 80095b8:	4b05      	ldr	r3, [pc, #20]	@ (80095d0 <LL_RCC_PLL1_GetQ+0x1c>)
 80095ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095bc:	0c1b      	lsrs	r3, r3, #16
 80095be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095c2:	3301      	adds	r3, #1
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	58024400 	.word	0x58024400

080095d4 <LL_RCC_PLL1_GetR>:
{
 80095d4:	b480      	push	{r7}
 80095d6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 80095d8:	4b05      	ldr	r3, [pc, #20]	@ (80095f0 <LL_RCC_PLL1_GetR+0x1c>)
 80095da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095dc:	0e1b      	lsrs	r3, r3, #24
 80095de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e2:	3301      	adds	r3, #1
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	58024400 	.word	0x58024400

080095f4 <LL_RCC_PLL1_GetFRACN>:
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 80095f8:	4b04      	ldr	r3, [pc, #16]	@ (800960c <LL_RCC_PLL1_GetFRACN+0x18>)
 80095fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fc:	08db      	lsrs	r3, r3, #3
 80095fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8009602:	4618      	mov	r0, r3
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	58024400 	.word	0x58024400

08009610 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8009610:	b480      	push	{r7}
 8009612:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8009614:	4b07      	ldr	r3, [pc, #28]	@ (8009634 <LL_RCC_PLL2_IsReady+0x24>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800961c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009620:	d101      	bne.n	8009626 <LL_RCC_PLL2_IsReady+0x16>
 8009622:	2301      	movs	r3, #1
 8009624:	e000      	b.n	8009628 <LL_RCC_PLL2_IsReady+0x18>
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	58024400 	.word	0x58024400

08009638 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 800963c:	4b07      	ldr	r3, [pc, #28]	@ (800965c <LL_RCC_PLL2P_IsEnabled+0x24>)
 800963e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009640:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009644:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009648:	d101      	bne.n	800964e <LL_RCC_PLL2P_IsEnabled+0x16>
 800964a:	2301      	movs	r3, #1
 800964c:	e000      	b.n	8009650 <LL_RCC_PLL2P_IsEnabled+0x18>
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	58024400 	.word	0x58024400

08009660 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 8009660:	b480      	push	{r7}
 8009662:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 8009664:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 8009666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800966c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009670:	d101      	bne.n	8009676 <LL_RCC_PLL2Q_IsEnabled+0x16>
 8009672:	2301      	movs	r3, #1
 8009674:	e000      	b.n	8009678 <LL_RCC_PLL2Q_IsEnabled+0x18>
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	58024400 	.word	0x58024400

08009688 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8009688:	b480      	push	{r7}
 800968a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 800968c:	4b07      	ldr	r3, [pc, #28]	@ (80096ac <LL_RCC_PLL2R_IsEnabled+0x24>)
 800968e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009698:	d101      	bne.n	800969e <LL_RCC_PLL2R_IsEnabled+0x16>
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <LL_RCC_PLL2R_IsEnabled+0x18>
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	58024400 	.word	0x58024400

080096b0 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 80096b4:	4b06      	ldr	r3, [pc, #24]	@ (80096d0 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 80096b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b10      	cmp	r3, #16
 80096be:	d101      	bne.n	80096c4 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 80096c0:	2301      	movs	r3, #1
 80096c2:	e000      	b.n	80096c6 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	58024400 	.word	0x58024400

080096d4 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 80096d8:	4b04      	ldr	r3, [pc, #16]	@ (80096ec <LL_RCC_PLL2_GetN+0x18>)
 80096da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e0:	3301      	adds	r3, #1
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	58024400 	.word	0x58024400

080096f0 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 80096f4:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <LL_RCC_PLL2_GetM+0x18>)
 80096f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f8:	0b1b      	lsrs	r3, r3, #12
 80096fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 80096fe:	4618      	mov	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	58024400 	.word	0x58024400

0800970c <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 800970c:	b480      	push	{r7}
 800970e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8009710:	4b05      	ldr	r3, [pc, #20]	@ (8009728 <LL_RCC_PLL2_GetP+0x1c>)
 8009712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009714:	0a5b      	lsrs	r3, r3, #9
 8009716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971a:	3301      	adds	r3, #1
}
 800971c:	4618      	mov	r0, r3
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	58024400 	.word	0x58024400

0800972c <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8009730:	4b05      	ldr	r3, [pc, #20]	@ (8009748 <LL_RCC_PLL2_GetQ+0x1c>)
 8009732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009734:	0c1b      	lsrs	r3, r3, #16
 8009736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800973a:	3301      	adds	r3, #1
}
 800973c:	4618      	mov	r0, r3
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	58024400 	.word	0x58024400

0800974c <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 8009750:	4b05      	ldr	r3, [pc, #20]	@ (8009768 <LL_RCC_PLL2_GetR+0x1c>)
 8009752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009754:	0e1b      	lsrs	r3, r3, #24
 8009756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800975a:	3301      	adds	r3, #1
}
 800975c:	4618      	mov	r0, r3
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400

0800976c <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 8009770:	4b04      	ldr	r3, [pc, #16]	@ (8009784 <LL_RCC_PLL2_GetFRACN+0x18>)
 8009772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009774:	08db      	lsrs	r3, r3, #3
 8009776:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 800977a:	4618      	mov	r0, r3
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	58024400 	.word	0x58024400

08009788 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 800978c:	4b07      	ldr	r3, [pc, #28]	@ (80097ac <LL_RCC_PLL3_IsReady+0x24>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009798:	d101      	bne.n	800979e <LL_RCC_PLL3_IsReady+0x16>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <LL_RCC_PLL3_IsReady+0x18>
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	58024400 	.word	0x58024400

080097b0 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 80097b4:	4b07      	ldr	r3, [pc, #28]	@ (80097d4 <LL_RCC_PLL3P_IsEnabled+0x24>)
 80097b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097c0:	d101      	bne.n	80097c6 <LL_RCC_PLL3P_IsEnabled+0x16>
 80097c2:	2301      	movs	r3, #1
 80097c4:	e000      	b.n	80097c8 <LL_RCC_PLL3P_IsEnabled+0x18>
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	58024400 	.word	0x58024400

080097d8 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 80097d8:	b480      	push	{r7}
 80097da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 80097dc:	4b07      	ldr	r3, [pc, #28]	@ (80097fc <LL_RCC_PLL3Q_IsEnabled+0x24>)
 80097de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80097e8:	d101      	bne.n	80097ee <LL_RCC_PLL3Q_IsEnabled+0x16>
 80097ea:	2301      	movs	r3, #1
 80097ec:	e000      	b.n	80097f0 <LL_RCC_PLL3Q_IsEnabled+0x18>
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	58024400 	.word	0x58024400

08009800 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8009800:	b480      	push	{r7}
 8009802:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8009804:	4b07      	ldr	r3, [pc, #28]	@ (8009824 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8009806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800980c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009810:	d101      	bne.n	8009816 <LL_RCC_PLL3R_IsEnabled+0x16>
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <LL_RCC_PLL3R_IsEnabled+0x18>
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	58024400 	.word	0x58024400

08009828 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 800982c:	4b07      	ldr	r3, [pc, #28]	@ (800984c <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009838:	d101      	bne.n	800983e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	58024400 	.word	0x58024400

08009850 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 8009854:	4b04      	ldr	r3, [pc, #16]	@ (8009868 <LL_RCC_PLL3_GetN+0x18>)
 8009856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	3301      	adds	r3, #1
}
 800985e:	4618      	mov	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr
 8009868:	58024400 	.word	0x58024400

0800986c <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 800986c:	b480      	push	{r7}
 800986e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 8009870:	4b04      	ldr	r3, [pc, #16]	@ (8009884 <LL_RCC_PLL3_GetM+0x18>)
 8009872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009874:	0d1b      	lsrs	r3, r3, #20
 8009876:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800987a:	4618      	mov	r0, r3
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	58024400 	.word	0x58024400

08009888 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 800988c:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <LL_RCC_PLL3_GetP+0x1c>)
 800988e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009890:	0a5b      	lsrs	r3, r3, #9
 8009892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009896:	3301      	adds	r3, #1
}
 8009898:	4618      	mov	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	58024400 	.word	0x58024400

080098a8 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 80098ac:	4b05      	ldr	r3, [pc, #20]	@ (80098c4 <LL_RCC_PLL3_GetQ+0x1c>)
 80098ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098b0:	0c1b      	lsrs	r3, r3, #16
 80098b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098b6:	3301      	adds	r3, #1
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	58024400 	.word	0x58024400

080098c8 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 80098c8:	b480      	push	{r7}
 80098ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <LL_RCC_PLL3_GetR+0x1c>)
 80098ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d0:	0e1b      	lsrs	r3, r3, #24
 80098d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80098d6:	3301      	adds	r3, #1
}
 80098d8:	4618      	mov	r0, r3
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	58024400 	.word	0x58024400

080098e8 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 80098ec:	4b04      	ldr	r3, [pc, #16]	@ (8009900 <LL_RCC_PLL3_GetFRACN+0x18>)
 80098ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f0:	08db      	lsrs	r3, r3, #3
 80098f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	58024400 	.word	0x58024400

08009904 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b08a      	sub	sp, #40	@ 0x28
 8009908:	af02      	add	r7, sp, #8
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 800990c:	2300      	movs	r3, #0
 800990e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8009914:	f7ff fdc6 	bl	80094a4 <LL_RCC_PLL_GetSource>
 8009918:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b02      	cmp	r3, #2
 800991e:	d01f      	beq.n	8009960 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2b02      	cmp	r3, #2
 8009924:	d824      	bhi.n	8009970 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d003      	beq.n	8009934 <LL_RCC_GetPLL1ClockFreq+0x30>
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2b01      	cmp	r3, #1
 8009930:	d00e      	beq.n	8009950 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8009932:	e01d      	b.n	8009970 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8009934:	f7ff fcf8 	bl	8009328 <LL_RCC_HSI_IsReady>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01a      	beq.n	8009974 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 800993e:	f7ff fd05 	bl	800934c <LL_RCC_HSI_GetDivider>
 8009942:	4603      	mov	r3, r0
 8009944:	08db      	lsrs	r3, r3, #3
 8009946:	4a38      	ldr	r2, [pc, #224]	@ (8009a28 <LL_RCC_GetPLL1ClockFreq+0x124>)
 8009948:	fa22 f303 	lsr.w	r3, r2, r3
 800994c:	61fb      	str	r3, [r7, #28]
      break;
 800994e:	e011      	b.n	8009974 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8009950:	f7ff fd0a 	bl	8009368 <LL_RCC_CSI_IsReady>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00e      	beq.n	8009978 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 800995a:	4b34      	ldr	r3, [pc, #208]	@ (8009a2c <LL_RCC_GetPLL1ClockFreq+0x128>)
 800995c:	61fb      	str	r3, [r7, #28]
      break;
 800995e:	e00b      	b.n	8009978 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8009960:	f7ff fcce 	bl	8009300 <LL_RCC_HSE_IsReady>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d008      	beq.n	800997c <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 800996a:	4b31      	ldr	r3, [pc, #196]	@ (8009a30 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 800996c:	61fb      	str	r3, [r7, #28]
      break;
 800996e:	e005      	b.n	800997c <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 8009970:	bf00      	nop
 8009972:	e004      	b.n	800997e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8009974:	bf00      	nop
 8009976:	e002      	b.n	800997e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 8009978:	bf00      	nop
 800997a:	e000      	b.n	800997e <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 800997c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8009990:	f7ff fdf2 	bl	8009578 <LL_RCC_PLL1_GetM>
 8009994:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8009996:	f7ff fde1 	bl	800955c <LL_RCC_PLL1_GetN>
 800999a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 800999c:	f7ff fdcc 	bl	8009538 <LL_RCC_PLL1FRACN_IsEnabled>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 80099a6:	f7ff fe25 	bl	80095f4 <LL_RCC_PLL1_GetFRACN>
 80099aa:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d035      	beq.n	8009a1e <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 80099b2:	f7ff fd85 	bl	80094c0 <LL_RCC_PLL1P_IsEnabled>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00c      	beq.n	80099d6 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 80099bc:	f7ff fdea 	bl	8009594 <LL_RCC_PLL1_GetP>
 80099c0:	4603      	mov	r3, r0
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	6939      	ldr	r1, [r7, #16]
 80099ca:	69f8      	ldr	r0, [r7, #28]
 80099cc:	f000 f964 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 80099d0:	4602      	mov	r2, r0
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 80099d6:	f7ff fd87 	bl	80094e8 <LL_RCC_PLL1Q_IsEnabled>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00c      	beq.n	80099fa <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 80099e0:	f7ff fde8 	bl	80095b4 <LL_RCC_PLL1_GetQ>
 80099e4:	4603      	mov	r3, r0
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	6939      	ldr	r1, [r7, #16]
 80099ee:	69f8      	ldr	r0, [r7, #28]
 80099f0:	f000 f952 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 80099f4:	4602      	mov	r2, r0
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 80099fa:	f7ff fd89 	bl	8009510 <LL_RCC_PLL1R_IsEnabled>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d00c      	beq.n	8009a1e <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8009a04:	f7ff fde6 	bl	80095d4 <LL_RCC_PLL1_GetR>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	6939      	ldr	r1, [r7, #16]
 8009a12:	69f8      	ldr	r0, [r7, #28]
 8009a14:	f000 f940 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	609a      	str	r2, [r3, #8]
    }
  }
}
 8009a1e:	bf00      	nop
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	03d09000 	.word	0x03d09000
 8009a2c:	003d0900 	.word	0x003d0900
 8009a30:	017d7840 	.word	0x017d7840

08009a34 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b08a      	sub	sp, #40	@ 0x28
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8009a44:	f7ff fd2e 	bl	80094a4 <LL_RCC_PLL_GetSource>
 8009a48:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d01f      	beq.n	8009a90 <LL_RCC_GetPLL2ClockFreq+0x5c>
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d824      	bhi.n	8009aa0 <LL_RCC_GetPLL2ClockFreq+0x6c>
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d003      	beq.n	8009a64 <LL_RCC_GetPLL2ClockFreq+0x30>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d00e      	beq.n	8009a80 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8009a62:	e01d      	b.n	8009aa0 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8009a64:	f7ff fc60 	bl	8009328 <LL_RCC_HSI_IsReady>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d01a      	beq.n	8009aa4 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8009a6e:	f7ff fc6d 	bl	800934c <LL_RCC_HSI_GetDivider>
 8009a72:	4603      	mov	r3, r0
 8009a74:	08db      	lsrs	r3, r3, #3
 8009a76:	4a38      	ldr	r2, [pc, #224]	@ (8009b58 <LL_RCC_GetPLL2ClockFreq+0x124>)
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7c:	61fb      	str	r3, [r7, #28]
      break;
 8009a7e:	e011      	b.n	8009aa4 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8009a80:	f7ff fc72 	bl	8009368 <LL_RCC_CSI_IsReady>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00e      	beq.n	8009aa8 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8009a8a:	4b34      	ldr	r3, [pc, #208]	@ (8009b5c <LL_RCC_GetPLL2ClockFreq+0x128>)
 8009a8c:	61fb      	str	r3, [r7, #28]
      break;
 8009a8e:	e00b      	b.n	8009aa8 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8009a90:	f7ff fc36 	bl	8009300 <LL_RCC_HSE_IsReady>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8009a9a:	4b31      	ldr	r3, [pc, #196]	@ (8009b60 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 8009a9c:	61fb      	str	r3, [r7, #28]
      break;
 8009a9e:	e005      	b.n	8009aac <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e004      	b.n	8009aae <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e002      	b.n	8009aae <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e000      	b.n	8009aae <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8009aac:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8009ac0:	f7ff fe16 	bl	80096f0 <LL_RCC_PLL2_GetM>
 8009ac4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8009ac6:	f7ff fe05 	bl	80096d4 <LL_RCC_PLL2_GetN>
 8009aca:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 8009acc:	f7ff fdf0 	bl	80096b0 <LL_RCC_PLL2FRACN_IsEnabled>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d002      	beq.n	8009adc <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8009ad6:	f7ff fe49 	bl	800976c <LL_RCC_PLL2_GetFRACN>
 8009ada:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d035      	beq.n	8009b4e <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8009ae2:	f7ff fda9 	bl	8009638 <LL_RCC_PLL2P_IsEnabled>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00c      	beq.n	8009b06 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 8009aec:	f7ff fe0e 	bl	800970c <LL_RCC_PLL2_GetP>
 8009af0:	4603      	mov	r3, r0
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	69bb      	ldr	r3, [r7, #24]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	6939      	ldr	r1, [r7, #16]
 8009afa:	69f8      	ldr	r0, [r7, #28]
 8009afc:	f000 f8cc 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009b00:	4602      	mov	r2, r0
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8009b06:	f7ff fdab 	bl	8009660 <LL_RCC_PLL2Q_IsEnabled>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00c      	beq.n	8009b2a <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8009b10:	f7ff fe0c 	bl	800972c <LL_RCC_PLL2_GetQ>
 8009b14:	4603      	mov	r3, r0
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	69bb      	ldr	r3, [r7, #24]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	6939      	ldr	r1, [r7, #16]
 8009b1e:	69f8      	ldr	r0, [r7, #28]
 8009b20:	f000 f8ba 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009b24:	4602      	mov	r2, r0
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 8009b2a:	f7ff fdad 	bl	8009688 <LL_RCC_PLL2R_IsEnabled>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00c      	beq.n	8009b4e <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8009b34:	f7ff fe0a 	bl	800974c <LL_RCC_PLL2_GetR>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	6939      	ldr	r1, [r7, #16]
 8009b42:	69f8      	ldr	r0, [r7, #28]
 8009b44:	f000 f8a8 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	609a      	str	r2, [r3, #8]
    }
  }
}
 8009b4e:	bf00      	nop
 8009b50:	3720      	adds	r7, #32
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	03d09000 	.word	0x03d09000
 8009b5c:	003d0900 	.word	0x003d0900
 8009b60:	017d7840 	.word	0x017d7840

08009b64 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	@ 0x28
 8009b68:	af02      	add	r7, sp, #8
 8009b6a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8009b74:	f7ff fc96 	bl	80094a4 <LL_RCC_PLL_GetSource>
 8009b78:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d01f      	beq.n	8009bc0 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d824      	bhi.n	8009bd0 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <LL_RCC_GetPLL3ClockFreq+0x30>
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d00e      	beq.n	8009bb0 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8009b92:	e01d      	b.n	8009bd0 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8009b94:	f7ff fbc8 	bl	8009328 <LL_RCC_HSI_IsReady>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d01a      	beq.n	8009bd4 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8009b9e:	f7ff fbd5 	bl	800934c <LL_RCC_HSI_GetDivider>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	08db      	lsrs	r3, r3, #3
 8009ba6:	4a39      	ldr	r2, [pc, #228]	@ (8009c8c <LL_RCC_GetPLL3ClockFreq+0x128>)
 8009ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bac:	61fb      	str	r3, [r7, #28]
      break;
 8009bae:	e011      	b.n	8009bd4 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8009bb0:	f7ff fbda 	bl	8009368 <LL_RCC_CSI_IsReady>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00e      	beq.n	8009bd8 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 8009bba:	4b35      	ldr	r3, [pc, #212]	@ (8009c90 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 8009bbc:	61fb      	str	r3, [r7, #28]
      break;
 8009bbe:	e00b      	b.n	8009bd8 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8009bc0:	f7ff fb9e 	bl	8009300 <LL_RCC_HSE_IsReady>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 8009bca:	4b32      	ldr	r3, [pc, #200]	@ (8009c94 <LL_RCC_GetPLL3ClockFreq+0x130>)
 8009bcc:	61fb      	str	r3, [r7, #28]
      break;
 8009bce:	e005      	b.n	8009bdc <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8009bd0:	bf00      	nop
 8009bd2:	e004      	b.n	8009bde <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8009bd4:	bf00      	nop
 8009bd6:	e002      	b.n	8009bde <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8009bd8:	bf00      	nop
 8009bda:	e000      	b.n	8009bde <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8009bdc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8009bf0:	f7ff fe3c 	bl	800986c <LL_RCC_PLL3_GetM>
 8009bf4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8009bf6:	f7ff fe2b 	bl	8009850 <LL_RCC_PLL3_GetN>
 8009bfa:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 8009bfc:	f7ff fe14 	bl	8009828 <LL_RCC_PLL3FRACN_IsEnabled>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d002      	beq.n	8009c0c <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8009c06:	f7ff fe6f 	bl	80098e8 <LL_RCC_PLL3_GetFRACN>
 8009c0a:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d038      	beq.n	8009c84 <LL_RCC_GetPLL3ClockFreq+0x120>
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d035      	beq.n	8009c84 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8009c18:	f7ff fdca 	bl	80097b0 <LL_RCC_PLL3P_IsEnabled>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00c      	beq.n	8009c3c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8009c22:	f7ff fe31 	bl	8009888 <LL_RCC_PLL3_GetP>
 8009c26:	4603      	mov	r3, r0
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	6939      	ldr	r1, [r7, #16]
 8009c30:	69f8      	ldr	r0, [r7, #28]
 8009c32:	f000 f831 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009c36:	4602      	mov	r2, r0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 8009c3c:	f7ff fdcc 	bl	80097d8 <LL_RCC_PLL3Q_IsEnabled>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00c      	beq.n	8009c60 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 8009c46:	f7ff fe2f 	bl	80098a8 <LL_RCC_PLL3_GetQ>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	69bb      	ldr	r3, [r7, #24]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	6939      	ldr	r1, [r7, #16]
 8009c54:	69f8      	ldr	r0, [r7, #28]
 8009c56:	f000 f81f 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 8009c60:	f7ff fdce 	bl	8009800 <LL_RCC_PLL3R_IsEnabled>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 8009c6a:	f7ff fe2d 	bl	80098c8 <LL_RCC_PLL3_GetR>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	6939      	ldr	r1, [r7, #16]
 8009c78:	69f8      	ldr	r0, [r7, #28]
 8009c7a:	f000 f80d 	bl	8009c98 <LL_RCC_CalcPLLClockFreq>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	609a      	str	r2, [r3, #8]
    }
  }
}
 8009c84:	bf00      	nop
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	03d09000 	.word	0x03d09000
 8009c90:	003d0900 	.word	0x003d0900
 8009c94:	017d7840 	.word	0x017d7840

08009c98 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b087      	sub	sp, #28
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
 8009ca4:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	ee07 3a90 	vmov	s15, r3
 8009cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8009cd2:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8009d14 <LL_RCC_CalcPLLClockFreq+0x7c>
 8009cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce2:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	ee07 3a90 	vmov	s15, r3
 8009cec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009cf0:	edd7 6a05 	vldr	s13, [r7, #20]
 8009cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009cf8:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 8009cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d04:	ee17 3a90 	vmov	r3, s15
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	46000000 	.word	0x46000000

08009d18 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8009d18:	b590      	push	{r4, r7, lr}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009d20:	2300      	movs	r3, #0
 8009d22:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fbb1 	bl	800948c <LL_RCC_GetUSARTClockSource>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	4a62      	ldr	r2, [pc, #392]	@ (8009eb8 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	f000 80a9 	beq.w	8009e86 <LL_RCC_GetUSARTClockFreq+0x16e>
 8009d34:	4a60      	ldr	r2, [pc, #384]	@ (8009eb8 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	f200 80ae 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d3c:	4a5f      	ldr	r2, [pc, #380]	@ (8009ebc <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	f000 80a1 	beq.w	8009e86 <LL_RCC_GetUSARTClockFreq+0x16e>
 8009d44:	4a5d      	ldr	r2, [pc, #372]	@ (8009ebc <LL_RCC_GetUSARTClockFreq+0x1a4>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	f200 80a6 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d4c:	4a5c      	ldr	r2, [pc, #368]	@ (8009ec0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	f000 8091 	beq.w	8009e76 <LL_RCC_GetUSARTClockFreq+0x15e>
 8009d54:	4a5a      	ldr	r2, [pc, #360]	@ (8009ec0 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	f200 809e 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d5c:	4a59      	ldr	r2, [pc, #356]	@ (8009ec4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	f000 8089 	beq.w	8009e76 <LL_RCC_GetUSARTClockFreq+0x15e>
 8009d64:	4a57      	ldr	r2, [pc, #348]	@ (8009ec4 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	f200 8096 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d6c:	4a56      	ldr	r2, [pc, #344]	@ (8009ec8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d073      	beq.n	8009e5a <LL_RCC_GetUSARTClockFreq+0x142>
 8009d72:	4a55      	ldr	r2, [pc, #340]	@ (8009ec8 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	f200 808f 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d7a:	4a54      	ldr	r2, [pc, #336]	@ (8009ecc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d06c      	beq.n	8009e5a <LL_RCC_GetUSARTClockFreq+0x142>
 8009d80:	4a52      	ldr	r2, [pc, #328]	@ (8009ecc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	f200 8088 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d88:	4a51      	ldr	r2, [pc, #324]	@ (8009ed0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d058      	beq.n	8009e40 <LL_RCC_GetUSARTClockFreq+0x128>
 8009d8e:	4a50      	ldr	r2, [pc, #320]	@ (8009ed0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	f200 8081 	bhi.w	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009d96:	4a4f      	ldr	r2, [pc, #316]	@ (8009ed4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d051      	beq.n	8009e40 <LL_RCC_GetUSARTClockFreq+0x128>
 8009d9c:	4a4d      	ldr	r2, [pc, #308]	@ (8009ed4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d87a      	bhi.n	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009da2:	4a4d      	ldr	r2, [pc, #308]	@ (8009ed8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d03e      	beq.n	8009e26 <LL_RCC_GetUSARTClockFreq+0x10e>
 8009da8:	4a4b      	ldr	r2, [pc, #300]	@ (8009ed8 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d874      	bhi.n	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009dae:	4a4b      	ldr	r2, [pc, #300]	@ (8009edc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d038      	beq.n	8009e26 <LL_RCC_GetUSARTClockFreq+0x10e>
 8009db4:	4a49      	ldr	r2, [pc, #292]	@ (8009edc <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d86e      	bhi.n	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
 8009dba:	4a49      	ldr	r2, [pc, #292]	@ (8009ee0 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d01a      	beq.n	8009df6 <LL_RCC_GetUSARTClockFreq+0xde>
 8009dc0:	4a48      	ldr	r2, [pc, #288]	@ (8009ee4 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d168      	bne.n	8009e98 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8009dc6:	f000 f895 	bl	8009ef4 <RCC_GetSystemClockFreq>
 8009dca:	4604      	mov	r4, r0
 8009dcc:	f7ff fb00 	bl	80093d0 <LL_RCC_GetSysPrescaler>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	0a1b      	lsrs	r3, r3, #8
 8009dd4:	f003 030f 	and.w	r3, r3, #15
 8009dd8:	4a43      	ldr	r2, [pc, #268]	@ (8009ee8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8009dda:	5cd3      	ldrb	r3, [r2, r3]
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	fa24 f303 	lsr.w	r3, r4, r3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f000 f8e7 	bl	8009fb8 <RCC_GetHCLKClockFreq>
 8009dea:	4603      	mov	r3, r0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 f911 	bl	800a014 <RCC_GetPCLK2ClockFreq>
 8009df2:	6178      	str	r0, [r7, #20]
      break;
 8009df4:	e05b      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8009df6:	f000 f87d 	bl	8009ef4 <RCC_GetSystemClockFreq>
 8009dfa:	4604      	mov	r4, r0
 8009dfc:	f7ff fae8 	bl	80093d0 <LL_RCC_GetSysPrescaler>
 8009e00:	4603      	mov	r3, r0
 8009e02:	0a1b      	lsrs	r3, r3, #8
 8009e04:	f003 030f 	and.w	r3, r3, #15
 8009e08:	4a37      	ldr	r2, [pc, #220]	@ (8009ee8 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8009e0a:	5cd3      	ldrb	r3, [r2, r3]
 8009e0c:	f003 031f 	and.w	r3, r3, #31
 8009e10:	fa24 f303 	lsr.w	r3, r4, r3
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 f8cf 	bl	8009fb8 <RCC_GetHCLKClockFreq>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 f8e1 	bl	8009fe4 <RCC_GetPCLK1ClockFreq>
 8009e22:	6178      	str	r0, [r7, #20]
      break;
 8009e24:	e043      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8009e26:	f7ff fbf3 	bl	8009610 <LL_RCC_PLL2_IsReady>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d035      	beq.n	8009e9c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8009e30:	f107 0308 	add.w	r3, r7, #8
 8009e34:	4618      	mov	r0, r3
 8009e36:	f7ff fdfd 	bl	8009a34 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	617b      	str	r3, [r7, #20]
      }
      break;
 8009e3e:	e02d      	b.n	8009e9c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8009e40:	f7ff fca2 	bl	8009788 <LL_RCC_PLL3_IsReady>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d02a      	beq.n	8009ea0 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fe88 	bl	8009b64 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	617b      	str	r3, [r7, #20]
      }
      break;
 8009e58:	e022      	b.n	8009ea0 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8009e5a:	f7ff fa65 	bl	8009328 <LL_RCC_HSI_IsReady>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01f      	beq.n	8009ea4 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8009e64:	f7ff fa72 	bl	800934c <LL_RCC_HSI_GetDivider>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	08db      	lsrs	r3, r3, #3
 8009e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8009eec <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8009e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e72:	617b      	str	r3, [r7, #20]
      }
      break;
 8009e74:	e016      	b.n	8009ea4 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8009e76:	f7ff fa77 	bl	8009368 <LL_RCC_CSI_IsReady>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d013      	beq.n	8009ea8 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8009e80:	4b1b      	ldr	r3, [pc, #108]	@ (8009ef0 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8009e82:	617b      	str	r3, [r7, #20]
      }
      break;
 8009e84:	e010      	b.n	8009ea8 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8009e86:	f7ff fa83 	bl	8009390 <LL_RCC_LSE_IsReady>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00d      	beq.n	8009eac <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8009e90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e94:	617b      	str	r3, [r7, #20]
      }
      break;
 8009e96:	e009      	b.n	8009eac <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8009e98:	bf00      	nop
 8009e9a:	e008      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8009e9c:	bf00      	nop
 8009e9e:	e006      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8009ea0:	bf00      	nop
 8009ea2:	e004      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8009ea4:	bf00      	nop
 8009ea6:	e002      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8009ea8:	bf00      	nop
 8009eaa:	e000      	b.n	8009eae <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8009eac:	bf00      	nop
  }

  return usart_frequency;
 8009eae:	697b      	ldr	r3, [r7, #20]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	371c      	adds	r7, #28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}
 8009eb8:	07050308 	.word	0x07050308
 8009ebc:	07050008 	.word	0x07050008
 8009ec0:	07040308 	.word	0x07040308
 8009ec4:	07040008 	.word	0x07040008
 8009ec8:	07030308 	.word	0x07030308
 8009ecc:	07030008 	.word	0x07030008
 8009ed0:	07020308 	.word	0x07020308
 8009ed4:	07020008 	.word	0x07020008
 8009ed8:	07010308 	.word	0x07010308
 8009edc:	07010008 	.word	0x07010008
 8009ee0:	07000008 	.word	0x07000008
 8009ee4:	07000308 	.word	0x07000308
 8009ee8:	0800c2ec 	.word	0x0800c2ec
 8009eec:	03d09000 	.word	0x03d09000
 8009ef0:	003d0900 	.word	0x003d0900

08009ef4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009efe:	f7ff fa59 	bl	80093b4 <LL_RCC_GetSysClkSource>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b18      	cmp	r3, #24
 8009f06:	d84b      	bhi.n	8009fa0 <RCC_GetSystemClockFreq+0xac>
 8009f08:	a201      	add	r2, pc, #4	@ (adr r2, 8009f10 <RCC_GetSystemClockFreq+0x1c>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f75 	.word	0x08009f75
 8009f14:	08009fa1 	.word	0x08009fa1
 8009f18:	08009fa1 	.word	0x08009fa1
 8009f1c:	08009fa1 	.word	0x08009fa1
 8009f20:	08009fa1 	.word	0x08009fa1
 8009f24:	08009fa1 	.word	0x08009fa1
 8009f28:	08009fa1 	.word	0x08009fa1
 8009f2c:	08009fa1 	.word	0x08009fa1
 8009f30:	08009f87 	.word	0x08009f87
 8009f34:	08009fa1 	.word	0x08009fa1
 8009f38:	08009fa1 	.word	0x08009fa1
 8009f3c:	08009fa1 	.word	0x08009fa1
 8009f40:	08009fa1 	.word	0x08009fa1
 8009f44:	08009fa1 	.word	0x08009fa1
 8009f48:	08009fa1 	.word	0x08009fa1
 8009f4c:	08009fa1 	.word	0x08009fa1
 8009f50:	08009f8d 	.word	0x08009f8d
 8009f54:	08009fa1 	.word	0x08009fa1
 8009f58:	08009fa1 	.word	0x08009fa1
 8009f5c:	08009fa1 	.word	0x08009fa1
 8009f60:	08009fa1 	.word	0x08009fa1
 8009f64:	08009fa1 	.word	0x08009fa1
 8009f68:	08009fa1 	.word	0x08009fa1
 8009f6c:	08009fa1 	.word	0x08009fa1
 8009f70:	08009f93 	.word	0x08009f93
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8009f74:	f7ff f9ea 	bl	800934c <LL_RCC_HSI_GetDivider>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	08db      	lsrs	r3, r3, #3
 8009f7c:	4a0b      	ldr	r2, [pc, #44]	@ (8009fac <RCC_GetSystemClockFreq+0xb8>)
 8009f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009f82:	60fb      	str	r3, [r7, #12]
      break;
 8009f84:	e00d      	b.n	8009fa2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <RCC_GetSystemClockFreq+0xbc>)
 8009f88:	60fb      	str	r3, [r7, #12]
      break;
 8009f8a:	e00a      	b.n	8009fa2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8009f8c:	4b09      	ldr	r3, [pc, #36]	@ (8009fb4 <RCC_GetSystemClockFreq+0xc0>)
 8009f8e:	60fb      	str	r3, [r7, #12]
      break;
 8009f90:	e007      	b.n	8009fa2 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8009f92:	463b      	mov	r3, r7
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff fcb5 	bl	8009904 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]
      break;
 8009f9e:	e000      	b.n	8009fa2 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8009fa0:	bf00      	nop
  }

  return frequency;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	03d09000 	.word	0x03d09000
 8009fb0:	003d0900 	.word	0x003d0900
 8009fb4:	017d7840 	.word	0x017d7840

08009fb8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b082      	sub	sp, #8
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009fc0:	f7ff fa14 	bl	80093ec <LL_RCC_GetAHBPrescaler>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f003 030f 	and.w	r3, r3, #15
 8009fca:	4a05      	ldr	r2, [pc, #20]	@ (8009fe0 <RCC_GetHCLKClockFreq+0x28>)
 8009fcc:	5cd3      	ldrb	r3, [r2, r3]
 8009fce:	f003 031f 	and.w	r3, r3, #31
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	0800c2ec 	.word	0x0800c2ec

08009fe4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009fec:	f7ff fa0c 	bl	8009408 <LL_RCC_GetAPB1Prescaler>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	091b      	lsrs	r3, r3, #4
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	4a05      	ldr	r2, [pc, #20]	@ (800a010 <RCC_GetPCLK1ClockFreq+0x2c>)
 8009ffa:	5cd3      	ldrb	r3, [r2, r3]
 8009ffc:	f003 031f 	and.w	r3, r3, #31
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a006:	4618      	mov	r0, r3
 800a008:	3708      	adds	r7, #8
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	0800c2ec 	.word	0x0800c2ec

0800a014 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800a01c:	f7ff fa02 	bl	8009424 <LL_RCC_GetAPB2Prescaler>
 800a020:	4603      	mov	r3, r0
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	4a05      	ldr	r2, [pc, #20]	@ (800a040 <RCC_GetPCLK2ClockFreq+0x2c>)
 800a02a:	5cd3      	ldrb	r3, [r2, r3]
 800a02c:	f003 031f 	and.w	r3, r3, #31
 800a030:	687a      	ldr	r2, [r7, #4]
 800a032:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a036:	4618      	mov	r0, r3
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	0800c2ec 	.word	0x0800c2ec

0800a044 <LL_USART_IsEnabled>:
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 0301 	and.w	r3, r3, #1
 800a054:	2b01      	cmp	r3, #1
 800a056:	d101      	bne.n	800a05c <LL_USART_IsEnabled+0x18>
 800a058:	2301      	movs	r3, #1
 800a05a:	e000      	b.n	800a05e <LL_USART_IsEnabled+0x1a>
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <LL_USART_SetPrescaler>:
{
 800a06a:	b480      	push	{r7}
 800a06c:	b083      	sub	sp, #12
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a078:	f023 030f 	bic.w	r3, r3, #15
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	b292      	uxth	r2, r2
 800a080:	431a      	orrs	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <LL_USART_SetStopBitsLength>:
{
 800a092:	b480      	push	{r7}
 800a094:	b083      	sub	sp, #12
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	605a      	str	r2, [r3, #4]
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <LL_USART_SetHWFlowCtrl>:
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	431a      	orrs	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	609a      	str	r2, [r3, #8]
}
 800a0d2:	bf00      	nop
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
	...

0800a0e0 <LL_USART_SetBaudRate>:
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2b0b      	cmp	r3, #11
 800a0f2:	d83c      	bhi.n	800a16e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d039      	beq.n	800a16e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a100:	d122      	bne.n	800a148 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	b2db      	uxtb	r3, r3
 800a106:	461a      	mov	r2, r3
 800a108:	4b1c      	ldr	r3, [pc, #112]	@ (800a17c <LL_USART_SetBaudRate+0x9c>)
 800a10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10e:	68ba      	ldr	r2, [r7, #8]
 800a110:	fbb2 f3f3 	udiv	r3, r2, r3
 800a114:	005a      	lsls	r2, r3, #1
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	085b      	lsrs	r3, r3, #1
 800a11a:	441a      	add	r2, r3
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a122:	b29b      	uxth	r3, r3
 800a124:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 800a12c:	4013      	ands	r3, r2
 800a12e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	085b      	lsrs	r3, r3, #1
 800a134:	b29b      	uxth	r3, r3
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	60da      	str	r2, [r3, #12]
}
 800a146:	e012      	b.n	800a16e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	461a      	mov	r2, r3
 800a14e:	4b0b      	ldr	r3, [pc, #44]	@ (800a17c <LL_USART_SetBaudRate+0x9c>)
 800a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	fbb2 f2f3 	udiv	r2, r2, r3
 800a15a:	6a3b      	ldr	r3, [r7, #32]
 800a15c:	085b      	lsrs	r3, r3, #1
 800a15e:	441a      	add	r2, r3
 800a160:	6a3b      	ldr	r3, [r7, #32]
 800a162:	fbb2 f3f3 	udiv	r3, r2, r3
 800a166:	b29b      	uxth	r3, r3
 800a168:	461a      	mov	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	60da      	str	r2, [r3, #12]
}
 800a16e:	bf00      	nop
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	0800c2fc 	.word	0x0800c2fc

0800a180 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b086      	sub	sp, #24
 800a184:	af02      	add	r7, sp, #8
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800a18e:	2300      	movs	r3, #0
 800a190:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7ff ff56 	bl	800a044 <LL_USART_IsEnabled>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d17f      	bne.n	800a29e <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	4b41      	ldr	r3, [pc, #260]	@ (800a2a8 <LL_USART_Init+0x128>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	6891      	ldr	r1, [r2, #8]
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	6912      	ldr	r2, [r2, #16]
 800a1ae:	4311      	orrs	r1, r2
 800a1b0:	683a      	ldr	r2, [r7, #0]
 800a1b2:	6952      	ldr	r2, [r2, #20]
 800a1b4:	4311      	orrs	r1, r2
 800a1b6:	683a      	ldr	r2, [r7, #0]
 800a1b8:	69d2      	ldr	r2, [r2, #28]
 800a1ba:	430a      	orrs	r2, r1
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff ff62 	bl	800a092 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	699b      	ldr	r3, [r3, #24]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7ff ff6f 	bl	800a0b8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a33      	ldr	r2, [pc, #204]	@ (800a2ac <LL_USART_Init+0x12c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d104      	bne.n	800a1ec <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800a1e2:	4833      	ldr	r0, [pc, #204]	@ (800a2b0 <LL_USART_Init+0x130>)
 800a1e4:	f7ff fd98 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a1e8:	60b8      	str	r0, [r7, #8]
 800a1ea:	e03d      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a31      	ldr	r2, [pc, #196]	@ (800a2b4 <LL_USART_Init+0x134>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d104      	bne.n	800a1fe <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a1f4:	4830      	ldr	r0, [pc, #192]	@ (800a2b8 <LL_USART_Init+0x138>)
 800a1f6:	f7ff fd8f 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a1fa:	60b8      	str	r0, [r7, #8]
 800a1fc:	e034      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	4a2e      	ldr	r2, [pc, #184]	@ (800a2bc <LL_USART_Init+0x13c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d104      	bne.n	800a210 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a206:	482c      	ldr	r0, [pc, #176]	@ (800a2b8 <LL_USART_Init+0x138>)
 800a208:	f7ff fd86 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a20c:	60b8      	str	r0, [r7, #8]
 800a20e:	e02b      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a2b      	ldr	r2, [pc, #172]	@ (800a2c0 <LL_USART_Init+0x140>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d104      	bne.n	800a222 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a218:	4827      	ldr	r0, [pc, #156]	@ (800a2b8 <LL_USART_Init+0x138>)
 800a21a:	f7ff fd7d 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a21e:	60b8      	str	r0, [r7, #8]
 800a220:	e022      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a27      	ldr	r2, [pc, #156]	@ (800a2c4 <LL_USART_Init+0x144>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d104      	bne.n	800a234 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a22a:	4823      	ldr	r0, [pc, #140]	@ (800a2b8 <LL_USART_Init+0x138>)
 800a22c:	f7ff fd74 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a230:	60b8      	str	r0, [r7, #8]
 800a232:	e019      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a24      	ldr	r2, [pc, #144]	@ (800a2c8 <LL_USART_Init+0x148>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d104      	bne.n	800a246 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 800a23c:	481c      	ldr	r0, [pc, #112]	@ (800a2b0 <LL_USART_Init+0x130>)
 800a23e:	f7ff fd6b 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a242:	60b8      	str	r0, [r7, #8]
 800a244:	e010      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a20      	ldr	r2, [pc, #128]	@ (800a2cc <LL_USART_Init+0x14c>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d104      	bne.n	800a258 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a24e:	481a      	ldr	r0, [pc, #104]	@ (800a2b8 <LL_USART_Init+0x138>)
 800a250:	f7ff fd62 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a254:	60b8      	str	r0, [r7, #8]
 800a256:	e007      	b.n	800a268 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a1d      	ldr	r2, [pc, #116]	@ (800a2d0 <LL_USART_Init+0x150>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d103      	bne.n	800a268 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 800a260:	4815      	ldr	r0, [pc, #84]	@ (800a2b8 <LL_USART_Init+0x138>)
 800a262:	f7ff fd59 	bl	8009d18 <LL_RCC_GetUSARTClockFreq>
 800a266:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d011      	beq.n	800a292 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00d      	beq.n	800a292 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 800a276:	2300      	movs	r3, #0
 800a278:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	460b      	mov	r3, r1
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f7ff ff27 	bl	800a0e0 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4619      	mov	r1, r3
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f7ff fee6 	bl	800a06a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	efff69f3 	.word	0xefff69f3
 800a2ac:	40011000 	.word	0x40011000
 800a2b0:	07000308 	.word	0x07000308
 800a2b4:	40004400 	.word	0x40004400
 800a2b8:	07000008 	.word	0x07000008
 800a2bc:	40004800 	.word	0x40004800
 800a2c0:	40004c00 	.word	0x40004c00
 800a2c4:	40005000 	.word	0x40005000
 800a2c8:	40011400 	.word	0x40011400
 800a2cc:	40007800 	.word	0x40007800
 800a2d0:	40007c00 	.word	0x40007c00

0800a2d4 <LL_SetSystemCoreClock>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 800a2dc:	4a04      	ldr	r2, [pc, #16]	@ (800a2f0 <LL_SetSystemCoreClock+0x1c>)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6013      	str	r3, [r2, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	24000000 	.word	0x24000000

0800a2f4 <srand>:
 800a2f4:	b538      	push	{r3, r4, r5, lr}
 800a2f6:	4b10      	ldr	r3, [pc, #64]	@ (800a338 <srand+0x44>)
 800a2f8:	681d      	ldr	r5, [r3, #0]
 800a2fa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	b9b3      	cbnz	r3, 800a32e <srand+0x3a>
 800a300:	2018      	movs	r0, #24
 800a302:	f000 fb89 	bl	800aa18 <malloc>
 800a306:	4602      	mov	r2, r0
 800a308:	6328      	str	r0, [r5, #48]	@ 0x30
 800a30a:	b920      	cbnz	r0, 800a316 <srand+0x22>
 800a30c:	4b0b      	ldr	r3, [pc, #44]	@ (800a33c <srand+0x48>)
 800a30e:	480c      	ldr	r0, [pc, #48]	@ (800a340 <srand+0x4c>)
 800a310:	2146      	movs	r1, #70	@ 0x46
 800a312:	f000 fb19 	bl	800a948 <__assert_func>
 800a316:	490b      	ldr	r1, [pc, #44]	@ (800a344 <srand+0x50>)
 800a318:	4b0b      	ldr	r3, [pc, #44]	@ (800a348 <srand+0x54>)
 800a31a:	e9c0 1300 	strd	r1, r3, [r0]
 800a31e:	4b0b      	ldr	r3, [pc, #44]	@ (800a34c <srand+0x58>)
 800a320:	6083      	str	r3, [r0, #8]
 800a322:	230b      	movs	r3, #11
 800a324:	8183      	strh	r3, [r0, #12]
 800a326:	2100      	movs	r1, #0
 800a328:	2001      	movs	r0, #1
 800a32a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a32e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a330:	2200      	movs	r2, #0
 800a332:	611c      	str	r4, [r3, #16]
 800a334:	615a      	str	r2, [r3, #20]
 800a336:	bd38      	pop	{r3, r4, r5, pc}
 800a338:	2400006c 	.word	0x2400006c
 800a33c:	0800c32c 	.word	0x0800c32c
 800a340:	0800c343 	.word	0x0800c343
 800a344:	abcd330e 	.word	0xabcd330e
 800a348:	e66d1234 	.word	0xe66d1234
 800a34c:	0005deec 	.word	0x0005deec

0800a350 <rand>:
 800a350:	4b16      	ldr	r3, [pc, #88]	@ (800a3ac <rand+0x5c>)
 800a352:	b510      	push	{r4, lr}
 800a354:	681c      	ldr	r4, [r3, #0]
 800a356:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a358:	b9b3      	cbnz	r3, 800a388 <rand+0x38>
 800a35a:	2018      	movs	r0, #24
 800a35c:	f000 fb5c 	bl	800aa18 <malloc>
 800a360:	4602      	mov	r2, r0
 800a362:	6320      	str	r0, [r4, #48]	@ 0x30
 800a364:	b920      	cbnz	r0, 800a370 <rand+0x20>
 800a366:	4b12      	ldr	r3, [pc, #72]	@ (800a3b0 <rand+0x60>)
 800a368:	4812      	ldr	r0, [pc, #72]	@ (800a3b4 <rand+0x64>)
 800a36a:	2152      	movs	r1, #82	@ 0x52
 800a36c:	f000 faec 	bl	800a948 <__assert_func>
 800a370:	4911      	ldr	r1, [pc, #68]	@ (800a3b8 <rand+0x68>)
 800a372:	4b12      	ldr	r3, [pc, #72]	@ (800a3bc <rand+0x6c>)
 800a374:	e9c0 1300 	strd	r1, r3, [r0]
 800a378:	4b11      	ldr	r3, [pc, #68]	@ (800a3c0 <rand+0x70>)
 800a37a:	6083      	str	r3, [r0, #8]
 800a37c:	230b      	movs	r3, #11
 800a37e:	8183      	strh	r3, [r0, #12]
 800a380:	2100      	movs	r1, #0
 800a382:	2001      	movs	r0, #1
 800a384:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a388:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a38a:	480e      	ldr	r0, [pc, #56]	@ (800a3c4 <rand+0x74>)
 800a38c:	690b      	ldr	r3, [r1, #16]
 800a38e:	694c      	ldr	r4, [r1, #20]
 800a390:	4a0d      	ldr	r2, [pc, #52]	@ (800a3c8 <rand+0x78>)
 800a392:	4358      	muls	r0, r3
 800a394:	fb02 0004 	mla	r0, r2, r4, r0
 800a398:	fba3 3202 	umull	r3, r2, r3, r2
 800a39c:	3301      	adds	r3, #1
 800a39e:	eb40 0002 	adc.w	r0, r0, r2
 800a3a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a3a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a3aa:	bd10      	pop	{r4, pc}
 800a3ac:	2400006c 	.word	0x2400006c
 800a3b0:	0800c32c 	.word	0x0800c32c
 800a3b4:	0800c343 	.word	0x0800c343
 800a3b8:	abcd330e 	.word	0xabcd330e
 800a3bc:	e66d1234 	.word	0xe66d1234
 800a3c0:	0005deec 	.word	0x0005deec
 800a3c4:	5851f42d 	.word	0x5851f42d
 800a3c8:	4c957f2d 	.word	0x4c957f2d

0800a3cc <std>:
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	b510      	push	{r4, lr}
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3da:	6083      	str	r3, [r0, #8]
 800a3dc:	8181      	strh	r1, [r0, #12]
 800a3de:	6643      	str	r3, [r0, #100]	@ 0x64
 800a3e0:	81c2      	strh	r2, [r0, #14]
 800a3e2:	6183      	str	r3, [r0, #24]
 800a3e4:	4619      	mov	r1, r3
 800a3e6:	2208      	movs	r2, #8
 800a3e8:	305c      	adds	r0, #92	@ 0x5c
 800a3ea:	f000 fa03 	bl	800a7f4 <memset>
 800a3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800a424 <std+0x58>)
 800a3f0:	6263      	str	r3, [r4, #36]	@ 0x24
 800a3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800a428 <std+0x5c>)
 800a3f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800a42c <std+0x60>)
 800a3f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800a430 <std+0x64>)
 800a3fc:	6323      	str	r3, [r4, #48]	@ 0x30
 800a3fe:	4b0d      	ldr	r3, [pc, #52]	@ (800a434 <std+0x68>)
 800a400:	6224      	str	r4, [r4, #32]
 800a402:	429c      	cmp	r4, r3
 800a404:	d006      	beq.n	800a414 <std+0x48>
 800a406:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a40a:	4294      	cmp	r4, r2
 800a40c:	d002      	beq.n	800a414 <std+0x48>
 800a40e:	33d0      	adds	r3, #208	@ 0xd0
 800a410:	429c      	cmp	r4, r3
 800a412:	d105      	bne.n	800a420 <std+0x54>
 800a414:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f000 ba82 	b.w	800a924 <__retarget_lock_init_recursive>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	bf00      	nop
 800a424:	0800a631 	.word	0x0800a631
 800a428:	0800a653 	.word	0x0800a653
 800a42c:	0800a68b 	.word	0x0800a68b
 800a430:	0800a6af 	.word	0x0800a6af
 800a434:	24040bd0 	.word	0x24040bd0

0800a438 <stdio_exit_handler>:
 800a438:	4a02      	ldr	r2, [pc, #8]	@ (800a444 <stdio_exit_handler+0xc>)
 800a43a:	4903      	ldr	r1, [pc, #12]	@ (800a448 <stdio_exit_handler+0x10>)
 800a43c:	4803      	ldr	r0, [pc, #12]	@ (800a44c <stdio_exit_handler+0x14>)
 800a43e:	f000 b869 	b.w	800a514 <_fwalk_sglue>
 800a442:	bf00      	nop
 800a444:	24000060 	.word	0x24000060
 800a448:	0800b229 	.word	0x0800b229
 800a44c:	24000070 	.word	0x24000070

0800a450 <cleanup_stdio>:
 800a450:	6841      	ldr	r1, [r0, #4]
 800a452:	4b0c      	ldr	r3, [pc, #48]	@ (800a484 <cleanup_stdio+0x34>)
 800a454:	4299      	cmp	r1, r3
 800a456:	b510      	push	{r4, lr}
 800a458:	4604      	mov	r4, r0
 800a45a:	d001      	beq.n	800a460 <cleanup_stdio+0x10>
 800a45c:	f000 fee4 	bl	800b228 <_fflush_r>
 800a460:	68a1      	ldr	r1, [r4, #8]
 800a462:	4b09      	ldr	r3, [pc, #36]	@ (800a488 <cleanup_stdio+0x38>)
 800a464:	4299      	cmp	r1, r3
 800a466:	d002      	beq.n	800a46e <cleanup_stdio+0x1e>
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fedd 	bl	800b228 <_fflush_r>
 800a46e:	68e1      	ldr	r1, [r4, #12]
 800a470:	4b06      	ldr	r3, [pc, #24]	@ (800a48c <cleanup_stdio+0x3c>)
 800a472:	4299      	cmp	r1, r3
 800a474:	d004      	beq.n	800a480 <cleanup_stdio+0x30>
 800a476:	4620      	mov	r0, r4
 800a478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a47c:	f000 bed4 	b.w	800b228 <_fflush_r>
 800a480:	bd10      	pop	{r4, pc}
 800a482:	bf00      	nop
 800a484:	24040bd0 	.word	0x24040bd0
 800a488:	24040c38 	.word	0x24040c38
 800a48c:	24040ca0 	.word	0x24040ca0

0800a490 <global_stdio_init.part.0>:
 800a490:	b510      	push	{r4, lr}
 800a492:	4b0b      	ldr	r3, [pc, #44]	@ (800a4c0 <global_stdio_init.part.0+0x30>)
 800a494:	4c0b      	ldr	r4, [pc, #44]	@ (800a4c4 <global_stdio_init.part.0+0x34>)
 800a496:	4a0c      	ldr	r2, [pc, #48]	@ (800a4c8 <global_stdio_init.part.0+0x38>)
 800a498:	601a      	str	r2, [r3, #0]
 800a49a:	4620      	mov	r0, r4
 800a49c:	2200      	movs	r2, #0
 800a49e:	2104      	movs	r1, #4
 800a4a0:	f7ff ff94 	bl	800a3cc <std>
 800a4a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	2109      	movs	r1, #9
 800a4ac:	f7ff ff8e 	bl	800a3cc <std>
 800a4b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4ba:	2112      	movs	r1, #18
 800a4bc:	f7ff bf86 	b.w	800a3cc <std>
 800a4c0:	24040d08 	.word	0x24040d08
 800a4c4:	24040bd0 	.word	0x24040bd0
 800a4c8:	0800a439 	.word	0x0800a439

0800a4cc <__sfp_lock_acquire>:
 800a4cc:	4801      	ldr	r0, [pc, #4]	@ (800a4d4 <__sfp_lock_acquire+0x8>)
 800a4ce:	f000 ba2a 	b.w	800a926 <__retarget_lock_acquire_recursive>
 800a4d2:	bf00      	nop
 800a4d4:	24040d11 	.word	0x24040d11

0800a4d8 <__sfp_lock_release>:
 800a4d8:	4801      	ldr	r0, [pc, #4]	@ (800a4e0 <__sfp_lock_release+0x8>)
 800a4da:	f000 ba25 	b.w	800a928 <__retarget_lock_release_recursive>
 800a4de:	bf00      	nop
 800a4e0:	24040d11 	.word	0x24040d11

0800a4e4 <__sinit>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	f7ff fff0 	bl	800a4cc <__sfp_lock_acquire>
 800a4ec:	6a23      	ldr	r3, [r4, #32]
 800a4ee:	b11b      	cbz	r3, 800a4f8 <__sinit+0x14>
 800a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f4:	f7ff bff0 	b.w	800a4d8 <__sfp_lock_release>
 800a4f8:	4b04      	ldr	r3, [pc, #16]	@ (800a50c <__sinit+0x28>)
 800a4fa:	6223      	str	r3, [r4, #32]
 800a4fc:	4b04      	ldr	r3, [pc, #16]	@ (800a510 <__sinit+0x2c>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f5      	bne.n	800a4f0 <__sinit+0xc>
 800a504:	f7ff ffc4 	bl	800a490 <global_stdio_init.part.0>
 800a508:	e7f2      	b.n	800a4f0 <__sinit+0xc>
 800a50a:	bf00      	nop
 800a50c:	0800a451 	.word	0x0800a451
 800a510:	24040d08 	.word	0x24040d08

0800a514 <_fwalk_sglue>:
 800a514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a518:	4607      	mov	r7, r0
 800a51a:	4688      	mov	r8, r1
 800a51c:	4614      	mov	r4, r2
 800a51e:	2600      	movs	r6, #0
 800a520:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a524:	f1b9 0901 	subs.w	r9, r9, #1
 800a528:	d505      	bpl.n	800a536 <_fwalk_sglue+0x22>
 800a52a:	6824      	ldr	r4, [r4, #0]
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	d1f7      	bne.n	800a520 <_fwalk_sglue+0xc>
 800a530:	4630      	mov	r0, r6
 800a532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d907      	bls.n	800a54c <_fwalk_sglue+0x38>
 800a53c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a540:	3301      	adds	r3, #1
 800a542:	d003      	beq.n	800a54c <_fwalk_sglue+0x38>
 800a544:	4629      	mov	r1, r5
 800a546:	4638      	mov	r0, r7
 800a548:	47c0      	blx	r8
 800a54a:	4306      	orrs	r6, r0
 800a54c:	3568      	adds	r5, #104	@ 0x68
 800a54e:	e7e9      	b.n	800a524 <_fwalk_sglue+0x10>

0800a550 <iprintf>:
 800a550:	b40f      	push	{r0, r1, r2, r3}
 800a552:	b507      	push	{r0, r1, r2, lr}
 800a554:	4906      	ldr	r1, [pc, #24]	@ (800a570 <iprintf+0x20>)
 800a556:	ab04      	add	r3, sp, #16
 800a558:	6808      	ldr	r0, [r1, #0]
 800a55a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55e:	6881      	ldr	r1, [r0, #8]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f000 fb39 	bl	800abd8 <_vfiprintf_r>
 800a566:	b003      	add	sp, #12
 800a568:	f85d eb04 	ldr.w	lr, [sp], #4
 800a56c:	b004      	add	sp, #16
 800a56e:	4770      	bx	lr
 800a570:	2400006c 	.word	0x2400006c

0800a574 <_puts_r>:
 800a574:	6a03      	ldr	r3, [r0, #32]
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	6884      	ldr	r4, [r0, #8]
 800a57a:	4605      	mov	r5, r0
 800a57c:	460e      	mov	r6, r1
 800a57e:	b90b      	cbnz	r3, 800a584 <_puts_r+0x10>
 800a580:	f7ff ffb0 	bl	800a4e4 <__sinit>
 800a584:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a586:	07db      	lsls	r3, r3, #31
 800a588:	d405      	bmi.n	800a596 <_puts_r+0x22>
 800a58a:	89a3      	ldrh	r3, [r4, #12]
 800a58c:	0598      	lsls	r0, r3, #22
 800a58e:	d402      	bmi.n	800a596 <_puts_r+0x22>
 800a590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a592:	f000 f9c8 	bl	800a926 <__retarget_lock_acquire_recursive>
 800a596:	89a3      	ldrh	r3, [r4, #12]
 800a598:	0719      	lsls	r1, r3, #28
 800a59a:	d502      	bpl.n	800a5a2 <_puts_r+0x2e>
 800a59c:	6923      	ldr	r3, [r4, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d135      	bne.n	800a60e <_puts_r+0x9a>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f000 f8cf 	bl	800a748 <__swsetup_r>
 800a5aa:	b380      	cbz	r0, 800a60e <_puts_r+0x9a>
 800a5ac:	f04f 35ff 	mov.w	r5, #4294967295
 800a5b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5b2:	07da      	lsls	r2, r3, #31
 800a5b4:	d405      	bmi.n	800a5c2 <_puts_r+0x4e>
 800a5b6:	89a3      	ldrh	r3, [r4, #12]
 800a5b8:	059b      	lsls	r3, r3, #22
 800a5ba:	d402      	bmi.n	800a5c2 <_puts_r+0x4e>
 800a5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5be:	f000 f9b3 	bl	800a928 <__retarget_lock_release_recursive>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	bd70      	pop	{r4, r5, r6, pc}
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da04      	bge.n	800a5d4 <_puts_r+0x60>
 800a5ca:	69a2      	ldr	r2, [r4, #24]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	dc17      	bgt.n	800a600 <_puts_r+0x8c>
 800a5d0:	290a      	cmp	r1, #10
 800a5d2:	d015      	beq.n	800a600 <_puts_r+0x8c>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	6022      	str	r2, [r4, #0]
 800a5da:	7019      	strb	r1, [r3, #0]
 800a5dc:	68a3      	ldr	r3, [r4, #8]
 800a5de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	2900      	cmp	r1, #0
 800a5e8:	d1ed      	bne.n	800a5c6 <_puts_r+0x52>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	da11      	bge.n	800a612 <_puts_r+0x9e>
 800a5ee:	4622      	mov	r2, r4
 800a5f0:	210a      	movs	r1, #10
 800a5f2:	4628      	mov	r0, r5
 800a5f4:	f000 f86a 	bl	800a6cc <__swbuf_r>
 800a5f8:	3001      	adds	r0, #1
 800a5fa:	d0d7      	beq.n	800a5ac <_puts_r+0x38>
 800a5fc:	250a      	movs	r5, #10
 800a5fe:	e7d7      	b.n	800a5b0 <_puts_r+0x3c>
 800a600:	4622      	mov	r2, r4
 800a602:	4628      	mov	r0, r5
 800a604:	f000 f862 	bl	800a6cc <__swbuf_r>
 800a608:	3001      	adds	r0, #1
 800a60a:	d1e7      	bne.n	800a5dc <_puts_r+0x68>
 800a60c:	e7ce      	b.n	800a5ac <_puts_r+0x38>
 800a60e:	3e01      	subs	r6, #1
 800a610:	e7e4      	b.n	800a5dc <_puts_r+0x68>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	6022      	str	r2, [r4, #0]
 800a618:	220a      	movs	r2, #10
 800a61a:	701a      	strb	r2, [r3, #0]
 800a61c:	e7ee      	b.n	800a5fc <_puts_r+0x88>
	...

0800a620 <puts>:
 800a620:	4b02      	ldr	r3, [pc, #8]	@ (800a62c <puts+0xc>)
 800a622:	4601      	mov	r1, r0
 800a624:	6818      	ldr	r0, [r3, #0]
 800a626:	f7ff bfa5 	b.w	800a574 <_puts_r>
 800a62a:	bf00      	nop
 800a62c:	2400006c 	.word	0x2400006c

0800a630 <__sread>:
 800a630:	b510      	push	{r4, lr}
 800a632:	460c      	mov	r4, r1
 800a634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a638:	f000 f926 	bl	800a888 <_read_r>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	bfab      	itete	ge
 800a640:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a642:	89a3      	ldrhlt	r3, [r4, #12]
 800a644:	181b      	addge	r3, r3, r0
 800a646:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a64a:	bfac      	ite	ge
 800a64c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a64e:	81a3      	strhlt	r3, [r4, #12]
 800a650:	bd10      	pop	{r4, pc}

0800a652 <__swrite>:
 800a652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a656:	461f      	mov	r7, r3
 800a658:	898b      	ldrh	r3, [r1, #12]
 800a65a:	05db      	lsls	r3, r3, #23
 800a65c:	4605      	mov	r5, r0
 800a65e:	460c      	mov	r4, r1
 800a660:	4616      	mov	r6, r2
 800a662:	d505      	bpl.n	800a670 <__swrite+0x1e>
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	2302      	movs	r3, #2
 800a66a:	2200      	movs	r2, #0
 800a66c:	f000 f8fa 	bl	800a864 <_lseek_r>
 800a670:	89a3      	ldrh	r3, [r4, #12]
 800a672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a676:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	4632      	mov	r2, r6
 800a67e:	463b      	mov	r3, r7
 800a680:	4628      	mov	r0, r5
 800a682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a686:	f000 b911 	b.w	800a8ac <_write_r>

0800a68a <__sseek>:
 800a68a:	b510      	push	{r4, lr}
 800a68c:	460c      	mov	r4, r1
 800a68e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a692:	f000 f8e7 	bl	800a864 <_lseek_r>
 800a696:	1c43      	adds	r3, r0, #1
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	bf15      	itete	ne
 800a69c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a69e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6a6:	81a3      	strheq	r3, [r4, #12]
 800a6a8:	bf18      	it	ne
 800a6aa:	81a3      	strhne	r3, [r4, #12]
 800a6ac:	bd10      	pop	{r4, pc}

0800a6ae <__sclose>:
 800a6ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b2:	f000 b8c7 	b.w	800a844 <_close_r>
	...

0800a6b8 <viprintf>:
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	4903      	ldr	r1, [pc, #12]	@ (800a6c8 <viprintf+0x10>)
 800a6bc:	4602      	mov	r2, r0
 800a6be:	6808      	ldr	r0, [r1, #0]
 800a6c0:	6881      	ldr	r1, [r0, #8]
 800a6c2:	f000 ba89 	b.w	800abd8 <_vfiprintf_r>
 800a6c6:	bf00      	nop
 800a6c8:	2400006c 	.word	0x2400006c

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b118      	cbz	r0, 800a6de <__swbuf_r+0x12>
 800a6d6:	6a03      	ldr	r3, [r0, #32]
 800a6d8:	b90b      	cbnz	r3, 800a6de <__swbuf_r+0x12>
 800a6da:	f7ff ff03 	bl	800a4e4 <__sinit>
 800a6de:	69a3      	ldr	r3, [r4, #24]
 800a6e0:	60a3      	str	r3, [r4, #8]
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	071a      	lsls	r2, r3, #28
 800a6e6:	d501      	bpl.n	800a6ec <__swbuf_r+0x20>
 800a6e8:	6923      	ldr	r3, [r4, #16]
 800a6ea:	b943      	cbnz	r3, 800a6fe <__swbuf_r+0x32>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f82a 	bl	800a748 <__swsetup_r>
 800a6f4:	b118      	cbz	r0, 800a6fe <__swbuf_r+0x32>
 800a6f6:	f04f 37ff 	mov.w	r7, #4294967295
 800a6fa:	4638      	mov	r0, r7
 800a6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6fe:	6823      	ldr	r3, [r4, #0]
 800a700:	6922      	ldr	r2, [r4, #16]
 800a702:	1a98      	subs	r0, r3, r2
 800a704:	6963      	ldr	r3, [r4, #20]
 800a706:	b2f6      	uxtb	r6, r6
 800a708:	4283      	cmp	r3, r0
 800a70a:	4637      	mov	r7, r6
 800a70c:	dc05      	bgt.n	800a71a <__swbuf_r+0x4e>
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 fd89 	bl	800b228 <_fflush_r>
 800a716:	2800      	cmp	r0, #0
 800a718:	d1ed      	bne.n	800a6f6 <__swbuf_r+0x2a>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	60a3      	str	r3, [r4, #8]
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	6022      	str	r2, [r4, #0]
 800a726:	701e      	strb	r6, [r3, #0]
 800a728:	6962      	ldr	r2, [r4, #20]
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d004      	beq.n	800a73a <__swbuf_r+0x6e>
 800a730:	89a3      	ldrh	r3, [r4, #12]
 800a732:	07db      	lsls	r3, r3, #31
 800a734:	d5e1      	bpl.n	800a6fa <__swbuf_r+0x2e>
 800a736:	2e0a      	cmp	r6, #10
 800a738:	d1df      	bne.n	800a6fa <__swbuf_r+0x2e>
 800a73a:	4621      	mov	r1, r4
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 fd73 	bl	800b228 <_fflush_r>
 800a742:	2800      	cmp	r0, #0
 800a744:	d0d9      	beq.n	800a6fa <__swbuf_r+0x2e>
 800a746:	e7d6      	b.n	800a6f6 <__swbuf_r+0x2a>

0800a748 <__swsetup_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4b29      	ldr	r3, [pc, #164]	@ (800a7f0 <__swsetup_r+0xa8>)
 800a74c:	4605      	mov	r5, r0
 800a74e:	6818      	ldr	r0, [r3, #0]
 800a750:	460c      	mov	r4, r1
 800a752:	b118      	cbz	r0, 800a75c <__swsetup_r+0x14>
 800a754:	6a03      	ldr	r3, [r0, #32]
 800a756:	b90b      	cbnz	r3, 800a75c <__swsetup_r+0x14>
 800a758:	f7ff fec4 	bl	800a4e4 <__sinit>
 800a75c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a760:	0719      	lsls	r1, r3, #28
 800a762:	d422      	bmi.n	800a7aa <__swsetup_r+0x62>
 800a764:	06da      	lsls	r2, r3, #27
 800a766:	d407      	bmi.n	800a778 <__swsetup_r+0x30>
 800a768:	2209      	movs	r2, #9
 800a76a:	602a      	str	r2, [r5, #0]
 800a76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	f04f 30ff 	mov.w	r0, #4294967295
 800a776:	e033      	b.n	800a7e0 <__swsetup_r+0x98>
 800a778:	0758      	lsls	r0, r3, #29
 800a77a:	d512      	bpl.n	800a7a2 <__swsetup_r+0x5a>
 800a77c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a77e:	b141      	cbz	r1, 800a792 <__swsetup_r+0x4a>
 800a780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a784:	4299      	cmp	r1, r3
 800a786:	d002      	beq.n	800a78e <__swsetup_r+0x46>
 800a788:	4628      	mov	r0, r5
 800a78a:	f000 f8fb 	bl	800a984 <_free_r>
 800a78e:	2300      	movs	r3, #0
 800a790:	6363      	str	r3, [r4, #52]	@ 0x34
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a798:	81a3      	strh	r3, [r4, #12]
 800a79a:	2300      	movs	r3, #0
 800a79c:	6063      	str	r3, [r4, #4]
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	89a3      	ldrh	r3, [r4, #12]
 800a7a4:	f043 0308 	orr.w	r3, r3, #8
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	6923      	ldr	r3, [r4, #16]
 800a7ac:	b94b      	cbnz	r3, 800a7c2 <__swsetup_r+0x7a>
 800a7ae:	89a3      	ldrh	r3, [r4, #12]
 800a7b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7b8:	d003      	beq.n	800a7c2 <__swsetup_r+0x7a>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f000 fd93 	bl	800b2e8 <__smakebuf_r>
 800a7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c6:	f013 0201 	ands.w	r2, r3, #1
 800a7ca:	d00a      	beq.n	800a7e2 <__swsetup_r+0x9a>
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	60a2      	str	r2, [r4, #8]
 800a7d0:	6962      	ldr	r2, [r4, #20]
 800a7d2:	4252      	negs	r2, r2
 800a7d4:	61a2      	str	r2, [r4, #24]
 800a7d6:	6922      	ldr	r2, [r4, #16]
 800a7d8:	b942      	cbnz	r2, 800a7ec <__swsetup_r+0xa4>
 800a7da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a7de:	d1c5      	bne.n	800a76c <__swsetup_r+0x24>
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	0799      	lsls	r1, r3, #30
 800a7e4:	bf58      	it	pl
 800a7e6:	6962      	ldrpl	r2, [r4, #20]
 800a7e8:	60a2      	str	r2, [r4, #8]
 800a7ea:	e7f4      	b.n	800a7d6 <__swsetup_r+0x8e>
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	e7f7      	b.n	800a7e0 <__swsetup_r+0x98>
 800a7f0:	2400006c 	.word	0x2400006c

0800a7f4 <memset>:
 800a7f4:	4402      	add	r2, r0
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d100      	bne.n	800a7fe <memset+0xa>
 800a7fc:	4770      	bx	lr
 800a7fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a802:	e7f9      	b.n	800a7f8 <memset+0x4>

0800a804 <strncasecmp>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	4e0e      	ldr	r6, [pc, #56]	@ (800a840 <strncasecmp+0x3c>)
 800a808:	4605      	mov	r5, r0
 800a80a:	440a      	add	r2, r1
 800a80c:	428a      	cmp	r2, r1
 800a80e:	d101      	bne.n	800a814 <strncasecmp+0x10>
 800a810:	2000      	movs	r0, #0
 800a812:	e013      	b.n	800a83c <strncasecmp+0x38>
 800a814:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a818:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a81c:	5cf0      	ldrb	r0, [r6, r3]
 800a81e:	f000 0003 	and.w	r0, r0, #3
 800a822:	2801      	cmp	r0, #1
 800a824:	5d30      	ldrb	r0, [r6, r4]
 800a826:	f000 0003 	and.w	r0, r0, #3
 800a82a:	bf08      	it	eq
 800a82c:	3320      	addeq	r3, #32
 800a82e:	2801      	cmp	r0, #1
 800a830:	bf08      	it	eq
 800a832:	3420      	addeq	r4, #32
 800a834:	1b18      	subs	r0, r3, r4
 800a836:	d101      	bne.n	800a83c <strncasecmp+0x38>
 800a838:	2c00      	cmp	r4, #0
 800a83a:	d1e7      	bne.n	800a80c <strncasecmp+0x8>
 800a83c:	bd70      	pop	{r4, r5, r6, pc}
 800a83e:	bf00      	nop
 800a840:	0800c40b 	.word	0x0800c40b

0800a844 <_close_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d06      	ldr	r5, [pc, #24]	@ (800a860 <_close_r+0x1c>)
 800a848:	2300      	movs	r3, #0
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	f7f6 fdc4 	bl	80013dc <_close>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_close_r+0x1a>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_close_r+0x1a>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	24040d0c 	.word	0x24040d0c

0800a864 <_lseek_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d07      	ldr	r5, [pc, #28]	@ (800a884 <_lseek_r+0x20>)
 800a868:	4604      	mov	r4, r0
 800a86a:	4608      	mov	r0, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	f7f6 fdd9 	bl	800142a <_lseek>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_lseek_r+0x1e>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_lseek_r+0x1e>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	24040d0c 	.word	0x24040d0c

0800a888 <_read_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d07      	ldr	r5, [pc, #28]	@ (800a8a8 <_read_r+0x20>)
 800a88c:	4604      	mov	r4, r0
 800a88e:	4608      	mov	r0, r1
 800a890:	4611      	mov	r1, r2
 800a892:	2200      	movs	r2, #0
 800a894:	602a      	str	r2, [r5, #0]
 800a896:	461a      	mov	r2, r3
 800a898:	f7f6 fd67 	bl	800136a <_read>
 800a89c:	1c43      	adds	r3, r0, #1
 800a89e:	d102      	bne.n	800a8a6 <_read_r+0x1e>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	b103      	cbz	r3, 800a8a6 <_read_r+0x1e>
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	bd38      	pop	{r3, r4, r5, pc}
 800a8a8:	24040d0c 	.word	0x24040d0c

0800a8ac <_write_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d07      	ldr	r5, [pc, #28]	@ (800a8cc <_write_r+0x20>)
 800a8b0:	4604      	mov	r4, r0
 800a8b2:	4608      	mov	r0, r1
 800a8b4:	4611      	mov	r1, r2
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	602a      	str	r2, [r5, #0]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	f7f6 fd72 	bl	80013a4 <_write>
 800a8c0:	1c43      	adds	r3, r0, #1
 800a8c2:	d102      	bne.n	800a8ca <_write_r+0x1e>
 800a8c4:	682b      	ldr	r3, [r5, #0]
 800a8c6:	b103      	cbz	r3, 800a8ca <_write_r+0x1e>
 800a8c8:	6023      	str	r3, [r4, #0]
 800a8ca:	bd38      	pop	{r3, r4, r5, pc}
 800a8cc:	24040d0c 	.word	0x24040d0c

0800a8d0 <__errno>:
 800a8d0:	4b01      	ldr	r3, [pc, #4]	@ (800a8d8 <__errno+0x8>)
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	2400006c 	.word	0x2400006c

0800a8dc <__libc_init_array>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	4d0d      	ldr	r5, [pc, #52]	@ (800a914 <__libc_init_array+0x38>)
 800a8e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a918 <__libc_init_array+0x3c>)
 800a8e2:	1b64      	subs	r4, r4, r5
 800a8e4:	10a4      	asrs	r4, r4, #2
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	42a6      	cmp	r6, r4
 800a8ea:	d109      	bne.n	800a900 <__libc_init_array+0x24>
 800a8ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a91c <__libc_init_array+0x40>)
 800a8ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a920 <__libc_init_array+0x44>)
 800a8f0:	f000 fdb4 	bl	800b45c <_init>
 800a8f4:	1b64      	subs	r4, r4, r5
 800a8f6:	10a4      	asrs	r4, r4, #2
 800a8f8:	2600      	movs	r6, #0
 800a8fa:	42a6      	cmp	r6, r4
 800a8fc:	d105      	bne.n	800a90a <__libc_init_array+0x2e>
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	f855 3b04 	ldr.w	r3, [r5], #4
 800a904:	4798      	blx	r3
 800a906:	3601      	adds	r6, #1
 800a908:	e7ee      	b.n	800a8e8 <__libc_init_array+0xc>
 800a90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90e:	4798      	blx	r3
 800a910:	3601      	adds	r6, #1
 800a912:	e7f2      	b.n	800a8fa <__libc_init_array+0x1e>
 800a914:	0800c514 	.word	0x0800c514
 800a918:	0800c514 	.word	0x0800c514
 800a91c:	0800c514 	.word	0x0800c514
 800a920:	0800c518 	.word	0x0800c518

0800a924 <__retarget_lock_init_recursive>:
 800a924:	4770      	bx	lr

0800a926 <__retarget_lock_acquire_recursive>:
 800a926:	4770      	bx	lr

0800a928 <__retarget_lock_release_recursive>:
 800a928:	4770      	bx	lr

0800a92a <memcpy>:
 800a92a:	440a      	add	r2, r1
 800a92c:	4291      	cmp	r1, r2
 800a92e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a932:	d100      	bne.n	800a936 <memcpy+0xc>
 800a934:	4770      	bx	lr
 800a936:	b510      	push	{r4, lr}
 800a938:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a93c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a940:	4291      	cmp	r1, r2
 800a942:	d1f9      	bne.n	800a938 <memcpy+0xe>
 800a944:	bd10      	pop	{r4, pc}
	...

0800a948 <__assert_func>:
 800a948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a94a:	4614      	mov	r4, r2
 800a94c:	461a      	mov	r2, r3
 800a94e:	4b09      	ldr	r3, [pc, #36]	@ (800a974 <__assert_func+0x2c>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4605      	mov	r5, r0
 800a954:	68d8      	ldr	r0, [r3, #12]
 800a956:	b14c      	cbz	r4, 800a96c <__assert_func+0x24>
 800a958:	4b07      	ldr	r3, [pc, #28]	@ (800a978 <__assert_func+0x30>)
 800a95a:	9100      	str	r1, [sp, #0]
 800a95c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a960:	4906      	ldr	r1, [pc, #24]	@ (800a97c <__assert_func+0x34>)
 800a962:	462b      	mov	r3, r5
 800a964:	f000 fc88 	bl	800b278 <fiprintf>
 800a968:	f000 fd2c 	bl	800b3c4 <abort>
 800a96c:	4b04      	ldr	r3, [pc, #16]	@ (800a980 <__assert_func+0x38>)
 800a96e:	461c      	mov	r4, r3
 800a970:	e7f3      	b.n	800a95a <__assert_func+0x12>
 800a972:	bf00      	nop
 800a974:	2400006c 	.word	0x2400006c
 800a978:	0800c39b 	.word	0x0800c39b
 800a97c:	0800c3a8 	.word	0x0800c3a8
 800a980:	0800c3d6 	.word	0x0800c3d6

0800a984 <_free_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4605      	mov	r5, r0
 800a988:	2900      	cmp	r1, #0
 800a98a:	d041      	beq.n	800aa10 <_free_r+0x8c>
 800a98c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a990:	1f0c      	subs	r4, r1, #4
 800a992:	2b00      	cmp	r3, #0
 800a994:	bfb8      	it	lt
 800a996:	18e4      	addlt	r4, r4, r3
 800a998:	f000 f8e8 	bl	800ab6c <__malloc_lock>
 800a99c:	4a1d      	ldr	r2, [pc, #116]	@ (800aa14 <_free_r+0x90>)
 800a99e:	6813      	ldr	r3, [r2, #0]
 800a9a0:	b933      	cbnz	r3, 800a9b0 <_free_r+0x2c>
 800a9a2:	6063      	str	r3, [r4, #4]
 800a9a4:	6014      	str	r4, [r2, #0]
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9ac:	f000 b8e4 	b.w	800ab78 <__malloc_unlock>
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	d908      	bls.n	800a9c6 <_free_r+0x42>
 800a9b4:	6820      	ldr	r0, [r4, #0]
 800a9b6:	1821      	adds	r1, r4, r0
 800a9b8:	428b      	cmp	r3, r1
 800a9ba:	bf01      	itttt	eq
 800a9bc:	6819      	ldreq	r1, [r3, #0]
 800a9be:	685b      	ldreq	r3, [r3, #4]
 800a9c0:	1809      	addeq	r1, r1, r0
 800a9c2:	6021      	streq	r1, [r4, #0]
 800a9c4:	e7ed      	b.n	800a9a2 <_free_r+0x1e>
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	b10b      	cbz	r3, 800a9d0 <_free_r+0x4c>
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d9fa      	bls.n	800a9c6 <_free_r+0x42>
 800a9d0:	6811      	ldr	r1, [r2, #0]
 800a9d2:	1850      	adds	r0, r2, r1
 800a9d4:	42a0      	cmp	r0, r4
 800a9d6:	d10b      	bne.n	800a9f0 <_free_r+0x6c>
 800a9d8:	6820      	ldr	r0, [r4, #0]
 800a9da:	4401      	add	r1, r0
 800a9dc:	1850      	adds	r0, r2, r1
 800a9de:	4283      	cmp	r3, r0
 800a9e0:	6011      	str	r1, [r2, #0]
 800a9e2:	d1e0      	bne.n	800a9a6 <_free_r+0x22>
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	6053      	str	r3, [r2, #4]
 800a9ea:	4408      	add	r0, r1
 800a9ec:	6010      	str	r0, [r2, #0]
 800a9ee:	e7da      	b.n	800a9a6 <_free_r+0x22>
 800a9f0:	d902      	bls.n	800a9f8 <_free_r+0x74>
 800a9f2:	230c      	movs	r3, #12
 800a9f4:	602b      	str	r3, [r5, #0]
 800a9f6:	e7d6      	b.n	800a9a6 <_free_r+0x22>
 800a9f8:	6820      	ldr	r0, [r4, #0]
 800a9fa:	1821      	adds	r1, r4, r0
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	bf04      	itt	eq
 800aa00:	6819      	ldreq	r1, [r3, #0]
 800aa02:	685b      	ldreq	r3, [r3, #4]
 800aa04:	6063      	str	r3, [r4, #4]
 800aa06:	bf04      	itt	eq
 800aa08:	1809      	addeq	r1, r1, r0
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	6054      	str	r4, [r2, #4]
 800aa0e:	e7ca      	b.n	800a9a6 <_free_r+0x22>
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	24040d18 	.word	0x24040d18

0800aa18 <malloc>:
 800aa18:	4b02      	ldr	r3, [pc, #8]	@ (800aa24 <malloc+0xc>)
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	f000 b825 	b.w	800aa6c <_malloc_r>
 800aa22:	bf00      	nop
 800aa24:	2400006c 	.word	0x2400006c

0800aa28 <sbrk_aligned>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	4e0f      	ldr	r6, [pc, #60]	@ (800aa68 <sbrk_aligned+0x40>)
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	6831      	ldr	r1, [r6, #0]
 800aa30:	4605      	mov	r5, r0
 800aa32:	b911      	cbnz	r1, 800aa3a <sbrk_aligned+0x12>
 800aa34:	f000 fcb6 	bl	800b3a4 <_sbrk_r>
 800aa38:	6030      	str	r0, [r6, #0]
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4628      	mov	r0, r5
 800aa3e:	f000 fcb1 	bl	800b3a4 <_sbrk_r>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	d103      	bne.n	800aa4e <sbrk_aligned+0x26>
 800aa46:	f04f 34ff 	mov.w	r4, #4294967295
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	bd70      	pop	{r4, r5, r6, pc}
 800aa4e:	1cc4      	adds	r4, r0, #3
 800aa50:	f024 0403 	bic.w	r4, r4, #3
 800aa54:	42a0      	cmp	r0, r4
 800aa56:	d0f8      	beq.n	800aa4a <sbrk_aligned+0x22>
 800aa58:	1a21      	subs	r1, r4, r0
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f000 fca2 	bl	800b3a4 <_sbrk_r>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d1f2      	bne.n	800aa4a <sbrk_aligned+0x22>
 800aa64:	e7ef      	b.n	800aa46 <sbrk_aligned+0x1e>
 800aa66:	bf00      	nop
 800aa68:	24040d14 	.word	0x24040d14

0800aa6c <_malloc_r>:
 800aa6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa70:	1ccd      	adds	r5, r1, #3
 800aa72:	f025 0503 	bic.w	r5, r5, #3
 800aa76:	3508      	adds	r5, #8
 800aa78:	2d0c      	cmp	r5, #12
 800aa7a:	bf38      	it	cc
 800aa7c:	250c      	movcc	r5, #12
 800aa7e:	2d00      	cmp	r5, #0
 800aa80:	4606      	mov	r6, r0
 800aa82:	db01      	blt.n	800aa88 <_malloc_r+0x1c>
 800aa84:	42a9      	cmp	r1, r5
 800aa86:	d904      	bls.n	800aa92 <_malloc_r+0x26>
 800aa88:	230c      	movs	r3, #12
 800aa8a:	6033      	str	r3, [r6, #0]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab68 <_malloc_r+0xfc>
 800aa96:	f000 f869 	bl	800ab6c <__malloc_lock>
 800aa9a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	bb44      	cbnz	r4, 800aaf4 <_malloc_r+0x88>
 800aaa2:	4629      	mov	r1, r5
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f7ff ffbf 	bl	800aa28 <sbrk_aligned>
 800aaaa:	1c43      	adds	r3, r0, #1
 800aaac:	4604      	mov	r4, r0
 800aaae:	d158      	bne.n	800ab62 <_malloc_r+0xf6>
 800aab0:	f8d8 4000 	ldr.w	r4, [r8]
 800aab4:	4627      	mov	r7, r4
 800aab6:	2f00      	cmp	r7, #0
 800aab8:	d143      	bne.n	800ab42 <_malloc_r+0xd6>
 800aaba:	2c00      	cmp	r4, #0
 800aabc:	d04b      	beq.n	800ab56 <_malloc_r+0xea>
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	4639      	mov	r1, r7
 800aac2:	4630      	mov	r0, r6
 800aac4:	eb04 0903 	add.w	r9, r4, r3
 800aac8:	f000 fc6c 	bl	800b3a4 <_sbrk_r>
 800aacc:	4581      	cmp	r9, r0
 800aace:	d142      	bne.n	800ab56 <_malloc_r+0xea>
 800aad0:	6821      	ldr	r1, [r4, #0]
 800aad2:	1a6d      	subs	r5, r5, r1
 800aad4:	4629      	mov	r1, r5
 800aad6:	4630      	mov	r0, r6
 800aad8:	f7ff ffa6 	bl	800aa28 <sbrk_aligned>
 800aadc:	3001      	adds	r0, #1
 800aade:	d03a      	beq.n	800ab56 <_malloc_r+0xea>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	442b      	add	r3, r5
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	bb62      	cbnz	r2, 800ab48 <_malloc_r+0xdc>
 800aaee:	f8c8 7000 	str.w	r7, [r8]
 800aaf2:	e00f      	b.n	800ab14 <_malloc_r+0xa8>
 800aaf4:	6822      	ldr	r2, [r4, #0]
 800aaf6:	1b52      	subs	r2, r2, r5
 800aaf8:	d420      	bmi.n	800ab3c <_malloc_r+0xd0>
 800aafa:	2a0b      	cmp	r2, #11
 800aafc:	d917      	bls.n	800ab2e <_malloc_r+0xc2>
 800aafe:	1961      	adds	r1, r4, r5
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	6025      	str	r5, [r4, #0]
 800ab04:	bf18      	it	ne
 800ab06:	6059      	strne	r1, [r3, #4]
 800ab08:	6863      	ldr	r3, [r4, #4]
 800ab0a:	bf08      	it	eq
 800ab0c:	f8c8 1000 	streq.w	r1, [r8]
 800ab10:	5162      	str	r2, [r4, r5]
 800ab12:	604b      	str	r3, [r1, #4]
 800ab14:	4630      	mov	r0, r6
 800ab16:	f000 f82f 	bl	800ab78 <__malloc_unlock>
 800ab1a:	f104 000b 	add.w	r0, r4, #11
 800ab1e:	1d23      	adds	r3, r4, #4
 800ab20:	f020 0007 	bic.w	r0, r0, #7
 800ab24:	1ac2      	subs	r2, r0, r3
 800ab26:	bf1c      	itt	ne
 800ab28:	1a1b      	subne	r3, r3, r0
 800ab2a:	50a3      	strne	r3, [r4, r2]
 800ab2c:	e7af      	b.n	800aa8e <_malloc_r+0x22>
 800ab2e:	6862      	ldr	r2, [r4, #4]
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	bf0c      	ite	eq
 800ab34:	f8c8 2000 	streq.w	r2, [r8]
 800ab38:	605a      	strne	r2, [r3, #4]
 800ab3a:	e7eb      	b.n	800ab14 <_malloc_r+0xa8>
 800ab3c:	4623      	mov	r3, r4
 800ab3e:	6864      	ldr	r4, [r4, #4]
 800ab40:	e7ae      	b.n	800aaa0 <_malloc_r+0x34>
 800ab42:	463c      	mov	r4, r7
 800ab44:	687f      	ldr	r7, [r7, #4]
 800ab46:	e7b6      	b.n	800aab6 <_malloc_r+0x4a>
 800ab48:	461a      	mov	r2, r3
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	d1fb      	bne.n	800ab48 <_malloc_r+0xdc>
 800ab50:	2300      	movs	r3, #0
 800ab52:	6053      	str	r3, [r2, #4]
 800ab54:	e7de      	b.n	800ab14 <_malloc_r+0xa8>
 800ab56:	230c      	movs	r3, #12
 800ab58:	6033      	str	r3, [r6, #0]
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f000 f80c 	bl	800ab78 <__malloc_unlock>
 800ab60:	e794      	b.n	800aa8c <_malloc_r+0x20>
 800ab62:	6005      	str	r5, [r0, #0]
 800ab64:	e7d6      	b.n	800ab14 <_malloc_r+0xa8>
 800ab66:	bf00      	nop
 800ab68:	24040d18 	.word	0x24040d18

0800ab6c <__malloc_lock>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	@ (800ab74 <__malloc_lock+0x8>)
 800ab6e:	f7ff beda 	b.w	800a926 <__retarget_lock_acquire_recursive>
 800ab72:	bf00      	nop
 800ab74:	24040d10 	.word	0x24040d10

0800ab78 <__malloc_unlock>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__malloc_unlock+0x8>)
 800ab7a:	f7ff bed5 	b.w	800a928 <__retarget_lock_release_recursive>
 800ab7e:	bf00      	nop
 800ab80:	24040d10 	.word	0x24040d10

0800ab84 <__sfputc_r>:
 800ab84:	6893      	ldr	r3, [r2, #8]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	b410      	push	{r4}
 800ab8c:	6093      	str	r3, [r2, #8]
 800ab8e:	da08      	bge.n	800aba2 <__sfputc_r+0x1e>
 800ab90:	6994      	ldr	r4, [r2, #24]
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	db01      	blt.n	800ab9a <__sfputc_r+0x16>
 800ab96:	290a      	cmp	r1, #10
 800ab98:	d103      	bne.n	800aba2 <__sfputc_r+0x1e>
 800ab9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab9e:	f7ff bd95 	b.w	800a6cc <__swbuf_r>
 800aba2:	6813      	ldr	r3, [r2, #0]
 800aba4:	1c58      	adds	r0, r3, #1
 800aba6:	6010      	str	r0, [r2, #0]
 800aba8:	7019      	strb	r1, [r3, #0]
 800abaa:	4608      	mov	r0, r1
 800abac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <__sfputs_r>:
 800abb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb4:	4606      	mov	r6, r0
 800abb6:	460f      	mov	r7, r1
 800abb8:	4614      	mov	r4, r2
 800abba:	18d5      	adds	r5, r2, r3
 800abbc:	42ac      	cmp	r4, r5
 800abbe:	d101      	bne.n	800abc4 <__sfputs_r+0x12>
 800abc0:	2000      	movs	r0, #0
 800abc2:	e007      	b.n	800abd4 <__sfputs_r+0x22>
 800abc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc8:	463a      	mov	r2, r7
 800abca:	4630      	mov	r0, r6
 800abcc:	f7ff ffda 	bl	800ab84 <__sfputc_r>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d1f3      	bne.n	800abbc <__sfputs_r+0xa>
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abd8 <_vfiprintf_r>:
 800abd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abdc:	460d      	mov	r5, r1
 800abde:	b09d      	sub	sp, #116	@ 0x74
 800abe0:	4614      	mov	r4, r2
 800abe2:	4698      	mov	r8, r3
 800abe4:	4606      	mov	r6, r0
 800abe6:	b118      	cbz	r0, 800abf0 <_vfiprintf_r+0x18>
 800abe8:	6a03      	ldr	r3, [r0, #32]
 800abea:	b90b      	cbnz	r3, 800abf0 <_vfiprintf_r+0x18>
 800abec:	f7ff fc7a 	bl	800a4e4 <__sinit>
 800abf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abf2:	07d9      	lsls	r1, r3, #31
 800abf4:	d405      	bmi.n	800ac02 <_vfiprintf_r+0x2a>
 800abf6:	89ab      	ldrh	r3, [r5, #12]
 800abf8:	059a      	lsls	r2, r3, #22
 800abfa:	d402      	bmi.n	800ac02 <_vfiprintf_r+0x2a>
 800abfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abfe:	f7ff fe92 	bl	800a926 <__retarget_lock_acquire_recursive>
 800ac02:	89ab      	ldrh	r3, [r5, #12]
 800ac04:	071b      	lsls	r3, r3, #28
 800ac06:	d501      	bpl.n	800ac0c <_vfiprintf_r+0x34>
 800ac08:	692b      	ldr	r3, [r5, #16]
 800ac0a:	b99b      	cbnz	r3, 800ac34 <_vfiprintf_r+0x5c>
 800ac0c:	4629      	mov	r1, r5
 800ac0e:	4630      	mov	r0, r6
 800ac10:	f7ff fd9a 	bl	800a748 <__swsetup_r>
 800ac14:	b170      	cbz	r0, 800ac34 <_vfiprintf_r+0x5c>
 800ac16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac18:	07dc      	lsls	r4, r3, #31
 800ac1a:	d504      	bpl.n	800ac26 <_vfiprintf_r+0x4e>
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac20:	b01d      	add	sp, #116	@ 0x74
 800ac22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac26:	89ab      	ldrh	r3, [r5, #12]
 800ac28:	0598      	lsls	r0, r3, #22
 800ac2a:	d4f7      	bmi.n	800ac1c <_vfiprintf_r+0x44>
 800ac2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac2e:	f7ff fe7b 	bl	800a928 <__retarget_lock_release_recursive>
 800ac32:	e7f3      	b.n	800ac1c <_vfiprintf_r+0x44>
 800ac34:	2300      	movs	r3, #0
 800ac36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac42:	2330      	movs	r3, #48	@ 0x30
 800ac44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800adf4 <_vfiprintf_r+0x21c>
 800ac48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac4c:	f04f 0901 	mov.w	r9, #1
 800ac50:	4623      	mov	r3, r4
 800ac52:	469a      	mov	sl, r3
 800ac54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac58:	b10a      	cbz	r2, 800ac5e <_vfiprintf_r+0x86>
 800ac5a:	2a25      	cmp	r2, #37	@ 0x25
 800ac5c:	d1f9      	bne.n	800ac52 <_vfiprintf_r+0x7a>
 800ac5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac62:	d00b      	beq.n	800ac7c <_vfiprintf_r+0xa4>
 800ac64:	465b      	mov	r3, fp
 800ac66:	4622      	mov	r2, r4
 800ac68:	4629      	mov	r1, r5
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f7ff ffa1 	bl	800abb2 <__sfputs_r>
 800ac70:	3001      	adds	r0, #1
 800ac72:	f000 80a7 	beq.w	800adc4 <_vfiprintf_r+0x1ec>
 800ac76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac78:	445a      	add	r2, fp
 800ac7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 809f 	beq.w	800adc4 <_vfiprintf_r+0x1ec>
 800ac86:	2300      	movs	r3, #0
 800ac88:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	9304      	str	r3, [sp, #16]
 800ac96:	9307      	str	r3, [sp, #28]
 800ac98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac9e:	4654      	mov	r4, sl
 800aca0:	2205      	movs	r2, #5
 800aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca6:	4853      	ldr	r0, [pc, #332]	@ (800adf4 <_vfiprintf_r+0x21c>)
 800aca8:	f7f5 fb22 	bl	80002f0 <memchr>
 800acac:	9a04      	ldr	r2, [sp, #16]
 800acae:	b9d8      	cbnz	r0, 800ace8 <_vfiprintf_r+0x110>
 800acb0:	06d1      	lsls	r1, r2, #27
 800acb2:	bf44      	itt	mi
 800acb4:	2320      	movmi	r3, #32
 800acb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acba:	0713      	lsls	r3, r2, #28
 800acbc:	bf44      	itt	mi
 800acbe:	232b      	movmi	r3, #43	@ 0x2b
 800acc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acc4:	f89a 3000 	ldrb.w	r3, [sl]
 800acc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800acca:	d015      	beq.n	800acf8 <_vfiprintf_r+0x120>
 800accc:	9a07      	ldr	r2, [sp, #28]
 800acce:	4654      	mov	r4, sl
 800acd0:	2000      	movs	r0, #0
 800acd2:	f04f 0c0a 	mov.w	ip, #10
 800acd6:	4621      	mov	r1, r4
 800acd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acdc:	3b30      	subs	r3, #48	@ 0x30
 800acde:	2b09      	cmp	r3, #9
 800ace0:	d94b      	bls.n	800ad7a <_vfiprintf_r+0x1a2>
 800ace2:	b1b0      	cbz	r0, 800ad12 <_vfiprintf_r+0x13a>
 800ace4:	9207      	str	r2, [sp, #28]
 800ace6:	e014      	b.n	800ad12 <_vfiprintf_r+0x13a>
 800ace8:	eba0 0308 	sub.w	r3, r0, r8
 800acec:	fa09 f303 	lsl.w	r3, r9, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	9304      	str	r3, [sp, #16]
 800acf4:	46a2      	mov	sl, r4
 800acf6:	e7d2      	b.n	800ac9e <_vfiprintf_r+0xc6>
 800acf8:	9b03      	ldr	r3, [sp, #12]
 800acfa:	1d19      	adds	r1, r3, #4
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	9103      	str	r1, [sp, #12]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	bfbb      	ittet	lt
 800ad04:	425b      	neglt	r3, r3
 800ad06:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0a:	9307      	strge	r3, [sp, #28]
 800ad0c:	9307      	strlt	r3, [sp, #28]
 800ad0e:	bfb8      	it	lt
 800ad10:	9204      	strlt	r2, [sp, #16]
 800ad12:	7823      	ldrb	r3, [r4, #0]
 800ad14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad16:	d10a      	bne.n	800ad2e <_vfiprintf_r+0x156>
 800ad18:	7863      	ldrb	r3, [r4, #1]
 800ad1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad1c:	d132      	bne.n	800ad84 <_vfiprintf_r+0x1ac>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d1a      	adds	r2, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9203      	str	r2, [sp, #12]
 800ad26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad2a:	3402      	adds	r4, #2
 800ad2c:	9305      	str	r3, [sp, #20]
 800ad2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ae04 <_vfiprintf_r+0x22c>
 800ad32:	7821      	ldrb	r1, [r4, #0]
 800ad34:	2203      	movs	r2, #3
 800ad36:	4650      	mov	r0, sl
 800ad38:	f7f5 fada 	bl	80002f0 <memchr>
 800ad3c:	b138      	cbz	r0, 800ad4e <_vfiprintf_r+0x176>
 800ad3e:	9b04      	ldr	r3, [sp, #16]
 800ad40:	eba0 000a 	sub.w	r0, r0, sl
 800ad44:	2240      	movs	r2, #64	@ 0x40
 800ad46:	4082      	lsls	r2, r0
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	3401      	adds	r4, #1
 800ad4c:	9304      	str	r3, [sp, #16]
 800ad4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad52:	4829      	ldr	r0, [pc, #164]	@ (800adf8 <_vfiprintf_r+0x220>)
 800ad54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad58:	2206      	movs	r2, #6
 800ad5a:	f7f5 fac9 	bl	80002f0 <memchr>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d03f      	beq.n	800ade2 <_vfiprintf_r+0x20a>
 800ad62:	4b26      	ldr	r3, [pc, #152]	@ (800adfc <_vfiprintf_r+0x224>)
 800ad64:	bb1b      	cbnz	r3, 800adae <_vfiprintf_r+0x1d6>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	3307      	adds	r3, #7
 800ad6a:	f023 0307 	bic.w	r3, r3, #7
 800ad6e:	3308      	adds	r3, #8
 800ad70:	9303      	str	r3, [sp, #12]
 800ad72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad74:	443b      	add	r3, r7
 800ad76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad78:	e76a      	b.n	800ac50 <_vfiprintf_r+0x78>
 800ad7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad7e:	460c      	mov	r4, r1
 800ad80:	2001      	movs	r0, #1
 800ad82:	e7a8      	b.n	800acd6 <_vfiprintf_r+0xfe>
 800ad84:	2300      	movs	r3, #0
 800ad86:	3401      	adds	r4, #1
 800ad88:	9305      	str	r3, [sp, #20]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	f04f 0c0a 	mov.w	ip, #10
 800ad90:	4620      	mov	r0, r4
 800ad92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad96:	3a30      	subs	r2, #48	@ 0x30
 800ad98:	2a09      	cmp	r2, #9
 800ad9a:	d903      	bls.n	800ada4 <_vfiprintf_r+0x1cc>
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d0c6      	beq.n	800ad2e <_vfiprintf_r+0x156>
 800ada0:	9105      	str	r1, [sp, #20]
 800ada2:	e7c4      	b.n	800ad2e <_vfiprintf_r+0x156>
 800ada4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ada8:	4604      	mov	r4, r0
 800adaa:	2301      	movs	r3, #1
 800adac:	e7f0      	b.n	800ad90 <_vfiprintf_r+0x1b8>
 800adae:	ab03      	add	r3, sp, #12
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	462a      	mov	r2, r5
 800adb4:	4b12      	ldr	r3, [pc, #72]	@ (800ae00 <_vfiprintf_r+0x228>)
 800adb6:	a904      	add	r1, sp, #16
 800adb8:	4630      	mov	r0, r6
 800adba:	f3af 8000 	nop.w
 800adbe:	4607      	mov	r7, r0
 800adc0:	1c78      	adds	r0, r7, #1
 800adc2:	d1d6      	bne.n	800ad72 <_vfiprintf_r+0x19a>
 800adc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adc6:	07d9      	lsls	r1, r3, #31
 800adc8:	d405      	bmi.n	800add6 <_vfiprintf_r+0x1fe>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	059a      	lsls	r2, r3, #22
 800adce:	d402      	bmi.n	800add6 <_vfiprintf_r+0x1fe>
 800add0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800add2:	f7ff fda9 	bl	800a928 <__retarget_lock_release_recursive>
 800add6:	89ab      	ldrh	r3, [r5, #12]
 800add8:	065b      	lsls	r3, r3, #25
 800adda:	f53f af1f 	bmi.w	800ac1c <_vfiprintf_r+0x44>
 800adde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ade0:	e71e      	b.n	800ac20 <_vfiprintf_r+0x48>
 800ade2:	ab03      	add	r3, sp, #12
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	462a      	mov	r2, r5
 800ade8:	4b05      	ldr	r3, [pc, #20]	@ (800ae00 <_vfiprintf_r+0x228>)
 800adea:	a904      	add	r1, sp, #16
 800adec:	4630      	mov	r0, r6
 800adee:	f000 f879 	bl	800aee4 <_printf_i>
 800adf2:	e7e4      	b.n	800adbe <_vfiprintf_r+0x1e6>
 800adf4:	0800c3d7 	.word	0x0800c3d7
 800adf8:	0800c3e1 	.word	0x0800c3e1
 800adfc:	00000000 	.word	0x00000000
 800ae00:	0800abb3 	.word	0x0800abb3
 800ae04:	0800c3dd 	.word	0x0800c3dd

0800ae08 <_printf_common>:
 800ae08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae0c:	4616      	mov	r6, r2
 800ae0e:	4698      	mov	r8, r3
 800ae10:	688a      	ldr	r2, [r1, #8]
 800ae12:	690b      	ldr	r3, [r1, #16]
 800ae14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	bfb8      	it	lt
 800ae1c:	4613      	movlt	r3, r2
 800ae1e:	6033      	str	r3, [r6, #0]
 800ae20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ae24:	4607      	mov	r7, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b10a      	cbz	r2, 800ae2e <_printf_common+0x26>
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	6033      	str	r3, [r6, #0]
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	0699      	lsls	r1, r3, #26
 800ae32:	bf42      	ittt	mi
 800ae34:	6833      	ldrmi	r3, [r6, #0]
 800ae36:	3302      	addmi	r3, #2
 800ae38:	6033      	strmi	r3, [r6, #0]
 800ae3a:	6825      	ldr	r5, [r4, #0]
 800ae3c:	f015 0506 	ands.w	r5, r5, #6
 800ae40:	d106      	bne.n	800ae50 <_printf_common+0x48>
 800ae42:	f104 0a19 	add.w	sl, r4, #25
 800ae46:	68e3      	ldr	r3, [r4, #12]
 800ae48:	6832      	ldr	r2, [r6, #0]
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	42ab      	cmp	r3, r5
 800ae4e:	dc26      	bgt.n	800ae9e <_printf_common+0x96>
 800ae50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ae54:	6822      	ldr	r2, [r4, #0]
 800ae56:	3b00      	subs	r3, #0
 800ae58:	bf18      	it	ne
 800ae5a:	2301      	movne	r3, #1
 800ae5c:	0692      	lsls	r2, r2, #26
 800ae5e:	d42b      	bmi.n	800aeb8 <_printf_common+0xb0>
 800ae60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ae64:	4641      	mov	r1, r8
 800ae66:	4638      	mov	r0, r7
 800ae68:	47c8      	blx	r9
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d01e      	beq.n	800aeac <_printf_common+0xa4>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	6922      	ldr	r2, [r4, #16]
 800ae72:	f003 0306 	and.w	r3, r3, #6
 800ae76:	2b04      	cmp	r3, #4
 800ae78:	bf02      	ittt	eq
 800ae7a:	68e5      	ldreq	r5, [r4, #12]
 800ae7c:	6833      	ldreq	r3, [r6, #0]
 800ae7e:	1aed      	subeq	r5, r5, r3
 800ae80:	68a3      	ldr	r3, [r4, #8]
 800ae82:	bf0c      	ite	eq
 800ae84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae88:	2500      	movne	r5, #0
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	bfc4      	itt	gt
 800ae8e:	1a9b      	subgt	r3, r3, r2
 800ae90:	18ed      	addgt	r5, r5, r3
 800ae92:	2600      	movs	r6, #0
 800ae94:	341a      	adds	r4, #26
 800ae96:	42b5      	cmp	r5, r6
 800ae98:	d11a      	bne.n	800aed0 <_printf_common+0xc8>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e008      	b.n	800aeb0 <_printf_common+0xa8>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	4652      	mov	r2, sl
 800aea2:	4641      	mov	r1, r8
 800aea4:	4638      	mov	r0, r7
 800aea6:	47c8      	blx	r9
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d103      	bne.n	800aeb4 <_printf_common+0xac>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb4:	3501      	adds	r5, #1
 800aeb6:	e7c6      	b.n	800ae46 <_printf_common+0x3e>
 800aeb8:	18e1      	adds	r1, r4, r3
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	2030      	movs	r0, #48	@ 0x30
 800aebe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aec2:	4422      	add	r2, r4
 800aec4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aec8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aecc:	3302      	adds	r3, #2
 800aece:	e7c7      	b.n	800ae60 <_printf_common+0x58>
 800aed0:	2301      	movs	r3, #1
 800aed2:	4622      	mov	r2, r4
 800aed4:	4641      	mov	r1, r8
 800aed6:	4638      	mov	r0, r7
 800aed8:	47c8      	blx	r9
 800aeda:	3001      	adds	r0, #1
 800aedc:	d0e6      	beq.n	800aeac <_printf_common+0xa4>
 800aede:	3601      	adds	r6, #1
 800aee0:	e7d9      	b.n	800ae96 <_printf_common+0x8e>
	...

0800aee4 <_printf_i>:
 800aee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aee8:	7e0f      	ldrb	r7, [r1, #24]
 800aeea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aeec:	2f78      	cmp	r7, #120	@ 0x78
 800aeee:	4691      	mov	r9, r2
 800aef0:	4680      	mov	r8, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	469a      	mov	sl, r3
 800aef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aefa:	d807      	bhi.n	800af0c <_printf_i+0x28>
 800aefc:	2f62      	cmp	r7, #98	@ 0x62
 800aefe:	d80a      	bhi.n	800af16 <_printf_i+0x32>
 800af00:	2f00      	cmp	r7, #0
 800af02:	f000 80d1 	beq.w	800b0a8 <_printf_i+0x1c4>
 800af06:	2f58      	cmp	r7, #88	@ 0x58
 800af08:	f000 80b8 	beq.w	800b07c <_printf_i+0x198>
 800af0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800af14:	e03a      	b.n	800af8c <_printf_i+0xa8>
 800af16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800af1a:	2b15      	cmp	r3, #21
 800af1c:	d8f6      	bhi.n	800af0c <_printf_i+0x28>
 800af1e:	a101      	add	r1, pc, #4	@ (adr r1, 800af24 <_printf_i+0x40>)
 800af20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af24:	0800af7d 	.word	0x0800af7d
 800af28:	0800af91 	.word	0x0800af91
 800af2c:	0800af0d 	.word	0x0800af0d
 800af30:	0800af0d 	.word	0x0800af0d
 800af34:	0800af0d 	.word	0x0800af0d
 800af38:	0800af0d 	.word	0x0800af0d
 800af3c:	0800af91 	.word	0x0800af91
 800af40:	0800af0d 	.word	0x0800af0d
 800af44:	0800af0d 	.word	0x0800af0d
 800af48:	0800af0d 	.word	0x0800af0d
 800af4c:	0800af0d 	.word	0x0800af0d
 800af50:	0800b08f 	.word	0x0800b08f
 800af54:	0800afbb 	.word	0x0800afbb
 800af58:	0800b049 	.word	0x0800b049
 800af5c:	0800af0d 	.word	0x0800af0d
 800af60:	0800af0d 	.word	0x0800af0d
 800af64:	0800b0b1 	.word	0x0800b0b1
 800af68:	0800af0d 	.word	0x0800af0d
 800af6c:	0800afbb 	.word	0x0800afbb
 800af70:	0800af0d 	.word	0x0800af0d
 800af74:	0800af0d 	.word	0x0800af0d
 800af78:	0800b051 	.word	0x0800b051
 800af7c:	6833      	ldr	r3, [r6, #0]
 800af7e:	1d1a      	adds	r2, r3, #4
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6032      	str	r2, [r6, #0]
 800af84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800af88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800af8c:	2301      	movs	r3, #1
 800af8e:	e09c      	b.n	800b0ca <_printf_i+0x1e6>
 800af90:	6833      	ldr	r3, [r6, #0]
 800af92:	6820      	ldr	r0, [r4, #0]
 800af94:	1d19      	adds	r1, r3, #4
 800af96:	6031      	str	r1, [r6, #0]
 800af98:	0606      	lsls	r6, r0, #24
 800af9a:	d501      	bpl.n	800afa0 <_printf_i+0xbc>
 800af9c:	681d      	ldr	r5, [r3, #0]
 800af9e:	e003      	b.n	800afa8 <_printf_i+0xc4>
 800afa0:	0645      	lsls	r5, r0, #25
 800afa2:	d5fb      	bpl.n	800af9c <_printf_i+0xb8>
 800afa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800afa8:	2d00      	cmp	r5, #0
 800afaa:	da03      	bge.n	800afb4 <_printf_i+0xd0>
 800afac:	232d      	movs	r3, #45	@ 0x2d
 800afae:	426d      	negs	r5, r5
 800afb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800afb4:	4858      	ldr	r0, [pc, #352]	@ (800b118 <_printf_i+0x234>)
 800afb6:	230a      	movs	r3, #10
 800afb8:	e011      	b.n	800afde <_printf_i+0xfa>
 800afba:	6821      	ldr	r1, [r4, #0]
 800afbc:	6833      	ldr	r3, [r6, #0]
 800afbe:	0608      	lsls	r0, r1, #24
 800afc0:	f853 5b04 	ldr.w	r5, [r3], #4
 800afc4:	d402      	bmi.n	800afcc <_printf_i+0xe8>
 800afc6:	0649      	lsls	r1, r1, #25
 800afc8:	bf48      	it	mi
 800afca:	b2ad      	uxthmi	r5, r5
 800afcc:	2f6f      	cmp	r7, #111	@ 0x6f
 800afce:	4852      	ldr	r0, [pc, #328]	@ (800b118 <_printf_i+0x234>)
 800afd0:	6033      	str	r3, [r6, #0]
 800afd2:	bf14      	ite	ne
 800afd4:	230a      	movne	r3, #10
 800afd6:	2308      	moveq	r3, #8
 800afd8:	2100      	movs	r1, #0
 800afda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800afde:	6866      	ldr	r6, [r4, #4]
 800afe0:	60a6      	str	r6, [r4, #8]
 800afe2:	2e00      	cmp	r6, #0
 800afe4:	db05      	blt.n	800aff2 <_printf_i+0x10e>
 800afe6:	6821      	ldr	r1, [r4, #0]
 800afe8:	432e      	orrs	r6, r5
 800afea:	f021 0104 	bic.w	r1, r1, #4
 800afee:	6021      	str	r1, [r4, #0]
 800aff0:	d04b      	beq.n	800b08a <_printf_i+0x1a6>
 800aff2:	4616      	mov	r6, r2
 800aff4:	fbb5 f1f3 	udiv	r1, r5, r3
 800aff8:	fb03 5711 	mls	r7, r3, r1, r5
 800affc:	5dc7      	ldrb	r7, [r0, r7]
 800affe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b002:	462f      	mov	r7, r5
 800b004:	42bb      	cmp	r3, r7
 800b006:	460d      	mov	r5, r1
 800b008:	d9f4      	bls.n	800aff4 <_printf_i+0x110>
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d10b      	bne.n	800b026 <_printf_i+0x142>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	07df      	lsls	r7, r3, #31
 800b012:	d508      	bpl.n	800b026 <_printf_i+0x142>
 800b014:	6923      	ldr	r3, [r4, #16]
 800b016:	6861      	ldr	r1, [r4, #4]
 800b018:	4299      	cmp	r1, r3
 800b01a:	bfde      	ittt	le
 800b01c:	2330      	movle	r3, #48	@ 0x30
 800b01e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b022:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b026:	1b92      	subs	r2, r2, r6
 800b028:	6122      	str	r2, [r4, #16]
 800b02a:	f8cd a000 	str.w	sl, [sp]
 800b02e:	464b      	mov	r3, r9
 800b030:	aa03      	add	r2, sp, #12
 800b032:	4621      	mov	r1, r4
 800b034:	4640      	mov	r0, r8
 800b036:	f7ff fee7 	bl	800ae08 <_printf_common>
 800b03a:	3001      	adds	r0, #1
 800b03c:	d14a      	bne.n	800b0d4 <_printf_i+0x1f0>
 800b03e:	f04f 30ff 	mov.w	r0, #4294967295
 800b042:	b004      	add	sp, #16
 800b044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b048:	6823      	ldr	r3, [r4, #0]
 800b04a:	f043 0320 	orr.w	r3, r3, #32
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	4832      	ldr	r0, [pc, #200]	@ (800b11c <_printf_i+0x238>)
 800b052:	2778      	movs	r7, #120	@ 0x78
 800b054:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	6831      	ldr	r1, [r6, #0]
 800b05c:	061f      	lsls	r7, r3, #24
 800b05e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b062:	d402      	bmi.n	800b06a <_printf_i+0x186>
 800b064:	065f      	lsls	r7, r3, #25
 800b066:	bf48      	it	mi
 800b068:	b2ad      	uxthmi	r5, r5
 800b06a:	6031      	str	r1, [r6, #0]
 800b06c:	07d9      	lsls	r1, r3, #31
 800b06e:	bf44      	itt	mi
 800b070:	f043 0320 	orrmi.w	r3, r3, #32
 800b074:	6023      	strmi	r3, [r4, #0]
 800b076:	b11d      	cbz	r5, 800b080 <_printf_i+0x19c>
 800b078:	2310      	movs	r3, #16
 800b07a:	e7ad      	b.n	800afd8 <_printf_i+0xf4>
 800b07c:	4826      	ldr	r0, [pc, #152]	@ (800b118 <_printf_i+0x234>)
 800b07e:	e7e9      	b.n	800b054 <_printf_i+0x170>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	f023 0320 	bic.w	r3, r3, #32
 800b086:	6023      	str	r3, [r4, #0]
 800b088:	e7f6      	b.n	800b078 <_printf_i+0x194>
 800b08a:	4616      	mov	r6, r2
 800b08c:	e7bd      	b.n	800b00a <_printf_i+0x126>
 800b08e:	6833      	ldr	r3, [r6, #0]
 800b090:	6825      	ldr	r5, [r4, #0]
 800b092:	6961      	ldr	r1, [r4, #20]
 800b094:	1d18      	adds	r0, r3, #4
 800b096:	6030      	str	r0, [r6, #0]
 800b098:	062e      	lsls	r6, r5, #24
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	d501      	bpl.n	800b0a2 <_printf_i+0x1be>
 800b09e:	6019      	str	r1, [r3, #0]
 800b0a0:	e002      	b.n	800b0a8 <_printf_i+0x1c4>
 800b0a2:	0668      	lsls	r0, r5, #25
 800b0a4:	d5fb      	bpl.n	800b09e <_printf_i+0x1ba>
 800b0a6:	8019      	strh	r1, [r3, #0]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	6123      	str	r3, [r4, #16]
 800b0ac:	4616      	mov	r6, r2
 800b0ae:	e7bc      	b.n	800b02a <_printf_i+0x146>
 800b0b0:	6833      	ldr	r3, [r6, #0]
 800b0b2:	1d1a      	adds	r2, r3, #4
 800b0b4:	6032      	str	r2, [r6, #0]
 800b0b6:	681e      	ldr	r6, [r3, #0]
 800b0b8:	6862      	ldr	r2, [r4, #4]
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7f5 f917 	bl	80002f0 <memchr>
 800b0c2:	b108      	cbz	r0, 800b0c8 <_printf_i+0x1e4>
 800b0c4:	1b80      	subs	r0, r0, r6
 800b0c6:	6060      	str	r0, [r4, #4]
 800b0c8:	6863      	ldr	r3, [r4, #4]
 800b0ca:	6123      	str	r3, [r4, #16]
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0d2:	e7aa      	b.n	800b02a <_printf_i+0x146>
 800b0d4:	6923      	ldr	r3, [r4, #16]
 800b0d6:	4632      	mov	r2, r6
 800b0d8:	4649      	mov	r1, r9
 800b0da:	4640      	mov	r0, r8
 800b0dc:	47d0      	blx	sl
 800b0de:	3001      	adds	r0, #1
 800b0e0:	d0ad      	beq.n	800b03e <_printf_i+0x15a>
 800b0e2:	6823      	ldr	r3, [r4, #0]
 800b0e4:	079b      	lsls	r3, r3, #30
 800b0e6:	d413      	bmi.n	800b110 <_printf_i+0x22c>
 800b0e8:	68e0      	ldr	r0, [r4, #12]
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	4298      	cmp	r0, r3
 800b0ee:	bfb8      	it	lt
 800b0f0:	4618      	movlt	r0, r3
 800b0f2:	e7a6      	b.n	800b042 <_printf_i+0x15e>
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	4632      	mov	r2, r6
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4640      	mov	r0, r8
 800b0fc:	47d0      	blx	sl
 800b0fe:	3001      	adds	r0, #1
 800b100:	d09d      	beq.n	800b03e <_printf_i+0x15a>
 800b102:	3501      	adds	r5, #1
 800b104:	68e3      	ldr	r3, [r4, #12]
 800b106:	9903      	ldr	r1, [sp, #12]
 800b108:	1a5b      	subs	r3, r3, r1
 800b10a:	42ab      	cmp	r3, r5
 800b10c:	dcf2      	bgt.n	800b0f4 <_printf_i+0x210>
 800b10e:	e7eb      	b.n	800b0e8 <_printf_i+0x204>
 800b110:	2500      	movs	r5, #0
 800b112:	f104 0619 	add.w	r6, r4, #25
 800b116:	e7f5      	b.n	800b104 <_printf_i+0x220>
 800b118:	0800c3e8 	.word	0x0800c3e8
 800b11c:	0800c3f9 	.word	0x0800c3f9

0800b120 <__sflush_r>:
 800b120:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b128:	0716      	lsls	r6, r2, #28
 800b12a:	4605      	mov	r5, r0
 800b12c:	460c      	mov	r4, r1
 800b12e:	d454      	bmi.n	800b1da <__sflush_r+0xba>
 800b130:	684b      	ldr	r3, [r1, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	dc02      	bgt.n	800b13c <__sflush_r+0x1c>
 800b136:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b138:	2b00      	cmp	r3, #0
 800b13a:	dd48      	ble.n	800b1ce <__sflush_r+0xae>
 800b13c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b13e:	2e00      	cmp	r6, #0
 800b140:	d045      	beq.n	800b1ce <__sflush_r+0xae>
 800b142:	2300      	movs	r3, #0
 800b144:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b148:	682f      	ldr	r7, [r5, #0]
 800b14a:	6a21      	ldr	r1, [r4, #32]
 800b14c:	602b      	str	r3, [r5, #0]
 800b14e:	d030      	beq.n	800b1b2 <__sflush_r+0x92>
 800b150:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	0759      	lsls	r1, r3, #29
 800b156:	d505      	bpl.n	800b164 <__sflush_r+0x44>
 800b158:	6863      	ldr	r3, [r4, #4]
 800b15a:	1ad2      	subs	r2, r2, r3
 800b15c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b15e:	b10b      	cbz	r3, 800b164 <__sflush_r+0x44>
 800b160:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b162:	1ad2      	subs	r2, r2, r3
 800b164:	2300      	movs	r3, #0
 800b166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b168:	6a21      	ldr	r1, [r4, #32]
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b0      	blx	r6
 800b16e:	1c43      	adds	r3, r0, #1
 800b170:	89a3      	ldrh	r3, [r4, #12]
 800b172:	d106      	bne.n	800b182 <__sflush_r+0x62>
 800b174:	6829      	ldr	r1, [r5, #0]
 800b176:	291d      	cmp	r1, #29
 800b178:	d82b      	bhi.n	800b1d2 <__sflush_r+0xb2>
 800b17a:	4a2a      	ldr	r2, [pc, #168]	@ (800b224 <__sflush_r+0x104>)
 800b17c:	40ca      	lsrs	r2, r1
 800b17e:	07d6      	lsls	r6, r2, #31
 800b180:	d527      	bpl.n	800b1d2 <__sflush_r+0xb2>
 800b182:	2200      	movs	r2, #0
 800b184:	6062      	str	r2, [r4, #4]
 800b186:	04d9      	lsls	r1, r3, #19
 800b188:	6922      	ldr	r2, [r4, #16]
 800b18a:	6022      	str	r2, [r4, #0]
 800b18c:	d504      	bpl.n	800b198 <__sflush_r+0x78>
 800b18e:	1c42      	adds	r2, r0, #1
 800b190:	d101      	bne.n	800b196 <__sflush_r+0x76>
 800b192:	682b      	ldr	r3, [r5, #0]
 800b194:	b903      	cbnz	r3, 800b198 <__sflush_r+0x78>
 800b196:	6560      	str	r0, [r4, #84]	@ 0x54
 800b198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b19a:	602f      	str	r7, [r5, #0]
 800b19c:	b1b9      	cbz	r1, 800b1ce <__sflush_r+0xae>
 800b19e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	d002      	beq.n	800b1ac <__sflush_r+0x8c>
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	f7ff fbec 	bl	800a984 <_free_r>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1b0:	e00d      	b.n	800b1ce <__sflush_r+0xae>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	47b0      	blx	r6
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	1c50      	adds	r0, r2, #1
 800b1bc:	d1c9      	bne.n	800b152 <__sflush_r+0x32>
 800b1be:	682b      	ldr	r3, [r5, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0c6      	beq.n	800b152 <__sflush_r+0x32>
 800b1c4:	2b1d      	cmp	r3, #29
 800b1c6:	d001      	beq.n	800b1cc <__sflush_r+0xac>
 800b1c8:	2b16      	cmp	r3, #22
 800b1ca:	d11e      	bne.n	800b20a <__sflush_r+0xea>
 800b1cc:	602f      	str	r7, [r5, #0]
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	e022      	b.n	800b218 <__sflush_r+0xf8>
 800b1d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1d6:	b21b      	sxth	r3, r3
 800b1d8:	e01b      	b.n	800b212 <__sflush_r+0xf2>
 800b1da:	690f      	ldr	r7, [r1, #16]
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	d0f6      	beq.n	800b1ce <__sflush_r+0xae>
 800b1e0:	0793      	lsls	r3, r2, #30
 800b1e2:	680e      	ldr	r6, [r1, #0]
 800b1e4:	bf08      	it	eq
 800b1e6:	694b      	ldreq	r3, [r1, #20]
 800b1e8:	600f      	str	r7, [r1, #0]
 800b1ea:	bf18      	it	ne
 800b1ec:	2300      	movne	r3, #0
 800b1ee:	eba6 0807 	sub.w	r8, r6, r7
 800b1f2:	608b      	str	r3, [r1, #8]
 800b1f4:	f1b8 0f00 	cmp.w	r8, #0
 800b1f8:	dde9      	ble.n	800b1ce <__sflush_r+0xae>
 800b1fa:	6a21      	ldr	r1, [r4, #32]
 800b1fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1fe:	4643      	mov	r3, r8
 800b200:	463a      	mov	r2, r7
 800b202:	4628      	mov	r0, r5
 800b204:	47b0      	blx	r6
 800b206:	2800      	cmp	r0, #0
 800b208:	dc08      	bgt.n	800b21c <__sflush_r+0xfc>
 800b20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b21c:	4407      	add	r7, r0
 800b21e:	eba8 0800 	sub.w	r8, r8, r0
 800b222:	e7e7      	b.n	800b1f4 <__sflush_r+0xd4>
 800b224:	20400001 	.word	0x20400001

0800b228 <_fflush_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	690b      	ldr	r3, [r1, #16]
 800b22c:	4605      	mov	r5, r0
 800b22e:	460c      	mov	r4, r1
 800b230:	b913      	cbnz	r3, 800b238 <_fflush_r+0x10>
 800b232:	2500      	movs	r5, #0
 800b234:	4628      	mov	r0, r5
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	b118      	cbz	r0, 800b242 <_fflush_r+0x1a>
 800b23a:	6a03      	ldr	r3, [r0, #32]
 800b23c:	b90b      	cbnz	r3, 800b242 <_fflush_r+0x1a>
 800b23e:	f7ff f951 	bl	800a4e4 <__sinit>
 800b242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0f3      	beq.n	800b232 <_fflush_r+0xa>
 800b24a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b24c:	07d0      	lsls	r0, r2, #31
 800b24e:	d404      	bmi.n	800b25a <_fflush_r+0x32>
 800b250:	0599      	lsls	r1, r3, #22
 800b252:	d402      	bmi.n	800b25a <_fflush_r+0x32>
 800b254:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b256:	f7ff fb66 	bl	800a926 <__retarget_lock_acquire_recursive>
 800b25a:	4628      	mov	r0, r5
 800b25c:	4621      	mov	r1, r4
 800b25e:	f7ff ff5f 	bl	800b120 <__sflush_r>
 800b262:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b264:	07da      	lsls	r2, r3, #31
 800b266:	4605      	mov	r5, r0
 800b268:	d4e4      	bmi.n	800b234 <_fflush_r+0xc>
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	059b      	lsls	r3, r3, #22
 800b26e:	d4e1      	bmi.n	800b234 <_fflush_r+0xc>
 800b270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b272:	f7ff fb59 	bl	800a928 <__retarget_lock_release_recursive>
 800b276:	e7dd      	b.n	800b234 <_fflush_r+0xc>

0800b278 <fiprintf>:
 800b278:	b40e      	push	{r1, r2, r3}
 800b27a:	b503      	push	{r0, r1, lr}
 800b27c:	4601      	mov	r1, r0
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	4805      	ldr	r0, [pc, #20]	@ (800b298 <fiprintf+0x20>)
 800b282:	f853 2b04 	ldr.w	r2, [r3], #4
 800b286:	6800      	ldr	r0, [r0, #0]
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	f7ff fca5 	bl	800abd8 <_vfiprintf_r>
 800b28e:	b002      	add	sp, #8
 800b290:	f85d eb04 	ldr.w	lr, [sp], #4
 800b294:	b003      	add	sp, #12
 800b296:	4770      	bx	lr
 800b298:	2400006c 	.word	0x2400006c

0800b29c <__swhatbuf_r>:
 800b29c:	b570      	push	{r4, r5, r6, lr}
 800b29e:	460c      	mov	r4, r1
 800b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a4:	2900      	cmp	r1, #0
 800b2a6:	b096      	sub	sp, #88	@ 0x58
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	461e      	mov	r6, r3
 800b2ac:	da0d      	bge.n	800b2ca <__swhatbuf_r+0x2e>
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b2b4:	f04f 0100 	mov.w	r1, #0
 800b2b8:	bf14      	ite	ne
 800b2ba:	2340      	movne	r3, #64	@ 0x40
 800b2bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	6031      	str	r1, [r6, #0]
 800b2c4:	602b      	str	r3, [r5, #0]
 800b2c6:	b016      	add	sp, #88	@ 0x58
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
 800b2ca:	466a      	mov	r2, sp
 800b2cc:	f000 f848 	bl	800b360 <_fstat_r>
 800b2d0:	2800      	cmp	r0, #0
 800b2d2:	dbec      	blt.n	800b2ae <__swhatbuf_r+0x12>
 800b2d4:	9901      	ldr	r1, [sp, #4]
 800b2d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b2da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b2de:	4259      	negs	r1, r3
 800b2e0:	4159      	adcs	r1, r3
 800b2e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2e6:	e7eb      	b.n	800b2c0 <__swhatbuf_r+0x24>

0800b2e8 <__smakebuf_r>:
 800b2e8:	898b      	ldrh	r3, [r1, #12]
 800b2ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ec:	079d      	lsls	r5, r3, #30
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460c      	mov	r4, r1
 800b2f2:	d507      	bpl.n	800b304 <__smakebuf_r+0x1c>
 800b2f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b2f8:	6023      	str	r3, [r4, #0]
 800b2fa:	6123      	str	r3, [r4, #16]
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	6163      	str	r3, [r4, #20]
 800b300:	b003      	add	sp, #12
 800b302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b304:	ab01      	add	r3, sp, #4
 800b306:	466a      	mov	r2, sp
 800b308:	f7ff ffc8 	bl	800b29c <__swhatbuf_r>
 800b30c:	9f00      	ldr	r7, [sp, #0]
 800b30e:	4605      	mov	r5, r0
 800b310:	4639      	mov	r1, r7
 800b312:	4630      	mov	r0, r6
 800b314:	f7ff fbaa 	bl	800aa6c <_malloc_r>
 800b318:	b948      	cbnz	r0, 800b32e <__smakebuf_r+0x46>
 800b31a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b31e:	059a      	lsls	r2, r3, #22
 800b320:	d4ee      	bmi.n	800b300 <__smakebuf_r+0x18>
 800b322:	f023 0303 	bic.w	r3, r3, #3
 800b326:	f043 0302 	orr.w	r3, r3, #2
 800b32a:	81a3      	strh	r3, [r4, #12]
 800b32c:	e7e2      	b.n	800b2f4 <__smakebuf_r+0xc>
 800b32e:	89a3      	ldrh	r3, [r4, #12]
 800b330:	6020      	str	r0, [r4, #0]
 800b332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	9b01      	ldr	r3, [sp, #4]
 800b33a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b33e:	b15b      	cbz	r3, 800b358 <__smakebuf_r+0x70>
 800b340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b344:	4630      	mov	r0, r6
 800b346:	f000 f81d 	bl	800b384 <_isatty_r>
 800b34a:	b128      	cbz	r0, 800b358 <__smakebuf_r+0x70>
 800b34c:	89a3      	ldrh	r3, [r4, #12]
 800b34e:	f023 0303 	bic.w	r3, r3, #3
 800b352:	f043 0301 	orr.w	r3, r3, #1
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	89a3      	ldrh	r3, [r4, #12]
 800b35a:	431d      	orrs	r5, r3
 800b35c:	81a5      	strh	r5, [r4, #12]
 800b35e:	e7cf      	b.n	800b300 <__smakebuf_r+0x18>

0800b360 <_fstat_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d07      	ldr	r5, [pc, #28]	@ (800b380 <_fstat_r+0x20>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	4611      	mov	r1, r2
 800b36c:	602b      	str	r3, [r5, #0]
 800b36e:	f7f6 f841 	bl	80013f4 <_fstat>
 800b372:	1c43      	adds	r3, r0, #1
 800b374:	d102      	bne.n	800b37c <_fstat_r+0x1c>
 800b376:	682b      	ldr	r3, [r5, #0]
 800b378:	b103      	cbz	r3, 800b37c <_fstat_r+0x1c>
 800b37a:	6023      	str	r3, [r4, #0]
 800b37c:	bd38      	pop	{r3, r4, r5, pc}
 800b37e:	bf00      	nop
 800b380:	24040d0c 	.word	0x24040d0c

0800b384 <_isatty_r>:
 800b384:	b538      	push	{r3, r4, r5, lr}
 800b386:	4d06      	ldr	r5, [pc, #24]	@ (800b3a0 <_isatty_r+0x1c>)
 800b388:	2300      	movs	r3, #0
 800b38a:	4604      	mov	r4, r0
 800b38c:	4608      	mov	r0, r1
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	f7f6 f840 	bl	8001414 <_isatty>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_isatty_r+0x1a>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_isatty_r+0x1a>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	24040d0c 	.word	0x24040d0c

0800b3a4 <_sbrk_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	4d06      	ldr	r5, [pc, #24]	@ (800b3c0 <_sbrk_r+0x1c>)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	602b      	str	r3, [r5, #0]
 800b3b0:	f7f6 f848 	bl	8001444 <_sbrk>
 800b3b4:	1c43      	adds	r3, r0, #1
 800b3b6:	d102      	bne.n	800b3be <_sbrk_r+0x1a>
 800b3b8:	682b      	ldr	r3, [r5, #0]
 800b3ba:	b103      	cbz	r3, 800b3be <_sbrk_r+0x1a>
 800b3bc:	6023      	str	r3, [r4, #0]
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
 800b3c0:	24040d0c 	.word	0x24040d0c

0800b3c4 <abort>:
 800b3c4:	b508      	push	{r3, lr}
 800b3c6:	2006      	movs	r0, #6
 800b3c8:	f000 f82c 	bl	800b424 <raise>
 800b3cc:	2001      	movs	r0, #1
 800b3ce:	f7f5 ffc1 	bl	8001354 <_exit>

0800b3d2 <_raise_r>:
 800b3d2:	291f      	cmp	r1, #31
 800b3d4:	b538      	push	{r3, r4, r5, lr}
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	460c      	mov	r4, r1
 800b3da:	d904      	bls.n	800b3e6 <_raise_r+0x14>
 800b3dc:	2316      	movs	r3, #22
 800b3de:	6003      	str	r3, [r0, #0]
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	bd38      	pop	{r3, r4, r5, pc}
 800b3e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3e8:	b112      	cbz	r2, 800b3f0 <_raise_r+0x1e>
 800b3ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3ee:	b94b      	cbnz	r3, 800b404 <_raise_r+0x32>
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f000 f831 	bl	800b458 <_getpid_r>
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4601      	mov	r1, r0
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b400:	f000 b818 	b.w	800b434 <_kill_r>
 800b404:	2b01      	cmp	r3, #1
 800b406:	d00a      	beq.n	800b41e <_raise_r+0x4c>
 800b408:	1c59      	adds	r1, r3, #1
 800b40a:	d103      	bne.n	800b414 <_raise_r+0x42>
 800b40c:	2316      	movs	r3, #22
 800b40e:	6003      	str	r3, [r0, #0]
 800b410:	2001      	movs	r0, #1
 800b412:	e7e7      	b.n	800b3e4 <_raise_r+0x12>
 800b414:	2100      	movs	r1, #0
 800b416:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b41a:	4620      	mov	r0, r4
 800b41c:	4798      	blx	r3
 800b41e:	2000      	movs	r0, #0
 800b420:	e7e0      	b.n	800b3e4 <_raise_r+0x12>
	...

0800b424 <raise>:
 800b424:	4b02      	ldr	r3, [pc, #8]	@ (800b430 <raise+0xc>)
 800b426:	4601      	mov	r1, r0
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f7ff bfd2 	b.w	800b3d2 <_raise_r>
 800b42e:	bf00      	nop
 800b430:	2400006c 	.word	0x2400006c

0800b434 <_kill_r>:
 800b434:	b538      	push	{r3, r4, r5, lr}
 800b436:	4d07      	ldr	r5, [pc, #28]	@ (800b454 <_kill_r+0x20>)
 800b438:	2300      	movs	r3, #0
 800b43a:	4604      	mov	r4, r0
 800b43c:	4608      	mov	r0, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	602b      	str	r3, [r5, #0]
 800b442:	f7f5 ff77 	bl	8001334 <_kill>
 800b446:	1c43      	adds	r3, r0, #1
 800b448:	d102      	bne.n	800b450 <_kill_r+0x1c>
 800b44a:	682b      	ldr	r3, [r5, #0]
 800b44c:	b103      	cbz	r3, 800b450 <_kill_r+0x1c>
 800b44e:	6023      	str	r3, [r4, #0]
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	bf00      	nop
 800b454:	24040d0c 	.word	0x24040d0c

0800b458 <_getpid_r>:
 800b458:	f7f5 bf64 	b.w	8001324 <_getpid>

0800b45c <_init>:
 800b45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45e:	bf00      	nop
 800b460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b462:	bc08      	pop	{r3}
 800b464:	469e      	mov	lr, r3
 800b466:	4770      	bx	lr

0800b468 <_fini>:
 800b468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46a:	bf00      	nop
 800b46c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b46e:	bc08      	pop	{r3}
 800b470:	469e      	mov	lr, r3
 800b472:	4770      	bx	lr
